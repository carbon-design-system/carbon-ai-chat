/* 
 *  Copyright IBM Corp. 2025
 *  
 *  This source code is licensed under the Apache-2.0 license found in the
 *  LICENSE file in the root directory of this source tree.
 */

@use "@carbon/layout";

// TODO TABLE: The below sticky header workaround should be removed when Carbon adds out of the box functionality for
// this (re this issue: https://github.com/carbon-design-system/carbon/issues/17735). When the sticky header workaround
// is removed we'll need to experiment with the overflow behavior here. Carbon's React example has a fixed width with no
// overflow on the container and our implementation currently has an overflow at the (React) container level. It looks
// like setting display: block with overflow-x: auto on any section of the table will allow allow just that specific
// section to scroll (some info on that behavior:
// https://stackoverflow.com/questions/17365582/displayblock-overflowauto-how-do-they-work). However it's unclear what
// side effects could occur from overriding settings like display: table. Once Carbon's issue has been addressed we can
// take a second look here and decide how we want to handle overflowing in the table.

// Style the header components so that they will be sticky when the table body scrolls. Use a variable for the width of
// the header that is equal to the width of the web component container, this way the header fits the container and
// doesn't have any overflow. In an ideal world we could use this same technique on the pagination footer. However that
// component currently has too much content for our smaller widths, and would have an overflow of it's own if we tried
// to fix it to the container width. For now it's better to just have one scroll bar and let the footer scroll with the
// table body.
cds-custom-table-header-title,
cds-custom-table-header-description,
cds-custom-table-toolbar {
  position: sticky;
  inline-size: var(--cds-chat-table-width, auto);
  inset-inline-start: 0;
}

:dir(rtl) cds-custom-table-header-title,
:dir(rtl) cds-custom-table-header-description,
:dir(rtl) cds-custom-table-toolbar {
  right: 0;
  left: unset;
}

// The title and description have a parent div around them with padding (cds--data-table-header) that causes the title
// and description to scroll horizontally even when those items have a fixed width (equal to their container size). If
// this was a React component we could just override the css, however because the container div that is setting this
// padding is in a shadow root, we can't select the div to override the styles. In order to remove this scroll the
// padding needs to be offset from the parent div using this negative margin "hack". Then the padding can be reapplied
// to the component we control so the title is properly indented but doesn't scroll.
cds-custom-table-header-title,
cds-custom-table-header-description {
  padding: 0 layout.$spacing-05;
  inline-size: calc(
    var(--cds-chat-table-width, auto) - layout.$spacing-05 - layout.$spacing-05
  );
  margin-inline: -#{layout.$spacing-05};
}

cds-custom-table-header-description {
  margin-block-end: -#{layout.$spacing-03};
}

// Make the pagination component cover any available width. If the table above the pagination component is wider it will
// expand to be the same width as the table.
cds-custom-pagination {
  inline-size: 100%;
}
