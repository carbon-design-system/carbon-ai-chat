/* 
 *  Copyright IBM Corp. 2025
 *  
 *  This source code is licensed under the Apache-2.0 license found in the
 *  LICENSE file in the root directory of this source tree.
 */

@use "@carbon/layout";
@use "@carbon/styles/scss/theme";
@use "@carbon/styles/scss/motion";
@use "../../styles/chatTheme";

.WACWidget__regionContainer {
  block-size: 100%;
  inline-size: 100%;
}

.WACWidget.WACWidget {
  position: relative;
  display: flex;
  flex-direction: column;
  block-size: 100%;
  /* TODO: What to do with this? */
  box-shadow: chatTheme.$BASE-box-shadow;
  font-size: var(--cds-chat-BASE-font-size-med);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: var(--cds-chat-BASE-line-height-med);
  -webkit-tap-highlight-color: rgb(0 0 0 / 0%);
  text-rendering: optimizelegibility;
  visibility: visible;
}

.WAC--aiTheme .WACWidget.WACWidget {
  border: solid 1px transparent;
  background: linear-gradient(
      to bottom,
      theme.$ai-border-start,
      theme.$ai-border-end
    )
    border-box;
  /* TODO: For AI theme only?
  These give us the 1px border on the outside that gets darker toward the top. */
  box-shadow: chatTheme.$AI-box-shadow-outer;
}

.WAC--frameless .WACWidget.WACWidget {
  border: none;
  box-shadow: none;
}

/* These selectors apply a border radius to containers/elements that need to match the widget frame's border radius when
rounded corners are enabled. */

.WACWidget.WACWidget--rounded {
  border-radius: var(--cds-chat-BASE-border-radius-med);
  /* Rounded corners because .WACWidget doesn't have overflow: hidden to easily apply rounded corners at the top level.
   We need to apply a border radius to certain elements within the widget in order to achieve a Carbon AI chat widget with */

  .WACViewSourcePanel,
  .WACHomeScreen,
  .WACConfirmModal,
  .WACWidget__animationContainer,
  .WACBotContainer,
  .WAC,
  .WAC__overlay-panel,
  .WAC__hydratingContainer,
  .WACBackgroundCover,
  .WACAlternateSuggestionsContainer {
    border-radius: var(--cds-chat-BASE-border-radius-med);
  }

  /* For the top right and left corners when the widget is rounded. */
  .WACHeader {
    border-start-end-radius: var(--cds-chat-BASE-border-radius-med);
    border-start-start-radius: var(--cds-chat-BASE-border-radius-med);
  }

  /* For the bottom right and left corners when the widget is rounded. */
  .WACInputContainer,
  .WACBrandingBanner {
    border-end-end-radius: var(--cds-chat-BASE-border-radius-med);
    border-end-start-radius: var(--cds-chat-BASE-border-radius-med);
  }

  /* If the branding banner is visible, the animation container should not have a bottom left/right border radius since
  the branding banner will have them applied instead. */

  &:not(.WACWidget--maxWidth)
    .WACWidget__animationContainer--withBrandingBanner
    .WACInputContainer,
  .WACWidget__animationContainer--withBrandingBanner {
    border-end-end-radius: 0;
    border-end-start-radius: 0;
  }
}

/* Nested response types with cards should not have rounded corners since they fill the width of the container they're
in. */

.WACGrid,
.WACBodyMessageComponents__MessageWrapper {
  .WACImage,
  .WACMediaPlayer,
  .WACMediaPlayer__Skeleton {
    border-radius: 0;
  }
}

.WACWidget .WACWidget__animationContainer {
  position: relative;
  z-index: 1;
  /* Using height 100% causes anything under the animation container to go out of view by a couple of pixels, so we
  should use flex instead. */
  flex: 1;
  background: theme.$chat-shell-background;
  inline-size: 100%;
}

.WACWidget.WACWidget--closed .WACWidget__animationContainer {
  overflow: hidden;
}

@media screen and (prefers-reduced-motion: reduce) {
  .WACWidget.WACWidget--launched.WACWidget--defaultElement {
    animation: none;
  }
}

.WACWidget.WACWidget--launched.WACWidget--defaultElement {
  animation: WACWidgetIn motion.$duration-moderate-02
    motion.motion(entrance, expressive) both;
}

@media screen and (prefers-reduced-motion: reduce) {
  .WACWidget.WACWidget--closing.WACWidget--defaultElement {
    animation: none;
  }
}

.WACWidget.WACWidget--closing.WACWidget--defaultElement {
  animation: WACWidgetOut motion.$duration-fast-02
    motion.motion(exit, expressive) both;
}

.WAC--aiTheme .WACWidget.WACWidget.WACWidget--closed,
.WACWidget.WACWidget.WACWidget--closed {
  border: none;
  box-shadow: none;
}

/* Note that we do not apply this when using a custom element. The user is responsible for showing or hiding the custom
 element on their own. This gives them the opportunity to apply animations to the element. */

.WACWidget.WACWidget--closed.WACWidget--defaultElement {
  display: none;
}

/* The following four blocks are duplicates so make sure to keep them all up-to-date. */
.WACWidget.WACWidget--defaultElement {
  position: fixed;
  z-index: var(--cds-chat-BASE-z-index);
  block-size: var(--cds-chat-BASE-height);
  inline-size: var(--cds-chat-BASE-width);
  inset: var(--cds-chat-BASE-top-position) var(--cds-chat-BASE-right-position)
    var(--cds-chat-BASE-bottom-position) var(--cds-chat-BASE-left-position);
  max-block-size: var(--cds-chat-BASE-max-height);
  max-inline-size: var(--cds-chat-BASE-max-width);
  min-block-size: var(--cds-chat-BASE-min-height);
}

.WACContainer--render[dir="rtl"] .WACWidget.WACWidget--defaultElement {
  inset-inline: var(--cds-chat-BASE-right-position)
    var(--cds-chat-BASE-left-position);
}

.WAC-isPhone:not(.WACContainer-disableMobileEnhancements) .WACWidget {
  position: fixed;
  z-index: var(--cds-chat-BASE-z-index);
  block-size: var(--cds-chat-BASE-height);
  inline-size: var(--cds-chat-BASE-width);
  inset: var(--cds-chat-BASE-top-position) var(--cds-chat-BASE-right-position)
    var(--cds-chat-BASE-bottom-position) var(--cds-chat-BASE-left-position);
  max-block-size: var(--cds-chat-BASE-max-height);
  min-block-size: var(--cds-chat-BASE-min-height);
}

.WAC-isPhone[dir="rtl"]:not(.WACContainer-disableMobileEnhancements)
  .WACWidget {
  inset-inline: var(--cds-chat-BASE-right-position)
    var(--cds-chat-BASE-left-position);
}

.WAC {
  display: flex;
  box-sizing: border-box;
  flex: 1;
  flex-direction: column;
  align-content: stretch;
  align-items: stretch;
  border-radius: 0;
  margin: 0;
  background-color: theme.$chat-shell-background;
  block-size: 100%;
  color: theme.$text-primary;
  inline-size: 100%;
  text-align: start;
}

.WAC--aiTheme .WAC {
  background-image: chatTheme.$AI-background-image;
  box-shadow: chatTheme.$AI-box-shadow-inner, chatTheme.$AI-box-shadow-outer;
}

.WAC--frameless.WAC--aiTheme .WAC {
  box-shadow: chatTheme.$AI-box-shadow-inner;
}

.WAC.WACHumanAgentApp {
  min-inline-size: unset;
}

.WACContainer--render[dir="rtl"] .WAC {
  text-align: end;
}

.WACBotContainer {
  position: absolute;
  block-size: 100%;
  inline-size: 100%;
  inset-block-start: 0;
  inset-inline-start: 0;
}

.WACWidget__FocusTrapContainer {
  block-size: 100%;
  inline-size: 100%;
}

.WACWidget__FocusTrapGlass {
  position: fixed;
  z-index: var(--cds-chat-BASE-z-index);
  overflow: hidden;
  background: theme.$overlay;
  block-size: 100vh;
  inline-size: 100vw;
  inset-block-start: 0;
  inset-inline-start: 0;
  opacity: 0.5;
}

@keyframes WACWidgetIn {
  0% {
    inset-block-end: calc(
      var(--cds-chat-BASE-bottom-position) - #{layout.$spacing-07}
    );
    opacity: 0;
  }

  100% {
    inset-block-end: var(--cds-chat-BASE-bottom-position);
    opacity: 1;
  }
}

@keyframes WACWidgetOut {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

svg.WACIcon__Logout--reverse {
  transform: scaleX(-1);
}

.WACContainer--render[dir="rtl"] .WACIcon__Logout--reverse {
  transform: none;
}

@media screen and (prefers-reduced-motion: reduce) {
  .WACBackgroundCover {
    position: absolute;
    z-index: 2;
    animation: none;
    background: theme.$overlay;
    block-size: 100%;
    inline-size: 100%;
    opacity: 0.5;
  }
}

.WACBackgroundCover {
  position: absolute;
  z-index: 2;
  animation: WACAnimBackgroundCover motion.$duration-moderate-02
    motion.motion(standard, productive);
  background: theme.$overlay;
  block-size: 100%;
  inline-size: 100%;
  opacity: 0.5;
}

.WACWidget.WACWidget--rounded .WACBackgroundCover.WACBackgroundCover__NonHeader,
.WACBackgroundCover.WACBackgroundCover__NonHeader {
  block-size: calc(100% - 40px);
  border-start-end-radius: 0;
  border-start-start-radius: 0;
  inset-block-start: 40px;
}

@keyframes WACAnimBackgroundCover {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 0.5;
  }
}

.WACScrollFocus {
  border: none;
  outline: none;
}

.WACScrollFocus:focus-visible::before {
  /* This keeps this element stuck at the top so it doesn't scroll with the parent content. */
  position: sticky;
  z-index: 1;
  display: block;
  box-sizing: border-box;
  border: solid 2px theme.$focus;
  block-size: 100%;
  content: "";
  /* These stop this element from actually taking up space. */
  float: inline-start;
  inline-size: 100%;
  inset-block-start: 0;
  margin-block-start: -100%;
  pointer-events: none;
}

.WACContainer--render .WACReverseIcon svg,  /* This class is simply for reversing icons not specifically for rtl purposes. */
.WACContainer--render[dir='rtl'] .WACDirectionHasReversibleSVG svg {
  transform: scaleX(-1);
}

/* This is to reverse a reversed icon in rtl. yeah */
.WACContainer--render[dir="rtl"]
  .WACDirectionHasReversibleSVG.WACReverseIcon
  svg {
  transform: scaleX(1);
}

@keyframes WACLoadingBar__ConnectingAnimationKeyFrames {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: -200% 0;
  }
}

/* This class is is meant to wrap panel content that doesn't include the header. When panel content is given a max-width
 elements with this class will be constrained. */

.WACPanelContent {
  overflow: hidden;
}

.WACWidget--maxWidth {
  --cds-chat-CONTAINER-border-radius: 0;

  .WACPanelContent {
    flex: 1;
    margin: auto;
    inline-size: 100%;
    max-inline-size: chatTheme.$CONTAINER-max-width;
  }
}

/* Remove top rounded corners for panel content when a header is visible. */
.WACWidget .WACHeader__Container ~ .WACPanelContent,
.WACWidget .WACHeader ~ .WACPanelContent {
  border-start-end-radius: 0;
  border-start-start-radius: 0;
}

/* These selectors apply a border radius to panel content. */
.WACWidget--rounded {
  .WACBodyAndFooterComponent,
  .WACWidget__animationContainer:not(
      .WACWidget__animationContainer--withBrandingBanner
    )
    .WACPanelContent {
    border-end-end-radius: var(--cds-chat-CONTAINER-border-radius);
    border-end-start-radius: var(--cds-chat-CONTAINER-border-radius);
  }

  .WACWidget__animationContainer .WACCustomPanel .WACHeader ~ .WACPanelContent {
    border-start-end-radius: 0;
    border-start-start-radius: 0;
  }

  .WACWidget__animationContainer .WACCustomPanel .WACPanelContent {
    border-start-end-radius: var(--cds-chat-CONTAINER-border-radius);
    border-start-start-radius: var(--cds-chat-CONTAINER-border-radius);
  }
}
