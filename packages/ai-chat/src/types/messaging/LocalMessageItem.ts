/*
 *  Copyright IBM Corp. 2025
 *
 *  This source code is licensed under the Apache-2.0 license found in the
 *  LICENSE file in the root directory of this source tree.
 *
 *  @license
 */

import { DeepPartial } from "../utilities/DeepPartial";

import { HasNeedsAnnouncement } from "../utilities/HasNeedsAnnouncement";
import { GenericItem, MessageRequest } from "./Messages";

/**
 * The different type of error states a given message can be in.
 *
 * @category Messaging
 */
enum MessageErrorState {
  /**
   * No errors.
   */
  NONE = 1,

  /**
   * The message failed to be sent and no more attempts will be made.
   */
  FAILED = 2,

  /**
   * The message failed while streaming.
   */
  FAILED_WHILE_STREAMING = 3,

  /**
   * There was an error sending the message but the system is retrying the message.
   */
  RETRYING = 4,

  /**
   * Indicates that the previous message has entered the retrying state and that this message is waiting for it to
   * finish or fail. This message will remain in the waiting state until it finishes successfully or it enters a
   * retrying state itself.
   */
  WAITING = 5,
}

/**
 * This file contains the definition for the {@link LocalMessageItem} interface which defines a generic local message
 * that is used to represent either a message request or response. This represents an individual item from the generic
 * array of a message response (an individual response type) or the single item from the input of a message request.
 *
 * @category Messaging
 */

interface LocalMessageItem<TGenericItemType extends GenericItem = GenericItem> {
  /**
   * The original message data (request or response minus the input or output data) this message represents.
   */
  item: TGenericItemType;

  /**
   * Assistant context
   */
  context?: unknown;

  /**
   * The local UI state that is currently associated with this message.
   */
  ui_state: LocalMessageUIState<TGenericItemType>;

  /**
   * The ID of the original/full message that this local message item was created for. Note that the full message
   * may contain multiple message items and this {@link LocalMessageItem} only represents one of those.
   */
  fullMessageID: string;
}

/**
 * @category Messaging
 */
interface LocalMessageUIState<
  TGenericItemType extends GenericItem = GenericItem,
> extends HasNeedsAnnouncement {
  /**
   * The ID of this local message item. Note that this is not the same ID as the ID of the full message request or
   * response that this item came from. Also note that these IDs are generated by Carbon AI Chat and are not persisted
   * anywhere. They are not part of session history so they cannot be used as permanent references to this message item.
   */
  id: string;

  /**
   * Indicates if this message is the response to a welcome request.
   */
  isWelcomeResponse?: boolean;

  /**
   * If this is an option response_type, optionSelected is that value of the item that was selected. This value is
   * populated via crawling history.
   */
  optionSelected?: MessageRequest;

  /**
   * In the case where this local message represents a message request generated by the user this value is the
   * original text entered by the user. It is also the text displayed in the UI. Usually this value is the same as
   * the value on the underlying {@link MessageRequest} but in the event that a pre:send handler modifies the text
   * before it is sent to the back-end these values will differ. We continue to show the user's original text in the
   * UI instead of the modified text that was sent to the back-end.
   */
  originalUserText?: string;

  /**
   * Indicates if the entrance fade animation for the message should be disabled.
   */
  disableFadeAnimation?: boolean;

  /**
   * Indicates if this message was used to start an agent conversation that was then ended.
   */
  wasHumanAgentChatEnded?: boolean;

  /**
   * A list of local message item ids for nested message item. This prop is used by the carousel response type.
   */
  itemsLocalMessageItemIDs?: string[];

  /**
   * A list of local message item ids for nested message item. This prop is used by response types that can support
   * response types nested inside them.
   */
  bodyLocalMessageItemIDs?: string[];

  /**
   * A list of local message item ids for nested button response types. This prop is used by response types that can
   * support response types nested inside them.
   */
  footerLocalMessageItemIDs?: string[];

  /**
   * A list of local message item ids for nested items in a grid cell. This prop is used by the grid response type.
   */
  gridLocalMessageItemIDs?: string[][][];

  /**
   * If this item is currently streaming, this will contain the current streaming status.
   */
  streamingState?: LocalMessageItemStreamingState<TGenericItemType>;

  /**
   * Indicates if this item is part of an intermediate step during streaming. This will be true for items received
   * as part of a "partial_item" or a "complete_item". This value will be removed when the "final_response" is received.
   */
  isIntermediateStreaming?: boolean;
}

/**
 * @category Messaging
 */
interface LocalMessageItemStreamingState<
  TGenericItemType extends GenericItem = GenericItem,
> {
  /**
   * Indicates if streaming is done and we've received all the pieces.
   */
  isDone: boolean;

  /**
   * Represents the current state of an item that is being streamed to Carbon AI Chat in chunks.
   */
  chunks: DeepPartial<TGenericItemType>[];
}

export {
  LocalMessageItem,
  LocalMessageUIState,
  MessageErrorState,
  LocalMessageItemStreamingState,
};
