/*
 *  Copyright IBM Corp. 2025
 *
 *  This source code is licensed under the Apache-2.0 license found in the
 *  LICENSE file in the root directory of this source tree.
 *
 *  @license
 */

/**
 * This file contains the generic types for the API between a general chat widget and a chat back-end. It is
 * intended to provide base types for a standalone widget and should not contain any imports of other types.
 */

import { DeepPartial } from "ts-essentials";
import { MessageErrorState } from "./LocalMessageItem";
import { AgentsOnlineStatus } from "../config/ServiceDeskConfig";
import { FileStatusValue } from "../instance/apiTypes";

/**
 * This is the main interface that represents a request from a user sent to a back-end.
 *
 * @category Messaging
 */
interface MessageRequest<TInputType extends BaseMessageInput = MessageInput> {
  /**
   * The unique identifier for this request object. This value may be assigned by the client when a request is
   * made but should be assigned by the service if one is not provided.
   */
  id?: string;

  /**
   * The history information to store as part of this request. This includes extra information that was provided to
   * the user that was used in making the request.
   */
  history?: MessageHistory;

  /**
   * The input data to the back-end to make in this request.
   */
  input: TInputType;

  /**
   * Optional context which is added from external resources.
   */
  context?: unknown;

  /**
   * @internal
   * The ID of the thread this request belongs to. This is here to prepare for input message editing and regenerating
   * responses.
   */
  thread_id?: string;
}

/**
 * The set of possible message input types in a request.
 *
 * @category Messaging
 */
enum MessageInputType {
  /**
   * Represents a simple text message.
   */
  TEXT = "text",

  /**
   * Represents an event message that can be used to send control, updates, or action information to the back-end.
   */
  EVENT = "event",
}

/**
 * These are custom message types that are not part of the v2 API but are generated by the widget for internal use.
 *
 * @category Messaging
 */
enum InternalMessageRequestType {
  FILE = "file",
}

/**
 * @category Messaging
 */
interface BaseMessageInput {
  /**
   * The type of user input.
   */
  message_type?: MessageInputType;
}

/**
 * Base interface for an event message that can be used to send control, updates, or action information to the back-end.
 *
 * @category Messaging
 */
interface EventInput<TEventInputType = EventInputData>
  extends BaseMessageInput {
  /**
   * Event messages have this as their input type.
   */
  message_type: MessageInputType.EVENT;

  /**
   * The type of the event.
   */
  event: TEventInputType;
}

/**
 * Input for an event. The name of the event is mandatory. Additional fields depend on the event.
 *
 * @template TNameType The type of the name property for the event. This can just be a string or it can be a
 * specific string in order to create type safety ensuring each event has the right name (e.g. "typeof MY_EVENT_NAME").
 *
 * @category Messaging
 */
interface EventInputData<TNameType extends string = string> {
  /**
   * The name of the event.
   */
  name: TNameType;
}

/**
 * The default interface for message input that is sent to a back-end in a message request. This represents basic text
 * input.
 *
 * @category Messaging
 */
interface MessageInput extends BaseMessageInput {
  /**
   * The text of the user input to send to the back-end.
   */
  text?: string;

  /**
   * For messages that are sent between the user and a human agent, we assign an agent type to the message to distinguish what type it is.
   */
  agent_message_type?: AgentMessageType;
}

/**
 * This interface represents the main response content that is received by a client from a back-end. It is generally
 * in response to a previous message request.
 *
 * @category Messaging
 */
interface MessageResponse<TGenericType = GenericItem[]> {
  /**
   * A unique identifier for this response object.
   */
  id?: string;

  /**
   * The id of the request that this is the response of.
   */
  request_id?: string;

  /**
   * The output from the back-end to be rendered or processed by the client.
   */
  output: MessageOutput<TGenericType>;

  /**
   * The context information returned by the back-end.
   */
  context?: unknown;

  /**
   * @internal
   * The ID of the thread this request belongs to. This is here to prepare for input message editing and regenerating
   * responses.
   */
  thread_id?: string;

  /**
   * @internal
   * The history information to store as part of this request. This includes extra information that was provided to
   * the user that was used in making the request.
   */
  history?: MessageHistory;
}

/**
 * The output context for a message response from a back-end.
 *
 * @category Messaging
 */
interface MessageOutput<TGenericType = GenericItem[]> {
  /**
   * Responses intended to be processed by a generic channel. This will be an array of message response items.
   */
  generic?: TGenericType;
}

/**
 * The set of possible message types in a response.
 *
 * @category Messaging
 */
enum MessageResponseTypes {
  /**
   * Represents a basic text response. The given text may contain rich content such as markdown.
   */
  TEXT = "text",

  /**
   * A response that requests the user choose an option from a list. The list of options may be presented as a list
   * of buttons or it may be from a drop-down.
   */
  OPTION = "option",

  /**
   * Indicates that the conversation should be escalated to a human agent and offers that opportunity to the user.
   */
  CONNECT_TO_AGENT = "connect_to_agent",

  /**
   * Displays an image to the user.
   */
  IMAGE = "image",

  /**
   * Indicates that the chat should display a pause at this point in the conversation before displaying additional
   * items.
   */
  PAUSE = "pause",

  /**
   * A user defined response will be displayed according to custom logic in the client.
   */
  USER_DEFINED = "user_defined",

  /**
   * Displays the contents of an iframe to the user.
   */
  IFRAME = "iframe",

  /**
   * Displays a video to the user using a video player.
   */
  VIDEO = "video",

  /**
   * Displays an audio clip to the user using an audio player.
   */
  AUDIO = "audio",

  /**
   * Asks the user to provide a date. This may result in a date picker being presented to the user.
   */
  DATE = "date",

  /**
   * Displays a table of data to the user.
   */
  TABLE = "table",

  /**
   * Displays a general error message to the user and include developer info to be logged and to debug.
   */
  INLINE_ERROR = "inline_error",

  /**
   * Displays a card that can contain other response types.
   */
  CARD = "card",

  /**
   * Displays a carousel of cards that can contain other response types.
   */
  CAROUSEL = "carousel",

  /**
   * Displays a button that can either send a message back to the backend, open a url, or throw a client side event.
   */
  BUTTON = "button",

  /**
   * Ability to layout response types inside a grid.
   */
  GRID = "grid",

  /**
   * Ability to show citations on your RAG result.
   */
  CONVERSATIONAL_SEARCH = "conversational_search",
}

/**
 * These are the human agent specific message types.
 *
 * @category Service desk
 */
export enum AgentMessageType {
  /**
   * The was an error in a message.
   */
  INLINE_ERROR = "inline_error",

  /**
   * The agent sent a message.
   */
  FROM_AGENT = "from_agent",

  /**
   * The user sent a message.
   */
  FROM_USER = "from_user",

  /**
   * The agent left the chat.
   */
  AGENT_LEFT_CHAT = "agent_left_chat",

  /**
   * The agent ended the conversation.
   */
  AGENT_ENDED_CHAT = "agent_ended_chat",

  /**
   * The agent joined the conversation.
   */
  AGENT_JOINED = "agent_joined",

  /**
   * A disconnection warning was emitted.
   */
  RELOAD_WARNING = "user_connected_warning",

  /**
   * The conversation was transferred to another agent.
   */
  TRANSFER_TO_AGENT = "transfer_to_agent",

  /**
   * The end user ended the conversation with the agent.
   */
  USER_ENDED_CHAT = "user_ended_chat",

  /**
   * The conversation was ended.
   */
  CHAT_WAS_ENDED = "chat_was_ended",

  /**
   * The conversation was disconnected.
   */
  DISCONNECTED = "disconnected",

  /**
   * The conversation was re-connected.
   */
  RECONNECTED = "reconnected",

  /**
   * Screen sharing requested.
   */
  SHARING_REQUESTED = "sharing_requested",

  /**
   * Screen sharing accepted.
   */
  SHARING_ACCEPTED = "sharing_accepted",

  /**
   * Screen sharing declined.
   */
  SHARING_DECLINED = "sharing_declined",

  /**
   * Screen sharing cancelled.
   */
  SHARING_CANCELLED = "sharing_cancelled",

  /**
   * Screen sharing ended.
   */
  SHARING_ENDED = "sharing_ended",

  /**
   * A system message.
   */
  SYSTEM = "system",
}

/**
 * A general type to indicate any message.
 *
 * @category Messaging
 */
export type Message =
  | MessageRequest<MessageInput>
  | MessageRequest<EventInput>
  | MessageResponse;

/**
 * TODO TOUR: If we end up supporting this user_defined approach longer term, instead of something officially supported
 * by the back-end, then we need to add this to the types repo.
 *
 * @category Messaging
 */
export interface TourStepGenericItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * A way for the authors to label steps so they can use the goToStep function to change to a
   * specific tour step.
   */
  step_id: string;
}

/**
 * @category Messaging
 */
export interface ItemStreamingMetadata {
  /**
   * An identifier for this item within the full message response. This ID is used to correlate a partial or
   * complete item chunk with other chunks that represent the same item. This ID is only unique for a given message
   * response.
   */
  id: string;

  /**
   * When included on a partial_item, indicates if the stream can be cancelled.
   * If so, a "stop streaming" button will display in the UI.
   */
  cancellable?: boolean;

  /**
   * Indicates if the stream has stopped which will trigger the UI to respond with appropriate a11y states
   * and messaging.
   */
  stream_stopped?: boolean;
}

/**
 * Status of the chain of thought step.
 *
 * @category Messaging
 */
export enum ChainOfThoughtStepStatus {
  PROCESSING = "processing",
  FAILURE = "failure",
  SUCCESS = "success",
}

/**
 * This schema is in beta. A chain of thought step is meant to show tool calls and other steps made by your agent
 * to reach its final answer.
 *
 * @category Messaging
 */
export interface ChainOfThoughtStep {
  /**
   * The plain text name of the step.
   */
  title?: string;

  /**
   * An optional human readable description of what the tool does.
   *
   * Accepts markdown formatted text.
   */
  description?: string;

  /**
   * The plain text name of the tool called.
   */
  tool_name?: string;

  /**
   * Optional request metadata sent to a tool.
   */
  request?: {
    /**
     * Arguments sent to the tool. If this is properly formed JSON, it will be shown as a code block.
     */
    args?: unknown;
  };

  /**
   * Optional response from a tool.
   */
  response?: {
    /**
     * Content returned by the tool. If this is properly formed JSON, it will be shown as a code block.
     *
     * You can also return markdown compatible text here.
     */
    content: unknown;
  };

  /**
   * Optionally, share the status of this step. An icon will appear in the view showing the status. If no status is
   * shared, the UI will assume success.
   */
  status?: ChainOfThoughtStepStatus;
}

/**
 * Options that control additional features available for a message item.
 *
 * @category Messaging
 */
export interface GenericItemMessageOptions {
  /**
   * Controls the display of chain of thought component. This API is in beta and is subject to change.
   */
  chain_of_thought?: ChainOfThoughtStep[];

  /**
   * Controls the display of a feedback options (thumbs up/down) for a message item.
   */
  feedback?: GenericItemMessageFeedbackOptions;
}

/**
 * Controls the display of a feedback options (thumbs up/down) for a message item.
 *
 * @category Messaging
 */
export interface GenericItemMessageFeedbackOptions {
  /**
   * Indicates if a request for feedback should be displayed.
   */
  is_on?: boolean;

  /**
   * A unique identifier for this feedback. This is required for the feedback to be recorded in message history.
   */
  id?: string;

  /**
   * Indicates if the user should be asked for additional detailed information when providing positive feedback. This
   * defaults to true.
   */
  show_positive_details?: boolean;

  /**
   * Indicates if the user should be asked for additional detailed information when providing negative feedback. This
   * defaults to true.
   */
  show_negative_details?: boolean;

  /**
   * Indicates whether the text area should be shown. This defaults to true.
   */
  show_text_area?: boolean;

  /**
   * Indicates whether the prompt line should be shown. This defaults to true.
   */
  show_prompt?: boolean;

  /**
   * The title to display in the popup. A default value will be used if no value is provided here.
   */
  title?: string;

  /**
   * The prompt text to display to the user. A default value will be used if no value is provided here.
   */
  prompt?: string;

  /**
   * An optional set of categories to allow the user to choose from.
   */
  categories?: string[];

  /**
   * The placeholder to show in the text area. A default value will be used if no value is provided here.
   */
  placeholder?: string;

  /**
   * The legal disclaimer text to show at the bottom of the popup. This text may contain rich markdown content. If this
   * value is not provided, no text will be shown.
   */
  disclaimer?: string;
}

/**
 * @category Messaging
 */
export type PanelItem = GenericItem & MessageItemPanelInfo;

/**
 * @category Messaging
 */
export type PartialOrCompleteItemChunk = PartialItemChunk | CompleteItemChunk;

/**
 * The basic class for items returned from a back-end as part of a message response. These are the items contained
 * in the {@link MessageOutput.generic} array.
 *
 * @category Messaging
 */
interface GenericItem<TUserDefinedType = Record<string, unknown>> {
  /**
   * The response type of this message item.
   */
  response_type: MessageResponseTypes;

  /**
   * Metadata used identify a generic item within the context of a stream in order to correlate any updates meant
   * for a specific item.
   */
  streaming_metadata?: ItemStreamingMetadata;

  /**
   * An optional buckets of additional user defined properties for this item.
   */
  user_defined?: TUserDefinedType;

  /**
   * For messages that are sent between the user and a human agent, we assign an agent type to the message to distinguish what type it is.
   */
  agent_message_type?: AgentMessageType;

  /**
   * Options that control additional features available for a message item.
   */
  message_options?: GenericItemMessageOptions;
}

/**
 * A user defined item returned in a message response from a back-end.
 *
 * @category Messaging
 */
type UserDefinedItem<TUserDefinedType = Record<string, unknown>> =
  GenericItem<TUserDefinedType>;

/**
 * A text item returned in a message response from a back-end.
 *
 * @category Messaging
 */
interface TextItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * The text of the response.
   */
  text?: string;
}

/**
 * A "connect to agent" item returned in a message response from a back-end. This is used when the back-end
 * indicates that a user's conversation should be escalated to a human agent.
 *
 * @category Messaging
 */
interface ConnectToAgentItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * A message to be sent to the human agent who will be taking over the conversation.
   */
  message_to_human_agent?: string;

  /**
   * Contains the message to be rendered if there are agents available.
   */
  agent_available?: {
    message: string;
  };

  /**
   * Contains the message to be rendered if there are no agents available.
   */
  agent_unavailable?: {
    message: string;
  };

  /**
   * When a conversation is escalated to an agent additional information is needed to fullfill the request. This
   * additional information typically is added by the channel integration and cannot be deduced from the dialog
   * itself.
   */
  transfer_info?: ConnectToAgentItemTransferInfo;
}

/**
 * Additional information as part of a {@link ConnectToAgentItem} that may be need to perform a transfer to an agent.
 *
 * @category Messaging
 */
interface ConnectToAgentItemTransferInfo {
  /**
   * Each service desk may require different information to start the connection. It can be account details or
   * security information. This is a bucket of all the service desk specific properties.
   */
  additional_data?: {
    [key: string]: string;
  };

  /**
   * An initial set of message items to send to the agent.
   */
  summary_message_to_agent?: TextItem[];
}

/**
 * A pause item returned in a message response from a back-end. This indicates that the client should pause before
 * displaying additional response items.
 *
 * @category Messaging
 */
interface PauseItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * How long to pause, in milliseconds.
   */
  time?: number;

  /**
   * Whether to display an "is typing" indicator during the pause.
   */
  typing?: boolean;
}

/**
 * An option item returned in a message response from a back-end. This response type is used when displaying a list
 * of options to the user. How the options are displayed is up to the client but is often displayed in either a
 * drop-down or as a list of buttons.
 *
 * @category Messaging
 */
interface OptionItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * An array of objects describing the options from which the user can choose.
   */
  options: SingleOption[];

  /**
   * An optional title to be shown alongside the options.
   */
  title?: string;

  /**
   * An optional description to be shown alongside the options.
   */
  description?: string;

  /**
   * The preferred type of control to display.
   */
  preference?: OptionItemPreference;
}

/**
 * The set of possible response preferences for an options response.
 *
 * @category Messaging
 */
enum OptionItemPreference {
  /**
   * Indicates the options should be displayed as a drop-down.
   */
  DROPDOWN = "dropdown",

  /**
   * Indicates the options should be displayed as buttons.
   */
  BUTTON = "button",
}

/**
 * Represents an individual option that is part of an "options" response.
 *
 * @category Messaging
 */
interface SingleOption {
  /**
   * The user-facing label for the option or disambiguation suggestion. This label is taken from the user_label property
   * of the corresponding dialog node.
   */
  label: string;

  value: {
    /**
     * An input object that should be sent back to the assistant when this option is chosen by a user.
     */
    input: MessageInput;
  };
}

/**
 * @category Messaging
 */
interface IFrameItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * The source URL to an embeddable page
   */
  source: string;

  /**
   * The preview image of the source URL. This property is unfurled from the source URL at runtime. It is used when
   * IFrameItemDisplayOption is set to 'panel' for the preview card to open the panel.
   */
  image_url?: string;

  /**
   * The title of the source URL. This property is unfurled from the source URL at runtime. It is used when
   * IFrameItemDisplayOption is set to 'panel' for the preview card to open the panel.
   */
  title?: string;

  /**
   * The description of the source URL. This property is unfurled from the source URL at runtime. It is used when
   * IFrameItemDisplayOption is set to 'panel' for the preview card to open the panel.
   */
  description?: string;

  /**
   * How the iframe should be displayed.
   */
  display?: IFrameItemDisplayOption;
}

/**
 * Dimension information for displaying a media item.
 *
 * @category Messaging
 */
interface MediaItemDimensions {
  /**
   * This property's value is used to calculate a responsive height for Carbon AI chat's media player so that its aspect
   * ratio is the same between different screen widths. This is set to a reasonable default depending on the response type
   * and other details like what service you are pulling the content from (e.g. Youtube or SoundCloud).
   */
  base_height?: number;
}

/**
 * The different ways an iframe item may be displayed.
 *
 * @category Messaging
 */
enum IFrameItemDisplayOption {
  /**
   * The iframe is displayed inline in the main message list.
   */
  INLINE = "inline",

  /**
   * The iframe is displayed in a separate panel after showing a card in the main message list.
   */
  PANEL = "panel",
}

/**
 * A reusable media object that may need to display a title and description with an alt_text to label the item for
 * accessibility purposes. This is used by the Audio, Video and Image response types.
 *
 * @category Messaging
 */
interface MediaItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * The url pointing to a media source, whether audio, video, or image.
   *
   * For video this can be a file like an .mp4 or a YouTube, Facebook, Vimeo, Twitch, Streamable, Wistia, or Vidyard url.
   *
   * For audio this can be a file like an .mp3 or a SoundCloud or Mixcloud url.
   */
  source: string;

  /**
   * The title for the item.
   */
  title?: string;

  /**
   * The description for the item.
   */
  description?: string;

  /**
   * The alt text for labeling the item. Screen readers will announce this text when the user's virtual cursor
   * is focused on the item.
   */
  alt_text?: string;

  /**
   * Settings that control the dimensions for the media item.
   */
  dimensions?: MediaItemDimensions;
}

/**
 * Citations for text generated by an AI to provide the user with relevant source information and context.
 *
 * @category Messaging
 */
interface ConversationalSearchItemCitation {
  /**
   * Optional url of the citation. May not be a valid URL.
   */
  url?: string;

  /**
   * Optional explanation text for the citation.
   */
  text?: string;

  /**
   * Optional title of the citation URL.
   */
  title?: string;

  /**
   * Optional array of ranges indicating where in `text` the citation is located.
   */
  ranges?: {
    start: number;
    end: number;
  }[];
}

/**
 * A text response generated by AI with an optional list of citations for where the information came from.
 *
 * @category Messaging
 */
interface ConversationalSearchItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * The returned conversational text. Any HTML/Markdown will be ignored.
   */
  text: string;

  /**
   * A title to display above the citation list, default set to "How do we know?".
   */
  citations_title: string;

  /**
   * A string to explain that these results are generated, default set to "Accuracy of generated answers may vary.".
   */
  disclaimer: string;

  /**
   * Citations are used to connect specific text within a conversational search response with the relevant documents
   * returned by the backend.
   */
  citations?: ConversationalSearchItemCitation[];
}

/**
 * An inline error response generated by a conversational skill provider with a user-friendly text and developer debug info.
 *
 * @category Messaging
 */
interface InlineErrorItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * Some end user friendly text describing the error and what they should do next.
   *
   * If no specific text is passed, the client is responsible for fallback generic error message text.
   */
  text?: string;

  /**
   * Relevant debug info intended to be passed on to developers.
   *
   * This information should not include anything sensitive that might reveal details about our back-end environment that should not be public.
   */
  debug?: {
    /**
     * The error code of any underlying error, despite the service returning 200.
     */
    statusCode?: number;

    /**
     * Developer-friendly error text.
     */
    text?: string;

    /**
     * Any additional key-value pairs for debugging.
     */
    info?: Record<string, unknown>;
  };
}

/**
 * The image response type definition. This is currently the same as {@link MediaItem}.
 *
 * @category Messaging
 */
type ImageItem = MediaItem;

/**
 * The video response type definition for future reuse. This is currently the same as {@link MediaItem}.
 *
 * @category Messaging
 */
type VideoItem = MediaItem;

/**
 * The audio response type definition for future reuse. This is currently the same as {@link MediaItem}.
 *
 * @category Messaging
 */
type AudioItem = MediaItem;

/**
 * @category Messaging
 */
enum ButtonItemType {
  /**
   * A button that sends it value back to the backend.
   */
  POST_BACK = "post_back",

  /**
   * A button that throws an event for your UI to respond to.
   */
  CUSTOM_EVENT = "custom_event",

  /**
   * A button that shows a panel.
   */
  SHOW_PANEL = "show_panel",

  /**
   * A button that opens a URL.
   */
  URL = "url",
}

/**
 * @category Messaging
 */
enum WidthOptions {
  /**
   * Width the size of the floating chat for smaller content.
   */
  SMALL = "small",

  /**
   * Max width of 438px, 2/3rd of the width of chat in fullscreen view with hasContentMaxWidth: true.
   */
  MEDIUM = "medium",

  /**
   * Max width of 585px, the full with of chat in fullscreen view with hasContentMaxWidth: true.
   */
  LARGE = "large",
}

/**
 * @category Messaging
 */
interface WithWidthOptions {
  /**
   * Sets an optional max width of the component. Options are small, medium and large.
   * By default, the component will be 100% width of the container.
   */
  max_width?: WidthOptions;
}

/**
 * @category Messaging
 */
interface WithBodyAndFooter {
  /**
   * A list of message items to render in a Carbon AI chat panel.
   */
  body?: GenericItem[];

  /**
   * A list of button items that are rendered under the panel body.
   */
  footer?: ButtonItem[];
}

/**
 * @category Messaging
 */
interface MessageItemPanelInfo extends WithBodyAndFooter {
  /**
   * The title to give the panel in Carbon AI chat.
   */
  title?: string;

  /**
   * Determines if the panel header should not be visible or not.
   */
  show_header?: boolean;

  /**
   * Determines if the panel close and open animations should be enabled or not.
   */
  show_animations?: boolean;
}

/**
 * @category Messaging
 */
enum ButtonItemKind {
  /**
   * Default Carbon button.
   */
  DEFAULT = "default",

  /**
   * Secondary Carbon button.
   */
  SECONDARY = "secondary",

  /**
   * Tertiary Carbon button.
   */
  TERTIARY = "tertiary",

  /**
   * Danger Carbon button.
   */
  DANGER = "danger",

  /**
   * Button displayed like a link.
   */
  LINK = "link",
}

/**
 * This message item represents a link to a downloadable file.
 *
 * @category Messaging
 */
interface ButtonItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * The style of button to display.
   */
  kind?: ButtonItemKind;

  /**
   * The type of button.
   */
  button_type: ButtonItemType;

  /**
   * The URL for the user to visit when the button is clicked.
   */
  url?: string;

  /**
   * Where to open the link. The default value is _self.
   */
  target?: string;

  /**
   * The display text for the link.
   */
  label?: string;

  /**
   * A custom event that can be listened to by Carbon AI chat when the button item is clicked.
   */
  custom_event_name?: string;

  value?: {
    /**
     * An input object that should be sent back to the assistant when this option is chosen by a user.
     */
    input: MessageInput;
  };

  /**
   * The panel options to display in a panel when the "show_panel" button type is clicked.
   */
  panel?: MessageItemPanelInfo;

  /**
   * The URL pointing to an image.
   */
  image_url?: string;

  /**
   * The alt text for labeling the item. Screen readers will announce this text when the user's virtual cursor
   * is focused on the item.
   */
  alt_text?: string;
}

/**
 * @category Messaging
 */
type CardItem = GenericItem & WithBodyAndFooter & WithWidthOptions;

/**
 * @category Messaging
 */
interface CarouselItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  items: GenericItem[];
}

/**
 * Horizontal alignment values for items in a grid response.
 *
 * @category Messaging
 */
type HorizontalCellAlignment = "left" | "center" | "right";

/**
 * Vertical alignment values for items in a grid response.
 *
 * @category Messaging
 */
type VerticalCellAlignment = "top" | "center" | "bottom";

/**
 * @category Messaging
 */
interface GridItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType>,
    WithWidthOptions {
  /**
   * Determines the horizontal alignment of all items in the grid.
   */
  horizontal_alignment?: HorizontalCellAlignment;

  /**
   * Determines the vertical alignment of all items in the grid.
   */
  vertical_alignment?: VerticalCellAlignment;

  /**
   * The list of columns specifications. This will determine the maximum number of columns that can be rendered.
   */
  columns: {
    width: string;
  }[];

  /**
   * A list of rows to render.
   */
  rows: {
    /**
     * A list of cells to render in a row.
     */
    cells: {
      /**
       * Determines the horizontal alignment of items in the individual cell.
       */
      horizontal_alignment?: HorizontalCellAlignment;

      /**
       * Determines the vertical alignment of items in the individual cell.
       */
      vertical_alignment?: VerticalCellAlignment;

      /**
       * Message items to render in the cell.
       */
      items: GenericItem[];
    }[];
  }[];
}

/**
 * This is the response item that represents a request for a date which should prompt the client to use a date picker or
 * similar control to provide a date. There are currently no additional properties of the response.
 *
 * @category Messaging
 */
type DateItem = GenericItem;

/**
 * @category Messaging
 */
type TableItemCell = string | number;

/**
 * A table item returned in a message response from a back-end. This response type is used when displaying a table of data to the user.
 * The content of the table is up to the client and is authored using json.
 *
 * @category Messaging
 *
 * @experimental
 */
interface TableItem<TUserDefinedType = Record<string, unknown>>
  extends GenericItem<TUserDefinedType> {
  /**
   * Optional title for the table.
   */
  title?: string;

  /**
   * Optional description of the table.
   */
  description?: string;

  /**
   * The array of headers for the table.
   */
  headers: TableItemCell[];

  /**
   * The array of row objects for the table.
   */
  rows: TableItemRow[];
}

/**
 * @category Messaging
 */
type TableItemRowExpandableSectionItem =
  | TextItem
  | ImageItem
  | VideoItem
  | AudioItem
  | IFrameItem
  | UserDefinedItem;

/**
 * @category Messaging
 */
interface TableItemRow {
  /**
   * Data for a specific cell.
   */
  cells: TableItemCell[];

  /**
   * A section that can expand beneath each row which contains an array of items exactly like the message api's output.generic array.
   */
  // expandable_section?: TableItemRowExpandableSectionItem[];
}

/**
 * @category Messaging
 */
interface Chunk {
  /**
   * Additional metadata associated with the stream.
   */
  streaming_metadata?: {
    /**
     * The ID of the complete message response object. This ID will be the ID of the full message that is received
     * in the final chunk of the stream.
     */
    response_id: string;
  };
}

/**
 * This interface contains information about the history of a given message. This information will eventually be
 * saved in the history store.
 *
 * @category Messaging
 */
interface MessageHistory {
  /**
   * The time at which this message occurred.
   */
  timestamp?: number;

  /**
   * The user-friendly label that was associated with this message. This is used on messages that were sent by the
   * user to the assistant to request a response. This is the user displayed text that was entered or selected by
   * the user when that request was made.
   */
  label?: string;

  /**
   * If the message was a welcome node request.
   */
  is_welcome_request?: boolean;

  /**
   * If this message is related to another message, this is the ID of that other message. This is used when a user
   * choices an option and it includes the ID of the message response that presented the options to the user so we
   * can associate the user's request with that earlier response and display the appropriate selected state.
   */
  related_message_id?: string;

  /**
   * @internal
   * Indicates if this message was loaded from history or if it's a new message created in the current browser
   * page.
   */
  from_history?: boolean;

  /**
   * @internal
   * Indicates if this is a "silent" message. These messages are sent to or received from the assistant but should
   * not be displayed to the user.
   */
  silent?: boolean;

  /**
   * @internal
   * The state of a connect to agent card when it's initially displayed. Used by session history on reload to make
   * sure the initial state is persisted. This property can apply to all CTA responses in the message should there
   * happen to be more than one. When this property is null it means a check was performed but it got no answer.
   */
  agent_availability?: AgentsOnlineStatus;

  /**
   * @internal
   * This is used by the connect to agent message. It indicates that no service desk was configured when the connect
   * to agent response was received by the client.
   */
  agent_no_service_desk?: boolean;

  /**
   * @internal
   * The error state of this message.
   */
  error_state?: MessageErrorState;

  /**
   * @internal
   * This is the profile for the agent who sent or triggered this message.
   */
  agent_profile?: AgentProfile;

  /**
   * @internal
   * If this message represents a file upload, this is the status of that file. If the upload failed due to an
   * error, the upload will be complete and the error_state value above will be set. The "success" status is a
   * temporary status the displays a checkmark on successful uploads. The "complete" status is the permanent
   * status stored in session history.
   */
  file_upload_status?: FileStatusValue;

  /**
   * @internal
   * Indicates if the panel response is closed and should not open a panel when received.
   */
  is_panel_closed?: boolean;

  /**
   * @internal
   * Indicates that this message came from a streaming response which did not complete due to an error.
   */
  is_streaming_error?: boolean;

  /**
   * @internal
   * The state of feedback provided on the items in this message.
   */
  feedback?: {
    [feedbackID: string]: MessageHistoryFeedback;
  };
}

/**
 * @category Messaging
 */
interface MessageHistoryFeedback {
  /**
   * Indicates if positive feedback was provided.
   */
  is_positive: boolean;

  /**
   * The feedback text provided by the user.
   */
  text?: string;

  /**
   * When submitting feedback details, this is the list of categories the user selected (if visible).
   */
  categories?: string[];
}

/**
 * @category Messaging
 */
interface PartialResponse {
  /**
   * This contains the history of this response.
   */
  history?: DeepPartial<MessageHistory>;
}

/**
 * The interface for a chunk that represents a partial update (or first time chunk) to a message item.
 *
 * @category Messaging
 */
interface PartialItemChunk extends Chunk {
  /**
   * The partial details of the item. The client will decide what rules to follow for merging this in with any
   * existing data for the same item (which is identified using the {@link ItemStreamingMetadata.id} property).
   */
  partial_item: DeepPartial<GenericItem>;

  /**
   * Change the agent display name and other items on the full response.
   */
  partial_response?: PartialResponse;
}

/**
 * The interface for a chunk that represents a complete update to a message item. The item provided here should have
 * all the data necessary to render the item including any data that was previously received from partial chunks.
 * This chunk may contain corrections to previous chunks.
 *
 * @category Messaging
 */
interface CompleteItemChunk extends Chunk {
  complete_item: GenericItem;
  /**
   * Change the agent display name and other items on the full response.
   */
  partial_response?: PartialResponse;
}

/**
 * The interface for a chunk that represents the entire completed message response. The response provided here
 * should have all the data necessary to render the response including any data that was previously received from item
 * chunks. This final response may contain corrections to previous chunks.
 *
 * The ID of the message should match the ID that was previously provided by PartialItemChunk.streaming_metadata.id.
 *
 * @category Messaging
 */
interface FinalResponseChunk {
  final_response: MessageResponse;
}

/**
 * @category Messaging
 */
type StreamChunk = PartialItemChunk | CompleteItemChunk | FinalResponseChunk;

/**
 * Profile information about a specific agent that can be used to display information to the user. This may
 * represent a human agent or a virtual/bot agent.
 *
 * @category Messaging
 */
interface AgentProfile {
  /**
   * A unique identifier for this agent.
   */
  id: string;

  /**
   * The visible name for the agent. Can be the full name or just a first name.
   */
  nickname: string;

  /**
   * An url pointing to an avatar for the agent.
   */
  profile_picture_url?: string;
}

/**
 * @category Messaging
 */
interface SearchResultHighlight {
  /**
   * A description of the search result. This is taken from a highlight field in the
   * Discovery service response, as specified in the search skill configuration.
   */
  body?: string[];

  /**
   * The title of the search result. This is taken from a highlight field in the Discovery service response, as
   * specified in the search skill configuration.
   */
  title?: string[];
}

/**
 * The metadata for a single search result.
 *
 * @category Messaging
 */
interface SearchResultMetadata {
  /**
   * The confidence score for the given result. For more information about how the confidence is calculated, see the
   * Discovery service documentation.
   */
  confidence: number;

  /**
   * An unbounded measure of the relevance of a particular result, dependent on the query and matching document. A
   * higher score indicates a greater match to the query parameters.
   */
  score: number;
}

/**
 * @category Messaging
 */
interface SearchResultAnswer {
  /**
   * The actual text in answer from the discovery search result.
   */
  text: string;

  /**
   * Confidence score of the answer
   */
  confidence: number;
}

/**
 * A single search result.
 *
 * @category Messaging
 */
interface SearchResult {
  /**
   * The unique identifier of the document in the Discovery service collection.
   */
  id: string;

  /**
   * A description of the search result. This is taken from an abstract or summary field in the
   * Discovery service response, as specified in the search skill configuration.
   */
  body?: string;

  /**
   * The title of the search result. This is taken from a title field in the Discovery service response, as
   * specified in the search skill configuration.
   */
  title?: string;

  /**
   * The URL of the original data object in its native data source.
   */
  url?: string;

  highlight?: SearchResultHighlight;

  /**
   * The metadata for this search result.
   */
  result_metadata: SearchResultMetadata;

  /**
   * The answers for search results.
   */
  answers?: SearchResultAnswer[];
}

export {
  AgentProfile,
  AudioItem,
  BaseMessageInput,
  ButtonItem,
  ButtonItemKind,
  ButtonItemType,
  CardItem,
  CarouselItem,
  Chunk,
  CompleteItemChunk,
  ConnectToAgentItem,
  ConnectToAgentItemTransferInfo,
  ConversationalSearchItem,
  ConversationalSearchItemCitation,
  DateItem,
  EventInput,
  EventInputData,
  FinalResponseChunk,
  GenericItem,
  GridItem,
  HorizontalCellAlignment,
  IFrameItem,
  IFrameItemDisplayOption,
  ImageItem,
  InlineErrorItem,
  MediaItem,
  MediaItemDimensions,
  MessageHistory,
  MessageInput,
  MessageInputType,
  MessageItemPanelInfo,
  MessageOutput,
  MessageRequest,
  MessageResponse,
  MessageResponseTypes,
  SingleOption,
  OptionItem,
  OptionItemPreference,
  PartialItemChunk,
  PauseItem,
  StreamChunk,
  TableItem,
  TableItemCell,
  TableItemRow,
  TableItemRowExpandableSectionItem,
  TextItem,
  UserDefinedItem,
  VerticalCellAlignment,
  VideoItem,
  WithBodyAndFooter,
  WidthOptions,
  WithWidthOptions,
  MessageHistoryFeedback,
  InternalMessageRequestType,
  SearchResult,
  PartialResponse,
};
