{"version":3,"file":"2093.bundle.js","mappings":"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","sources":["webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat.uuid.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat.messageUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat.browserUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat.resolvablePromise.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat.actions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat.HumanAgentServiceImpl.js"],"sourcesContent":["import { v4 } from \"uuid\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ var UUIDType;\n\n(function(UUIDType) {\n  UUIDType[UUIDType[\"MISCELLANEOUS\"] = 1] = \"MISCELLANEOUS\";\n  UUIDType[UUIDType[\"LOCAL_MESSAGE\"] = 2] = \"LOCAL_MESSAGE\";\n  UUIDType[UUIDType[\"MESSAGE\"] = 3] = \"MESSAGE\";\n  UUIDType[UUIDType[\"COMPONENT\"] = 4] = \"COMPONENT\";\n  UUIDType[UUIDType[\"USER\"] = 6] = \"USER\";\n  UUIDType[UUIDType[\"DEVICE_ID\"] = 8] = \"DEVICE_ID\";\n  UUIDType[UUIDType[\"FILE\"] = 9] = \"FILE\";\n})(UUIDType || (UUIDType = {}));\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function uuid(_type) {\n  return v4();\n}\n\nexport { UUIDType as U, uuid as u };\n","import cloneDeep from \"lodash-es/cloneDeep.js\";\n\nimport \"./chat.constants.js\";\n\nimport { u as uuid, U as UUIDType } from \"./chat.uuid.js\";\n\nimport { b as MessageResponseTypes, M as MessageInputType, A as AgentMessageType, c as InternalMessageRequestType, a as ButtonItemType } from \"./chat.Messages.js\";\n\nimport { F as FileStatusValue } from \"./chat.dynamic-imports.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function asArray(value) {\n  return Array.isArray(value) ? value : [ value ];\n}\n\nasync function asyncForEach(array, callbackFunction) {\n  for (let index = 0; index < array.length; index++) {\n    const value = array[index];\n    await callbackFunction(value, index, array);\n  }\n}\n\nfunction findLast(array, predicate, startAt) {\n  const lastIndex = findLastIndex(array, predicate);\n  return lastIndex === -1 ? undefined : array[lastIndex];\n}\n\nfunction findLastIndex(array, predicate, startAt) {\n  if (array) {\n    const startingIndex = array.length - 1;\n    for (let index = startingIndex; index >= 0; index--) {\n      const value = array[index];\n      if (predicate(value, index, array)) {\n        return index;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction findLastWithMap(keys, map, predicate) {\n  for (let index = keys.length - 1; index >= 0; index--) {\n    const key = keys[index];\n    const value = map[key];\n    if (predicate(value, index, keys)) {\n      return value;\n    }\n  }\n  return undefined;\n}\n\nfunction arrayLastValue(array) {\n  return array && array.length ? array[array.length - 1] : null;\n}\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const THREAD_ID_MAIN = \"main\";\n\nfunction isResponse(message) {\n  return message && message.output !== undefined;\n}\n\nfunction isDateResponseType(localMessage) {\n  return localMessage?.item.response_type === MessageResponseTypes.DATE;\n}\n\nfunction addDefaultsToMessage(fullMessage) {\n  if (!fullMessage.id) {\n    fullMessage.id = uuid(UUIDType.MESSAGE);\n  }\n  if (!fullMessage.thread_id) {\n    fullMessage.thread_id = THREAD_ID_MAIN;\n  }\n  if (!fullMessage.history) {\n    fullMessage.history = {};\n  }\n  if (!fullMessage.history.timestamp) {\n    fullMessage.history.timestamp = Date.now();\n  }\n  if (fullMessage.history.from_history === undefined) {\n    fullMessage.history.from_history = false;\n  }\n  return fullMessage;\n}\n\nfunction isRequest(message) {\n  return message?.input !== undefined;\n}\n\nfunction isLiveAgentMessage(message) {\n  return Boolean(message.item.agent_message_type);\n}\n\nfunction hasLiveAgentMessage(message) {\n  return isResponse(message) && Boolean(message.output.generic?.find(item => item?.agent_message_type)) || isRequest(message) && Boolean(message.input.agent_message_type);\n}\n\nfunction isEventRequest(message) {\n  return message?.input?.message_type === MessageInputType.EVENT;\n}\n\nfunction isTextItem(item) {\n  return item && item.response_type === \"text\" && item.text !== undefined;\n}\n\nfunction isTyping(message) {\n  return message.response_type === MessageResponseTypes.PAUSE && message.typing == true;\n}\n\nfunction isPause(message) {\n  return message.response_type === MessageResponseTypes.PAUSE;\n}\n\nfunction isOptionItem(item) {\n  return item?.response_type === MessageResponseTypes.OPTION && item.options !== undefined;\n}\n\nfunction createMessageRequestForChoice(choice, relatedResponseID) {\n  const messageRequest = {\n    id: uuid(UUIDType.MESSAGE),\n    thread_id: THREAD_ID_MAIN,\n    ...cloneDeep(choice.value)\n  };\n  messageRequest.history = {\n    label: choice.label,\n    related_message_id: relatedResponseID\n  };\n  return messageRequest;\n}\n\nfunction createMessageRequestForButtonItemOption(buttonItem, relatedResponseID) {\n  const messageRequest = {\n    id: uuid(UUIDType.MESSAGE),\n    thread_id: THREAD_ID_MAIN,\n    input: null\n  };\n  if (buttonItem.value?.input?.text) {\n    messageRequest.input = cloneDeep(buttonItem.value.input);\n  } else {\n    messageRequest.input = {\n      text: buttonItem.label\n    };\n  }\n  messageRequest.history = {\n    related_message_id: relatedResponseID\n  };\n  return messageRequest;\n}\n\nfunction createWelcomeRequest() {\n  return addDefaultsToMessage({\n    id: uuid(UUIDType.MESSAGE),\n    input: {\n      text: \"\"\n    },\n    history: {\n      silent: true,\n      is_welcome_request: true\n    },\n    thread_id: THREAD_ID_MAIN\n  });\n}\n\nfunction createMessageRequestForText(text) {\n  return addDefaultsToMessage({\n    input: {\n      text: text,\n      message_type: MessageInputType.TEXT\n    }\n  });\n}\n\nfunction createMessageRequestForFileUpload(upload) {\n  return addDefaultsToMessage({\n    id: upload.id,\n    input: {\n      text: upload.file.name,\n      message_type: InternalMessageRequestType.FILE,\n      agent_message_type: AgentMessageType.FROM_USER\n    },\n    history: {\n      file_upload_status: FileStatusValue.UPLOADING\n    }\n  });\n}\n\nfunction createMessageRequestForDate(inputString, userString, relatedResponseID) {\n  const messageRequest = createMessageRequestForText(inputString);\n  messageRequest.history = {\n    label: userString,\n    related_message_id: relatedResponseID\n  };\n  return messageRequest;\n}\n\nfunction createMessageResponseForText(text, threadID = THREAD_ID_MAIN, responseType = MessageResponseTypes.TEXT, context) {\n  const textItem = {\n    response_type: responseType,\n    text: text\n  };\n  const messageResponse = {\n    id: uuid(UUIDType.MESSAGE),\n    thread_id: threadID,\n    output: {\n      generic: [ textItem ]\n    }\n  };\n  return messageResponse;\n}\n\nfunction createMessageResponseForItem(item, context) {\n  const messageResponse = {\n    output: {\n      generic: [ item ]\n    }\n  };\n  return addDefaultsToMessage(messageResponse);\n}\n\nfunction isConnectToAgent(response) {\n  return response?.response_type === MessageResponseTypes.CONNECT_TO_AGENT;\n}\n\nfunction isCardResponseType(response) {\n  return response?.response_type === MessageResponseTypes.CARD;\n}\n\nfunction isCarouselResponseType(response) {\n  return response?.response_type === MessageResponseTypes.CAROUSEL;\n}\n\nfunction isButtonResponseType(response) {\n  return response?.response_type === MessageResponseTypes.BUTTON;\n}\n\nfunction isShowPanelButtonType(response) {\n  return isButtonResponseType(response) && response.button_type === ButtonItemType.SHOW_PANEL;\n}\n\nfunction isResponseWithNestedItems(item) {\n  if (isButtonResponseType(item)) {\n    return hasBodyOrFooter(item.panel);\n  }\n  if (isCardResponseType(item)) {\n    return hasBodyOrFooter(item);\n  }\n  if (isCarouselResponseType(item)) {\n    return item.items !== undefined;\n  }\n  return isGridResponseType(item);\n}\n\nfunction hasBodyOrFooter(item) {\n  return item?.body !== undefined || item?.footer !== undefined;\n}\n\nfunction renderAsUserDefinedMessage(messageItem) {\n  const responseType = messageItem.response_type;\n  switch (responseType) {\n   case MessageResponseTypes.TEXT:\n   case MessageResponseTypes.IMAGE:\n   case MessageResponseTypes.OPTION:\n   case MessageResponseTypes.CONNECT_TO_AGENT:\n   case MessageResponseTypes.IFRAME:\n   case MessageResponseTypes.VIDEO:\n   case MessageResponseTypes.AUDIO:\n   case MessageResponseTypes.DATE:\n   case MessageResponseTypes.CONVERSATIONAL_SEARCH:\n   case MessageResponseTypes.TABLE:\n   case MessageResponseTypes.INLINE_ERROR:\n   case MessageResponseTypes.CARD:\n   case MessageResponseTypes.CAROUSEL:\n   case MessageResponseTypes.BUTTON:\n   case MessageResponseTypes.GRID:\n    return false;\n\n   default:\n    return !renderAsTour(messageItem);\n  }\n}\n\nfunction renderAsTour(messageItem) {\n  return hasTourUserDefinedType(messageItem);\n}\n\nfunction hasTourUserDefinedType(message) {\n  return message?.user_defined?.user_defined_type === \"IBM_BETA_JOURNEYS_TOUR\";\n}\n\nfunction hasServiceDesk(config) {\n  return Boolean(config.public.serviceDeskFactory);\n}\n\nfunction isItemSupportedInResponseBody(item) {\n  switch (item.response_type) {\n   case MessageResponseTypes.IMAGE:\n   case MessageResponseTypes.IFRAME:\n   case MessageResponseTypes.VIDEO:\n   case MessageResponseTypes.AUDIO:\n   case MessageResponseTypes.TEXT:\n   case MessageResponseTypes.USER_DEFINED:\n   case MessageResponseTypes.CARD:\n   case MessageResponseTypes.GRID:\n    return true;\n\n   default:\n    return false;\n  }\n}\n\nfunction isSingleItemCarousel(messageItem) {\n  return isCarouselResponseType(messageItem) && messageItem.items.length === 1;\n}\n\nfunction isGridResponseType(item) {\n  return item?.response_type === MessageResponseTypes.GRID;\n}\n\nfunction getOptionType(preference, totalOptions) {\n  let type = \"button\";\n  if (preference && preference === \"button\") {\n    type = \"button\";\n  } else if (preference && preference === \"dropdown\") {\n    type = \"dropdown\";\n  } else if (totalOptions > 4) {\n    type = \"dropdown\";\n  }\n  return type;\n}\n\nfunction isStreamPartialItem(chunk) {\n  return Boolean(chunk.partial_item);\n}\n\nfunction isStreamCompleteItem(chunk) {\n  return Boolean(chunk.complete_item);\n}\n\nfunction isStreamFinalResponse(chunk) {\n  return Boolean(chunk.final_response);\n}\n\nfunction streamItemID(messageID, item) {\n  const itemID = item?.streaming_metadata?.id;\n  if (!itemID) {\n    return null;\n  }\n  return `${messageID}-${itemID}`;\n}\n\nfunction getMediaDimensions(item) {\n  return item.dimensions;\n}\n\nfunction getLastBotResponseWithContext(state) {\n  const messageIDs = state.botMessageState.messageIDs || [];\n  return findLastWithMap(messageIDs, state.allMessagesByID, message => isResponse(message) && !hasLiveAgentMessage(message) && Boolean(message.context));\n}\n\nexport { isEventRequest as A, getLastBotResponseWithContext as B, createMessageRequestForChoice as C, createMessageRequestForButtonItemOption as D, createMessageRequestForDate as E, getOptionType as F, isTextItem as G, renderAsTour as H, createMessageResponseForItem as I, createMessageRequestForFileUpload as J, isGridResponseType as K, isCarouselResponseType as L, isShowPanelButtonType as M, isItemSupportedInResponseBody as N, isCardResponseType as O, isButtonResponseType as P, THREAD_ID_MAIN as T, isRequest as a, isResponse as b, isOptionItem as c, isSingleItemCarousel as d, arrayLastValue as e, createWelcomeRequest as f, getMediaDimensions as g, isLiveAgentMessage as h, isConnectToAgent as i, createMessageRequestForText as j, addDefaultsToMessage as k, createMessageResponseForText as l, isStreamCompleteItem as m, isStreamPartialItem as n, isStreamFinalResponse as o, isResponseWithNestedItems as p, asyncForEach as q, renderAsUserDefinedMessage as r, streamItemID as s, isPause as t, hasTourUserDefinedType as u, hasServiceDesk as v, isTyping as w, asArray as x, findLast as y, isDateResponseType as z };\n","import { detect } from \"detect-browser\";\n\nimport memoizeOne from \"memoize-one\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const isClient = typeof window !== \"undefined\" && typeof navigator !== \"undefined\";\n\nconst browser = isClient ? detect() : undefined;\n\nlet screenWidth = 0;\n\nlet screenHeight = 0;\n\nif (isClient) {\n  screenWidth = window.screen.width;\n  screenHeight = window.screen.height;\n}\n\nconst IS_IOS = browser?.os === \"iOS\";\n\nconst IS_ANDROID = browser?.os === \"Android OS\";\n\nconst IS_MOBILE = IS_IOS || IS_ANDROID;\n\nconst IS_PHONE = IS_MOBILE && (screenWidth < 500 || screenHeight < 500);\n\nconst IS_PHONE_IN_PORTRAIT_MODE = IS_PHONE && screenWidth < 500;\n\nfunction isSessionStorageAvailable() {\n  if (!isClient || !window.sessionStorage) {\n    return false;\n  }\n  try {\n    window.sessionStorage.setItem(\"web-chat-test-item\", \"true\");\n    window.sessionStorage.getItem(\"web-chat-test-item\");\n    window.sessionStorage.removeItem(\"web-chat-test-item\");\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nconst IS_SESSION_STORAGE = memoizeOne(isSessionStorageAvailable);\n\nfunction getURLHostName(url) {\n  try {\n    return new URL(url).hostname;\n  } catch {\n    return url;\n  }\n}\n\nfunction conditionalSetTimeout(operation, timeout) {\n  if (timeout) {\n    return setTimeout(operation, timeout);\n  }\n  operation();\n  return null;\n}\n\nexport { IS_MOBILE as I, IS_SESSION_STORAGE as a, IS_PHONE as b, IS_IOS as c, IS_PHONE_IN_PORTRAIT_MODE as d, conditionalSetTimeout as e, getURLHostName as g };\n","import { b as MessageResponseTypes, a as ButtonItemType } from \"./chat.Messages.js\";\n\nimport { u as uuid, U as UUIDType } from \"./chat.uuid.js\";\n\nimport { s as streamItemID, I as createMessageResponseForItem, K as isGridResponseType, L as isCarouselResponseType, M as isShowPanelButtonType, p as isResponseWithNestedItems, N as isItemSupportedInResponseBody, O as isCardResponseType, P as isButtonResponseType } from \"./chat.messageUtils.js\";\n\nimport { b as consoleError } from \"./chat.miscUtils.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function inputItemToLocalItem(message, originalUserText, id = uuid(UUIDType.LOCAL_MESSAGE)) {\n  const localMessage = {\n    item: {\n      response_type: MessageResponseTypes.TEXT,\n      ...message.input\n    },\n    ui_state: {\n      id: id,\n      originalUserText: originalUserText,\n      needsAnnouncement: false\n    },\n    fullMessageID: message.id\n  };\n  return localMessage;\n}\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function outputItemToLocalItem(messageItem, fullMessage, isLatestWelcomeNode = false, disableFadeAnimation = false) {\n  const id = streamItemID(fullMessage.id, messageItem) || uuid(UUIDType.LOCAL_MESSAGE);\n  const localMessage = {\n    ui_state: {\n      id: id,\n      needsAnnouncement: !fullMessage.history.from_history,\n      disableFadeAnimation: disableFadeAnimation\n    },\n    item: messageItem,\n    fullMessageID: fullMessage.id\n  };\n  if (isLatestWelcomeNode) {\n    localMessage.ui_state.isWelcomeResponse = true;\n  }\n  return localMessage;\n}\n\nfunction createLocalMessageForInlineError(text) {\n  const messageItem = {\n    response_type: MessageResponseTypes.INLINE_ERROR,\n    text: text\n  };\n  return createLocalMessageForItem(messageItem);\n}\n\nfunction createLocalMessageForItem(messageItem) {\n  const originalMessage = createMessageResponseForItem(messageItem);\n  const localMessage = outputItemToLocalItem(messageItem, originalMessage);\n  return {\n    originalMessage: originalMessage,\n    localMessage: localMessage\n  };\n}\n\nfunction createLocalMessageItemsForNestedMessageItems(localMessageItem, originalMessage, fromHistory, nestedLocalMessageItems, allowFooter) {\n  const {item: item} = localMessageItem;\n  if (isGridResponseType(item)) {\n    localMessageItem.ui_state.gridLocalMessageItemIDs = item.rows.map(row => row.cells.map(cell => {\n      const cellLocalMessageItemIDs = [];\n      createLocalMessageItemsForNestedType(\"items\", localMessageItem, cell.items, cellLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, nestedMessageItem => isSupportedMessageItemInBody(localMessageItem.item, nestedMessageItem), false);\n      return cellLocalMessageItemIDs;\n    }));\n  } else if (isCarouselResponseType(item)) {\n    localMessageItem.ui_state.itemsLocalMessageItemIDs = [];\n    createLocalMessageItemsForNestedType(\"items\", localMessageItem, item.items, localMessageItem.ui_state.itemsLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, nestedMessageItem => isSupportedMessageItemInBody(item, nestedMessageItem), allowFooter);\n  } else {\n    const bodyItems = item.body || item.panel?.body;\n    if (bodyItems) {\n      localMessageItem.ui_state.bodyLocalMessageItemIDs = [];\n      createLocalMessageItemsForNestedType(\"body\", localMessageItem, bodyItems, localMessageItem.ui_state.bodyLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, nestedMessageItem => isSupportedMessageItemInBody(item, nestedMessageItem), !isShowPanelButtonType(item));\n    }\n    if (!allowFooter) {\n      return;\n    }\n    const footerItems = item.footer || item.panel?.footer;\n    if (footerItems) {\n      localMessageItem.ui_state.footerLocalMessageItemIDs = [];\n      createLocalMessageItemsForNestedType(\"footer\", localMessageItem, footerItems, localMessageItem.ui_state.footerLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, nestedMessageItem => isSupportedMessageItemInFooter(item, nestedMessageItem), !isShowPanelButtonType(item));\n    }\n  }\n}\n\nfunction createLocalMessageItemsForNestedType(type, localMessageItem, items, nestedMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, isSupported, allowFooter) {\n  items.forEach(nestedMessageItem => {\n    if (isSupported(nestedMessageItem)) {\n      const nestedLocalMessageItem = outputItemToLocalItem(nestedMessageItem, originalMessage, false, true);\n      nestedMessageItemIDs.push(nestedLocalMessageItem.ui_state.id);\n      nestedLocalMessageItems.push(nestedLocalMessageItem);\n      if (isResponseWithNestedItems(nestedLocalMessageItem.item)) {\n        createLocalMessageItemsForNestedMessageItems(nestedLocalMessageItem, originalMessage, fromHistory, nestedLocalMessageItems, allowFooter);\n      }\n    } else {\n      consoleError(`The \"${localMessageItem.item.response_type}\" response type does not support \"${nestedMessageItem.response_type}\" in \"${type}\" array.`);\n    }\n  });\n}\n\nfunction isSupportedMessageItemInBody(rootMessageItem, nestedMessageItem) {\n  switch (rootMessageItem.response_type) {\n   case MessageResponseTypes.CARD:\n    return !isCardResponseType(nestedMessageItem) && isItemSupportedInResponseBody(nestedMessageItem);\n\n   case MessageResponseTypes.CAROUSEL:\n    return isCardResponseType(nestedMessageItem);\n\n   case MessageResponseTypes.BUTTON:\n    return rootMessageItem.button_type === ButtonItemType.SHOW_PANEL && isItemSupportedInResponseBody(nestedMessageItem);\n\n   case MessageResponseTypes.GRID:\n    return !isCardResponseType(nestedMessageItem) && isItemSupportedInResponseBody(nestedMessageItem);\n\n   default:\n    return false;\n  }\n}\n\nfunction isSupportedMessageItemInFooter(rootMessageItem, nestedMessageItem) {\n  if (isButtonResponseType(nestedMessageItem)) {\n    if (isShowPanelButtonType(rootMessageItem)) {\n      return !isShowPanelButtonType(nestedMessageItem);\n    }\n    return true;\n  }\n  return false;\n}\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const HA_SET_AGENT_AVAILABILITY = \"HA_SET_AGENT_AVAILABILITY\";\n\nconst HA_SET_IS_CONNECTING = \"HA_SET_IS_CONNECTING\";\n\nconst HA_SET_IS_RECONNECTING = \"HA_SET_IS_RECONNECTING\";\n\nconst HA_SET_AGENT_JOINED = \"HA_SET_AGENT_JOINED\";\n\nconst HA_SET_AGENT_LEFT_CHAT = \"HA_SET_AGENT_LEFT_CHAT\";\n\nconst HA_END_CHAT = \"HA_END_CHAT\";\n\nconst HA_UPDATE_CAPABILITIES = \"HA_UPDATE_CAPABILITIES\";\n\nconst HA_UPDATE_FILE_UPLOAD_IN_PROGRESS = \"HA_UPDATE_FILE_UPLOAD_IN_PROGRESS\";\n\nconst HA_SET_SHOW_SCREEN_SHARE_REQUEST = \"HA_SET_SHOW_SCREEN_SHARE_REQUEST\";\n\nconst HA_SET_IS_SCREEN_SHARING = \"HA_SET_IS_SCREEN_SHARING\";\n\nconst HA_SET_PERSISTED_STATE = \"HA_SET_PERSISTED_STATE\";\n\nconst HA_UPDATE_IS_SUSPENDED = \"HA_UPDATE_IS_SUSPENDED\";\n\nconst HA_UPDATE_IS_TYPING = \"HA_UPDATE_IS_TYPING\";\n\nfunction setIsConnecting(isConnecting, localMessageID) {\n  return {\n    type: HA_SET_IS_CONNECTING,\n    isConnecting: isConnecting,\n    localMessageID: localMessageID\n  };\n}\n\nfunction setIsReconnecting(isReconnecting) {\n  return {\n    type: HA_SET_IS_RECONNECTING,\n    isReconnecting: isReconnecting\n  };\n}\n\nfunction setAgentLeftChat() {\n  return {\n    type: HA_SET_AGENT_LEFT_CHAT\n  };\n}\n\nfunction endChat() {\n  return {\n    type: HA_END_CHAT\n  };\n}\n\nfunction setAgentAvailability(availability) {\n  return {\n    type: HA_SET_AGENT_AVAILABILITY,\n    availability: availability\n  };\n}\n\nfunction setAgentJoined(agentProfile) {\n  return {\n    type: HA_SET_AGENT_JOINED,\n    agentProfile: agentProfile\n  };\n}\n\nfunction updateCapabilities(capabilities) {\n  return {\n    type: HA_UPDATE_CAPABILITIES,\n    capabilities: capabilities\n  };\n}\n\nfunction updateFilesUploadInProgress(fileUploadInProgress) {\n  return {\n    type: HA_UPDATE_FILE_UPLOAD_IN_PROGRESS,\n    fileUploadInProgress: fileUploadInProgress\n  };\n}\n\nfunction setShowScreenShareRequest(showRequest) {\n  return {\n    type: HA_SET_SHOW_SCREEN_SHARE_REQUEST,\n    showRequest: showRequest\n  };\n}\n\nfunction setIsScreenSharing(isSharing) {\n  return {\n    type: HA_SET_IS_SCREEN_SHARING,\n    isSharing: isSharing\n  };\n}\n\nfunction setPersistedServiceDeskState(state) {\n  return {\n    type: HA_SET_PERSISTED_STATE,\n    state: state\n  };\n}\n\nfunction agentUpdateIsSuspended(isSuspended) {\n  return {\n    type: HA_UPDATE_IS_SUSPENDED,\n    isSuspended: isSuspended\n  };\n}\n\nfunction agentUpdateIsTyping(isTyping) {\n  return {\n    type: HA_UPDATE_IS_TYPING,\n    isTyping: isTyping\n  };\n}\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function deepFreeze(object) {\n  Object.freeze(object);\n  Object.getOwnPropertyNames(object).forEach(prop => {\n    if (Object.prototype.hasOwnProperty.call(object, prop) && object[prop] !== null && (typeof object[prop] === \"object\" || typeof object[prop] === \"function\") && !Object.isFrozen(object[prop])) {\n      deepFreeze(object[prop]);\n    }\n  });\n  return object;\n}\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function resolvablePromise() {\n  let resolveFunction;\n  let rejectFunction;\n  const promise = new Promise((resolve, reject) => {\n    resolveFunction = resolve;\n    rejectFunction = reject;\n  });\n  promise.doResolve = resolveValue => {\n    promise.isResolved = true;\n    promise.isComplete = true;\n    resolveFunction(resolveValue);\n  };\n  promise.doReject = rejectValue => {\n    promise.isRejected = true;\n    promise.isComplete = true;\n    rejectFunction(rejectValue);\n  };\n  promise.isResolved = false;\n  promise.isRejected = false;\n  promise.isComplete = false;\n  return promise;\n}\n\nexport { setAgentAvailability as A, setAgentJoined as B, agentUpdateIsTyping as C, setAgentLeftChat as D, setPersistedServiceDeskState as E, HA_END_CHAT as H, agentUpdateIsSuspended as a, createLocalMessageForInlineError as b, createLocalMessageItemsForNestedMessageItems as c, deepFreeze as d, HA_UPDATE_FILE_UPLOAD_IN_PROGRESS as e, HA_SET_IS_SCREEN_SHARING as f, HA_UPDATE_CAPABILITIES as g, HA_SET_AGENT_LEFT_CHAT as h, inputItemToLocalItem as i, HA_UPDATE_IS_TYPING as j, HA_UPDATE_IS_SUSPENDED as k, HA_SET_PERSISTED_STATE as l, HA_SET_AGENT_JOINED as m, HA_SET_SHOW_SCREEN_SHARE_REQUEST as n, outputItemToLocalItem as o, HA_SET_AGENT_AVAILABILITY as p, HA_SET_IS_RECONNECTING as q, resolvablePromise as r, HA_SET_IS_CONNECTING as s, setIsConnecting as t, updateFilesUploadInProgress as u, endChat as v, setIsScreenSharing as w, setIsReconnecting as x, setShowScreenShareRequest as y, updateCapabilities as z };\n","import { u as uuid } from \"./chat.uuid.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const CHANGE_STATE = \"CHANGE_STATE\";\n\nconst UPDATE_BOT_NAME = \"UPDATE_BOT_NAME\";\n\nconst UPDATE_BOT_AVATAR_URL = \"UPDATE_BOT_AVATAR_URL\";\n\nconst UPDATE_LAUNCHER_AVATAR_URL = \"UPDATE_LAUNCHER_AVATAR_URL\";\n\nconst UPDATE_MAIN_HEADER_TITLE = \"UPDATE_MAIN_HEADER_TITLE\";\n\nconst HYDRATE_CHAT = \"HYDRATE_CHAT\";\n\nconst HYDRATE_MESSAGE_HISTORY = \"HYDRATE_MESSAGE_HISTORY\";\n\nconst ADD_LOCAL_MESSAGE_ITEM = \"ADD_LOCAL_MESSAGE_ITEM\";\n\nconst REMOVE_MESSAGES = \"REMOVE_MESSAGES\";\n\nconst UPDATE_LOCAL_MESSAGE_ITEM = \"UPDATE_LOCAL_MESSAGE_ITEM\";\n\nconst SET_APP_STATE_VALUE = \"SET_APP_STATE_VALUE\";\n\nconst ADD_IS_TYPING_COUNTER = \"ADD_IS_TYPING_COUNTER\";\n\nconst ADD_IS_LOADING_COUNTER = \"ADD_IS_LOADING_COUNTER\";\n\nconst ADD_IS_HYDRATING_COUNTER = \"ADD_IS_HYDRATING_COUNTER\";\n\nconst SET_VIEW_STATE = \"SET_VIEW_STATE\";\n\nconst SET_VIEW_CHANGING = \"SET_VIEW_CHANGING\";\n\nconst SET_INITIAL_VIEW_CHANGE_COMPLETE = \"SET_INITIAL_VIEW_CHANGE_COMPLETE\";\n\nconst UPDATE_CSS_VARIABLES = \"UPDATE_CSS_VARIABLES\";\n\nconst MESSAGE_SET_OPTION_SELECTED = \"MESSAGE_SET_OPTION_SELECTED\";\n\nconst SET_MESSAGE_UI_PROPERTY = \"SET_MESSAGE_UI_PROPERTY\";\n\nconst SET_MESSAGE_HISTORY_PROPERTY = \"SET_MESSAGE_HISTORY_PROPERTY\";\n\nconst MERGE_HISTORY = \"MERGE_HISTORY\";\n\nconst SET_LAUNCHER_PROPERTY = \"SET_LAUNCHER_PROPERTY\";\n\nconst SET_LAUNCHER_CONFIG_PROPERTY = \"SET_LAUNCHER_CONFIG_PROPERTY\";\n\nconst ANNOUNCE_MESSAGE = \"ANNOUNCE_MESSAGE\";\n\nconst SET_CHAT_MESSAGES_PROPERTY = \"SET_CHAT_MESSAGES_PROPERTY\";\n\nconst RESTART_CONVERSATION = \"RESTART_CONVERSATION\";\n\nconst ACCEPTED_DISCLAIMER = \"ACCEPTED_DISCLAIMER\";\n\nconst ADD_MESSAGE = \"ADD_MESSAGE\";\n\nconst UPDATE_HOME_SCREEN_CONFIG = \"UPDATE_HOME_SCREEN_CONFIG\";\n\nconst UPDATE_HAS_SENT_NON_WELCOME_MESSAGE = \"UPDATE_HAS_SENT_NON_WELCOME_MESSAGE\";\n\nconst UPDATE_PERSISTED_CHAT_STATE = \"UPDATE_PERSISTED_CHAT_STATE\";\n\nconst SET_TOUR_DATA = \"SET_TOUR_DATA\";\n\nconst CLEAR_TOUR_DATA = \"CLEAR_TOUR_DATA\";\n\nconst CHANGE_STEP_IN_TOUR = \"CHANGE_STEP_IN_TOUR\";\n\nconst SET_HOME_SCREEN_IS_OPEN = \"SET_HOME_SCREEN_IS_OPEN\";\n\nconst UPDATE_LAUNCHER_CONFIG = \"UPDATE_LAUNCHER_CONFIG\";\n\nconst UPDATE_MESSAGE = \"UPDATE_MESSAGE\";\n\nconst SET_LAUNCHER_MINIMIZED = \"SET_LAUNCHER_MINIMIZED\";\n\nconst CLOSE_IFRAME_PANEL = \"CLOSE_IFRAME_PANEL\";\n\nconst OPEN_IFRAME_CONTENT = \"OPEN_IFRAME_CONTENT\";\n\nconst SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN = \"SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN\";\n\nconst SET_CUSTOM_PANEL_OPTIONS = \"SET_CUSTOM_PANEL_OPTIONS\";\n\nconst SET_CUSTOM_PANEL_OPEN = \"SET_CUSTOM_PANEL_OPEN\";\n\nconst TOGGLE_HOME_SCREEN = \"GO_BACK_TO_HOME\";\n\nconst UPDATE_INPUT_STATE = \"UPDATE_INPUT_STATE\";\n\nconst SET_IS_BROWSER_PAGE_VISIBLE = \"SET_IS_PAGE_VISIBLE\";\n\nconst ADD_INPUT_FILE = \"ADD_INPUT_FILE\";\n\nconst CLEAR_INPUT_FILES = \"CLEAR_INPUT_FILES\";\n\nconst REMOVE_INPUT_FILE = \"REMOVE_INPUT_FILE\";\n\nconst REMOVE_LOCAL_MESSAGE_ITEM = \"REMOVE_LOCAL_MESSAGE_ITEM\";\n\nconst FILE_UPLOAD_INPUT_ERROR = \"FILE_UPLOAD_INPUT_ERROR\";\n\nconst ADD_NESTED_MESSAGES = \"ADD_NESTED_MESSAGES\";\n\nconst SET_RESPONSE_PANEL_IS_OPEN = \"SET_RESPONSE_PANEL_IS_OPEN\";\n\nconst SET_RESPONSE_PANEL_CONTENT = \"SET_PANEL_RESPONSE_CONTENT\";\n\nconst STREAMING_ADD_CHUNK = \"STREAMING_ADD_CHUNK\";\n\nconst STREAMING_START = \"STREAMING_START\";\n\nconst STREAMING_MERGE_HISTORY = \"STREAMING_MERGE_HISTORY\";\n\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\n\nconst REMOVE_ALL_NOTIFICATIONS = \"REMOVE_ALL_NOTIFICATIONS\";\n\nconst REMOVE_NOTIFICATIONS = \"REMOVE_NOTIFICATIONS\";\n\nconst UPDATE_CHAT_HEADER_CONFIG = \"UPDATE_CHAT_HEADER_CONFIG\";\n\nconst UPDATE_MAX_VISIBLE_HEADER_OBJECTS = \"UPDATE_MAX_VISIBLE_HEADER_OBJECTS\";\n\nconst SET_STOP_STREAMING_BUTTON_VISIBLE = \"SET_STOP_STREAMING_BUTTON_VISIBLE\";\n\nconst SET_STOP_STREAMING_BUTTON_DISABLED = \"SET_STOP_STREAMING_BUTTON_DISABLED\";\n\nconst SET_STREAM_ID = \"SET_STREAM_ID\";\n\nconst UPDATE_MAIN_HEADER_AVATAR = \"UPDATE_MAIN_HEADER_AVATAR\";\n\nconst actions = {\n  changeState(partialState) {\n    return {\n      type: CHANGE_STATE,\n      partialState: partialState\n    };\n  },\n  chatWasHydrated() {\n    return {\n      type: HYDRATE_CHAT\n    };\n  },\n  hydrateMessageHistory(messageHistory) {\n    return {\n      type: HYDRATE_MESSAGE_HISTORY,\n      messageHistory: messageHistory\n    };\n  },\n  removeMessages(messageIDs) {\n    return {\n      type: REMOVE_MESSAGES,\n      messageIDs: messageIDs\n    };\n  },\n  restartConversation() {\n    return {\n      type: RESTART_CONVERSATION\n    };\n  },\n  addLocalMessageItem(messageItem, message, addMessage, addAfterID) {\n    return {\n      type: ADD_LOCAL_MESSAGE_ITEM,\n      messageItem: messageItem,\n      message: message,\n      addMessage: addMessage,\n      addAfterID: addAfterID\n    };\n  },\n  addMessage(message) {\n    return {\n      type: ADD_MESSAGE,\n      message: message\n    };\n  },\n  updateLocalMessageItem(messageItem) {\n    return {\n      type: UPDATE_LOCAL_MESSAGE_ITEM,\n      messageItem: messageItem\n    };\n  },\n  updateMessage(message) {\n    return {\n      type: UPDATE_MESSAGE,\n      message: message\n    };\n  },\n  messageSetOptionSelected(messageID, sentMessage) {\n    return {\n      type: MESSAGE_SET_OPTION_SELECTED,\n      messageID: messageID,\n      sentMessage: sentMessage\n    };\n  },\n  updatePersistedChatState(chatState) {\n    return {\n      type: UPDATE_PERSISTED_CHAT_STATE,\n      chatState: chatState\n    };\n  },\n  setTourData(newActiveTourMessageID) {\n    return {\n      type: SET_TOUR_DATA,\n      newActiveTourMessageID: newActiveTourMessageID\n    };\n  },\n  clearTourData() {\n    return {\n      type: CLEAR_TOUR_DATA\n    };\n  },\n  changeStepInTour(newStepNumber) {\n    return {\n      type: CHANGE_STEP_IN_TOUR,\n      newStepNumber: newStepNumber\n    };\n  },\n  updateHasSentNonWelcomeMessage(hasSentNonWelcomeMessage) {\n    return {\n      type: UPDATE_HAS_SENT_NON_WELCOME_MESSAGE,\n      hasSentNonWelcomeMessage: hasSentNonWelcomeMessage\n    };\n  },\n  setAppStateValue(key, value) {\n    return {\n      type: SET_APP_STATE_VALUE,\n      key: key,\n      value: value\n    };\n  },\n  addIsTypingCounter(addToIsTyping) {\n    return {\n      type: ADD_IS_TYPING_COUNTER,\n      addToIsTyping: addToIsTyping\n    };\n  },\n  addIsLoadingCounter(addToIsLoading) {\n    return {\n      type: ADD_IS_LOADING_COUNTER,\n      addToIsLoading: addToIsLoading\n    };\n  },\n  addIsHydratingCounter(addToIsHydrating) {\n    return {\n      type: ADD_IS_HYDRATING_COUNTER,\n      addToIsHydrating: addToIsHydrating\n    };\n  },\n  updateBotName(name) {\n    return {\n      type: UPDATE_BOT_NAME,\n      name: name\n    };\n  },\n  updateMainHeaderTitle(title) {\n    return {\n      type: UPDATE_MAIN_HEADER_TITLE,\n      title: title\n    };\n  },\n  updateBotAvatarURL(url) {\n    return {\n      type: UPDATE_BOT_AVATAR_URL,\n      url: url\n    };\n  },\n  updateCSSVariables(variables, publicVars, whiteLabelVariables) {\n    return {\n      type: UPDATE_CSS_VARIABLES,\n      variables: variables,\n      publicVars: publicVars,\n      whiteLabelVariables: whiteLabelVariables\n    };\n  },\n  updateHomeScreenConfig(homeScreenConfig) {\n    return {\n      type: UPDATE_HOME_SCREEN_CONFIG,\n      homeScreenConfig: homeScreenConfig\n    };\n  },\n  setViewState(viewState) {\n    return {\n      type: SET_VIEW_STATE,\n      viewState: viewState\n    };\n  },\n  setViewChanging(viewChanging) {\n    return {\n      type: SET_VIEW_CHANGING,\n      viewChanging: viewChanging\n    };\n  },\n  setInitialViewChangeComplete(changeComplete) {\n    return {\n      type: SET_INITIAL_VIEW_CHANGE_COMPLETE,\n      changeComplete: changeComplete\n    };\n  },\n  setMessageUIProperty(localMessageID, propertyName, propertyValue) {\n    return {\n      type: SET_MESSAGE_UI_PROPERTY,\n      localMessageID: localMessageID,\n      propertyName: propertyName,\n      propertyValue: propertyValue\n    };\n  },\n  setLauncherProperty(propertyName, propertyValue) {\n    return {\n      type: SET_LAUNCHER_PROPERTY,\n      propertyName: propertyName,\n      propertyValue: propertyValue\n    };\n  },\n  setLauncherConfigProperty(propertyName, propertyValue, launcherType) {\n    return {\n      type: SET_LAUNCHER_CONFIG_PROPERTY,\n      propertyName: propertyName,\n      propertyValue: propertyValue,\n      launcherType: launcherType\n    };\n  },\n  setMessageHistoryProperty(messageID, propertyName, propertyValue) {\n    return {\n      type: SET_MESSAGE_HISTORY_PROPERTY,\n      messageID: messageID,\n      propertyName: propertyName,\n      propertyValue: propertyValue\n    };\n  },\n  mergeMessageHistory(messageID, history) {\n    return {\n      type: MERGE_HISTORY,\n      messageID: messageID,\n      history: history\n    };\n  },\n  setMessageErrorState(messageID, errorState) {\n    return actions.setMessageHistoryProperty(messageID, \"error_state\", errorState);\n  },\n  setMessageWasAnnounced(messageID) {\n    return actions.setMessageUIProperty(messageID, \"needsAnnouncement\", false);\n  },\n  announceMessage(message) {\n    return {\n      type: ANNOUNCE_MESSAGE,\n      message: message\n    };\n  },\n  setChatMessagesStateProperty(propertyName, propertyValue) {\n    return {\n      type: SET_CHAT_MESSAGES_PROPERTY,\n      propertyName: propertyName,\n      propertyValue: propertyValue\n    };\n  },\n  addNotification(notification) {\n    const notificationID = uuid();\n    return {\n      type: ADD_NOTIFICATION,\n      notificationID: notificationID,\n      notification: notification\n    };\n  },\n  removeNotifications({groupID: groupID, notificationID: notificationID}) {\n    return {\n      type: REMOVE_NOTIFICATIONS,\n      groupID: groupID,\n      notificationID: notificationID\n    };\n  },\n  removeAllNotifications() {\n    return {\n      type: REMOVE_ALL_NOTIFICATIONS\n    };\n  },\n  acceptDisclaimer() {\n    return {\n      type: ACCEPTED_DISCLAIMER\n    };\n  },\n  setHomeScreenIsOpen(isOpen) {\n    return {\n      type: SET_HOME_SCREEN_IS_OPEN,\n      isOpen: isOpen\n    };\n  },\n  updateLauncherConfig(launcherConfig) {\n    return {\n      type: UPDATE_LAUNCHER_CONFIG,\n      launcherConfig: launcherConfig\n    };\n  },\n  setLauncherMinimized() {\n    return {\n      type: SET_LAUNCHER_MINIMIZED\n    };\n  },\n  closeIFramePanel() {\n    return {\n      type: CLOSE_IFRAME_PANEL\n    };\n  },\n  setIFrameContent(messageItem) {\n    return {\n      type: OPEN_IFRAME_CONTENT,\n      messageItem: messageItem\n    };\n  },\n  setViewSourcePanelIsOpen(isOpen, citationItem, relatedSearchResult) {\n    return {\n      type: SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN,\n      isOpen: isOpen,\n      citationItem: citationItem,\n      relatedSearchResult: relatedSearchResult\n    };\n  },\n  setCustomPanelConfigOptions(options) {\n    return {\n      type: SET_CUSTOM_PANEL_OPTIONS,\n      options: options\n    };\n  },\n  setCustomPanelOpen(isOpen) {\n    return {\n      type: SET_CUSTOM_PANEL_OPEN,\n      isOpen: isOpen\n    };\n  },\n  toggleHomeScreen() {\n    return {\n      type: TOGGLE_HOME_SCREEN\n    };\n  },\n  updateInputState(newState, isInputToAgent) {\n    return {\n      type: UPDATE_INPUT_STATE,\n      newState: newState,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  setIsBrowserPageVisible(isVisible) {\n    return {\n      type: SET_IS_BROWSER_PAGE_VISIBLE,\n      isVisible: isVisible\n    };\n  },\n  addInputFile(file, isInputToAgent) {\n    return {\n      type: ADD_INPUT_FILE,\n      file: file,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  removeFileUpload(fileID, isInputToAgent) {\n    return {\n      type: REMOVE_INPUT_FILE,\n      fileID: fileID,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  removeLocalMessageItem(localMessageItemID) {\n    return {\n      type: REMOVE_LOCAL_MESSAGE_ITEM,\n      localMessageItemID: localMessageItemID\n    };\n  },\n  fileUploadInputError(fileID, errorMessage, isInputToAgent) {\n    return {\n      type: FILE_UPLOAD_INPUT_ERROR,\n      fileID: fileID,\n      errorMessage: errorMessage,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  clearInputFiles(isInputToAgent) {\n    return {\n      type: CLEAR_INPUT_FILES,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  addNestedMessages(localMessageItems) {\n    return {\n      type: ADD_NESTED_MESSAGES,\n      localMessageItems: localMessageItems\n    };\n  },\n  setResponsePanelIsOpen(isOpen) {\n    return {\n      type: SET_RESPONSE_PANEL_IS_OPEN,\n      isOpen: isOpen\n    };\n  },\n  setResponsePanelContent(localMessageItem, isMessageForInput = false) {\n    return {\n      type: SET_RESPONSE_PANEL_CONTENT,\n      localMessageItem: localMessageItem,\n      isMessageForInput: isMessageForInput\n    };\n  },\n  streamingStart(messageID) {\n    return {\n      type: STREAMING_START,\n      messageID: messageID\n    };\n  },\n  streamingMergeHistory(messageID, history) {\n    return {\n      type: STREAMING_MERGE_HISTORY,\n      messageID: messageID,\n      history: history\n    };\n  },\n  streamingAddChunk(fullMessageID, chunkItem, isCompleteItem, disableFadeAnimation) {\n    return {\n      type: STREAMING_ADD_CHUNK,\n      fullMessageID: fullMessageID,\n      chunkItem: chunkItem,\n      isCompleteItem: isCompleteItem,\n      disableFadeAnimation: disableFadeAnimation\n    };\n  },\n  updateChatHeaderConfig(chatHeaderConfig) {\n    return {\n      type: UPDATE_CHAT_HEADER_CONFIG,\n      chatHeaderConfig: chatHeaderConfig\n    };\n  },\n  setMaxVisibleHeaderObjects(maxTotal) {\n    return {\n      type: UPDATE_MAX_VISIBLE_HEADER_OBJECTS,\n      maxTotal: maxTotal\n    };\n  },\n  setStopStreamingButtonVisible(isVisible) {\n    return {\n      type: SET_STOP_STREAMING_BUTTON_VISIBLE,\n      isVisible: isVisible\n    };\n  },\n  setStopStreamingButtonDisabled(isDisabled) {\n    return {\n      type: SET_STOP_STREAMING_BUTTON_DISABLED,\n      isDisabled: isDisabled\n    };\n  },\n  setStreamID(currentStreamID) {\n    return {\n      type: SET_STREAM_ID,\n      currentStreamID: currentStreamID\n    };\n  },\n  updateMainHeaderAvatar(config) {\n    return {\n      type: UPDATE_MAIN_HEADER_AVATAR,\n      config: config\n    };\n  }\n};\n\nexport { UPDATE_PERSISTED_CHAT_STATE as $, ADD_NESTED_MESSAGES as A, SET_LAUNCHER_CONFIG_PROPERTY as B, CLEAR_INPUT_FILES as C, SET_LAUNCHER_PROPERTY as D, UPDATE_LAUNCHER_CONFIG as E, FILE_UPLOAD_INPUT_ERROR as F, SET_HOME_SCREEN_IS_OPEN as G, ACCEPTED_DISCLAIMER as H, ANNOUNCE_MESSAGE as I, SET_MESSAGE_HISTORY_PROPERTY as J, SET_MESSAGE_UI_PROPERTY as K, UPDATE_HOME_SCREEN_CONFIG as L, MERGE_HISTORY as M, UPDATE_CSS_VARIABLES as N, OPEN_IFRAME_CONTENT as O, UPDATE_MAIN_HEADER_TITLE as P, UPDATE_LAUNCHER_AVATAR_URL as Q, REMOVE_ALL_NOTIFICATIONS as R, SET_STREAM_ID as S, TOGGLE_HOME_SCREEN as T, UPDATE_MAIN_HEADER_AVATAR as U, UPDATE_BOT_AVATAR_URL as V, UPDATE_BOT_NAME as W, SET_INITIAL_VIEW_CHANGE_COMPLETE as X, SET_VIEW_CHANGING as Y, SET_VIEW_STATE as Z, UPDATE_HAS_SENT_NON_WELCOME_MESSAGE as _, actions as a, SET_APP_STATE_VALUE as a0, ADD_IS_HYDRATING_COUNTER as a1, ADD_IS_LOADING_COUNTER as a2, ADD_IS_TYPING_COUNTER as a3, MESSAGE_SET_OPTION_SELECTED as a4, ADD_MESSAGE as a5, UPDATE_MESSAGE as a6, UPDATE_LOCAL_MESSAGE_ITEM as a7, REMOVE_MESSAGES as a8, ADD_LOCAL_MESSAGE_ITEM as a9, HYDRATE_MESSAGE_HISTORY as aa, RESTART_CONVERSATION as ab, HYDRATE_CHAT as ac, CHANGE_STATE as ad, SET_STOP_STREAMING_BUTTON_DISABLED as b, SET_STOP_STREAMING_BUTTON_VISIBLE as c, UPDATE_MAX_VISIBLE_HEADER_OBJECTS as d, UPDATE_CHAT_HEADER_CONFIG as e, STREAMING_ADD_CHUNK as f, STREAMING_MERGE_HISTORY as g, STREAMING_START as h, SET_RESPONSE_PANEL_CONTENT as i, SET_RESPONSE_PANEL_IS_OPEN as j, REMOVE_NOTIFICATIONS as k, ADD_NOTIFICATION as l, REMOVE_LOCAL_MESSAGE_ITEM as m, REMOVE_INPUT_FILE as n, ADD_INPUT_FILE as o, SET_IS_BROWSER_PAGE_VISIBLE as p, UPDATE_INPUT_STATE as q, CHANGE_STEP_IN_TOUR as r, CLEAR_TOUR_DATA as s, SET_TOUR_DATA as t, SET_CUSTOM_PANEL_OPTIONS as u, SET_CUSTOM_PANEL_OPEN as v, SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN as w, CLOSE_IFRAME_PANEL as x, SET_LAUNCHER_MINIMIZED as y, SET_CHAT_MESSAGES_PROPERTY as z };\n","import cloneDeep from \"lodash-es/cloneDeep.js\";\n\nimport merge from \"lodash-es/merge.js\";\n\nimport { d as deepFreeze, o as outputItemToLocalItem, u as updateFilesUploadInProgress, t as setIsConnecting, v as endChat, i as inputItemToLocalItem, b as createLocalMessageForInlineError, w as setIsScreenSharing, x as setIsReconnecting, y as setShowScreenShareRequest, z as updateCapabilities, A as setAgentAvailability, B as setAgentJoined, C as agentUpdateIsTyping, D as setAgentLeftChat, r as resolvablePromise, E as setPersistedServiceDeskState } from \"./chat.resolvablePromise.js\";\n\nimport { a as actions } from \"./chat.actions.js\";\n\nimport { E as ErrorType, S as ScreenShareState, M as MessageErrorState, A as AgentsOnlineStatus } from \"./chat.LocalMessageItem.js\";\n\nimport \"./chat.constants.js\";\n\nimport { e as debugLog, b as consoleError, r as resolveOrTimeout } from \"./chat.miscUtils.js\";\n\nimport { q as asyncForEach, I as createMessageResponseForItem, j as createMessageRequestForText, J as createMessageRequestForFileUpload, l as createMessageResponseForText, k as addDefaultsToMessage } from \"./chat.messageUtils.js\";\n\nimport { B as BusEventType } from \"./chat.customElement.js\";\n\nimport { e as conditionalSetTimeout } from \"./chat.browserUtils.js\";\n\nimport { A as AgentMessageType, b as MessageResponseTypes } from \"./chat.Messages.js\";\n\nimport { F as FileStatusValue } from \"./chat.dynamic-imports.js\";\n\nimport \"./chat.uuid.js\";\n\nimport \"uuid\";\n\nimport \"detect-browser\";\n\nimport \"memoize-one\";\n\nimport \"react\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function getAgentStatusMessageText(agentMessageType, agentProfile, intl) {\n  const name = agentProfile?.nickname;\n  let messageKey;\n  switch (agentMessageType) {\n   case AgentMessageType.AGENT_JOINED:\n    {\n      messageKey = name ? \"agent_agentJoinedName\" : \"agent_agentJoinedNoName\";\n      break;\n    }\n\n   case AgentMessageType.RELOAD_WARNING:\n    {\n      messageKey = \"agent_youConnectedWarning\";\n      break;\n    }\n\n   case AgentMessageType.AGENT_LEFT_CHAT:\n    {\n      messageKey = name ? \"agent_agentLeftChat\" : \"agent_agentLeftChatNoName\";\n      break;\n    }\n\n   case AgentMessageType.AGENT_ENDED_CHAT:\n    {\n      messageKey = name ? \"agent_agentEndedChat\" : \"agent_agentEndedChatNoName\";\n      break;\n    }\n\n   case AgentMessageType.TRANSFER_TO_AGENT:\n    {\n      messageKey = name ? \"agent_transferring\" : \"agent_transferringNoName\";\n      break;\n    }\n\n   case AgentMessageType.USER_ENDED_CHAT:\n    {\n      messageKey = \"agent_youEndedChat\";\n      break;\n    }\n\n   case AgentMessageType.CHAT_WAS_ENDED:\n    {\n      messageKey = \"agent_conversationWasEnded\";\n      break;\n    }\n\n   case AgentMessageType.DISCONNECTED:\n    {\n      messageKey = \"agent_disconnected\";\n      break;\n    }\n\n   case AgentMessageType.RECONNECTED:\n    {\n      messageKey = \"agent_reconnected\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_REQUESTED:\n    {\n      messageKey = \"agent_sharingRequested\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_ACCEPTED:\n    {\n      messageKey = \"agent_sharingAccepted\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_DECLINED:\n    {\n      messageKey = \"agent_sharingDeclined\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_CANCELLED:\n    {\n      messageKey = \"agent_sharingCancelled\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_ENDED:\n    {\n      messageKey = \"agent_sharingEnded\";\n      break;\n    }\n\n   default:\n    return \"\";\n  }\n  return messageKey && intl.formatMessage({\n    id: messageKey\n  }, {\n    personName: name\n  });\n}\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function toPair(localMessages, originalMessage) {\n  return {\n    localMessages: localMessages,\n    originalMessage: originalMessage\n  };\n}\n\nasync function createAgentLocalMessage(agentMessageType, serviceManager, agentProfile, fireEvents = true) {\n  const text = getAgentStatusMessageText(agentMessageType, agentProfile, serviceManager.intl);\n  const result = createAgentLocalMessageForType(agentMessageType);\n  const {originalMessage: originalMessage, localMessage: localMessage} = result;\n  localMessage.item.text = text;\n  if (agentProfile) {\n    if (!originalMessage.history) {\n      originalMessage.history = {};\n    }\n    originalMessage.history.agent_profile = agentProfile;\n  }\n  if (fireEvents) {\n    await serviceManager.fire({\n      type: BusEventType.AGENT_PRE_RECEIVE,\n      data: originalMessage\n    });\n  }\n  deepFreeze(originalMessage);\n  if (fireEvents) {\n    await serviceManager.fire({\n      type: BusEventType.AGENT_RECEIVE,\n      data: originalMessage\n    });\n  }\n  return result;\n}\n\nfunction createAgentLocalMessageForType(agentMessageType) {\n  const messageItem = {\n    response_type: MessageResponseTypes.TEXT,\n    agent_message_type: agentMessageType\n  };\n  const originalMessage = createMessageResponseForItem(messageItem);\n  const localMessage = outputItemToLocalItem(messageItem, originalMessage);\n  return {\n    localMessage: localMessage,\n    originalMessage: originalMessage\n  };\n}\n\nfunction createBotReturnMessage(languagePack) {\n  const {agent_botReturned: agent_botReturned} = languagePack;\n  if (!agent_botReturned) {\n    return null;\n  }\n  const {originalMessage: originalMessage, localMessage: localMessage} = createAgentLocalMessageForType(null);\n  localMessage.item.text = agent_botReturned;\n  return {\n    originalMessage: originalMessage,\n    localMessage: localMessage\n  };\n}\n\nasync function addMessages(messagePairs, saveInHistory, fireHistoryEvent, showLiveMessages, serviceManager) {\n  if (showLiveMessages) {\n    await asyncForEach(messagePairs, async ({localMessages: localMessages, originalMessage: originalMessage}) => {\n      await asyncForEach(localMessages, async (localMessage, index) => {\n        await serviceManager.actions.handleUserDefinedResponseItems(localMessage, originalMessage);\n        serviceManager.store.dispatch(actions.addLocalMessageItem(localMessage, originalMessage, index === 0));\n      });\n    });\n  }\n}\n\nasync function addBotReturnMessage(botReturnDelay, wasSuspended, serviceManager) {\n  const botReturn = createBotReturnMessage(serviceManager.store.getState().languagePack);\n  if (botReturn) {\n    const initialRestartCount = serviceManager.restartCount;\n    conditionalSetTimeout(() => {\n      if (initialRestartCount === serviceManager.restartCount) {\n        addMessages([ toPair([ botReturn.localMessage ], botReturn.originalMessage) ], true, false, !wasSuspended, serviceManager);\n      }\n    }, botReturnDelay);\n  }\n}\n\nasync function addAgentEndChatMessage(agentMessageType, agentProfile, fireEvents, wasSuspended, serviceManager) {\n  const endChatMessage = await createAgentLocalMessage(agentMessageType, serviceManager, agentProfile, fireEvents);\n  await addMessages([ toPair([ endChatMessage.localMessage ], endChatMessage.originalMessage) ], true, false, !wasSuspended, serviceManager);\n}\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const SEND_TIMEOUT_WARNING_MS = 3e3;\n\nconst SEND_TIMEOUT_ERROR_MS = 2e4;\n\nconst END_CHAT_TIMEOUT_MS = 5e3;\n\nconst AVAILABILITY_TIMEOUT_MS = 5e3;\n\nconst BOT_RETURN_DELAY = 1500;\n\nconst {FROM_USER: FROM_USER, RECONNECTED: RECONNECTED, DISCONNECTED: DISCONNECTED, AGENT_ENDED_CHAT: AGENT_ENDED_CHAT, AGENT_JOINED: AGENT_JOINED, USER_ENDED_CHAT: USER_ENDED_CHAT, CHAT_WAS_ENDED: CHAT_WAS_ENDED, TRANSFER_TO_AGENT: TRANSFER_TO_AGENT, AGENT_LEFT_CHAT: AGENT_LEFT_CHAT, RELOAD_WARNING: RELOAD_WARNING, SHARING_CANCELLED: SHARING_CANCELLED, SHARING_DECLINED: SHARING_DECLINED, SHARING_ACCEPTED: SHARING_ACCEPTED, SHARING_REQUESTED: SHARING_REQUESTED, SHARING_ENDED: SHARING_ENDED} = AgentMessageType;\n\nclass HumanAgentServiceImpl {\n  constructor(serviceManager) {\n    this.chatStarted = false;\n    this.showingDisconnectedError = false;\n    this.isAgentTyping = false;\n    this.uploadingFiles = new Set;\n    this.showLeaveWarning = true;\n    this.serviceManager = serviceManager;\n  }\n  getCustomServiceDeskName() {\n    return this.serviceManager.store.getState().config.public.serviceDeskFactory ? this.serviceDesk.getName?.() : undefined;\n  }\n  async initialize() {\n    if (this.serviceDesk) {\n      throw new Error(\"A service desk has already been created!\");\n    }\n    const {store: store, instance: instance} = this.serviceManager;\n    const state = store.getState();\n    const {config: config, persistedToBrowserStorage: persistedToBrowserStorage} = state;\n    const serviceDeskState = cloneDeep(persistedToBrowserStorage.chatState.agentState.serviceDeskState);\n    this.serviceDeskCallback = new ServiceDeskCallbackImpl(this.serviceManager, this);\n    if (config.public.serviceDeskFactory) {\n      const parameters = {\n        callback: this.serviceDeskCallback,\n        instance: instance,\n        persistedState: serviceDeskState\n      };\n      this.serviceDesk = await config.public.serviceDeskFactory(parameters);\n      validateCustomServiceDesk(this.serviceDesk);\n      debugLog(\"Initializing a custom service desk\");\n    }\n    this.showLeaveWarning = !this.serviceDesk?.reconnect;\n  }\n  async startChat(localConnectMessage, originalMessage) {\n    if (!this.serviceDesk) {\n      throw new Error(\"A service desk has not been configured.\");\n    }\n    if (this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState.isSuspended) {\n      await this.endChat(true, true, false);\n    }\n    if (this.chatStarted) {\n      throw new Error(\"A chat is already running. A call to endChat must be made before a new chat can start.\");\n    }\n    const {serviceManager: serviceManager} = this;\n    try {\n      this.chatStarted = true;\n      this.isAgentTyping = false;\n      this.uploadingFiles.clear();\n      this.serviceManager.store.dispatch(updateFilesUploadInProgress(this.uploadingFiles.size > 0));\n      const event = {\n        type: BusEventType.AGENT_PRE_START_CHAT,\n        message: originalMessage\n      };\n      await serviceManager.fire(event);\n      if (event.cancelStartChat) {\n        this.chatStarted = false;\n        await this.fireEndChat(false, true);\n        serviceManager.store.dispatch(setIsConnecting(false, null));\n        return;\n      }\n      const agentJoinTimeout = serviceManager.store.getState().config.public.serviceDesk?.agentJoinTimeoutSeconds;\n      if (agentJoinTimeout) {\n        this.waitingForAgentJoinedTimer = setTimeout(() => this.handleAgentJoinedTimeout(), agentJoinTimeout * 1e3);\n      }\n      serviceManager.store.dispatch(setIsConnecting(true, localConnectMessage.ui_state.id));\n      await this.serviceDesk.startChat(originalMessage, {\n        preStartChatPayload: event.preStartChatPayload\n      });\n    } catch (error) {\n      consoleError(\"[startChat] An error with the service desk occurred.\", error);\n      if (this.serviceDeskCallback) {\n        await this.serviceDeskCallback.setErrorStatus({\n          type: ErrorType.CONNECTING,\n          logInfo: error\n        });\n      }\n      serviceManager.store.dispatch(setIsConnecting(false, null));\n      this.chatStarted = false;\n      this.cancelAgentJoinedTimer();\n      throw error;\n    }\n  }\n  async firePreEndChat(endedByAgent) {\n    const event = {\n      type: BusEventType.AGENT_PRE_END_CHAT,\n      endedByAgent: endedByAgent,\n      preEndChatPayload: null,\n      cancelEndChat: false\n    };\n    await this.serviceManager.fire(event);\n    return event;\n  }\n  async fireEndChat(endedByAgent, requestCancelled) {\n    await this.serviceManager.fire({\n      type: BusEventType.AGENT_END_CHAT,\n      endedByAgent: endedByAgent,\n      requestCancelled: requestCancelled\n    });\n  }\n  async endChat(endedByUser, showAgentLeftMessage = true, showBotReturnMessage = true) {\n    if (!this.chatStarted || !this.serviceDesk) {\n      return;\n    }\n    const {isConnected: isConnected} = this.persistedAgentState();\n    let event;\n    if (isConnected) {\n      event = await this.firePreEndChat(false);\n      if (event.cancelEndChat) {\n        return;\n      }\n    }\n    const endMessageType = endedByUser ? USER_ENDED_CHAT : CHAT_WAS_ENDED;\n    await this.doEndChat(false, event?.preEndChatPayload, showAgentLeftMessage, showBotReturnMessage, endMessageType);\n  }\n  async doEndChat(endedByAgent, preEndChatPayload, showAgentLeftMessage, showBotReturnMessage, agentEndChatMessageType) {\n    const {isConnected: isConnected} = this.persistedAgentState();\n    const wasSuspended = this.isSuspended();\n    this.cancelAgentJoinedTimer();\n    this.closeScreenShareRequestModal(ScreenShareState.CANCELLED);\n    try {\n      await resolveOrTimeout(this.serviceDesk.endChat({\n        endedByAgent: endedByAgent,\n        preEndChatPayload: preEndChatPayload\n      }), END_CHAT_TIMEOUT_MS);\n    } catch (error) {\n      consoleError(\"[doEndChat] An error with the service desk occurred.\", error);\n    }\n    if (isConnected && showAgentLeftMessage) {\n      const {agentProfile: agentProfile} = this.persistedAgentState();\n      await addAgentEndChatMessage(agentEndChatMessageType, agentProfile, true, wasSuspended, this.serviceManager);\n    }\n    this.chatStarted = false;\n    this.isAgentTyping = false;\n    this.serviceManager.store.dispatch(endChat());\n    await this.fireEndChat(endedByAgent, !isConnected);\n    if (isConnected && showBotReturnMessage) {\n      await addBotReturnMessage(BOT_RETURN_DELAY, wasSuspended, this.serviceManager);\n    }\n  }\n  async sendMessageToAgent(text, uploads) {\n    if (!this.serviceDesk || !this.chatStarted) {\n      return;\n    }\n    const {serviceManager: serviceManager} = this;\n    deepFreeze(uploads);\n    const originalMessage = createMessageRequestForText(text);\n    originalMessage.input.agent_message_type = FROM_USER;\n    await serviceManager.fire({\n      type: BusEventType.AGENT_PRE_SEND,\n      data: originalMessage,\n      files: uploads\n    });\n    const textMessage = inputItemToLocalItem(originalMessage, originalMessage.input.text);\n    const localMessageID = textMessage.ui_state.id;\n    const pairs = [];\n    if (textMessage.item.text) {\n      pairs.push(toPair([ textMessage ], originalMessage));\n    }\n    uploads.forEach(upload => {\n      const uploadOriginalMessage = createMessageRequestForFileUpload(upload);\n      const uploadLocalMessage = inputItemToLocalItem(uploadOriginalMessage, uploadOriginalMessage.input.text, upload.id);\n      pairs.push(toPair([ uploadLocalMessage ], uploadOriginalMessage));\n      this.uploadingFiles.add(upload.id);\n    });\n    this.serviceManager.store.dispatch(updateFilesUploadInProgress(this.uploadingFiles.size > 0));\n    await addMessages(pairs, true, true, !this.isSuspended(), serviceManager);\n    let messageSucceeded = false;\n    let messageFailed = false;\n    setTimeout(() => {\n      if (!messageSucceeded && !messageFailed) {\n        this.setMessageErrorState(textMessage.fullMessageID, MessageErrorState.RETRYING);\n      }\n    }, SEND_TIMEOUT_WARNING_MS);\n    setTimeout(() => {\n      if (!messageSucceeded) {\n        this.setMessageErrorState(textMessage.fullMessageID, MessageErrorState.FAILED);\n      }\n    }, SEND_TIMEOUT_ERROR_MS);\n    const additionalData = {\n      filesToUpload: uploads\n    };\n    try {\n      await this.serviceDesk.sendMessageToAgent(originalMessage, localMessageID, additionalData);\n      messageSucceeded = true;\n      this.setMessageErrorState(textMessage.fullMessageID, MessageErrorState.NONE);\n      await serviceManager.fire({\n        type: BusEventType.AGENT_SEND,\n        data: originalMessage,\n        files: uploads\n      });\n    } catch (error) {\n      messageFailed = true;\n      consoleError(\"[sendMessageToAgent] An error with the service desk occurred.\", error);\n      this.setMessageErrorState(textMessage.fullMessageID, MessageErrorState.FAILED);\n    }\n  }\n  filesSelectedForUpload(uploads) {\n    if (!this.serviceDesk || !this.chatStarted) {\n      return;\n    }\n    try {\n      this.serviceDesk.filesSelectedForUpload?.(uploads);\n    } catch (error) {\n      consoleError(\"[userReadMessages] An error with the service desk occurred.\", error);\n    }\n  }\n  async userReadMessages() {\n    if (!this.serviceDesk || !this.chatStarted) {\n      return;\n    }\n    try {\n      await this.serviceDesk.userReadMessages();\n    } catch (error) {\n      consoleError(\"[userReadMessages] An error with the service desk occurred.\", error);\n    }\n  }\n  async checkAreAnyAgentsOnline(connectMessage) {\n    let resultValue;\n    const initialRestartCount = this.serviceManager.restartCount;\n    if (!this.serviceDesk?.areAnyAgentsOnline) {\n      resultValue = AgentsOnlineStatus.UNKNOWN;\n    } else {\n      try {\n        const timeoutSeconds = this.serviceManager.store.getState().config.public.serviceDesk?.availabilityTimeoutSeconds;\n        const timeout = timeoutSeconds ? timeoutSeconds * 1e3 : AVAILABILITY_TIMEOUT_MS;\n        const result = await resolveOrTimeout(this.serviceDesk.areAnyAgentsOnline(connectMessage), timeout);\n        if (result === true) {\n          resultValue = AgentsOnlineStatus.ONLINE;\n        } else if (result === false) {\n          resultValue = AgentsOnlineStatus.OFFLINE;\n        } else {\n          resultValue = AgentsOnlineStatus.UNKNOWN;\n        }\n      } catch (error) {\n        consoleError(\"Error attempting to get agent availability\", error);\n        resultValue = AgentsOnlineStatus.OFFLINE;\n      }\n    }\n    if (initialRestartCount === this.serviceManager.restartCount) {\n      this.serviceManager.fire({\n        type: BusEventType.AGENT_ARE_ANY_AGENTS_ONLINE,\n        areAnyAgentsOnline: resultValue\n      });\n    }\n    return resultValue;\n  }\n  async userTyping(isTyping) {\n    if (!this.serviceDesk || !this.chatStarted) {\n      return;\n    }\n    try {\n      await (this.serviceDesk.userTyping?.(isTyping));\n    } catch (error) {\n      consoleError(\"[userTyping] An error with the service desk occurred.\", error);\n    }\n  }\n  setMessageErrorState(messageID, errorState) {\n    this.serviceManager.store.dispatch(actions.setMessageErrorState(messageID, errorState));\n  }\n  async handleAgentJoinedTimeout() {\n    const message = this.serviceManager.store.getState().languagePack.errors_noAgentsJoined;\n    const {originalMessage: originalMessage, localMessage: localMessage} = createLocalMessageForInlineError(message);\n    await addMessages([ toPair([ localMessage ], originalMessage) ], true, false, !this.isSuspended(), this.serviceManager);\n    this.endChat(false);\n  }\n  cancelAgentJoinedTimer() {\n    if (this.waitingForAgentJoinedTimer) {\n      clearTimeout(this.waitingForAgentJoinedTimer);\n      this.waitingForAgentJoinedTimer = null;\n    }\n  }\n  async screenShareUpdateRequestState(state) {\n    if (!this.persistedAgentState().isConnected) {\n      return;\n    }\n    this.closeScreenShareRequestModal(state);\n    let agentMessageType;\n    switch (state) {\n     case ScreenShareState.ACCEPTED:\n      agentMessageType = SHARING_ACCEPTED;\n      break;\n\n     case ScreenShareState.DECLINED:\n      agentMessageType = SHARING_DECLINED;\n      break;\n\n     case ScreenShareState.CANCELLED:\n      agentMessageType = SHARING_CANCELLED;\n      break;\n\n     case ScreenShareState.ENDED:\n      agentMessageType = SHARING_ENDED;\n      break;\n\n     default:\n      return;\n    }\n    await this.addAgentLocalMessage(agentMessageType);\n  }\n  async screenShareStop() {\n    this.serviceManager.store.dispatch(setIsScreenSharing(false));\n    await this.addAgentLocalMessage(SHARING_ENDED);\n    await (this.serviceDesk?.screenShareStop?.());\n  }\n  async handleHydration(allowReconnect, allowEndChatMessages) {\n    const {store: store} = this.serviceManager;\n    let didReconnect = false;\n    const {isConnected: isConnected} = this.persistedAgentState();\n    if (isConnected) {\n      this.chatStarted = true;\n      if (allowReconnect && this.serviceDesk?.reconnect) {\n        try {\n          store.dispatch(setIsReconnecting(true));\n          setTimeout(this.serviceManager.appWindow.requestFocus);\n          didReconnect = await this.serviceDesk.reconnect();\n        } catch (error) {\n          consoleError(`Error while trying to reconnect to an agent.`, error);\n        }\n      }\n      store.dispatch(setIsReconnecting(false));\n      if (!this.persistedAgentState().isConnected) {\n        this.chatStarted = false;\n        return;\n      }\n      setTimeout(this.serviceManager.appWindow.requestFocus);\n      if (!didReconnect) {\n        this.chatStarted = false;\n        const wasSuspended = this.isSuspended();\n        store.dispatch(endChat());\n        if (allowEndChatMessages) {\n          const {agentProfile: agentProfile} = this.persistedAgentState();\n          await addAgentEndChatMessage(AgentMessageType.CHAT_WAS_ENDED, agentProfile, false, wasSuspended, this.serviceManager);\n          await addBotReturnMessage(0, wasSuspended, this.serviceManager);\n        }\n      } else {\n        this.showLeaveWarning = false;\n      }\n    }\n  }\n  closeScreenShareRequestModal(state) {\n    this.serviceManager.store.dispatch(setShowScreenShareRequest(false));\n    if (this.screenShareRequestPromise) {\n      this.screenShareRequestPromise.doResolve(state);\n      this.screenShareRequestPromise = null;\n    }\n    this.serviceManager.store.dispatch(setIsScreenSharing(state === ScreenShareState.ACCEPTED));\n  }\n  async addAgentLocalMessage(agentMessageType, agentProfile, fireEvents = true, saveInHistory = true) {\n    if (!agentProfile) {\n      agentProfile = this.persistedAgentState().agentProfile;\n    }\n    const {localMessage: localMessage, originalMessage: originalMessage} = await createAgentLocalMessage(agentMessageType, this.serviceManager, agentProfile, fireEvents);\n    await addMessages([ toPair([ localMessage ], originalMessage) ], saveInHistory, false, !this.isSuspended(), this.serviceManager);\n  }\n  persistedAgentState() {\n    return this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState;\n  }\n  isSuspended() {\n    return this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState.isSuspended;\n  }\n}\n\nclass ServiceDeskCallbackImpl {\n  constructor(serviceManager, service) {\n    this.serviceManager = serviceManager;\n    this.service = service;\n  }\n  updateCapabilities(capabilities) {\n    this.serviceManager.store.dispatch(updateCapabilities(cloneDeep(capabilities)));\n  }\n  async updateAgentAvailability(availability) {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    this.serviceManager.store.dispatch(setAgentAvailability(availability));\n  }\n  async agentJoined(profile) {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    this.service.cancelAgentJoinedTimer();\n    this.serviceManager.store.dispatch(setAgentJoined(profile));\n    await this.service.addAgentLocalMessage(AGENT_JOINED, profile);\n    if (this.service.showLeaveWarning) {\n      await this.service.addAgentLocalMessage(RELOAD_WARNING, null, false, false);\n      this.service.showLeaveWarning = false;\n    }\n  }\n  async agentReadMessages() {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    debugLog(\"[ServiceDeskCallbackImpl] agentReadMessages\");\n  }\n  async agentTyping(isTyping) {\n    if (this.persistedAgentState().isConnected && isTyping !== this.service.isAgentTyping) {\n      this.serviceManager.store.dispatch(agentUpdateIsTyping(isTyping));\n      this.service.isAgentTyping = isTyping;\n    }\n  }\n  async sendMessageToUser(message, agentID) {\n    if (!this.service.chatStarted || !message) {\n      return;\n    }\n    const messageResponse = typeof message === \"string\" ? createMessageResponseForText(message) : message;\n    addDefaultsToMessage(messageResponse);\n    if (messageResponse.output?.generic?.length) {\n      messageResponse.output.generic.forEach(messageItem => {\n        if (!messageItem.agent_message_type) {\n          messageItem.agent_message_type = AgentMessageType.FROM_AGENT;\n        }\n      });\n    }\n    const {serviceManager: serviceManager} = this;\n    let agentProfile;\n    if (agentID === undefined) {\n      agentProfile = this.persistedAgentState().agentProfile;\n    } else {\n      agentProfile = this.persistedAgentState().agentProfiles[agentID];\n      if (!agentProfile) {\n        agentProfile = this.persistedAgentState().agentProfile;\n        if (agentProfile) {\n          consoleError(`Got agent ID ${agentID} but no agent with that ID joined the conversation. Using the current agent instead.`);\n        }\n      }\n    }\n    await serviceManager.fire({\n      type: BusEventType.AGENT_PRE_RECEIVE,\n      data: messageResponse,\n      agentProfile: agentProfile\n    });\n    messageResponse.history.agent_profile = agentProfile;\n    const localMessages = messageResponse.output.generic.map(item => outputItemToLocalItem(item, messageResponse));\n    await addMessages([ toPair(localMessages, messageResponse) ], true, true, !this.service.isSuspended(), this.serviceManager);\n    await serviceManager.fire({\n      type: BusEventType.AGENT_RECEIVE,\n      data: messageResponse,\n      agentProfile: agentProfile\n    });\n  }\n  async beginTransferToAnotherAgent(profile) {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    if (profile) {\n      this.serviceManager.store.dispatch(setAgentJoined(profile));\n    }\n    await this.service.addAgentLocalMessage(TRANSFER_TO_AGENT, profile);\n  }\n  async agentLeftChat() {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    await this.service.addAgentLocalMessage(AGENT_LEFT_CHAT);\n    this.service.isAgentTyping = false;\n    this.serviceManager.store.dispatch(setAgentLeftChat());\n  }\n  async agentEndedChat() {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    const event = await this.service.firePreEndChat(true);\n    if (event.cancelEndChat) {\n      return;\n    }\n    await this.service.doEndChat(true, event.preEndChatPayload, true, true, AGENT_ENDED_CHAT);\n  }\n  async setErrorStatus(errorInfo) {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    const {type: type, logInfo: logInfo} = errorInfo;\n    const {store: store} = this.serviceManager;\n    const {isConnecting: isConnecting} = store.getState().agentState;\n    if (logInfo) {\n      consoleError(`An error occurred in the service desk (type=${type})`, logInfo);\n    }\n    if (isConnecting && errorInfo.type === ErrorType.DISCONNECTED && errorInfo.isDisconnected) {\n      errorInfo = {\n        type: ErrorType.CONNECTING\n      };\n    }\n    switch (errorInfo.type) {\n     case ErrorType.DISCONNECTED:\n      {\n        if (errorInfo.isDisconnected) {\n          this.service.showingDisconnectedError = true;\n          await this.service.addAgentLocalMessage(DISCONNECTED, null, true, false);\n          store.dispatch(actions.updateInputState({\n            isReadonly: true\n          }, true));\n        } else if (this.service.showingDisconnectedError) {\n          this.service.showingDisconnectedError = false;\n          await this.service.addAgentLocalMessage(RECONNECTED, null, true, false);\n          store.dispatch(actions.updateInputState({\n            isReadonly: false\n          }, true));\n        }\n        break;\n      }\n\n     case ErrorType.CONNECTING:\n      {\n        const {languagePack: languagePack} = this.serviceManager.store.getState();\n        const message = errorInfo.messageToUser || languagePack.errors_connectingToAgent;\n        const {originalMessage: originalMessage, localMessage: localMessage} = createLocalMessageForInlineError(message);\n        await addMessages([ toPair([ localMessage ], originalMessage) ], true, false, !this.service.isSuspended(), this.serviceManager);\n        this.serviceManager.store.dispatch(setIsConnecting(false, null));\n        this.service.chatStarted = false;\n        this.service.cancelAgentJoinedTimer();\n        await this.service.fireEndChat(false, isConnecting);\n        break;\n      }\n\n     case ErrorType.USER_MESSAGE:\n      {\n        this.service.setMessageErrorState(errorInfo.messageID, MessageErrorState.FAILED);\n        break;\n      }\n    }\n  }\n  async setFileUploadStatus(fileID, isError, errorMessage) {\n    const {store: store} = this.serviceManager;\n    const uploadMessage = store.getState().allMessagesByID[fileID];\n    if (uploadMessage) {\n      ({\n        history: {\n          file_upload_status: FileStatusValue.COMPLETE\n        }\n      });\n      if (isError) {\n        store.dispatch(actions.setMessageHistoryProperty(fileID, \"file_upload_status\", FileStatusValue.COMPLETE));\n        store.dispatch(actions.setMessageHistoryProperty(fileID, \"error_state\", MessageErrorState.FAILED));\n        MessageErrorState.FAILED;\n        if (errorMessage) {\n          const {originalMessage: originalMessage, localMessage: localMessage} = createLocalMessageForInlineError(errorMessage);\n          localMessage.item.agent_message_type = AgentMessageType.INLINE_ERROR;\n          await addMessages([ toPair([ localMessage ], originalMessage) ], true, true, !this.service.isSuspended(), this.serviceManager);\n        }\n      } else {\n        store.dispatch(actions.setMessageHistoryProperty(fileID, \"file_upload_status\", FileStatusValue.SUCCESS));\n        store.dispatch(actions.announceMessage({\n          messageID: \"fileSharing_ariaAnnounceSuccess\"\n        }));\n      }\n    } else if (isError) {\n      store.dispatch(actions.fileUploadInputError(fileID, errorMessage, true));\n    }\n    this.service.uploadingFiles.delete(fileID);\n    this.serviceManager.store.dispatch(updateFilesUploadInProgress(this.service.uploadingFiles.size > 0));\n  }\n  async screenShareRequest() {\n    if (!this.persistedAgentState().isConnected) {\n      return Promise.reject(new Error(\"Cannot request screen sharing if no chat is in progress.\"));\n    }\n    if (!this.service.screenShareRequestPromise) {\n      this.service.screenShareRequestPromise = resolvablePromise();\n      this.serviceManager.store.dispatch(setShowScreenShareRequest(true));\n      await this.service.addAgentLocalMessage(SHARING_REQUESTED);\n    }\n    return this.service.screenShareRequestPromise;\n  }\n  async screenShareEnded() {\n    const wasScreenSharing = this.serviceManager.store.getState().agentState.isScreenSharing;\n    const requestPending = this.service.screenShareRequestPromise;\n    this.service.closeScreenShareRequestModal(ScreenShareState.CANCELLED);\n    if (wasScreenSharing) {\n      this.serviceManager.store.dispatch(setIsScreenSharing(false));\n      await this.service.addAgentLocalMessage(SHARING_ENDED);\n    } else if (requestPending) {\n      await this.service.addAgentLocalMessage(SHARING_CANCELLED);\n    }\n  }\n  persistedAgentState() {\n    return this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState;\n  }\n  persistedState() {\n    return this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState.serviceDeskState;\n  }\n  updatePersistedState(state, mergeWithCurrent = true) {\n    const {store: store} = this.serviceManager;\n    let newState;\n    if (mergeWithCurrent) {\n      newState = merge({}, store.getState().persistedToBrowserStorage.chatState.agentState.serviceDeskState, state);\n    } else {\n      newState = cloneDeep(state);\n    }\n    store.dispatch(setPersistedServiceDeskState(deepFreeze(newState)));\n  }\n}\n\nfunction createService(serviceManager) {\n  return new HumanAgentServiceImpl(serviceManager);\n}\n\nfunction validateCustomServiceDesk(serviceDesk) {\n  if (!serviceDesk) {\n    consoleError(\"The custom service desk does not appear to be valid. No service desk was provided.\", serviceDesk);\n  } else if (typeof serviceDesk !== \"object\") {\n    consoleError(`The custom service desk does not appear to be valid. The type should be \"object\" but is \"${typeof serviceDesk}\"`, serviceDesk);\n  } else {\n    const propertyNames = [ \"startChat\", \"endChat\", \"sendMessageToAgent\" ];\n    propertyNames.forEach(propertyName => {\n      const value = serviceDesk[propertyName];\n      if (typeof value !== \"function\") {\n        consoleError(`The custom service desk does not appear to be valid. The type of property \"${propertyName}\"should be \"function\" but is \"${typeof value}\"`, value, serviceDesk);\n      }\n    });\n    const name = serviceDesk.getName?.();\n    if (!name) {\n      throw Error(\"The custom service desk does not have a name.\");\n    }\n    if (name && (typeof name !== \"string\" || name.length > 40)) {\n      throw new Error(`The custom service desk name \"${name}\" is not valid.`);\n    }\n  }\n}\n\nexport { HumanAgentServiceImpl, createService, createService as default, validateCustomServiceDesk };\n"],"names":["UUIDType","uuid","_type","v4","asArray","value","Array","isArray","async","asyncForEach","array","callbackFunction","index","length","findLast","predicate","startAt","lastIndex","findLastIndex","undefined","arrayLastValue","THREAD_ID_MAIN","isResponse","message","output","isDateResponseType","localMessage","item","response_type","MessageResponseTypes","DATE","addDefaultsToMessage","fullMessage","id","MESSAGE","thread_id","history","timestamp","Date","now","from_history","isRequest","input","isLiveAgentMessage","Boolean","agent_message_type","isEventRequest","message_type","MessageInputType","EVENT","isTextItem","text","isTyping","PAUSE","typing","isPause","isOptionItem","OPTION","options","createMessageRequestForChoice","choice","relatedResponseID","messageRequest","cloneDeep","label","related_message_id","createMessageRequestForButtonItemOption","buttonItem","createWelcomeRequest","silent","is_welcome_request","createMessageRequestForText","TEXT","createMessageRequestForFileUpload","upload","file","name","InternalMessageRequestType","FILE","AgentMessageType","FROM_USER","file_upload_status","FileStatusValue","UPLOADING","createMessageRequestForDate","inputString","userString","createMessageResponseForText","threadID","responseType","context","textItem","generic","createMessageResponseForItem","isConnectToAgent","response","CONNECT_TO_AGENT","isCardResponseType","CARD","isCarouselResponseType","CAROUSEL","isButtonResponseType","BUTTON","isShowPanelButtonType","button_type","ButtonItemType","SHOW_PANEL","isResponseWithNestedItems","hasBodyOrFooter","panel","items","isGridResponseType","body","footer","renderAsUserDefinedMessage","messageItem","IMAGE","IFRAME","VIDEO","AUDIO","CONVERSATIONAL_SEARCH","TABLE","INLINE_ERROR","GRID","renderAsTour","hasTourUserDefinedType","user_defined","user_defined_type","hasServiceDesk","config","public","serviceDeskFactory","isItemSupportedInResponseBody","USER_DEFINED","isSingleItemCarousel","getOptionType","preference","totalOptions","type","isStreamPartialItem","chunk","partial_item","isStreamCompleteItem","complete_item","isStreamFinalResponse","final_response","streamItemID","messageID","itemID","streaming_metadata","getMediaDimensions","dimensions","getLastBotResponseWithContext","state","keys","map","findLastWithMap","botMessageState","messageIDs","allMessagesByID","find","hasLiveAgentMessage","isClient","window","navigator","browser","detect","screenWidth","screenHeight","screen","width","height","IS_IOS","os","IS_MOBILE","IS_PHONE","IS_PHONE_IN_PORTRAIT_MODE","IS_SESSION_STORAGE","memoizeOne","sessionStorage","setItem","getItem","removeItem","getURLHostName","url","URL","hostname","conditionalSetTimeout","operation","timeout","setTimeout","inputItemToLocalItem","originalUserText","LOCAL_MESSAGE","ui_state","needsAnnouncement","fullMessageID","outputItemToLocalItem","isLatestWelcomeNode","disableFadeAnimation","isWelcomeResponse","createLocalMessageForInlineError","originalMessage","createLocalMessageForItem","createLocalMessageItemsForNestedMessageItems","localMessageItem","fromHistory","nestedLocalMessageItems","allowFooter","gridLocalMessageItemIDs","rows","row","cells","cell","cellLocalMessageItemIDs","createLocalMessageItemsForNestedType","nestedMessageItem","isSupportedMessageItemInBody","itemsLocalMessageItemIDs","bodyItems","bodyLocalMessageItemIDs","footerItems","footerLocalMessageItemIDs","rootMessageItem","isSupportedMessageItemInFooter","nestedMessageItemIDs","isSupported","forEach","nestedLocalMessageItem","push","consoleError","HA_SET_AGENT_AVAILABILITY","HA_SET_IS_CONNECTING","HA_SET_IS_RECONNECTING","HA_SET_AGENT_JOINED","HA_SET_AGENT_LEFT_CHAT","HA_END_CHAT","HA_UPDATE_CAPABILITIES","HA_UPDATE_FILE_UPLOAD_IN_PROGRESS","HA_SET_SHOW_SCREEN_SHARE_REQUEST","HA_SET_IS_SCREEN_SHARING","HA_SET_PERSISTED_STATE","HA_UPDATE_IS_SUSPENDED","HA_UPDATE_IS_TYPING","setIsConnecting","isConnecting","localMessageID","setIsReconnecting","isReconnecting","setAgentLeftChat","endChat","setAgentAvailability","availability","setAgentJoined","agentProfile","updateCapabilities","capabilities","updateFilesUploadInProgress","fileUploadInProgress","setShowScreenShareRequest","showRequest","setIsScreenSharing","isSharing","setPersistedServiceDeskState","agentUpdateIsSuspended","isSuspended","agentUpdateIsTyping","deepFreeze","object","Object","freeze","getOwnPropertyNames","prop","prototype","hasOwnProperty","call","isFrozen","resolvablePromise","resolveFunction","rejectFunction","promise","Promise","resolve","reject","doResolve","resolveValue","isResolved","isComplete","doReject","rejectValue","isRejected","CHANGE_STATE","UPDATE_BOT_NAME","UPDATE_BOT_AVATAR_URL","UPDATE_LAUNCHER_AVATAR_URL","UPDATE_MAIN_HEADER_TITLE","HYDRATE_CHAT","HYDRATE_MESSAGE_HISTORY","ADD_LOCAL_MESSAGE_ITEM","REMOVE_MESSAGES","UPDATE_LOCAL_MESSAGE_ITEM","SET_APP_STATE_VALUE","ADD_IS_TYPING_COUNTER","ADD_IS_LOADING_COUNTER","ADD_IS_HYDRATING_COUNTER","SET_VIEW_STATE","SET_VIEW_CHANGING","SET_INITIAL_VIEW_CHANGE_COMPLETE","UPDATE_CSS_VARIABLES","MESSAGE_SET_OPTION_SELECTED","SET_MESSAGE_UI_PROPERTY","SET_MESSAGE_HISTORY_PROPERTY","MERGE_HISTORY","SET_LAUNCHER_PROPERTY","SET_LAUNCHER_CONFIG_PROPERTY","ANNOUNCE_MESSAGE","SET_CHAT_MESSAGES_PROPERTY","RESTART_CONVERSATION","ACCEPTED_DISCLAIMER","ADD_MESSAGE","UPDATE_HOME_SCREEN_CONFIG","UPDATE_HAS_SENT_NON_WELCOME_MESSAGE","UPDATE_PERSISTED_CHAT_STATE","SET_TOUR_DATA","CLEAR_TOUR_DATA","CHANGE_STEP_IN_TOUR","SET_HOME_SCREEN_IS_OPEN","UPDATE_LAUNCHER_CONFIG","UPDATE_MESSAGE","SET_LAUNCHER_MINIMIZED","CLOSE_IFRAME_PANEL","OPEN_IFRAME_CONTENT","SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN","SET_CUSTOM_PANEL_OPTIONS","SET_CUSTOM_PANEL_OPEN","TOGGLE_HOME_SCREEN","UPDATE_INPUT_STATE","SET_IS_BROWSER_PAGE_VISIBLE","ADD_INPUT_FILE","CLEAR_INPUT_FILES","REMOVE_INPUT_FILE","REMOVE_LOCAL_MESSAGE_ITEM","FILE_UPLOAD_INPUT_ERROR","ADD_NESTED_MESSAGES","SET_RESPONSE_PANEL_IS_OPEN","SET_RESPONSE_PANEL_CONTENT","STREAMING_ADD_CHUNK","STREAMING_START","STREAMING_MERGE_HISTORY","ADD_NOTIFICATION","REMOVE_ALL_NOTIFICATIONS","REMOVE_NOTIFICATIONS","UPDATE_CHAT_HEADER_CONFIG","UPDATE_MAX_VISIBLE_HEADER_OBJECTS","SET_STOP_STREAMING_BUTTON_VISIBLE","SET_STOP_STREAMING_BUTTON_DISABLED","SET_STREAM_ID","UPDATE_MAIN_HEADER_AVATAR","actions","changeState","partialState","chatWasHydrated","hydrateMessageHistory","messageHistory","removeMessages","restartConversation","addLocalMessageItem","addMessage","addAfterID","updateLocalMessageItem","updateMessage","messageSetOptionSelected","sentMessage","updatePersistedChatState","chatState","setTourData","newActiveTourMessageID","clearTourData","changeStepInTour","newStepNumber","updateHasSentNonWelcomeMessage","hasSentNonWelcomeMessage","setAppStateValue","key","addIsTypingCounter","addToIsTyping","addIsLoadingCounter","addToIsLoading","addIsHydratingCounter","addToIsHydrating","updateBotName","updateMainHeaderTitle","title","updateBotAvatarURL","updateCSSVariables","variables","publicVars","whiteLabelVariables","updateHomeScreenConfig","homeScreenConfig","setViewState","viewState","setViewChanging","viewChanging","setInitialViewChangeComplete","changeComplete","setMessageUIProperty","propertyName","propertyValue","setLauncherProperty","setLauncherConfigProperty","launcherType","setMessageHistoryProperty","mergeMessageHistory","setMessageErrorState","errorState","setMessageWasAnnounced","announceMessage","setChatMessagesStateProperty","addNotification","notification","notificationID","removeNotifications","groupID","removeAllNotifications","acceptDisclaimer","setHomeScreenIsOpen","isOpen","updateLauncherConfig","launcherConfig","setLauncherMinimized","closeIFramePanel","setIFrameContent","setViewSourcePanelIsOpen","citationItem","relatedSearchResult","setCustomPanelConfigOptions","setCustomPanelOpen","toggleHomeScreen","updateInputState","newState","isInputToAgent","setIsBrowserPageVisible","isVisible","addInputFile","removeFileUpload","fileID","removeLocalMessageItem","localMessageItemID","fileUploadInputError","errorMessage","clearInputFiles","addNestedMessages","localMessageItems","setResponsePanelIsOpen","setResponsePanelContent","isMessageForInput","streamingStart","streamingMergeHistory","streamingAddChunk","chunkItem","isCompleteItem","updateChatHeaderConfig","chatHeaderConfig","setMaxVisibleHeaderObjects","maxTotal","setStopStreamingButtonVisible","setStopStreamingButtonDisabled","isDisabled","setStreamID","currentStreamID","updateMainHeaderAvatar","toPair","localMessages","createAgentLocalMessage","agentMessageType","serviceManager","fireEvents","intl","nickname","messageKey","AGENT_JOINED","RELOAD_WARNING","AGENT_LEFT_CHAT","AGENT_ENDED_CHAT","TRANSFER_TO_AGENT","USER_ENDED_CHAT","CHAT_WAS_ENDED","DISCONNECTED","RECONNECTED","SHARING_REQUESTED","SHARING_ACCEPTED","SHARING_DECLINED","SHARING_CANCELLED","SHARING_ENDED","formatMessage","personName","getAgentStatusMessageText","result","createAgentLocalMessageForType","agent_profile","fire","BusEventType","AGENT_PRE_RECEIVE","data","AGENT_RECEIVE","addMessages","messagePairs","saveInHistory","fireHistoryEvent","showLiveMessages","handleUserDefinedResponseItems","store","dispatch","addBotReturnMessage","botReturnDelay","wasSuspended","botReturn","languagePack","agent_botReturned","createBotReturnMessage","getState","initialRestartCount","restartCount","addAgentEndChatMessage","endChatMessage","HumanAgentServiceImpl","constructor","this","chatStarted","showingDisconnectedError","isAgentTyping","uploadingFiles","Set","showLeaveWarning","getCustomServiceDeskName","serviceDesk","getName","initialize","Error","instance","persistedToBrowserStorage","serviceDeskState","agentState","serviceDeskCallback","ServiceDeskCallbackImpl","parameters","callback","persistedState","validateCustomServiceDesk","debugLog","reconnect","startChat","localConnectMessage","clear","size","event","AGENT_PRE_START_CHAT","cancelStartChat","fireEndChat","agentJoinTimeout","agentJoinTimeoutSeconds","waitingForAgentJoinedTimer","handleAgentJoinedTimeout","preStartChatPayload","error","setErrorStatus","ErrorType","CONNECTING","logInfo","cancelAgentJoinedTimer","firePreEndChat","endedByAgent","AGENT_PRE_END_CHAT","preEndChatPayload","cancelEndChat","requestCancelled","AGENT_END_CHAT","endedByUser","showAgentLeftMessage","showBotReturnMessage","isConnected","persistedAgentState","endMessageType","doEndChat","agentEndChatMessageType","closeScreenShareRequestModal","ScreenShareState","CANCELLED","resolveOrTimeout","sendMessageToAgent","uploads","AGENT_PRE_SEND","files","textMessage","pairs","uploadOriginalMessage","uploadLocalMessage","add","messageSucceeded","messageFailed","MessageErrorState","RETRYING","FAILED","additionalData","filesToUpload","NONE","AGENT_SEND","filesSelectedForUpload","userReadMessages","checkAreAnyAgentsOnline","connectMessage","resultValue","areAnyAgentsOnline","timeoutSeconds","availabilityTimeoutSeconds","AgentsOnlineStatus","ONLINE","OFFLINE","UNKNOWN","AGENT_ARE_ANY_AGENTS_ONLINE","userTyping","errors_noAgentsJoined","clearTimeout","screenShareUpdateRequestState","ACCEPTED","DECLINED","ENDED","addAgentLocalMessage","screenShareStop","handleHydration","allowReconnect","allowEndChatMessages","didReconnect","appWindow","requestFocus","screenShareRequestPromise","service","updateAgentAvailability","agentJoined","profile","agentReadMessages","agentTyping","sendMessageToUser","agentID","messageResponse","FROM_AGENT","agentProfiles","beginTransferToAnotherAgent","agentLeftChat","agentEndedChat","errorInfo","isDisconnected","isReadonly","messageToUser","errors_connectingToAgent","USER_MESSAGE","setFileUploadStatus","isError","COMPLETE","SUCCESS","delete","screenShareRequest","screenShareEnded","wasScreenSharing","isScreenSharing","requestPending","updatePersistedState","mergeWithCurrent","merge","createService"],"sourceRoot":""}