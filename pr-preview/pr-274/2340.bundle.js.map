{"version":3,"file":"2340.bundle.js","mappings":"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","sources":["webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/UUIDType.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/arrayUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/schema/outputItemToLocalItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/actions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/haa/humanAgentUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/haa/agentStatusMessage.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/haa/HumanAgentServiceImpl.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/messaging/LocalMessageItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/resolvablePromise.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/browserUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/uuid.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/messageUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/objectUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/schema/inputItemToLocalItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/agentActions.js"],"sourcesContent":["/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nvar UUIDType;\n\n(function(UUIDType) {\n  UUIDType[UUIDType[\"MISCELLANEOUS\"] = 1] = \"MISCELLANEOUS\";\n  UUIDType[UUIDType[\"LOCAL_MESSAGE\"] = 2] = \"LOCAL_MESSAGE\";\n  UUIDType[UUIDType[\"MESSAGE\"] = 3] = \"MESSAGE\";\n  UUIDType[UUIDType[\"COMPONENT\"] = 4] = \"COMPONENT\";\n  UUIDType[UUIDType[\"USER\"] = 6] = \"USER\";\n  UUIDType[UUIDType[\"DEVICE_ID\"] = 8] = \"DEVICE_ID\";\n  UUIDType[UUIDType[\"FILE\"] = 9] = \"FILE\";\n})(UUIDType || (UUIDType = {}));\n\nexport { UUIDType };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction asArray(value) {\n  return Array.isArray(value) ? value : [ value ];\n}\n\nasync function asyncForEach(array, callbackFunction) {\n  for (let index = 0; index < array.length; index++) {\n    const value = array[index];\n    await callbackFunction(value, index, array);\n  }\n}\n\nfunction findLast(array, predicate, startAt) {\n  const lastIndex = findLastIndex(array, predicate);\n  return lastIndex === -1 ? undefined : array[lastIndex];\n}\n\nfunction findLastIndex(array, predicate, startAt) {\n  if (array) {\n    const startingIndex = array.length - 1;\n    for (let index = startingIndex; index >= 0; index--) {\n      const value = array[index];\n      if (predicate(value, index, array)) {\n        return index;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction findLastWithMap(keys, map, predicate) {\n  for (let index = keys.length - 1; index >= 0; index--) {\n    const key = keys[index];\n    const value = map[key];\n    if (predicate(value, index, keys)) {\n      return value;\n    }\n  }\n  return undefined;\n}\n\nfunction arrayLastValue(array) {\n  return array && array.length ? array[array.length - 1] : null;\n}\n\nexport { arrayLastValue, asArray, asyncForEach, findLast, findLastWithMap };\n","import { MessageResponseTypes, ButtonItemType } from \"../../../types/messaging/Messages.js\";\n\nimport { uuid } from \"../utils/lang/uuid.js\";\n\nimport { streamItemID, createMessageResponseForItem, isGridResponseType, isCarouselResponseType, isShowPanelButtonType, isResponseWithNestedItems, isItemSupportedInResponseBody, isCardResponseType, isButtonResponseType } from \"../utils/messageUtils.js\";\n\nimport { consoleError } from \"../utils/miscUtils.js\";\n\nimport { UUIDType } from \"../utils/lang/UUIDType.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function outputItemToLocalItem(messageItem, fullMessage, isLatestWelcomeNode = false, disableFadeAnimation = false) {\n  const id = streamItemID(fullMessage.id, messageItem) || uuid(UUIDType.LOCAL_MESSAGE);\n  const localMessage = {\n    ui_state: {\n      id: id,\n      needsAnnouncement: !fullMessage.history.from_history,\n      disableFadeAnimation: disableFadeAnimation\n    },\n    item: messageItem,\n    fullMessageID: fullMessage.id\n  };\n  if (isLatestWelcomeNode) {\n    localMessage.ui_state.isWelcomeResponse = true;\n  }\n  return localMessage;\n}\n\nfunction createLocalMessageForInlineError(text) {\n  const messageItem = {\n    response_type: MessageResponseTypes.INLINE_ERROR,\n    text: text\n  };\n  return createLocalMessageForItem(messageItem);\n}\n\nfunction createLocalMessageForItem(messageItem) {\n  const originalMessage = createMessageResponseForItem(messageItem);\n  const localMessage = outputItemToLocalItem(messageItem, originalMessage);\n  return {\n    originalMessage: originalMessage,\n    localMessage: localMessage\n  };\n}\n\nfunction createLocalMessageItemsForNestedMessageItems(localMessageItem, originalMessage, fromHistory, nestedLocalMessageItems, allowFooter) {\n  const {item: item} = localMessageItem;\n  if (isGridResponseType(item)) {\n    localMessageItem.ui_state.gridLocalMessageItemIDs = item.rows.map(row => row.cells.map(cell => {\n      const cellLocalMessageItemIDs = [];\n      createLocalMessageItemsForNestedType(\"items\", localMessageItem, cell.items, cellLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, nestedMessageItem => isSupportedMessageItemInBody(localMessageItem.item, nestedMessageItem), false);\n      return cellLocalMessageItemIDs;\n    }));\n  } else if (isCarouselResponseType(item)) {\n    localMessageItem.ui_state.itemsLocalMessageItemIDs = [];\n    createLocalMessageItemsForNestedType(\"items\", localMessageItem, item.items, localMessageItem.ui_state.itemsLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, nestedMessageItem => isSupportedMessageItemInBody(item, nestedMessageItem), allowFooter);\n  } else {\n    const bodyItems = item.body || item.panel?.body;\n    if (bodyItems) {\n      localMessageItem.ui_state.bodyLocalMessageItemIDs = [];\n      createLocalMessageItemsForNestedType(\"body\", localMessageItem, bodyItems, localMessageItem.ui_state.bodyLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, nestedMessageItem => isSupportedMessageItemInBody(item, nestedMessageItem), !isShowPanelButtonType(item));\n    }\n    if (!allowFooter) {\n      return;\n    }\n    const footerItems = item.footer || item.panel?.footer;\n    if (footerItems) {\n      localMessageItem.ui_state.footerLocalMessageItemIDs = [];\n      createLocalMessageItemsForNestedType(\"footer\", localMessageItem, footerItems, localMessageItem.ui_state.footerLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, nestedMessageItem => isSupportedMessageItemInFooter(item, nestedMessageItem), !isShowPanelButtonType(item));\n    }\n  }\n}\n\nfunction createLocalMessageItemsForNestedType(type, localMessageItem, items, nestedMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, isSupported, allowFooter) {\n  items.forEach(nestedMessageItem => {\n    if (isSupported(nestedMessageItem)) {\n      const nestedLocalMessageItem = outputItemToLocalItem(nestedMessageItem, originalMessage, false, true);\n      nestedMessageItemIDs.push(nestedLocalMessageItem.ui_state.id);\n      nestedLocalMessageItems.push(nestedLocalMessageItem);\n      if (isResponseWithNestedItems(nestedLocalMessageItem.item)) {\n        createLocalMessageItemsForNestedMessageItems(nestedLocalMessageItem, originalMessage, fromHistory, nestedLocalMessageItems, allowFooter);\n      }\n    } else {\n      consoleError(`The \"${localMessageItem.item.response_type}\" response type does not support \"${nestedMessageItem.response_type}\" in \"${type}\" array.`);\n    }\n  });\n}\n\nfunction isSupportedMessageItemInBody(rootMessageItem, nestedMessageItem) {\n  switch (rootMessageItem.response_type) {\n   case MessageResponseTypes.CARD:\n    return !isCardResponseType(nestedMessageItem) && isItemSupportedInResponseBody(nestedMessageItem);\n\n   case MessageResponseTypes.CAROUSEL:\n    return isCardResponseType(nestedMessageItem);\n\n   case MessageResponseTypes.BUTTON:\n    return rootMessageItem.button_type === ButtonItemType.SHOW_PANEL && isItemSupportedInResponseBody(nestedMessageItem);\n\n   case MessageResponseTypes.GRID:\n    return !isCardResponseType(nestedMessageItem) && isItemSupportedInResponseBody(nestedMessageItem);\n\n   default:\n    return false;\n  }\n}\n\nfunction isSupportedMessageItemInFooter(rootMessageItem, nestedMessageItem) {\n  if (isButtonResponseType(nestedMessageItem)) {\n    if (isShowPanelButtonType(rootMessageItem)) {\n      return !isShowPanelButtonType(nestedMessageItem);\n    }\n    return true;\n  }\n  return false;\n}\n\nexport { createLocalMessageForInlineError, createLocalMessageItemsForNestedMessageItems, outputItemToLocalItem };\n","import { uuid } from \"../utils/lang/uuid.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const CHANGE_STATE = \"CHANGE_STATE\";\n\nconst UPDATE_BOT_NAME = \"UPDATE_BOT_NAME\";\n\nconst UPDATE_BOT_AVATAR_URL = \"UPDATE_BOT_AVATAR_URL\";\n\nconst UPDATE_LAUNCHER_AVATAR_URL = \"UPDATE_LAUNCHER_AVATAR_URL\";\n\nconst UPDATE_MAIN_HEADER_TITLE = \"UPDATE_MAIN_HEADER_TITLE\";\n\nconst HYDRATE_CHAT = \"HYDRATE_CHAT\";\n\nconst HYDRATE_MESSAGE_HISTORY = \"HYDRATE_MESSAGE_HISTORY\";\n\nconst ADD_LOCAL_MESSAGE_ITEM = \"ADD_LOCAL_MESSAGE_ITEM\";\n\nconst REMOVE_MESSAGES = \"REMOVE_MESSAGES\";\n\nconst UPDATE_LOCAL_MESSAGE_ITEM = \"UPDATE_LOCAL_MESSAGE_ITEM\";\n\nconst SET_APP_STATE_VALUE = \"SET_APP_STATE_VALUE\";\n\nconst ADD_IS_TYPING_COUNTER = \"ADD_IS_TYPING_COUNTER\";\n\nconst ADD_IS_LOADING_COUNTER = \"ADD_IS_LOADING_COUNTER\";\n\nconst ADD_IS_HYDRATING_COUNTER = \"ADD_IS_HYDRATING_COUNTER\";\n\nconst SET_VIEW_STATE = \"SET_VIEW_STATE\";\n\nconst SET_VIEW_CHANGING = \"SET_VIEW_CHANGING\";\n\nconst SET_INITIAL_VIEW_CHANGE_COMPLETE = \"SET_INITIAL_VIEW_CHANGE_COMPLETE\";\n\nconst UPDATE_CSS_VARIABLES = \"UPDATE_CSS_VARIABLES\";\n\nconst MESSAGE_SET_OPTION_SELECTED = \"MESSAGE_SET_OPTION_SELECTED\";\n\nconst SET_MESSAGE_UI_PROPERTY = \"SET_MESSAGE_UI_PROPERTY\";\n\nconst SET_MESSAGE_HISTORY_PROPERTY = \"SET_MESSAGE_HISTORY_PROPERTY\";\n\nconst MERGE_HISTORY = \"MERGE_HISTORY\";\n\nconst SET_LAUNCHER_PROPERTY = \"SET_LAUNCHER_PROPERTY\";\n\nconst SET_LAUNCHER_CONFIG_PROPERTY = \"SET_LAUNCHER_CONFIG_PROPERTY\";\n\nconst ANNOUNCE_MESSAGE = \"ANNOUNCE_MESSAGE\";\n\nconst SET_CHAT_MESSAGES_PROPERTY = \"SET_CHAT_MESSAGES_PROPERTY\";\n\nconst RESTART_CONVERSATION = \"RESTART_CONVERSATION\";\n\nconst ACCEPTED_DISCLAIMER = \"ACCEPTED_DISCLAIMER\";\n\nconst ADD_MESSAGE = \"ADD_MESSAGE\";\n\nconst UPDATE_HOME_SCREEN_CONFIG = \"UPDATE_HOME_SCREEN_CONFIG\";\n\nconst UPDATE_HAS_SENT_NON_WELCOME_MESSAGE = \"UPDATE_HAS_SENT_NON_WELCOME_MESSAGE\";\n\nconst UPDATE_PERSISTED_CHAT_STATE = \"UPDATE_PERSISTED_CHAT_STATE\";\n\nconst SET_TOUR_DATA = \"SET_TOUR_DATA\";\n\nconst CLEAR_TOUR_DATA = \"CLEAR_TOUR_DATA\";\n\nconst CHANGE_STEP_IN_TOUR = \"CHANGE_STEP_IN_TOUR\";\n\nconst SET_HOME_SCREEN_IS_OPEN = \"SET_HOME_SCREEN_IS_OPEN\";\n\nconst UPDATE_LAUNCHER_CONFIG = \"UPDATE_LAUNCHER_CONFIG\";\n\nconst UPDATE_MESSAGE = \"UPDATE_MESSAGE\";\n\nconst SET_LAUNCHER_MINIMIZED = \"SET_LAUNCHER_MINIMIZED\";\n\nconst CLOSE_IFRAME_PANEL = \"CLOSE_IFRAME_PANEL\";\n\nconst OPEN_IFRAME_CONTENT = \"OPEN_IFRAME_CONTENT\";\n\nconst SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN = \"SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN\";\n\nconst SET_CUSTOM_PANEL_OPTIONS = \"SET_CUSTOM_PANEL_OPTIONS\";\n\nconst SET_CUSTOM_PANEL_OPEN = \"SET_CUSTOM_PANEL_OPEN\";\n\nconst TOGGLE_HOME_SCREEN = \"GO_BACK_TO_HOME\";\n\nconst UPDATE_INPUT_STATE = \"UPDATE_INPUT_STATE\";\n\nconst SET_IS_BROWSER_PAGE_VISIBLE = \"SET_IS_PAGE_VISIBLE\";\n\nconst ADD_INPUT_FILE = \"ADD_INPUT_FILE\";\n\nconst CLEAR_INPUT_FILES = \"CLEAR_INPUT_FILES\";\n\nconst REMOVE_INPUT_FILE = \"REMOVE_INPUT_FILE\";\n\nconst REMOVE_LOCAL_MESSAGE_ITEM = \"REMOVE_LOCAL_MESSAGE_ITEM\";\n\nconst FILE_UPLOAD_INPUT_ERROR = \"FILE_UPLOAD_INPUT_ERROR\";\n\nconst ADD_NESTED_MESSAGES = \"ADD_NESTED_MESSAGES\";\n\nconst SET_RESPONSE_PANEL_IS_OPEN = \"SET_RESPONSE_PANEL_IS_OPEN\";\n\nconst SET_RESPONSE_PANEL_CONTENT = \"SET_PANEL_RESPONSE_CONTENT\";\n\nconst STREAMING_ADD_CHUNK = \"STREAMING_ADD_CHUNK\";\n\nconst STREAMING_START = \"STREAMING_START\";\n\nconst STREAMING_MERGE_HISTORY = \"STREAMING_MERGE_HISTORY\";\n\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\n\nconst REMOVE_ALL_NOTIFICATIONS = \"REMOVE_ALL_NOTIFICATIONS\";\n\nconst REMOVE_NOTIFICATIONS = \"REMOVE_NOTIFICATIONS\";\n\nconst UPDATE_CHAT_HEADER_CONFIG = \"UPDATE_CHAT_HEADER_CONFIG\";\n\nconst UPDATE_MAX_VISIBLE_HEADER_OBJECTS = \"UPDATE_MAX_VISIBLE_HEADER_OBJECTS\";\n\nconst SET_STOP_STREAMING_BUTTON_VISIBLE = \"SET_STOP_STREAMING_BUTTON_VISIBLE\";\n\nconst SET_STOP_STREAMING_BUTTON_DISABLED = \"SET_STOP_STREAMING_BUTTON_DISABLED\";\n\nconst SET_STREAM_ID = \"SET_STREAM_ID\";\n\nconst UPDATE_MAIN_HEADER_AVATAR = \"UPDATE_MAIN_HEADER_AVATAR\";\n\nconst actions = {\n  changeState(partialState) {\n    return {\n      type: CHANGE_STATE,\n      partialState: partialState\n    };\n  },\n  chatWasHydrated() {\n    return {\n      type: HYDRATE_CHAT\n    };\n  },\n  hydrateMessageHistory(messageHistory) {\n    return {\n      type: HYDRATE_MESSAGE_HISTORY,\n      messageHistory: messageHistory\n    };\n  },\n  removeMessages(messageIDs) {\n    return {\n      type: REMOVE_MESSAGES,\n      messageIDs: messageIDs\n    };\n  },\n  restartConversation() {\n    return {\n      type: RESTART_CONVERSATION\n    };\n  },\n  addLocalMessageItem(messageItem, message, addMessage, addAfterID) {\n    return {\n      type: ADD_LOCAL_MESSAGE_ITEM,\n      messageItem: messageItem,\n      message: message,\n      addMessage: addMessage,\n      addAfterID: addAfterID\n    };\n  },\n  addMessage(message) {\n    return {\n      type: ADD_MESSAGE,\n      message: message\n    };\n  },\n  updateLocalMessageItem(messageItem) {\n    return {\n      type: UPDATE_LOCAL_MESSAGE_ITEM,\n      messageItem: messageItem\n    };\n  },\n  updateMessage(message) {\n    return {\n      type: UPDATE_MESSAGE,\n      message: message\n    };\n  },\n  messageSetOptionSelected(messageID, sentMessage) {\n    return {\n      type: MESSAGE_SET_OPTION_SELECTED,\n      messageID: messageID,\n      sentMessage: sentMessage\n    };\n  },\n  updatePersistedChatState(chatState) {\n    return {\n      type: UPDATE_PERSISTED_CHAT_STATE,\n      chatState: chatState\n    };\n  },\n  setTourData(newActiveTourMessageID) {\n    return {\n      type: SET_TOUR_DATA,\n      newActiveTourMessageID: newActiveTourMessageID\n    };\n  },\n  clearTourData() {\n    return {\n      type: CLEAR_TOUR_DATA\n    };\n  },\n  changeStepInTour(newStepNumber) {\n    return {\n      type: CHANGE_STEP_IN_TOUR,\n      newStepNumber: newStepNumber\n    };\n  },\n  updateHasSentNonWelcomeMessage(hasSentNonWelcomeMessage) {\n    return {\n      type: UPDATE_HAS_SENT_NON_WELCOME_MESSAGE,\n      hasSentNonWelcomeMessage: hasSentNonWelcomeMessage\n    };\n  },\n  setAppStateValue(key, value) {\n    return {\n      type: SET_APP_STATE_VALUE,\n      key: key,\n      value: value\n    };\n  },\n  addIsTypingCounter(addToIsTyping) {\n    return {\n      type: ADD_IS_TYPING_COUNTER,\n      addToIsTyping: addToIsTyping\n    };\n  },\n  addIsLoadingCounter(addToIsLoading) {\n    return {\n      type: ADD_IS_LOADING_COUNTER,\n      addToIsLoading: addToIsLoading\n    };\n  },\n  addIsHydratingCounter(addToIsHydrating) {\n    return {\n      type: ADD_IS_HYDRATING_COUNTER,\n      addToIsHydrating: addToIsHydrating\n    };\n  },\n  updateBotName(name) {\n    return {\n      type: UPDATE_BOT_NAME,\n      name: name\n    };\n  },\n  updateMainHeaderTitle(title) {\n    return {\n      type: UPDATE_MAIN_HEADER_TITLE,\n      title: title\n    };\n  },\n  updateBotAvatarURL(url) {\n    return {\n      type: UPDATE_BOT_AVATAR_URL,\n      url: url\n    };\n  },\n  updateCSSVariables(variables, publicVars, whiteLabelVariables) {\n    return {\n      type: UPDATE_CSS_VARIABLES,\n      variables: variables,\n      publicVars: publicVars,\n      whiteLabelVariables: whiteLabelVariables\n    };\n  },\n  updateHomeScreenConfig(homeScreenConfig) {\n    return {\n      type: UPDATE_HOME_SCREEN_CONFIG,\n      homeScreenConfig: homeScreenConfig\n    };\n  },\n  setViewState(viewState) {\n    return {\n      type: SET_VIEW_STATE,\n      viewState: viewState\n    };\n  },\n  setViewChanging(viewChanging) {\n    return {\n      type: SET_VIEW_CHANGING,\n      viewChanging: viewChanging\n    };\n  },\n  setInitialViewChangeComplete(changeComplete) {\n    return {\n      type: SET_INITIAL_VIEW_CHANGE_COMPLETE,\n      changeComplete: changeComplete\n    };\n  },\n  setMessageUIProperty(localMessageID, propertyName, propertyValue) {\n    return {\n      type: SET_MESSAGE_UI_PROPERTY,\n      localMessageID: localMessageID,\n      propertyName: propertyName,\n      propertyValue: propertyValue\n    };\n  },\n  setLauncherProperty(propertyName, propertyValue) {\n    return {\n      type: SET_LAUNCHER_PROPERTY,\n      propertyName: propertyName,\n      propertyValue: propertyValue\n    };\n  },\n  setLauncherConfigProperty(propertyName, propertyValue, launcherType) {\n    return {\n      type: SET_LAUNCHER_CONFIG_PROPERTY,\n      propertyName: propertyName,\n      propertyValue: propertyValue,\n      launcherType: launcherType\n    };\n  },\n  setMessageHistoryProperty(messageID, propertyName, propertyValue) {\n    return {\n      type: SET_MESSAGE_HISTORY_PROPERTY,\n      messageID: messageID,\n      propertyName: propertyName,\n      propertyValue: propertyValue\n    };\n  },\n  mergeMessageHistory(messageID, history) {\n    return {\n      type: MERGE_HISTORY,\n      messageID: messageID,\n      history: history\n    };\n  },\n  setMessageErrorState(messageID, errorState) {\n    return actions.setMessageHistoryProperty(messageID, \"error_state\", errorState);\n  },\n  setMessageWasAnnounced(messageID) {\n    return actions.setMessageUIProperty(messageID, \"needsAnnouncement\", false);\n  },\n  announceMessage(message) {\n    return {\n      type: ANNOUNCE_MESSAGE,\n      message: message\n    };\n  },\n  setChatMessagesStateProperty(propertyName, propertyValue) {\n    return {\n      type: SET_CHAT_MESSAGES_PROPERTY,\n      propertyName: propertyName,\n      propertyValue: propertyValue\n    };\n  },\n  addNotification(notification) {\n    const notificationID = uuid();\n    return {\n      type: ADD_NOTIFICATION,\n      notificationID: notificationID,\n      notification: notification\n    };\n  },\n  removeNotifications({groupID: groupID, notificationID: notificationID}) {\n    return {\n      type: REMOVE_NOTIFICATIONS,\n      groupID: groupID,\n      notificationID: notificationID\n    };\n  },\n  removeAllNotifications() {\n    return {\n      type: REMOVE_ALL_NOTIFICATIONS\n    };\n  },\n  acceptDisclaimer() {\n    return {\n      type: ACCEPTED_DISCLAIMER\n    };\n  },\n  setHomeScreenIsOpen(isOpen) {\n    return {\n      type: SET_HOME_SCREEN_IS_OPEN,\n      isOpen: isOpen\n    };\n  },\n  updateLauncherConfig(launcherConfig) {\n    return {\n      type: UPDATE_LAUNCHER_CONFIG,\n      launcherConfig: launcherConfig\n    };\n  },\n  setLauncherMinimized() {\n    return {\n      type: SET_LAUNCHER_MINIMIZED\n    };\n  },\n  closeIFramePanel() {\n    return {\n      type: CLOSE_IFRAME_PANEL\n    };\n  },\n  setIFrameContent(messageItem) {\n    return {\n      type: OPEN_IFRAME_CONTENT,\n      messageItem: messageItem\n    };\n  },\n  setViewSourcePanelIsOpen(isOpen, citationItem, relatedSearchResult) {\n    return {\n      type: SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN,\n      isOpen: isOpen,\n      citationItem: citationItem,\n      relatedSearchResult: relatedSearchResult\n    };\n  },\n  setCustomPanelConfigOptions(options) {\n    return {\n      type: SET_CUSTOM_PANEL_OPTIONS,\n      options: options\n    };\n  },\n  setCustomPanelOpen(isOpen) {\n    return {\n      type: SET_CUSTOM_PANEL_OPEN,\n      isOpen: isOpen\n    };\n  },\n  toggleHomeScreen() {\n    return {\n      type: TOGGLE_HOME_SCREEN\n    };\n  },\n  updateInputState(newState, isInputToAgent) {\n    return {\n      type: UPDATE_INPUT_STATE,\n      newState: newState,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  setIsBrowserPageVisible(isVisible) {\n    return {\n      type: SET_IS_BROWSER_PAGE_VISIBLE,\n      isVisible: isVisible\n    };\n  },\n  addInputFile(file, isInputToAgent) {\n    return {\n      type: ADD_INPUT_FILE,\n      file: file,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  removeFileUpload(fileID, isInputToAgent) {\n    return {\n      type: REMOVE_INPUT_FILE,\n      fileID: fileID,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  removeLocalMessageItem(localMessageItemID) {\n    return {\n      type: REMOVE_LOCAL_MESSAGE_ITEM,\n      localMessageItemID: localMessageItemID\n    };\n  },\n  fileUploadInputError(fileID, errorMessage, isInputToAgent) {\n    return {\n      type: FILE_UPLOAD_INPUT_ERROR,\n      fileID: fileID,\n      errorMessage: errorMessage,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  clearInputFiles(isInputToAgent) {\n    return {\n      type: CLEAR_INPUT_FILES,\n      isInputToAgent: isInputToAgent\n    };\n  },\n  addNestedMessages(localMessageItems) {\n    return {\n      type: ADD_NESTED_MESSAGES,\n      localMessageItems: localMessageItems\n    };\n  },\n  setResponsePanelIsOpen(isOpen) {\n    return {\n      type: SET_RESPONSE_PANEL_IS_OPEN,\n      isOpen: isOpen\n    };\n  },\n  setResponsePanelContent(localMessageItem, isMessageForInput = false) {\n    return {\n      type: SET_RESPONSE_PANEL_CONTENT,\n      localMessageItem: localMessageItem,\n      isMessageForInput: isMessageForInput\n    };\n  },\n  streamingStart(messageID) {\n    return {\n      type: STREAMING_START,\n      messageID: messageID\n    };\n  },\n  streamingMergeHistory(messageID, history) {\n    return {\n      type: STREAMING_MERGE_HISTORY,\n      messageID: messageID,\n      history: history\n    };\n  },\n  streamingAddChunk(fullMessageID, chunkItem, isCompleteItem, disableFadeAnimation) {\n    return {\n      type: STREAMING_ADD_CHUNK,\n      fullMessageID: fullMessageID,\n      chunkItem: chunkItem,\n      isCompleteItem: isCompleteItem,\n      disableFadeAnimation: disableFadeAnimation\n    };\n  },\n  updateChatHeaderConfig(chatHeaderConfig) {\n    return {\n      type: UPDATE_CHAT_HEADER_CONFIG,\n      chatHeaderConfig: chatHeaderConfig\n    };\n  },\n  setMaxVisibleHeaderObjects(maxTotal) {\n    return {\n      type: UPDATE_MAX_VISIBLE_HEADER_OBJECTS,\n      maxTotal: maxTotal\n    };\n  },\n  setStopStreamingButtonVisible(isVisible) {\n    return {\n      type: SET_STOP_STREAMING_BUTTON_VISIBLE,\n      isVisible: isVisible\n    };\n  },\n  setStopStreamingButtonDisabled(isDisabled) {\n    return {\n      type: SET_STOP_STREAMING_BUTTON_DISABLED,\n      isDisabled: isDisabled\n    };\n  },\n  setStreamID(currentStreamID) {\n    return {\n      type: SET_STREAM_ID,\n      currentStreamID: currentStreamID\n    };\n  },\n  updateMainHeaderAvatar(config) {\n    return {\n      type: UPDATE_MAIN_HEADER_AVATAR,\n      config: config\n    };\n  }\n};\n\nexport { ACCEPTED_DISCLAIMER, ADD_INPUT_FILE, ADD_IS_HYDRATING_COUNTER, ADD_IS_LOADING_COUNTER, ADD_IS_TYPING_COUNTER, ADD_LOCAL_MESSAGE_ITEM, ADD_MESSAGE, ADD_NESTED_MESSAGES, ADD_NOTIFICATION, ANNOUNCE_MESSAGE, CHANGE_STATE, CHANGE_STEP_IN_TOUR, CLEAR_INPUT_FILES, CLEAR_TOUR_DATA, CLOSE_IFRAME_PANEL, FILE_UPLOAD_INPUT_ERROR, HYDRATE_CHAT, HYDRATE_MESSAGE_HISTORY, MERGE_HISTORY, MESSAGE_SET_OPTION_SELECTED, OPEN_IFRAME_CONTENT, REMOVE_ALL_NOTIFICATIONS, REMOVE_INPUT_FILE, REMOVE_LOCAL_MESSAGE_ITEM, REMOVE_MESSAGES, REMOVE_NOTIFICATIONS, RESTART_CONVERSATION, SET_APP_STATE_VALUE, SET_CHAT_MESSAGES_PROPERTY, SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN, SET_CUSTOM_PANEL_OPEN, SET_CUSTOM_PANEL_OPTIONS, SET_HOME_SCREEN_IS_OPEN, SET_INITIAL_VIEW_CHANGE_COMPLETE, SET_IS_BROWSER_PAGE_VISIBLE, SET_LAUNCHER_CONFIG_PROPERTY, SET_LAUNCHER_MINIMIZED, SET_LAUNCHER_PROPERTY, SET_MESSAGE_HISTORY_PROPERTY, SET_MESSAGE_UI_PROPERTY, SET_RESPONSE_PANEL_CONTENT, SET_RESPONSE_PANEL_IS_OPEN, SET_STOP_STREAMING_BUTTON_DISABLED, SET_STOP_STREAMING_BUTTON_VISIBLE, SET_STREAM_ID, SET_TOUR_DATA, SET_VIEW_CHANGING, SET_VIEW_STATE, STREAMING_ADD_CHUNK, STREAMING_MERGE_HISTORY, STREAMING_START, TOGGLE_HOME_SCREEN, UPDATE_BOT_AVATAR_URL, UPDATE_BOT_NAME, UPDATE_CHAT_HEADER_CONFIG, UPDATE_CSS_VARIABLES, UPDATE_HAS_SENT_NON_WELCOME_MESSAGE, UPDATE_HOME_SCREEN_CONFIG, UPDATE_INPUT_STATE, UPDATE_LAUNCHER_AVATAR_URL, UPDATE_LAUNCHER_CONFIG, UPDATE_LOCAL_MESSAGE_ITEM, UPDATE_MAIN_HEADER_AVATAR, UPDATE_MAIN_HEADER_TITLE, UPDATE_MAX_VISIBLE_HEADER_OBJECTS, UPDATE_MESSAGE, UPDATE_PERSISTED_CHAT_STATE, actions as default };\n","import { BusEventType } from \"../../../../types/events/eventBusTypes.js\";\n\nimport { outputItemToLocalItem } from \"../../schema/outputItemToLocalItem.js\";\n\nimport actions from \"../../store/actions.js\";\n\nimport { conditionalSetTimeout } from \"../../utils/browserUtils.js\";\n\nimport { asyncForEach } from \"../../utils/lang/arrayUtils.js\";\n\nimport { deepFreeze } from \"../../utils/lang/objectUtils.js\";\n\nimport { createMessageResponseForItem } from \"../../utils/messageUtils.js\";\n\nimport { getAgentStatusMessageText } from \"./agentStatusMessage.js\";\n\nimport { MessageResponseTypes } from \"../../../../types/messaging/Messages.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function toPair(localMessages, originalMessage) {\n  return {\n    localMessages: localMessages,\n    originalMessage: originalMessage\n  };\n}\n\nasync function createAgentLocalMessage(agentMessageType, serviceManager, agentProfile, fireEvents = true) {\n  const text = getAgentStatusMessageText(agentMessageType, agentProfile, serviceManager.intl);\n  const result = createAgentLocalMessageForType(agentMessageType);\n  const {originalMessage: originalMessage, localMessage: localMessage} = result;\n  localMessage.item.text = text;\n  if (agentProfile) {\n    if (!originalMessage.history) {\n      originalMessage.history = {};\n    }\n    originalMessage.history.agent_profile = agentProfile;\n  }\n  if (fireEvents) {\n    await serviceManager.fire({\n      type: BusEventType.AGENT_PRE_RECEIVE,\n      data: originalMessage\n    });\n  }\n  deepFreeze(originalMessage);\n  if (fireEvents) {\n    await serviceManager.fire({\n      type: BusEventType.AGENT_RECEIVE,\n      data: originalMessage\n    });\n  }\n  return result;\n}\n\nfunction createAgentLocalMessageForType(agentMessageType) {\n  const messageItem = {\n    response_type: MessageResponseTypes.TEXT,\n    agent_message_type: agentMessageType\n  };\n  const originalMessage = createMessageResponseForItem(messageItem);\n  const localMessage = outputItemToLocalItem(messageItem, originalMessage);\n  return {\n    localMessage: localMessage,\n    originalMessage: originalMessage\n  };\n}\n\nfunction createBotReturnMessage(languagePack) {\n  const {agent_botReturned: agent_botReturned} = languagePack;\n  if (!agent_botReturned) {\n    return null;\n  }\n  const {originalMessage: originalMessage, localMessage: localMessage} = createAgentLocalMessageForType(null);\n  localMessage.item.text = agent_botReturned;\n  return {\n    originalMessage: originalMessage,\n    localMessage: localMessage\n  };\n}\n\nasync function addMessages(messagePairs, saveInHistory, fireHistoryEvent, showLiveMessages, serviceManager) {\n  if (showLiveMessages) {\n    await asyncForEach(messagePairs, async ({localMessages: localMessages, originalMessage: originalMessage}) => {\n      await asyncForEach(localMessages, async (localMessage, index) => {\n        await serviceManager.actions.handleUserDefinedResponseItems(localMessage, originalMessage);\n        serviceManager.store.dispatch(actions.addLocalMessageItem(localMessage, originalMessage, index === 0));\n      });\n    });\n  }\n}\n\nasync function addBotReturnMessage(botReturnDelay, wasSuspended, serviceManager) {\n  const botReturn = createBotReturnMessage(serviceManager.store.getState().languagePack);\n  if (botReturn) {\n    const initialRestartCount = serviceManager.restartCount;\n    conditionalSetTimeout(() => {\n      if (initialRestartCount === serviceManager.restartCount) {\n        addMessages([ toPair([ botReturn.localMessage ], botReturn.originalMessage) ], true, false, !wasSuspended, serviceManager);\n      }\n    }, botReturnDelay);\n  }\n}\n\nasync function addAgentEndChatMessage(agentMessageType, agentProfile, fireEvents, wasSuspended, serviceManager) {\n  const endChatMessage = await createAgentLocalMessage(agentMessageType, serviceManager, agentProfile, fireEvents);\n  await addMessages([ toPair([ endChatMessage.localMessage ], endChatMessage.originalMessage) ], true, false, !wasSuspended, serviceManager);\n}\n\nexport { addAgentEndChatMessage, addBotReturnMessage, addMessages, createAgentLocalMessage, toPair };\n","import { AgentMessageType } from \"../../../../types/messaging/Messages.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function getAgentStatusMessageText(agentMessageType, agentProfile, intl) {\n  const name = agentProfile?.nickname;\n  let messageKey;\n  switch (agentMessageType) {\n   case AgentMessageType.AGENT_JOINED:\n    {\n      messageKey = name ? \"agent_agentJoinedName\" : \"agent_agentJoinedNoName\";\n      break;\n    }\n\n   case AgentMessageType.RELOAD_WARNING:\n    {\n      messageKey = \"agent_youConnectedWarning\";\n      break;\n    }\n\n   case AgentMessageType.AGENT_LEFT_CHAT:\n    {\n      messageKey = name ? \"agent_agentLeftChat\" : \"agent_agentLeftChatNoName\";\n      break;\n    }\n\n   case AgentMessageType.AGENT_ENDED_CHAT:\n    {\n      messageKey = name ? \"agent_agentEndedChat\" : \"agent_agentEndedChatNoName\";\n      break;\n    }\n\n   case AgentMessageType.TRANSFER_TO_AGENT:\n    {\n      messageKey = name ? \"agent_transferring\" : \"agent_transferringNoName\";\n      break;\n    }\n\n   case AgentMessageType.USER_ENDED_CHAT:\n    {\n      messageKey = \"agent_youEndedChat\";\n      break;\n    }\n\n   case AgentMessageType.CHAT_WAS_ENDED:\n    {\n      messageKey = \"agent_conversationWasEnded\";\n      break;\n    }\n\n   case AgentMessageType.DISCONNECTED:\n    {\n      messageKey = \"agent_disconnected\";\n      break;\n    }\n\n   case AgentMessageType.RECONNECTED:\n    {\n      messageKey = \"agent_reconnected\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_REQUESTED:\n    {\n      messageKey = \"agent_sharingRequested\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_ACCEPTED:\n    {\n      messageKey = \"agent_sharingAccepted\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_DECLINED:\n    {\n      messageKey = \"agent_sharingDeclined\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_CANCELLED:\n    {\n      messageKey = \"agent_sharingCancelled\";\n      break;\n    }\n\n   case AgentMessageType.SHARING_ENDED:\n    {\n      messageKey = \"agent_sharingEnded\";\n      break;\n    }\n\n   default:\n    return \"\";\n  }\n  return messageKey && intl.formatMessage({\n    id: messageKey\n  }, {\n    personName: name\n  });\n}\n\nexport { getAgentStatusMessageText };\n","import cloneDeep from \"lodash-es/cloneDeep.js\";\n\nimport merge from \"lodash-es/merge.js\";\n\nimport inputItemToLocalItem from \"../../schema/inputItemToLocalItem.js\";\n\nimport { createLocalMessageForInlineError, outputItemToLocalItem } from \"../../schema/outputItemToLocalItem.js\";\n\nimport actions from \"../../store/actions.js\";\n\nimport { updateFilesUploadInProgress, setIsConnecting, endChat, setIsScreenSharing, setIsReconnecting, setShowScreenShareRequest, updateCapabilities, setAgentAvailability, setAgentJoined, agentUpdateIsTyping, setAgentLeftChat, setPersistedServiceDeskState } from \"../../store/agentActions.js\";\n\nimport { MessageErrorState } from \"../../../../types/messaging/LocalMessageItem.js\";\n\nimport \"../../utils/constants.js\";\n\nimport { deepFreeze } from \"../../utils/lang/objectUtils.js\";\n\nimport { resolveOrTimeout } from \"../../utils/lang/promiseUtils.js\";\n\nimport { createMessageRequestForText, createMessageRequestForFileUpload, createMessageResponseForText, addDefaultsToMessage } from \"../../utils/messageUtils.js\";\n\nimport { debugLog, consoleError } from \"../../utils/miscUtils.js\";\n\nimport { resolvablePromise } from \"../../utils/resolvablePromise.js\";\n\nimport { ErrorType, ScreenShareState, AgentsOnlineStatus } from \"../../../../types/config/ServiceDeskConfig.js\";\n\nimport { addAgentEndChatMessage, addBotReturnMessage, addMessages, toPair, createAgentLocalMessage } from \"./humanAgentUtils.js\";\n\nimport { AgentMessageType } from \"../../../../types/messaging/Messages.js\";\n\nimport { BusEventType } from \"../../../../types/events/eventBusTypes.js\";\n\nimport { FileStatusValue } from \"../../../../types/instance/apiTypes.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const SEND_TIMEOUT_WARNING_MS = 3e3;\n\nconst SEND_TIMEOUT_ERROR_MS = 2e4;\n\nconst END_CHAT_TIMEOUT_MS = 5e3;\n\nconst AVAILABILITY_TIMEOUT_MS = 5e3;\n\nconst BOT_RETURN_DELAY = 1500;\n\nconst {FROM_USER: FROM_USER, RECONNECTED: RECONNECTED, DISCONNECTED: DISCONNECTED, AGENT_ENDED_CHAT: AGENT_ENDED_CHAT, AGENT_JOINED: AGENT_JOINED, USER_ENDED_CHAT: USER_ENDED_CHAT, CHAT_WAS_ENDED: CHAT_WAS_ENDED, TRANSFER_TO_AGENT: TRANSFER_TO_AGENT, AGENT_LEFT_CHAT: AGENT_LEFT_CHAT, RELOAD_WARNING: RELOAD_WARNING, SHARING_CANCELLED: SHARING_CANCELLED, SHARING_DECLINED: SHARING_DECLINED, SHARING_ACCEPTED: SHARING_ACCEPTED, SHARING_REQUESTED: SHARING_REQUESTED, SHARING_ENDED: SHARING_ENDED} = AgentMessageType;\n\nclass HumanAgentServiceImpl {\n  constructor(serviceManager) {\n    this.chatStarted = false;\n    this.showingDisconnectedError = false;\n    this.isAgentTyping = false;\n    this.uploadingFiles = new Set;\n    this.showLeaveWarning = true;\n    this.serviceManager = serviceManager;\n  }\n  getCustomServiceDeskName() {\n    return this.serviceManager.store.getState().config.public.serviceDeskFactory ? this.serviceDesk.getName?.() : undefined;\n  }\n  async initialize() {\n    if (this.serviceDesk) {\n      throw new Error(\"A service desk has already been created!\");\n    }\n    const {store: store, instance: instance} = this.serviceManager;\n    const state = store.getState();\n    const {config: config, persistedToBrowserStorage: persistedToBrowserStorage} = state;\n    const serviceDeskState = cloneDeep(persistedToBrowserStorage.chatState.agentState.serviceDeskState);\n    this.serviceDeskCallback = new ServiceDeskCallbackImpl(this.serviceManager, this);\n    if (config.public.serviceDeskFactory) {\n      const parameters = {\n        callback: this.serviceDeskCallback,\n        instance: instance,\n        persistedState: serviceDeskState\n      };\n      this.serviceDesk = await config.public.serviceDeskFactory(parameters);\n      validateCustomServiceDesk(this.serviceDesk);\n      debugLog(\"Initializing a custom service desk\");\n    }\n    this.showLeaveWarning = !this.serviceDesk?.reconnect;\n  }\n  async startChat(localConnectMessage, originalMessage) {\n    if (!this.serviceDesk) {\n      throw new Error(\"A service desk has not been configured.\");\n    }\n    if (this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState.isSuspended) {\n      await this.endChat(true, true, false);\n    }\n    if (this.chatStarted) {\n      throw new Error(\"A chat is already running. A call to endChat must be made before a new chat can start.\");\n    }\n    const {serviceManager: serviceManager} = this;\n    try {\n      this.chatStarted = true;\n      this.isAgentTyping = false;\n      this.uploadingFiles.clear();\n      this.serviceManager.store.dispatch(updateFilesUploadInProgress(this.uploadingFiles.size > 0));\n      const event = {\n        type: BusEventType.AGENT_PRE_START_CHAT,\n        message: originalMessage\n      };\n      await serviceManager.fire(event);\n      if (event.cancelStartChat) {\n        this.chatStarted = false;\n        await this.fireEndChat(false, true);\n        serviceManager.store.dispatch(setIsConnecting(false, null));\n        return;\n      }\n      const agentJoinTimeout = serviceManager.store.getState().config.public.serviceDesk?.agentJoinTimeoutSeconds;\n      if (agentJoinTimeout) {\n        this.waitingForAgentJoinedTimer = setTimeout(() => this.handleAgentJoinedTimeout(), agentJoinTimeout * 1e3);\n      }\n      serviceManager.store.dispatch(setIsConnecting(true, localConnectMessage.ui_state.id));\n      await this.serviceDesk.startChat(originalMessage, {\n        preStartChatPayload: event.preStartChatPayload\n      });\n    } catch (error) {\n      consoleError(\"[startChat] An error with the service desk occurred.\", error);\n      if (this.serviceDeskCallback) {\n        await this.serviceDeskCallback.setErrorStatus({\n          type: ErrorType.CONNECTING,\n          logInfo: error\n        });\n      }\n      serviceManager.store.dispatch(setIsConnecting(false, null));\n      this.chatStarted = false;\n      this.cancelAgentJoinedTimer();\n      throw error;\n    }\n  }\n  async firePreEndChat(endedByAgent) {\n    const event = {\n      type: BusEventType.AGENT_PRE_END_CHAT,\n      endedByAgent: endedByAgent,\n      preEndChatPayload: null,\n      cancelEndChat: false\n    };\n    await this.serviceManager.fire(event);\n    return event;\n  }\n  async fireEndChat(endedByAgent, requestCancelled) {\n    await this.serviceManager.fire({\n      type: BusEventType.AGENT_END_CHAT,\n      endedByAgent: endedByAgent,\n      requestCancelled: requestCancelled\n    });\n  }\n  async endChat(endedByUser, showAgentLeftMessage = true, showBotReturnMessage = true) {\n    if (!this.chatStarted || !this.serviceDesk) {\n      return;\n    }\n    const {isConnected: isConnected} = this.persistedAgentState();\n    let event;\n    if (isConnected) {\n      event = await this.firePreEndChat(false);\n      if (event.cancelEndChat) {\n        return;\n      }\n    }\n    const endMessageType = endedByUser ? USER_ENDED_CHAT : CHAT_WAS_ENDED;\n    await this.doEndChat(false, event?.preEndChatPayload, showAgentLeftMessage, showBotReturnMessage, endMessageType);\n  }\n  async doEndChat(endedByAgent, preEndChatPayload, showAgentLeftMessage, showBotReturnMessage, agentEndChatMessageType) {\n    const {isConnected: isConnected} = this.persistedAgentState();\n    const wasSuspended = this.isSuspended();\n    this.cancelAgentJoinedTimer();\n    this.closeScreenShareRequestModal(ScreenShareState.CANCELLED);\n    try {\n      await resolveOrTimeout(this.serviceDesk.endChat({\n        endedByAgent: endedByAgent,\n        preEndChatPayload: preEndChatPayload\n      }), END_CHAT_TIMEOUT_MS);\n    } catch (error) {\n      consoleError(\"[doEndChat] An error with the service desk occurred.\", error);\n    }\n    if (isConnected && showAgentLeftMessage) {\n      const {agentProfile: agentProfile} = this.persistedAgentState();\n      await addAgentEndChatMessage(agentEndChatMessageType, agentProfile, true, wasSuspended, this.serviceManager);\n    }\n    this.chatStarted = false;\n    this.isAgentTyping = false;\n    this.serviceManager.store.dispatch(endChat());\n    await this.fireEndChat(endedByAgent, !isConnected);\n    if (isConnected && showBotReturnMessage) {\n      await addBotReturnMessage(BOT_RETURN_DELAY, wasSuspended, this.serviceManager);\n    }\n  }\n  async sendMessageToAgent(text, uploads) {\n    if (!this.serviceDesk || !this.chatStarted) {\n      return;\n    }\n    const {serviceManager: serviceManager} = this;\n    deepFreeze(uploads);\n    const originalMessage = createMessageRequestForText(text);\n    originalMessage.input.agent_message_type = FROM_USER;\n    await serviceManager.fire({\n      type: BusEventType.AGENT_PRE_SEND,\n      data: originalMessage,\n      files: uploads\n    });\n    const textMessage = inputItemToLocalItem(originalMessage, originalMessage.input.text);\n    const localMessageID = textMessage.ui_state.id;\n    const pairs = [];\n    if (textMessage.item.text) {\n      pairs.push(toPair([ textMessage ], originalMessage));\n    }\n    uploads.forEach(upload => {\n      const uploadOriginalMessage = createMessageRequestForFileUpload(upload);\n      const uploadLocalMessage = inputItemToLocalItem(uploadOriginalMessage, uploadOriginalMessage.input.text, upload.id);\n      pairs.push(toPair([ uploadLocalMessage ], uploadOriginalMessage));\n      this.uploadingFiles.add(upload.id);\n    });\n    this.serviceManager.store.dispatch(updateFilesUploadInProgress(this.uploadingFiles.size > 0));\n    await addMessages(pairs, true, true, !this.isSuspended(), serviceManager);\n    let messageSucceeded = false;\n    let messageFailed = false;\n    setTimeout(() => {\n      if (!messageSucceeded && !messageFailed) {\n        this.setMessageErrorState(textMessage.fullMessageID, MessageErrorState.RETRYING);\n      }\n    }, SEND_TIMEOUT_WARNING_MS);\n    setTimeout(() => {\n      if (!messageSucceeded) {\n        this.setMessageErrorState(textMessage.fullMessageID, MessageErrorState.FAILED);\n      }\n    }, SEND_TIMEOUT_ERROR_MS);\n    const additionalData = {\n      filesToUpload: uploads\n    };\n    try {\n      await this.serviceDesk.sendMessageToAgent(originalMessage, localMessageID, additionalData);\n      messageSucceeded = true;\n      this.setMessageErrorState(textMessage.fullMessageID, MessageErrorState.NONE);\n      await serviceManager.fire({\n        type: BusEventType.AGENT_SEND,\n        data: originalMessage,\n        files: uploads\n      });\n    } catch (error) {\n      messageFailed = true;\n      consoleError(\"[sendMessageToAgent] An error with the service desk occurred.\", error);\n      this.setMessageErrorState(textMessage.fullMessageID, MessageErrorState.FAILED);\n    }\n  }\n  filesSelectedForUpload(uploads) {\n    if (!this.serviceDesk || !this.chatStarted) {\n      return;\n    }\n    try {\n      this.serviceDesk.filesSelectedForUpload?.(uploads);\n    } catch (error) {\n      consoleError(\"[userReadMessages] An error with the service desk occurred.\", error);\n    }\n  }\n  async userReadMessages() {\n    if (!this.serviceDesk || !this.chatStarted) {\n      return;\n    }\n    try {\n      await this.serviceDesk.userReadMessages();\n    } catch (error) {\n      consoleError(\"[userReadMessages] An error with the service desk occurred.\", error);\n    }\n  }\n  async checkAreAnyAgentsOnline(connectMessage) {\n    let resultValue;\n    const initialRestartCount = this.serviceManager.restartCount;\n    if (!this.serviceDesk?.areAnyAgentsOnline) {\n      resultValue = AgentsOnlineStatus.UNKNOWN;\n    } else {\n      try {\n        const timeoutSeconds = this.serviceManager.store.getState().config.public.serviceDesk?.availabilityTimeoutSeconds;\n        const timeout = timeoutSeconds ? timeoutSeconds * 1e3 : AVAILABILITY_TIMEOUT_MS;\n        const result = await resolveOrTimeout(this.serviceDesk.areAnyAgentsOnline(connectMessage), timeout);\n        if (result === true) {\n          resultValue = AgentsOnlineStatus.ONLINE;\n        } else if (result === false) {\n          resultValue = AgentsOnlineStatus.OFFLINE;\n        } else {\n          resultValue = AgentsOnlineStatus.UNKNOWN;\n        }\n      } catch (error) {\n        consoleError(\"Error attempting to get agent availability\", error);\n        resultValue = AgentsOnlineStatus.OFFLINE;\n      }\n    }\n    if (initialRestartCount === this.serviceManager.restartCount) {\n      this.serviceManager.fire({\n        type: BusEventType.AGENT_ARE_ANY_AGENTS_ONLINE,\n        areAnyAgentsOnline: resultValue\n      });\n    }\n    return resultValue;\n  }\n  async userTyping(isTyping) {\n    if (!this.serviceDesk || !this.chatStarted) {\n      return;\n    }\n    try {\n      await (this.serviceDesk.userTyping?.(isTyping));\n    } catch (error) {\n      consoleError(\"[userTyping] An error with the service desk occurred.\", error);\n    }\n  }\n  setMessageErrorState(messageID, errorState) {\n    this.serviceManager.store.dispatch(actions.setMessageErrorState(messageID, errorState));\n  }\n  async handleAgentJoinedTimeout() {\n    const message = this.serviceManager.store.getState().languagePack.errors_noAgentsJoined;\n    const {originalMessage: originalMessage, localMessage: localMessage} = createLocalMessageForInlineError(message);\n    await addMessages([ toPair([ localMessage ], originalMessage) ], true, false, !this.isSuspended(), this.serviceManager);\n    this.endChat(false);\n  }\n  cancelAgentJoinedTimer() {\n    if (this.waitingForAgentJoinedTimer) {\n      clearTimeout(this.waitingForAgentJoinedTimer);\n      this.waitingForAgentJoinedTimer = null;\n    }\n  }\n  async screenShareUpdateRequestState(state) {\n    if (!this.persistedAgentState().isConnected) {\n      return;\n    }\n    this.closeScreenShareRequestModal(state);\n    let agentMessageType;\n    switch (state) {\n     case ScreenShareState.ACCEPTED:\n      agentMessageType = SHARING_ACCEPTED;\n      break;\n\n     case ScreenShareState.DECLINED:\n      agentMessageType = SHARING_DECLINED;\n      break;\n\n     case ScreenShareState.CANCELLED:\n      agentMessageType = SHARING_CANCELLED;\n      break;\n\n     case ScreenShareState.ENDED:\n      agentMessageType = SHARING_ENDED;\n      break;\n\n     default:\n      return;\n    }\n    await this.addAgentLocalMessage(agentMessageType);\n  }\n  async screenShareStop() {\n    this.serviceManager.store.dispatch(setIsScreenSharing(false));\n    await this.addAgentLocalMessage(SHARING_ENDED);\n    await (this.serviceDesk?.screenShareStop?.());\n  }\n  async handleHydration(allowReconnect, allowEndChatMessages) {\n    const {store: store} = this.serviceManager;\n    let didReconnect = false;\n    const {isConnected: isConnected} = this.persistedAgentState();\n    if (isConnected) {\n      this.chatStarted = true;\n      if (allowReconnect && this.serviceDesk?.reconnect) {\n        try {\n          store.dispatch(setIsReconnecting(true));\n          setTimeout(this.serviceManager.appWindow.requestFocus);\n          didReconnect = await this.serviceDesk.reconnect();\n        } catch (error) {\n          consoleError(`Error while trying to reconnect to an agent.`, error);\n        }\n      }\n      store.dispatch(setIsReconnecting(false));\n      if (!this.persistedAgentState().isConnected) {\n        this.chatStarted = false;\n        return;\n      }\n      setTimeout(this.serviceManager.appWindow.requestFocus);\n      if (!didReconnect) {\n        this.chatStarted = false;\n        const wasSuspended = this.isSuspended();\n        store.dispatch(endChat());\n        if (allowEndChatMessages) {\n          const {agentProfile: agentProfile} = this.persistedAgentState();\n          await addAgentEndChatMessage(AgentMessageType.CHAT_WAS_ENDED, agentProfile, false, wasSuspended, this.serviceManager);\n          await addBotReturnMessage(0, wasSuspended, this.serviceManager);\n        }\n      } else {\n        this.showLeaveWarning = false;\n      }\n    }\n  }\n  closeScreenShareRequestModal(state) {\n    this.serviceManager.store.dispatch(setShowScreenShareRequest(false));\n    if (this.screenShareRequestPromise) {\n      this.screenShareRequestPromise.doResolve(state);\n      this.screenShareRequestPromise = null;\n    }\n    this.serviceManager.store.dispatch(setIsScreenSharing(state === ScreenShareState.ACCEPTED));\n  }\n  async addAgentLocalMessage(agentMessageType, agentProfile, fireEvents = true, saveInHistory = true) {\n    if (!agentProfile) {\n      agentProfile = this.persistedAgentState().agentProfile;\n    }\n    const {localMessage: localMessage, originalMessage: originalMessage} = await createAgentLocalMessage(agentMessageType, this.serviceManager, agentProfile, fireEvents);\n    await addMessages([ toPair([ localMessage ], originalMessage) ], saveInHistory, false, !this.isSuspended(), this.serviceManager);\n  }\n  persistedAgentState() {\n    return this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState;\n  }\n  isSuspended() {\n    return this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState.isSuspended;\n  }\n}\n\nclass ServiceDeskCallbackImpl {\n  constructor(serviceManager, service) {\n    this.serviceManager = serviceManager;\n    this.service = service;\n  }\n  updateCapabilities(capabilities) {\n    this.serviceManager.store.dispatch(updateCapabilities(cloneDeep(capabilities)));\n  }\n  async updateAgentAvailability(availability) {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    this.serviceManager.store.dispatch(setAgentAvailability(availability));\n  }\n  async agentJoined(profile) {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    this.service.cancelAgentJoinedTimer();\n    this.serviceManager.store.dispatch(setAgentJoined(profile));\n    await this.service.addAgentLocalMessage(AGENT_JOINED, profile);\n    if (this.service.showLeaveWarning) {\n      await this.service.addAgentLocalMessage(RELOAD_WARNING, null, false, false);\n      this.service.showLeaveWarning = false;\n    }\n  }\n  async agentReadMessages() {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    debugLog(\"[ServiceDeskCallbackImpl] agentReadMessages\");\n  }\n  async agentTyping(isTyping) {\n    if (this.persistedAgentState().isConnected && isTyping !== this.service.isAgentTyping) {\n      this.serviceManager.store.dispatch(agentUpdateIsTyping(isTyping));\n      this.service.isAgentTyping = isTyping;\n    }\n  }\n  async sendMessageToUser(message, agentID) {\n    if (!this.service.chatStarted || !message) {\n      return;\n    }\n    const messageResponse = typeof message === \"string\" ? createMessageResponseForText(message) : message;\n    addDefaultsToMessage(messageResponse);\n    if (messageResponse.output?.generic?.length) {\n      messageResponse.output.generic.forEach(messageItem => {\n        if (!messageItem.agent_message_type) {\n          messageItem.agent_message_type = AgentMessageType.FROM_AGENT;\n        }\n      });\n    }\n    const {serviceManager: serviceManager} = this;\n    let agentProfile;\n    if (agentID === undefined) {\n      agentProfile = this.persistedAgentState().agentProfile;\n    } else {\n      agentProfile = this.persistedAgentState().agentProfiles[agentID];\n      if (!agentProfile) {\n        agentProfile = this.persistedAgentState().agentProfile;\n        if (agentProfile) {\n          consoleError(`Got agent ID ${agentID} but no agent with that ID joined the conversation. Using the current agent instead.`);\n        }\n      }\n    }\n    await serviceManager.fire({\n      type: BusEventType.AGENT_PRE_RECEIVE,\n      data: messageResponse,\n      agentProfile: agentProfile\n    });\n    messageResponse.history.agent_profile = agentProfile;\n    const localMessages = messageResponse.output.generic.map(item => outputItemToLocalItem(item, messageResponse));\n    await addMessages([ toPair(localMessages, messageResponse) ], true, true, !this.service.isSuspended(), this.serviceManager);\n    await serviceManager.fire({\n      type: BusEventType.AGENT_RECEIVE,\n      data: messageResponse,\n      agentProfile: agentProfile\n    });\n  }\n  async beginTransferToAnotherAgent(profile) {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    if (profile) {\n      this.serviceManager.store.dispatch(setAgentJoined(profile));\n    }\n    await this.service.addAgentLocalMessage(TRANSFER_TO_AGENT, profile);\n  }\n  async agentLeftChat() {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    await this.service.addAgentLocalMessage(AGENT_LEFT_CHAT);\n    this.service.isAgentTyping = false;\n    this.serviceManager.store.dispatch(setAgentLeftChat());\n  }\n  async agentEndedChat() {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    const event = await this.service.firePreEndChat(true);\n    if (event.cancelEndChat) {\n      return;\n    }\n    await this.service.doEndChat(true, event.preEndChatPayload, true, true, AGENT_ENDED_CHAT);\n  }\n  async setErrorStatus(errorInfo) {\n    if (!this.service.chatStarted) {\n      return;\n    }\n    const {type: type, logInfo: logInfo} = errorInfo;\n    const {store: store} = this.serviceManager;\n    const {isConnecting: isConnecting} = store.getState().agentState;\n    if (logInfo) {\n      consoleError(`An error occurred in the service desk (type=${type})`, logInfo);\n    }\n    if (isConnecting && errorInfo.type === ErrorType.DISCONNECTED && errorInfo.isDisconnected) {\n      errorInfo = {\n        type: ErrorType.CONNECTING\n      };\n    }\n    switch (errorInfo.type) {\n     case ErrorType.DISCONNECTED:\n      {\n        if (errorInfo.isDisconnected) {\n          this.service.showingDisconnectedError = true;\n          await this.service.addAgentLocalMessage(DISCONNECTED, null, true, false);\n          store.dispatch(actions.updateInputState({\n            isReadonly: true\n          }, true));\n        } else if (this.service.showingDisconnectedError) {\n          this.service.showingDisconnectedError = false;\n          await this.service.addAgentLocalMessage(RECONNECTED, null, true, false);\n          store.dispatch(actions.updateInputState({\n            isReadonly: false\n          }, true));\n        }\n        break;\n      }\n\n     case ErrorType.CONNECTING:\n      {\n        const {languagePack: languagePack} = this.serviceManager.store.getState();\n        const message = errorInfo.messageToUser || languagePack.errors_connectingToAgent;\n        const {originalMessage: originalMessage, localMessage: localMessage} = createLocalMessageForInlineError(message);\n        await addMessages([ toPair([ localMessage ], originalMessage) ], true, false, !this.service.isSuspended(), this.serviceManager);\n        this.serviceManager.store.dispatch(setIsConnecting(false, null));\n        this.service.chatStarted = false;\n        this.service.cancelAgentJoinedTimer();\n        await this.service.fireEndChat(false, isConnecting);\n        break;\n      }\n\n     case ErrorType.USER_MESSAGE:\n      {\n        this.service.setMessageErrorState(errorInfo.messageID, MessageErrorState.FAILED);\n        break;\n      }\n    }\n  }\n  async setFileUploadStatus(fileID, isError, errorMessage) {\n    const {store: store} = this.serviceManager;\n    const uploadMessage = store.getState().allMessagesByID[fileID];\n    if (uploadMessage) {\n      ({\n        history: {\n          file_upload_status: FileStatusValue.COMPLETE\n        }\n      });\n      if (isError) {\n        store.dispatch(actions.setMessageHistoryProperty(fileID, \"file_upload_status\", FileStatusValue.COMPLETE));\n        store.dispatch(actions.setMessageHistoryProperty(fileID, \"error_state\", MessageErrorState.FAILED));\n        MessageErrorState.FAILED;\n        if (errorMessage) {\n          const {originalMessage: originalMessage, localMessage: localMessage} = createLocalMessageForInlineError(errorMessage);\n          localMessage.item.agent_message_type = AgentMessageType.INLINE_ERROR;\n          await addMessages([ toPair([ localMessage ], originalMessage) ], true, true, !this.service.isSuspended(), this.serviceManager);\n        }\n      } else {\n        store.dispatch(actions.setMessageHistoryProperty(fileID, \"file_upload_status\", FileStatusValue.SUCCESS));\n        store.dispatch(actions.announceMessage({\n          messageID: \"fileSharing_ariaAnnounceSuccess\"\n        }));\n      }\n    } else if (isError) {\n      store.dispatch(actions.fileUploadInputError(fileID, errorMessage, true));\n    }\n    this.service.uploadingFiles.delete(fileID);\n    this.serviceManager.store.dispatch(updateFilesUploadInProgress(this.service.uploadingFiles.size > 0));\n  }\n  async screenShareRequest() {\n    if (!this.persistedAgentState().isConnected) {\n      return Promise.reject(new Error(\"Cannot request screen sharing if no chat is in progress.\"));\n    }\n    if (!this.service.screenShareRequestPromise) {\n      this.service.screenShareRequestPromise = resolvablePromise();\n      this.serviceManager.store.dispatch(setShowScreenShareRequest(true));\n      await this.service.addAgentLocalMessage(SHARING_REQUESTED);\n    }\n    return this.service.screenShareRequestPromise;\n  }\n  async screenShareEnded() {\n    const wasScreenSharing = this.serviceManager.store.getState().agentState.isScreenSharing;\n    const requestPending = this.service.screenShareRequestPromise;\n    this.service.closeScreenShareRequestModal(ScreenShareState.CANCELLED);\n    if (wasScreenSharing) {\n      this.serviceManager.store.dispatch(setIsScreenSharing(false));\n      await this.service.addAgentLocalMessage(SHARING_ENDED);\n    } else if (requestPending) {\n      await this.service.addAgentLocalMessage(SHARING_CANCELLED);\n    }\n  }\n  persistedAgentState() {\n    return this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState;\n  }\n  persistedState() {\n    return this.serviceManager.store.getState().persistedToBrowserStorage.chatState.agentState.serviceDeskState;\n  }\n  updatePersistedState(state, mergeWithCurrent = true) {\n    const {store: store} = this.serviceManager;\n    let newState;\n    if (mergeWithCurrent) {\n      newState = merge({}, store.getState().persistedToBrowserStorage.chatState.agentState.serviceDeskState, state);\n    } else {\n      newState = cloneDeep(state);\n    }\n    store.dispatch(setPersistedServiceDeskState(deepFreeze(newState)));\n  }\n}\n\nfunction createService(serviceManager) {\n  return new HumanAgentServiceImpl(serviceManager);\n}\n\nfunction validateCustomServiceDesk(serviceDesk) {\n  if (!serviceDesk) {\n    consoleError(\"The custom service desk does not appear to be valid. No service desk was provided.\", serviceDesk);\n  } else if (typeof serviceDesk !== \"object\") {\n    consoleError(`The custom service desk does not appear to be valid. The type should be \"object\" but is \"${typeof serviceDesk}\"`, serviceDesk);\n  } else {\n    const propertyNames = [ \"startChat\", \"endChat\", \"sendMessageToAgent\" ];\n    propertyNames.forEach(propertyName => {\n      const value = serviceDesk[propertyName];\n      if (typeof value !== \"function\") {\n        consoleError(`The custom service desk does not appear to be valid. The type of property \"${propertyName}\"should be \"function\" but is \"${typeof value}\"`, value, serviceDesk);\n      }\n    });\n    const name = serviceDesk.getName?.();\n    if (!name) {\n      throw Error(\"The custom service desk does not have a name.\");\n    }\n    if (name && (typeof name !== \"string\" || name.length > 40)) {\n      throw new Error(`The custom service desk name \"${name}\" is not valid.`);\n    }\n  }\n}\n\nexport { HumanAgentServiceImpl, createService, validateCustomServiceDesk };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nvar MessageErrorState;\n\n(function(MessageErrorState) {\n  MessageErrorState[MessageErrorState[\"NONE\"] = 1] = \"NONE\";\n  MessageErrorState[MessageErrorState[\"FAILED\"] = 2] = \"FAILED\";\n  MessageErrorState[MessageErrorState[\"RETRYING\"] = 3] = \"RETRYING\";\n  MessageErrorState[MessageErrorState[\"WAITING\"] = 4] = \"WAITING\";\n})(MessageErrorState || (MessageErrorState = {}));\n\nexport { MessageErrorState };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction resolvablePromise() {\n  let resolveFunction;\n  let rejectFunction;\n  const promise = new Promise((resolve, reject) => {\n    resolveFunction = resolve;\n    rejectFunction = reject;\n  });\n  promise.doResolve = resolveValue => {\n    promise.isResolved = true;\n    promise.isComplete = true;\n    resolveFunction(resolveValue);\n  };\n  promise.doReject = rejectValue => {\n    promise.isRejected = true;\n    promise.isComplete = true;\n    rejectFunction(rejectValue);\n  };\n  promise.isResolved = false;\n  promise.isRejected = false;\n  promise.isComplete = false;\n  return promise;\n}\n\nexport { resolvablePromise };\n","import { detect } from \"detect-browser\";\n\nimport memoizeOne from \"memoize-one\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const isClient = typeof window !== \"undefined\" && typeof navigator !== \"undefined\";\n\nconst browser = isClient ? detect() : undefined;\n\nlet screenWidth = 0;\n\nlet screenHeight = 0;\n\nif (isClient) {\n  screenWidth = window.screen.width;\n  screenHeight = window.screen.height;\n}\n\nconst IS_IOS = browser?.os === \"iOS\";\n\nconst IS_ANDROID = browser?.os === \"Android OS\";\n\nconst IS_MOBILE = IS_IOS || IS_ANDROID;\n\nconst IS_PHONE = IS_MOBILE && (screenWidth < 500 || screenHeight < 500);\n\nconst IS_PHONE_IN_PORTRAIT_MODE = IS_PHONE && screenWidth < 500;\n\nfunction isSessionStorageAvailable() {\n  if (!isClient || !window.sessionStorage) {\n    return false;\n  }\n  try {\n    window.sessionStorage.setItem(\"web-chat-test-item\", \"true\");\n    window.sessionStorage.getItem(\"web-chat-test-item\");\n    window.sessionStorage.removeItem(\"web-chat-test-item\");\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nconst IS_SESSION_STORAGE = memoizeOne(isSessionStorageAvailable);\n\nfunction getURLHostName(url) {\n  try {\n    return new URL(url).hostname;\n  } catch {\n    return url;\n  }\n}\n\nfunction conditionalSetTimeout(operation, timeout) {\n  if (timeout) {\n    return setTimeout(operation, timeout);\n  }\n  operation();\n  return null;\n}\n\nexport { IS_IOS, IS_MOBILE, IS_PHONE, IS_PHONE_IN_PORTRAIT_MODE, IS_SESSION_STORAGE, conditionalSetTimeout, getURLHostName };\n","import { v4 } from \"uuid\";\n\nexport { UUIDType } from \"./UUIDType.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function uuid(_type) {\n  return v4();\n}\n\nexport { uuid };\n","import cloneDeep from \"lodash-es/cloneDeep.js\";\n\nimport \"./constants.js\";\n\nimport { findLastWithMap } from \"./lang/arrayUtils.js\";\n\nimport { uuid } from \"./lang/uuid.js\";\n\nimport { MessageResponseTypes, MessageInputType, AgentMessageType, InternalMessageRequestType, ButtonItemType } from \"../../../types/messaging/Messages.js\";\n\nimport { FileStatusValue } from \"../../../types/instance/apiTypes.js\";\n\nimport { UUIDType } from \"./lang/UUIDType.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ const THREAD_ID_MAIN = \"main\";\n\nfunction isResponse(message) {\n  return message && message.output !== undefined;\n}\n\nfunction isDateResponseType(localMessage) {\n  return localMessage?.item.response_type === MessageResponseTypes.DATE;\n}\n\nfunction addDefaultsToMessage(fullMessage) {\n  if (!fullMessage.id) {\n    fullMessage.id = uuid(UUIDType.MESSAGE);\n  }\n  if (!fullMessage.thread_id) {\n    fullMessage.thread_id = THREAD_ID_MAIN;\n  }\n  if (!fullMessage.history) {\n    fullMessage.history = {};\n  }\n  if (!fullMessage.history.timestamp) {\n    fullMessage.history.timestamp = Date.now();\n  }\n  if (fullMessage.history.from_history === undefined) {\n    fullMessage.history.from_history = false;\n  }\n  return fullMessage;\n}\n\nfunction isRequest(message) {\n  return message?.input !== undefined;\n}\n\nfunction isLiveAgentMessage(message) {\n  return Boolean(message.item.agent_message_type);\n}\n\nfunction hasLiveAgentMessage(message) {\n  return isResponse(message) && Boolean(message.output.generic?.find(item => item?.agent_message_type)) || isRequest(message) && Boolean(message.input.agent_message_type);\n}\n\nfunction isEventRequest(message) {\n  return message?.input?.message_type === MessageInputType.EVENT;\n}\n\nfunction isTextItem(item) {\n  return item && item.response_type === \"text\" && item.text !== undefined;\n}\n\nfunction isTyping(message) {\n  return message.response_type === MessageResponseTypes.PAUSE && message.typing == true;\n}\n\nfunction isPause(message) {\n  return message.response_type === MessageResponseTypes.PAUSE;\n}\n\nfunction isOptionItem(item) {\n  return item?.response_type === MessageResponseTypes.OPTION && item.options !== undefined;\n}\n\nfunction createMessageRequestForChoice(choice, relatedResponseID) {\n  const messageRequest = {\n    id: uuid(UUIDType.MESSAGE),\n    thread_id: THREAD_ID_MAIN,\n    ...cloneDeep(choice.value)\n  };\n  messageRequest.history = {\n    label: choice.label,\n    related_message_id: relatedResponseID\n  };\n  return messageRequest;\n}\n\nfunction createMessageRequestForButtonItemOption(buttonItem, relatedResponseID) {\n  const messageRequest = {\n    id: uuid(UUIDType.MESSAGE),\n    thread_id: THREAD_ID_MAIN,\n    input: null\n  };\n  if (buttonItem.value?.input?.text) {\n    messageRequest.input = cloneDeep(buttonItem.value.input);\n  } else {\n    messageRequest.input = {\n      text: buttonItem.label\n    };\n  }\n  messageRequest.history = {\n    related_message_id: relatedResponseID\n  };\n  return messageRequest;\n}\n\nfunction createWelcomeRequest() {\n  return addDefaultsToMessage({\n    id: uuid(UUIDType.MESSAGE),\n    input: {\n      text: \"\"\n    },\n    history: {\n      silent: true,\n      is_welcome_request: true\n    },\n    thread_id: THREAD_ID_MAIN\n  });\n}\n\nfunction createMessageRequestForText(text) {\n  return addDefaultsToMessage({\n    input: {\n      text: text,\n      message_type: MessageInputType.TEXT\n    }\n  });\n}\n\nfunction createMessageRequestForFileUpload(upload) {\n  return addDefaultsToMessage({\n    id: upload.id,\n    input: {\n      text: upload.file.name,\n      message_type: InternalMessageRequestType.FILE,\n      agent_message_type: AgentMessageType.FROM_USER\n    },\n    history: {\n      file_upload_status: FileStatusValue.UPLOADING\n    }\n  });\n}\n\nfunction createMessageRequestForDate(inputString, userString, relatedResponseID) {\n  const messageRequest = createMessageRequestForText(inputString);\n  messageRequest.history = {\n    label: userString,\n    related_message_id: relatedResponseID\n  };\n  return messageRequest;\n}\n\nfunction createMessageResponseForText(text, threadID = THREAD_ID_MAIN, responseType = MessageResponseTypes.TEXT, context) {\n  const textItem = {\n    response_type: responseType,\n    text: text\n  };\n  const messageResponse = {\n    id: uuid(UUIDType.MESSAGE),\n    thread_id: threadID,\n    output: {\n      generic: [ textItem ]\n    }\n  };\n  return messageResponse;\n}\n\nfunction createMessageResponseForItem(item, context) {\n  const messageResponse = {\n    output: {\n      generic: [ item ]\n    }\n  };\n  return addDefaultsToMessage(messageResponse);\n}\n\nfunction isConnectToAgent(response) {\n  return response?.response_type === MessageResponseTypes.CONNECT_TO_AGENT;\n}\n\nfunction isCardResponseType(response) {\n  return response?.response_type === MessageResponseTypes.CARD;\n}\n\nfunction isCarouselResponseType(response) {\n  return response?.response_type === MessageResponseTypes.CAROUSEL;\n}\n\nfunction isButtonResponseType(response) {\n  return response?.response_type === MessageResponseTypes.BUTTON;\n}\n\nfunction isShowPanelButtonType(response) {\n  return isButtonResponseType(response) && response.button_type === ButtonItemType.SHOW_PANEL;\n}\n\nfunction isResponseWithNestedItems(item) {\n  if (isButtonResponseType(item)) {\n    return hasBodyOrFooter(item.panel);\n  }\n  if (isCardResponseType(item)) {\n    return hasBodyOrFooter(item);\n  }\n  if (isCarouselResponseType(item)) {\n    return item.items !== undefined;\n  }\n  return isGridResponseType(item);\n}\n\nfunction hasBodyOrFooter(item) {\n  return item?.body !== undefined || item?.footer !== undefined;\n}\n\nfunction renderAsUserDefinedMessage(messageItem) {\n  const responseType = messageItem.response_type;\n  switch (responseType) {\n   case MessageResponseTypes.TEXT:\n   case MessageResponseTypes.IMAGE:\n   case MessageResponseTypes.OPTION:\n   case MessageResponseTypes.CONNECT_TO_AGENT:\n   case MessageResponseTypes.IFRAME:\n   case MessageResponseTypes.VIDEO:\n   case MessageResponseTypes.AUDIO:\n   case MessageResponseTypes.DATE:\n   case MessageResponseTypes.CONVERSATIONAL_SEARCH:\n   case MessageResponseTypes.TABLE:\n   case MessageResponseTypes.INLINE_ERROR:\n   case MessageResponseTypes.CARD:\n   case MessageResponseTypes.CAROUSEL:\n   case MessageResponseTypes.BUTTON:\n   case MessageResponseTypes.GRID:\n    return false;\n\n   default:\n    return !renderAsTour(messageItem);\n  }\n}\n\nfunction renderAsTour(messageItem) {\n  return hasTourUserDefinedType(messageItem);\n}\n\nfunction hasTourUserDefinedType(message) {\n  return message?.user_defined?.user_defined_type === \"IBM_BETA_JOURNEYS_TOUR\";\n}\n\nfunction hasServiceDesk(config) {\n  return Boolean(config.public.serviceDeskFactory);\n}\n\nfunction isItemSupportedInResponseBody(item) {\n  switch (item.response_type) {\n   case MessageResponseTypes.IMAGE:\n   case MessageResponseTypes.IFRAME:\n   case MessageResponseTypes.VIDEO:\n   case MessageResponseTypes.AUDIO:\n   case MessageResponseTypes.TEXT:\n   case MessageResponseTypes.USER_DEFINED:\n   case MessageResponseTypes.CARD:\n   case MessageResponseTypes.GRID:\n    return true;\n\n   default:\n    return false;\n  }\n}\n\nfunction isSingleItemCarousel(messageItem) {\n  return isCarouselResponseType(messageItem) && messageItem.items.length === 1;\n}\n\nfunction isGridResponseType(item) {\n  return item?.response_type === MessageResponseTypes.GRID;\n}\n\nfunction getOptionType(preference, totalOptions) {\n  let type = \"button\";\n  if (preference && preference === \"button\") {\n    type = \"button\";\n  } else if (preference && preference === \"dropdown\") {\n    type = \"dropdown\";\n  } else if (totalOptions > 4) {\n    type = \"dropdown\";\n  }\n  return type;\n}\n\nfunction isStreamPartialItem(chunk) {\n  return Boolean(chunk.partial_item);\n}\n\nfunction isStreamCompleteItem(chunk) {\n  return Boolean(chunk.complete_item);\n}\n\nfunction isStreamFinalResponse(chunk) {\n  return Boolean(chunk.final_response);\n}\n\nfunction streamItemID(messageID, item) {\n  const itemID = item?.streaming_metadata?.id;\n  if (!itemID) {\n    return null;\n  }\n  return `${messageID}-${itemID}`;\n}\n\nfunction getMediaDimensions(item) {\n  return item.dimensions;\n}\n\nfunction getLastBotResponseWithContext(state) {\n  const messageIDs = state.botMessageState.messageIDs || [];\n  return findLastWithMap(messageIDs, state.allMessagesByID, message => isResponse(message) && !hasLiveAgentMessage(message) && Boolean(message.context));\n}\n\nexport { THREAD_ID_MAIN, addDefaultsToMessage, createMessageRequestForButtonItemOption, createMessageRequestForChoice, createMessageRequestForDate, createMessageRequestForFileUpload, createMessageRequestForText, createMessageResponseForItem, createMessageResponseForText, createWelcomeRequest, getLastBotResponseWithContext, getMediaDimensions, getOptionType, hasServiceDesk, hasTourUserDefinedType, isButtonResponseType, isCardResponseType, isCarouselResponseType, isConnectToAgent, isDateResponseType, isEventRequest, isGridResponseType, isItemSupportedInResponseBody, isLiveAgentMessage, isOptionItem, isPause, isRequest, isResponse, isResponseWithNestedItems, isShowPanelButtonType, isSingleItemCarousel, isStreamCompleteItem, isStreamFinalResponse, isStreamPartialItem, isTextItem, isTyping, renderAsTour, renderAsUserDefinedMessage, streamItemID };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction deepFreeze(object) {\n  Object.freeze(object);\n  Object.getOwnPropertyNames(object).forEach(prop => {\n    if (Object.prototype.hasOwnProperty.call(object, prop) && object[prop] !== null && (typeof object[prop] === \"object\" || typeof object[prop] === \"function\") && !Object.isFrozen(object[prop])) {\n      deepFreeze(object[prop]);\n    }\n  });\n  return object;\n}\n\nexport { deepFreeze };\n","import { MessageResponseTypes } from \"../../../types/messaging/Messages.js\";\n\nimport { uuid } from \"../utils/lang/uuid.js\";\n\nimport { UUIDType } from \"../utils/lang/UUIDType.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function inputItemToLocalItem(message, originalUserText, id = uuid(UUIDType.LOCAL_MESSAGE)) {\n  const localMessage = {\n    item: {\n      response_type: MessageResponseTypes.TEXT,\n      ...message.input\n    },\n    ui_state: {\n      id: id,\n      originalUserText: originalUserText,\n      needsAnnouncement: false\n    },\n    fullMessageID: message.id\n  };\n  return localMessage;\n}\n\nexport { inputItemToLocalItem as default };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst HA_SET_AGENT_AVAILABILITY = \"HA_SET_AGENT_AVAILABILITY\";\n\nconst HA_SET_IS_CONNECTING = \"HA_SET_IS_CONNECTING\";\n\nconst HA_SET_IS_RECONNECTING = \"HA_SET_IS_RECONNECTING\";\n\nconst HA_SET_AGENT_JOINED = \"HA_SET_AGENT_JOINED\";\n\nconst HA_SET_AGENT_LEFT_CHAT = \"HA_SET_AGENT_LEFT_CHAT\";\n\nconst HA_END_CHAT = \"HA_END_CHAT\";\n\nconst HA_UPDATE_CAPABILITIES = \"HA_UPDATE_CAPABILITIES\";\n\nconst HA_UPDATE_FILE_UPLOAD_IN_PROGRESS = \"HA_UPDATE_FILE_UPLOAD_IN_PROGRESS\";\n\nconst HA_SET_SHOW_SCREEN_SHARE_REQUEST = \"HA_SET_SHOW_SCREEN_SHARE_REQUEST\";\n\nconst HA_SET_IS_SCREEN_SHARING = \"HA_SET_IS_SCREEN_SHARING\";\n\nconst HA_SET_PERSISTED_STATE = \"HA_SET_PERSISTED_STATE\";\n\nconst HA_UPDATE_IS_SUSPENDED = \"HA_UPDATE_IS_SUSPENDED\";\n\nconst HA_UPDATE_IS_TYPING = \"HA_UPDATE_IS_TYPING\";\n\nfunction setIsConnecting(isConnecting, localMessageID) {\n  return {\n    type: HA_SET_IS_CONNECTING,\n    isConnecting: isConnecting,\n    localMessageID: localMessageID\n  };\n}\n\nfunction setIsReconnecting(isReconnecting) {\n  return {\n    type: HA_SET_IS_RECONNECTING,\n    isReconnecting: isReconnecting\n  };\n}\n\nfunction setAgentLeftChat() {\n  return {\n    type: HA_SET_AGENT_LEFT_CHAT\n  };\n}\n\nfunction endChat() {\n  return {\n    type: HA_END_CHAT\n  };\n}\n\nfunction setAgentAvailability(availability) {\n  return {\n    type: HA_SET_AGENT_AVAILABILITY,\n    availability: availability\n  };\n}\n\nfunction setAgentJoined(agentProfile) {\n  return {\n    type: HA_SET_AGENT_JOINED,\n    agentProfile: agentProfile\n  };\n}\n\nfunction updateCapabilities(capabilities) {\n  return {\n    type: HA_UPDATE_CAPABILITIES,\n    capabilities: capabilities\n  };\n}\n\nfunction updateFilesUploadInProgress(fileUploadInProgress) {\n  return {\n    type: HA_UPDATE_FILE_UPLOAD_IN_PROGRESS,\n    fileUploadInProgress: fileUploadInProgress\n  };\n}\n\nfunction setShowScreenShareRequest(showRequest) {\n  return {\n    type: HA_SET_SHOW_SCREEN_SHARE_REQUEST,\n    showRequest: showRequest\n  };\n}\n\nfunction setIsScreenSharing(isSharing) {\n  return {\n    type: HA_SET_IS_SCREEN_SHARING,\n    isSharing: isSharing\n  };\n}\n\nfunction setPersistedServiceDeskState(state) {\n  return {\n    type: HA_SET_PERSISTED_STATE,\n    state: state\n  };\n}\n\nfunction agentUpdateIsSuspended(isSuspended) {\n  return {\n    type: HA_UPDATE_IS_SUSPENDED,\n    isSuspended: isSuspended\n  };\n}\n\nfunction agentUpdateIsTyping(isTyping) {\n  return {\n    type: HA_UPDATE_IS_TYPING,\n    isTyping: isTyping\n  };\n}\n\nexport { HA_END_CHAT, HA_SET_AGENT_AVAILABILITY, HA_SET_AGENT_JOINED, HA_SET_AGENT_LEFT_CHAT, HA_SET_IS_CONNECTING, HA_SET_IS_RECONNECTING, HA_SET_IS_SCREEN_SHARING, HA_SET_PERSISTED_STATE, HA_SET_SHOW_SCREEN_SHARE_REQUEST, HA_UPDATE_CAPABILITIES, HA_UPDATE_FILE_UPLOAD_IN_PROGRESS, HA_UPDATE_IS_SUSPENDED, HA_UPDATE_IS_TYPING, agentUpdateIsSuspended, agentUpdateIsTyping, endChat, setAgentAvailability, setAgentJoined, setAgentLeftChat, setIsConnecting, setIsReconnecting, setIsScreenSharing, setPersistedServiceDeskState, setShowScreenShareRequest, updateCapabilities, updateFilesUploadInProgress };\n"],"names":["UUIDType","asArray","value","Array","isArray","async","asyncForEach","array","callbackFunction","index","length","findLast","predicate","startAt","lastIndex","findLastIndex","undefined","findLastWithMap","keys","map","arrayLastValue","outputItemToLocalItem","messageItem","fullMessage","isLatestWelcomeNode","disableFadeAnimation","localMessage","ui_state","id","streamItemID","uuid","LOCAL_MESSAGE","needsAnnouncement","history","from_history","item","fullMessageID","isWelcomeResponse","createLocalMessageForInlineError","text","originalMessage","createMessageResponseForItem","createLocalMessageForItem","response_type","MessageResponseTypes","INLINE_ERROR","createLocalMessageItemsForNestedMessageItems","localMessageItem","fromHistory","nestedLocalMessageItems","allowFooter","isGridResponseType","gridLocalMessageItemIDs","rows","row","cells","cell","cellLocalMessageItemIDs","createLocalMessageItemsForNestedType","items","nestedMessageItem","isSupportedMessageItemInBody","isCarouselResponseType","itemsLocalMessageItemIDs","bodyItems","body","panel","bodyLocalMessageItemIDs","isShowPanelButtonType","footerItems","footer","footerLocalMessageItemIDs","rootMessageItem","isButtonResponseType","isSupportedMessageItemInFooter","type","nestedMessageItemIDs","isSupported","forEach","nestedLocalMessageItem","push","isResponseWithNestedItems","consoleError","CARD","isCardResponseType","isItemSupportedInResponseBody","CAROUSEL","BUTTON","button_type","ButtonItemType","SHOW_PANEL","GRID","CHANGE_STATE","UPDATE_BOT_NAME","UPDATE_BOT_AVATAR_URL","UPDATE_LAUNCHER_AVATAR_URL","UPDATE_MAIN_HEADER_TITLE","HYDRATE_CHAT","HYDRATE_MESSAGE_HISTORY","ADD_LOCAL_MESSAGE_ITEM","REMOVE_MESSAGES","UPDATE_LOCAL_MESSAGE_ITEM","SET_APP_STATE_VALUE","ADD_IS_TYPING_COUNTER","ADD_IS_LOADING_COUNTER","ADD_IS_HYDRATING_COUNTER","SET_VIEW_STATE","SET_VIEW_CHANGING","SET_INITIAL_VIEW_CHANGE_COMPLETE","UPDATE_CSS_VARIABLES","MESSAGE_SET_OPTION_SELECTED","SET_MESSAGE_UI_PROPERTY","SET_MESSAGE_HISTORY_PROPERTY","MERGE_HISTORY","SET_LAUNCHER_PROPERTY","SET_LAUNCHER_CONFIG_PROPERTY","ANNOUNCE_MESSAGE","SET_CHAT_MESSAGES_PROPERTY","RESTART_CONVERSATION","ACCEPTED_DISCLAIMER","ADD_MESSAGE","UPDATE_HOME_SCREEN_CONFIG","UPDATE_HAS_SENT_NON_WELCOME_MESSAGE","UPDATE_PERSISTED_CHAT_STATE","SET_TOUR_DATA","CLEAR_TOUR_DATA","CHANGE_STEP_IN_TOUR","SET_HOME_SCREEN_IS_OPEN","UPDATE_LAUNCHER_CONFIG","UPDATE_MESSAGE","SET_LAUNCHER_MINIMIZED","CLOSE_IFRAME_PANEL","OPEN_IFRAME_CONTENT","SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN","SET_CUSTOM_PANEL_OPTIONS","SET_CUSTOM_PANEL_OPEN","TOGGLE_HOME_SCREEN","UPDATE_INPUT_STATE","SET_IS_BROWSER_PAGE_VISIBLE","ADD_INPUT_FILE","CLEAR_INPUT_FILES","REMOVE_INPUT_FILE","REMOVE_LOCAL_MESSAGE_ITEM","FILE_UPLOAD_INPUT_ERROR","ADD_NESTED_MESSAGES","SET_RESPONSE_PANEL_IS_OPEN","SET_RESPONSE_PANEL_CONTENT","STREAMING_ADD_CHUNK","STREAMING_START","STREAMING_MERGE_HISTORY","ADD_NOTIFICATION","REMOVE_ALL_NOTIFICATIONS","REMOVE_NOTIFICATIONS","UPDATE_CHAT_HEADER_CONFIG","UPDATE_MAX_VISIBLE_HEADER_OBJECTS","SET_STOP_STREAMING_BUTTON_VISIBLE","SET_STOP_STREAMING_BUTTON_DISABLED","SET_STREAM_ID","UPDATE_MAIN_HEADER_AVATAR","actions","changeState","partialState","chatWasHydrated","hydrateMessageHistory","messageHistory","removeMessages","messageIDs","restartConversation","addLocalMessageItem","message","addMessage","addAfterID","updateLocalMessageItem","updateMessage","messageSetOptionSelected","messageID","sentMessage","updatePersistedChatState","chatState","setTourData","newActiveTourMessageID","clearTourData","changeStepInTour","newStepNumber","updateHasSentNonWelcomeMessage","hasSentNonWelcomeMessage","setAppStateValue","key","addIsTypingCounter","addToIsTyping","addIsLoadingCounter","addToIsLoading","addIsHydratingCounter","addToIsHydrating","updateBotName","name","updateMainHeaderTitle","title","updateBotAvatarURL","url","updateCSSVariables","variables","publicVars","whiteLabelVariables","updateHomeScreenConfig","homeScreenConfig","setViewState","viewState","setViewChanging","viewChanging","setInitialViewChangeComplete","changeComplete","setMessageUIProperty","localMessageID","propertyName","propertyValue","setLauncherProperty","setLauncherConfigProperty","launcherType","setMessageHistoryProperty","mergeMessageHistory","setMessageErrorState","errorState","setMessageWasAnnounced","announceMessage","setChatMessagesStateProperty","addNotification","notification","notificationID","removeNotifications","groupID","removeAllNotifications","acceptDisclaimer","setHomeScreenIsOpen","isOpen","updateLauncherConfig","launcherConfig","setLauncherMinimized","closeIFramePanel","setIFrameContent","setViewSourcePanelIsOpen","citationItem","relatedSearchResult","setCustomPanelConfigOptions","options","setCustomPanelOpen","toggleHomeScreen","updateInputState","newState","isInputToAgent","setIsBrowserPageVisible","isVisible","addInputFile","file","removeFileUpload","fileID","removeLocalMessageItem","localMessageItemID","fileUploadInputError","errorMessage","clearInputFiles","addNestedMessages","localMessageItems","setResponsePanelIsOpen","setResponsePanelContent","isMessageForInput","streamingStart","streamingMergeHistory","streamingAddChunk","chunkItem","isCompleteItem","updateChatHeaderConfig","chatHeaderConfig","setMaxVisibleHeaderObjects","maxTotal","setStopStreamingButtonVisible","setStopStreamingButtonDisabled","isDisabled","setStreamID","currentStreamID","updateMainHeaderAvatar","config","toPair","localMessages","createAgentLocalMessage","agentMessageType","serviceManager","agentProfile","fireEvents","intl","nickname","messageKey","AgentMessageType","AGENT_JOINED","RELOAD_WARNING","AGENT_LEFT_CHAT","AGENT_ENDED_CHAT","TRANSFER_TO_AGENT","USER_ENDED_CHAT","CHAT_WAS_ENDED","DISCONNECTED","RECONNECTED","SHARING_REQUESTED","SHARING_ACCEPTED","SHARING_DECLINED","SHARING_CANCELLED","SHARING_ENDED","formatMessage","personName","getAgentStatusMessageText","result","createAgentLocalMessageForType","agent_profile","fire","BusEventType","AGENT_PRE_RECEIVE","data","deepFreeze","AGENT_RECEIVE","TEXT","agent_message_type","addMessages","messagePairs","saveInHistory","fireHistoryEvent","showLiveMessages","handleUserDefinedResponseItems","store","dispatch","addBotReturnMessage","botReturnDelay","wasSuspended","botReturn","languagePack","agent_botReturned","createBotReturnMessage","getState","initialRestartCount","restartCount","conditionalSetTimeout","addAgentEndChatMessage","endChatMessage","FROM_USER","HumanAgentServiceImpl","constructor","this","chatStarted","showingDisconnectedError","isAgentTyping","uploadingFiles","Set","showLeaveWarning","getCustomServiceDeskName","public","serviceDeskFactory","serviceDesk","getName","initialize","Error","instance","state","persistedToBrowserStorage","serviceDeskState","cloneDeep","agentState","serviceDeskCallback","ServiceDeskCallbackImpl","parameters","callback","persistedState","validateCustomServiceDesk","debugLog","reconnect","startChat","localConnectMessage","isSuspended","endChat","clear","updateFilesUploadInProgress","size","event","AGENT_PRE_START_CHAT","cancelStartChat","fireEndChat","setIsConnecting","agentJoinTimeout","agentJoinTimeoutSeconds","waitingForAgentJoinedTimer","setTimeout","handleAgentJoinedTimeout","preStartChatPayload","error","setErrorStatus","ErrorType","CONNECTING","logInfo","cancelAgentJoinedTimer","firePreEndChat","endedByAgent","AGENT_PRE_END_CHAT","preEndChatPayload","cancelEndChat","requestCancelled","AGENT_END_CHAT","endedByUser","showAgentLeftMessage","showBotReturnMessage","isConnected","persistedAgentState","endMessageType","doEndChat","agentEndChatMessageType","closeScreenShareRequestModal","ScreenShareState","CANCELLED","resolveOrTimeout","sendMessageToAgent","uploads","createMessageRequestForText","input","AGENT_PRE_SEND","files","textMessage","inputItemToLocalItem","pairs","upload","uploadOriginalMessage","createMessageRequestForFileUpload","uploadLocalMessage","add","messageSucceeded","messageFailed","MessageErrorState","RETRYING","FAILED","additionalData","filesToUpload","NONE","AGENT_SEND","filesSelectedForUpload","userReadMessages","checkAreAnyAgentsOnline","connectMessage","resultValue","areAnyAgentsOnline","timeoutSeconds","availabilityTimeoutSeconds","timeout","AgentsOnlineStatus","ONLINE","OFFLINE","UNKNOWN","AGENT_ARE_ANY_AGENTS_ONLINE","userTyping","isTyping","errors_noAgentsJoined","clearTimeout","screenShareUpdateRequestState","ACCEPTED","DECLINED","ENDED","addAgentLocalMessage","screenShareStop","setIsScreenSharing","handleHydration","allowReconnect","allowEndChatMessages","didReconnect","setIsReconnecting","appWindow","requestFocus","setShowScreenShareRequest","screenShareRequestPromise","doResolve","service","updateCapabilities","capabilities","updateAgentAvailability","availability","setAgentAvailability","agentJoined","profile","setAgentJoined","agentReadMessages","agentTyping","agentUpdateIsTyping","sendMessageToUser","agentID","messageResponse","createMessageResponseForText","addDefaultsToMessage","output","generic","FROM_AGENT","agentProfiles","beginTransferToAnotherAgent","agentLeftChat","setAgentLeftChat","agentEndedChat","errorInfo","isConnecting","isDisconnected","isReadonly","messageToUser","errors_connectingToAgent","USER_MESSAGE","setFileUploadStatus","isError","allMessagesByID","FileStatusValue","COMPLETE","SUCCESS","delete","screenShareRequest","resolvablePromise","Promise","reject","screenShareEnded","wasScreenSharing","isScreenSharing","requestPending","updatePersistedState","mergeWithCurrent","merge","setPersistedServiceDeskState","createService","resolveFunction","rejectFunction","promise","resolve","resolveValue","isResolved","isComplete","doReject","rejectValue","isRejected","isClient","window","navigator","browser","detect","screenWidth","screenHeight","screen","width","height","IS_IOS","os","IS_MOBILE","IS_PHONE","IS_PHONE_IN_PORTRAIT_MODE","IS_SESSION_STORAGE","memoizeOne","sessionStorage","setItem","getItem","removeItem","getURLHostName","URL","hostname","operation","_type","v4","THREAD_ID_MAIN","isResponse","isDateResponseType","DATE","MESSAGE","thread_id","timestamp","Date","now","isRequest","isLiveAgentMessage","Boolean","isEventRequest","message_type","MessageInputType","EVENT","isTextItem","PAUSE","typing","isPause","isOptionItem","OPTION","createMessageRequestForChoice","choice","relatedResponseID","messageRequest","label","related_message_id","createMessageRequestForButtonItemOption","buttonItem","createWelcomeRequest","silent","is_welcome_request","InternalMessageRequestType","FILE","file_upload_status","UPLOADING","createMessageRequestForDate","inputString","userString","threadID","responseType","context","textItem","isConnectToAgent","response","CONNECT_TO_AGENT","hasBodyOrFooter","renderAsUserDefinedMessage","IMAGE","IFRAME","VIDEO","AUDIO","CONVERSATIONAL_SEARCH","TABLE","renderAsTour","hasTourUserDefinedType","user_defined","user_defined_type","hasServiceDesk","USER_DEFINED","isSingleItemCarousel","getOptionType","preference","totalOptions","isStreamPartialItem","chunk","partial_item","isStreamCompleteItem","complete_item","isStreamFinalResponse","final_response","itemID","streaming_metadata","getMediaDimensions","dimensions","getLastBotResponseWithContext","botMessageState","find","hasLiveAgentMessage","object","Object","freeze","getOwnPropertyNames","prop","prototype","hasOwnProperty","call","isFrozen","originalUserText","HA_SET_AGENT_AVAILABILITY","HA_SET_IS_CONNECTING","HA_SET_IS_RECONNECTING","HA_SET_AGENT_JOINED","HA_SET_AGENT_LEFT_CHAT","HA_END_CHAT","HA_UPDATE_CAPABILITIES","HA_UPDATE_FILE_UPLOAD_IN_PROGRESS","HA_SET_SHOW_SCREEN_SHARE_REQUEST","HA_SET_IS_SCREEN_SHARING","HA_SET_PERSISTED_STATE","HA_UPDATE_IS_SUSPENDED","HA_UPDATE_IS_TYPING","isReconnecting","fileUploadInProgress","showRequest","isSharing","agentUpdateIsSuspended"],"sourceRoot":""}