{"version":3,"file":"3955.bundle.js","mappings":";0OAiBI,SAASA,GAAoBC,UAAWA,EAAWC,SAAUA,EAAUC,OAAQA,EAAQC,gBAAiBA,EAAiBC,gBAAiBA,EAAiBC,MAAOA,EAAOC,eAAgBA,EAAgBC,WAAYA,EAAYC,uBAAwBA,EAAwBC,eAAgBA,EAAgBC,aAAcA,KAAiBC,GAAcC,GAChW,MAAMC,GAAoBC,EAAAA,EAAAA,IAAYC,GAASA,EAAMC,OAAOC,OAAOC,cAAcL,mBAC3EM,GAAYC,EAAAA,EAAAA,UAElB,OADAC,EAAAA,EAAAA,qBAAoBT,EAAK,IAAMO,EAAUG,SAClCC,EAAAA,cAAoBC,EAAW,CACpCC,OAAQvB,EACRwB,iBAAkB,CAChBC,yBAAyB,EACzBC,yBAA0BC,EAAAA,GAC1BC,eAAe,IAEhBP,EAAAA,cAAoB,MAAO,CAC5BvB,UAAWA,IACTG,GAAmBoB,EAAAA,cAAoBQ,EAAAA,EAAc,IACpDpB,EACHC,IAAKO,EACLN,kBAAmBA,EACnBJ,eAAgBA,EAChBuB,kBAAmBxB,EACnByB,gBAAiB3B,EACjBF,gBAAiBA,EACjB8B,YAAa7B,EACbE,WAAYA,EACZG,aAAcA,EACdyB,YAAY,IACVZ,EAAAA,cAAoB,MAAO,CAC7BvB,UAAW,mBACVC,IACL,CAEA,MAAMmC,EAA2Bb,EAAAA,KAAWA,EAAAA,WAAiBxB,G,sLCtBzD,SAASsC,EAA4BC,GACvC,MAAOpC,OAAQA,EAAQqC,kBAAmBA,EAAmBC,iBAAkBA,EAAkBC,UAAWA,EAAWC,iBAAkBA,EAAkBC,iBAAkBA,EAAkB3C,UAAWA,EAAWK,MAAOA,EAAOE,WAAYA,EAAYqC,aAAcA,EAAcC,YAAaA,EAAaC,QAASA,EAASrC,eAAgBA,EAAgBuB,kBAAmBA,EAAmBe,eAAgBA,EAAgBC,gBAAiBA,EAAiBC,iBAAkBA,EAAkBC,kBAAmBA,EAAmBxC,aAAcA,GAAgB4B,EAC7iBa,GAAeC,EAAAA,EAAAA,KACfC,GAAiBC,EAAAA,EAAAA,KACjBC,GAAkBzC,EAAAA,EAAAA,IAAYC,GAASA,EAAMyC,gBAAgBhB,GAAkBiB,gBAE/EC,IADiBpB,EAAMqB,gBAAkB,GAEzCC,EAAgBF,EAAmBG,EAAAA,EAAgBC,KAAOD,EAAAA,EAAgBE,qBAC1EC,EAAiBN,EAAmBO,EAAAA,EAAiBH,KAAOG,EAAAA,EAAiBC,oBACnF,OAAO3C,EAAAA,cAAoB4C,EAAAA,EAAc,CACvCnE,UAAW,yBACXoE,YAAanB,EACboB,UAAWtB,EACXuB,aAAcpB,EACdqB,WAAYvB,EACZwB,gBAAiBZ,EACjBa,iBAAkBT,EAClBU,WAAYxE,EACZmD,eAAgBA,EAChBV,iBAAkBA,GACjBpB,EAAAA,cAAoBa,EAAAA,EAA0B,CAC/CpC,UAAW2E,EAAG,4BAA6B3E,GAC3CyC,UAAWA,EACXC,iBAAkBA,EAClBxC,OAAQA,EACRG,MAAOA,EACPqD,iBAAkBA,EAClBnD,WAAYA,EACZH,gBAAiB+C,EAAayB,0BAC9B/B,YAAaA,EACbgC,aAAc/B,EACdrC,eAAgBA,EAChBD,uBAAwBwB,EACxBtB,aAAcA,GACb6C,GAAmBhC,EAAAA,cAAoBuD,EAAAA,EAAyB,CACjEtC,iBAAkBA,EAClBuC,YAAaxB,EACbhB,kBAAmBA,EACnBK,aAAcA,KAElB,C","sources":["webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/BasePanelComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/panels/BodyAndFooterPanelComponent.js"],"sourcesContent":["import FocusTrap from \"focus-trap-react\";\n\nimport React, { useRef, useImperativeHandle } from \"react\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { IS_MOBILE } from \"../utils/browserUtils.js\";\n\nimport { Header as HeaderExport } from \"./header/Header.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function BasePanelComponent({className: className, children: children, isOpen: isOpen, hidePanelHeader: hidePanelHeader, labelBackButton: labelBackButton, title: title, hideBackButton: hideBackButton, useAITheme: useAITheme, onClickCloseAndRestart: onClickCloseAndRestart, onClickRestart: onClickRestart, testIdPrefix: testIdPrefix, ...headerProps}, ref) {\n  const showRestartButton = useSelector(state => state.config.public.headerConfig?.showRestartButton);\n  const headerRef = useRef();\n  useImperativeHandle(ref, () => headerRef.current);\n  return React.createElement(FocusTrap, {\n    active: isOpen,\n    focusTrapOptions: {\n      clickOutsideDeactivates: true,\n      returnFocusOnDeactivate: !IS_MOBILE,\n      preventScroll: true\n    }\n  }, React.createElement(\"div\", {\n    className: className\n  }, !hidePanelHeader && React.createElement(HeaderExport, {\n    ...headerProps,\n    ref: headerRef,\n    showRestartButton: showRestartButton,\n    onClickRestart: onClickRestart,\n    onCloseAndRestart: onClickCloseAndRestart,\n    showBackButton: !hideBackButton,\n    labelBackButton: labelBackButton,\n    displayName: title,\n    useAITheme: useAITheme,\n    testIdPrefix: testIdPrefix,\n    showCenter: true\n  }), React.createElement(\"div\", {\n    className: \"WACPanelContent\"\n  }, children)));\n}\n\nconst BasePanelComponentExport = React.memo(React.forwardRef(BasePanelComponent));\n\nexport { BasePanelComponentExport as BasePanelComponent };\n","import cx from \"classnames\";\n\nimport React from \"react\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { useLanguagePack } from \"../../hooks/useLanguagePack.js\";\n\nimport { useServiceManager } from \"../../hooks/useServiceManager.js\";\n\nimport { AnimationInType, AnimationOutType } from \"../../../../types/utilities/Animation.js\";\n\nimport { BasePanelComponent as BasePanelComponentExport } from \"../BasePanelComponent.js\";\n\nimport { BodyWithFooterComponent } from \"../BodyWithFooterComponent.js\";\n\nimport { OverlayPanel } from \"../OverlayPanel.js\";\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */ function BodyAndFooterPanelComponent(props) {\n  const {isOpen: isOpen, isMessageForInput: isMessageForInput, localMessageItem: localMessageItem, eventName: eventName, eventDescription: eventDescription, overlayPanelName: overlayPanelName, className: className, title: title, useAITheme: useAITheme, requestFocus: requestFocus, onClickBack: onClickBack, onClose: onClose, onClickRestart: onClickRestart, onCloseAndRestart: onCloseAndRestart, onPanelOpenEnd: onPanelOpenEnd, onPanelCloseEnd: onPanelCloseEnd, onPanelOpenStart: onPanelOpenStart, onPanelCloseStart: onPanelCloseStart, testIdPrefix: testIdPrefix} = props;\n  const languagePack = useLanguagePack();\n  const serviceManager = useServiceManager();\n  const originalMessage = useSelector(state => state.allMessagesByID[localMessageItem?.fullMessageID]);\n  const showAnimations = props.showAnimations ?? true;\n  const disableAnimation = !showAnimations;\n  const openAnimation = disableAnimation ? AnimationInType.NONE : AnimationInType.SLIDE_IN_FROM_BOTTOM;\n  const closeAnimation = disableAnimation ? AnimationOutType.NONE : AnimationOutType.SLIDE_OUT_TO_BOTTOM;\n  return React.createElement(OverlayPanel, {\n    className: \"WAC__overlay--covering\",\n    onOpenStart: onPanelOpenStart,\n    onOpenEnd: onPanelOpenEnd,\n    onCloseStart: onPanelCloseStart,\n    onCloseEnd: onPanelCloseEnd,\n    animationOnOpen: openAnimation,\n    animationOnClose: closeAnimation,\n    shouldOpen: isOpen,\n    serviceManager: serviceManager,\n    overlayPanelName: overlayPanelName\n  }, React.createElement(BasePanelComponentExport, {\n    className: cx(\"WACBodyAndFooterComponent\", className),\n    eventName: eventName,\n    eventDescription: eventDescription,\n    isOpen: isOpen,\n    title: title,\n    disableAnimation: disableAnimation,\n    useAITheme: useAITheme,\n    labelBackButton: languagePack.general_returnToAssistant,\n    onClickBack: onClickBack,\n    onClickClose: onClose,\n    onClickRestart: onClickRestart,\n    onClickCloseAndRestart: onCloseAndRestart,\n    testIdPrefix: testIdPrefix\n  }, originalMessage && React.createElement(BodyWithFooterComponent, {\n    localMessageItem: localMessageItem,\n    fullMessage: originalMessage,\n    isMessageForInput: isMessageForInput,\n    requestFocus: requestFocus\n  })));\n}\n\nexport { BodyAndFooterPanelComponent };\n"],"names":["BasePanelComponent","className","children","isOpen","hidePanelHeader","labelBackButton","title","hideBackButton","useAITheme","onClickCloseAndRestart","onClickRestart","testIdPrefix","headerProps","ref","showRestartButton","useSelector","state","config","public","headerConfig","headerRef","useRef","useImperativeHandle","current","React","FocusTrap","active","focusTrapOptions","clickOutsideDeactivates","returnFocusOnDeactivate","IS_MOBILE","preventScroll","HeaderExport","onCloseAndRestart","showBackButton","displayName","showCenter","BasePanelComponentExport","BodyAndFooterPanelComponent","props","isMessageForInput","localMessageItem","eventName","eventDescription","overlayPanelName","requestFocus","onClickBack","onClose","onPanelOpenEnd","onPanelCloseEnd","onPanelOpenStart","onPanelCloseStart","languagePack","useLanguagePack","serviceManager","useServiceManager","originalMessage","allMessagesByID","fullMessageID","disableAnimation","showAnimations","openAnimation","AnimationInType","NONE","SLIDE_IN_FROM_BOTTOM","closeAnimation","AnimationOutType","SLIDE_OUT_TO_BOTTOM","OverlayPanel","onOpenStart","onOpenEnd","onCloseStart","onCloseEnd","animationOnOpen","animationOnClose","shouldOpen","cx","general_returnToAssistant","onClickClose","BodyWithFooterComponent","fullMessage"],"sourceRoot":""}