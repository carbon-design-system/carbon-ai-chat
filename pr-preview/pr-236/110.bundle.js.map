{"version":3,"file":"110.bundle.js","mappings":"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","sources":["webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useUUID.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/homeScreenUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/intlUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/ChatInstanceImpl.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/environmentVariables.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/config/LauncherConfig.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/reducerUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/messaging/History.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/colors.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/styleUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/viewStateUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/events/ChatActionsImpl.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/events/EventBus.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/CustomPanelInstance.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/HistoryService.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/schema/historyToMessages.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/messageServiceUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/MessageService.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/NamespaceService.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/ServiceManager.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/mockStorage.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/UserSessionStorageService.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/customizers.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/agentReducers.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/tourReducerUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/reducers.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/doCreateStore.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/chatEntryFunctions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/Chat.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/loadServices.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/subscriptions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/CustomPanelManager.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/aria/AriaAnnouncerProvider.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/launcherUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/Launcher.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherComplex.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherDesktopContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/animationUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherExtended.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherMobileContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useEffectDidUpdate.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/HydrationPanel.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/panels/CustomPanel.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/containers/main/MainWindow.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/utilities/HasAddRemoveClassName.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/containers/App.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/UserDefinedResponsePortalsContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/WriteableElementsPortalsContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/AppContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/carbon/Loading.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/AriaAnnouncerContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/settings.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/UUIDType.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/arrayUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/schema/outputItemToLocalItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/BasePanelComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/actions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hocs/withAriaAnnouncer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/miscUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/messaging/LocalMessageItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/utilities/Animation.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/OverlayPanel.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/HideComponentContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/languages/en.json.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/MountChildrenOnDelay.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/resolvablePromise.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/dynamic-imports/dynamic-imports.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/VisuallyHidden.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/browserUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/usePrevious.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/config/ChatHeaderConfig.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderAvatar/src/chatHeaderAvatarElement.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderAvatar/src/chatHeaderAvatarElement.scss.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderAvatar/cds-aichat-chat-header-avatar.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderAvatar/src/chatHeaderAvatar.template.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderAvatar.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderLink/cds-aichat-chat-header-link.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderLink/src/chatHeaderLinkElement.template.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderLink.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderMenu.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderMenuButton.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderMenuItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderMenuItemRadioGroup.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderOverflowMenu.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderTitle/cds-aichat-chat-header-title.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderTitle/src/chatHeaderTitle.template.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderTitle/src/chatHeaderTitle.scss.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderTitle.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/header/AISlug.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/header/Header.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/aria/AriaAnnouncerComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/constants.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/homeScreen/HomeScreenHeader.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/languages.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useLanguagePack.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/HideComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/WindowSizeContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/utilities/carbonTypes.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useServiceManager.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/ModalPortalRootContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/uuid.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/aria/AriaLiveMessage.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/domUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/messageUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/AnnounceOnMountComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/state/AppState.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/WriteableElement.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/ServiceManagerContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/containers/ModalPortal.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/modals/ConfirmModal.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/instance/ChatInstance.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/selectors.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/promiseUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/header/BotHeader.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/objectUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/schema/inputItemToLocalItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useAriaAnnouncer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/agentActions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/LanguagePackContext.js"],"sourcesContent":["import { useRef } from 'react';\nimport { uuid } from '../utils/lang/uuid.js';\nimport { UUIDType } from '../utils/lang/UUIDType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A hook that returns a UUID that lives for the life of the component.\n */\nfunction useUUID() {\n    const ref = useRef();\n    if (ref.current === undefined) {\n        ref.current = uuid(UUIDType.COMPONENT);\n    }\n    return ref.current;\n}\n\nexport { useUUID };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Returns a copy of the given config, but removes any starters that are empty.\n */\nfunction withoutEmptyStarters(config) {\n    let newConfig = config;\n    if (config?.starters?.buttons?.length) {\n        newConfig = {\n            allow_return: true,\n            ...config,\n            starters: {\n                ...config.starters,\n                buttons: config.starters.buttons.filter((button) => Boolean(button.label?.trim())),\n            },\n        };\n        if (!newConfig?.starters?.buttons?.length) {\n            // If we end up with no starters, then turn them off.\n            newConfig.starters.is_on = false;\n        }\n    }\n    return newConfig;\n}\n\nexport { withoutEmptyStarters };\n","import { createIntl } from 'react-intl';\nimport actions from '../store/actions.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A simple utility function to set the intl object on the given service manager.\n */\nfunction setIntl(serviceManager, locale, messages) {\n    serviceManager.intl = createIntl({ locale, messages });\n    serviceManager.store.dispatch(actions.setAppStateValue(\"languagePack\", messages));\n    serviceManager.store.dispatch(actions.setAppStateValue(\"locale\", locale));\n}\n\nexport { setIntl };\n","import dayjs from 'dayjs';\nimport cloneDeep from 'lodash-es/cloneDeep.js';\nimport actions from './store/actions.js';\nimport { selectInputState } from './store/selectors.js';\nimport '../../types/state/AppState.js';\nimport { withoutEmptyStarters } from './utils/homeScreenUtils.js';\nimport { loadLocale, loadLanguagePack } from './utils/languages.js';\nimport { consoleDebug, debugLog, consoleError, consoleWarn } from './utils/miscUtils.js';\nimport { ViewChangeReason, MessageSendSource } from '../../types/events/eventBusTypes.js';\nimport { setIntl } from './utils/intlUtils.js';\nimport { ViewType } from '../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This class contains the started instance of the Chat widget. It is created once all the dependencies\n * have been loaded such as the React components, language files and styling information. This is the public interface\n * that the host page will interact with to control the application and is what is returned after the \"start\" function\n * has been called.\n */\n/**\n * Creates an instance of the public assistant chat. This value is what is returned to the host page after the chat\n * has been started and this instance is what the host page can use to send requests and get information from the\n * widget.\n *\n * The only values that should be returned in this object are values that may be accessible to customer code.\n */\nfunction createChatInstance({ serviceManager, callRender, }) {\n    // A flag to keep track if the instance has already been rendered.\n    let wasRendered = false;\n    function getMainWindow() {\n        return {\n            addClassName: (name) => serviceManager.mainWindow?.addClassName(name),\n            removeClassName: (name) => serviceManager.mainWindow?.removeClassName(name),\n        };\n    }\n    function getMessageInput() {\n        return {\n            getHTMLElement: () => serviceManager.mainWindow?.getMessageInput()?.getHTMLElement(),\n            setValue: (value) => serviceManager.mainWindow?.getMessageInput()?.setValue(value),\n            setEnableEnterKey: (value) => serviceManager.mainWindow?.getMessageInput()?.setEnableEnterKey(value),\n            addChangeListener: (listener) => serviceManager.mainWindow\n                ?.getMessageInput()\n                ?.addChangeListener(listener),\n            removeChangeListener: (listener) => serviceManager.mainWindow\n                ?.getMessageInput()\n                ?.removeChangeListener(listener),\n        };\n    }\n    function getHomeScreenInput() {\n        return {\n            getHTMLElement: () => serviceManager.mainWindow?.getHomeScreenInput()?.getHTMLElement(),\n            setValue: (value) => serviceManager.mainWindow?.getHomeScreenInput()?.setValue(value),\n            setEnableEnterKey: (value) => serviceManager.mainWindow\n                ?.getHomeScreenInput()\n                ?.setEnableEnterKey(value),\n            addChangeListener: (listener) => serviceManager.mainWindow\n                ?.getHomeScreenInput()\n                ?.addChangeListener(listener),\n            removeChangeListener: (listener) => serviceManager.mainWindow\n                ?.getHomeScreenInput()\n                ?.removeChangeListener(listener),\n        };\n    }\n    let instance = {\n        render: () => {\n            if (wasRendered) {\n                consoleError(\"The render function has already been called!\");\n                return Promise.resolve(instance);\n            }\n            wasRendered = true;\n            return callRender();\n        },\n        on: (handlers) => {\n            serviceManager.eventBus.on(handlers);\n            return instance;\n        },\n        off: (handlers) => {\n            serviceManager.eventBus.off(handlers);\n            return instance;\n        },\n        once: (handlers) => {\n            serviceManager.eventBus.once(handlers);\n            return instance;\n        },\n        updateLanguagePack: (newPack) => {\n            debugLog(\"Called instance.updateLanguagePack\", newPack);\n            return serviceManager.actions.updateLanguagePack(newPack);\n        },\n        updateLocale: (newLocale) => {\n            debugLog(\"Called instance.updateLocale\", newLocale);\n            // Get date formatting for locale.\n            const localePromise = loadLocale(newLocale);\n            const languagePackPromise = loadLanguagePack(serviceManager.store.getState().languagePack);\n            return Promise.all([localePromise, languagePackPromise]).then(([localePack, languagePack]) => {\n                // Update Redux with new values for language, locale, and messages.\n                dayjs.locale(localePack);\n                setIntl(serviceManager, localePack.name, languagePack);\n                serviceManager.messageService.pendingLocale = true;\n                serviceManager.messageService.localeIsExplicit = true;\n            });\n        },\n        updateCSSVariables: (variables, whiteLabelVariables) => {\n            debugLog(\"Called instance.updateCSSVariables\", variables);\n            return serviceManager.actions.updateCSSVariables(variables, whiteLabelVariables);\n        },\n        send: async (message, options) => {\n            debugLog(\"Called instance.send\", message, options);\n            if (selectInputState(serviceManager.store.getState()).isReadonly) {\n                throw new Error(\"You are unable to send messages in read only mode.\");\n            }\n            return serviceManager.actions.send(message, MessageSendSource.INSTANCE_SEND, options);\n        },\n        doAutoScroll: (options = {}) => {\n            debugLog(\"Called instance.doAutoScroll\", options);\n            serviceManager.mainWindow?.doAutoScroll?.(options);\n        },\n        destroy: () => {\n            debugLog(\"Called instance.destroy\");\n            // Trigger an unmounting of all the components.\n            serviceManager.store.dispatch(actions.setAppStateValue(\"isDestroyed\", true));\n            serviceManager.container?.remove();\n            instance = undefined;\n        },\n        updateAssistantInputFieldVisibility: (isVisible) => {\n            debugLog(\"Called instance.updateAssistantInputFieldVisibility\", isVisible);\n            serviceManager.store.dispatch(actions.updateInputState({ fieldVisible: isVisible }, false));\n        },\n        updateInputIsDisabled: (isDisabled) => {\n            debugLog(\"Called instance.updateInputIsDisabled\", isDisabled);\n            serviceManager.store.dispatch(actions.updateInputState({ isReadonly: isDisabled }, false));\n        },\n        updateBotUnreadIndicatorVisibility: (isVisible) => {\n            debugLog(\"Called instance.updateBotUnreadIndicatorVisibility\", isVisible);\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"showUnreadIndicator\", isVisible));\n        },\n        changeView: async (newView) => {\n            debugLog(\"Called instance.changeView\", newView);\n            let issueWithNewView = false;\n            if (!wasRendered) {\n                consoleError(`You tried to call \"changeView\" without ever having called the \"render\" method. There is no view to change!`);\n                issueWithNewView = true;\n            }\n            const viewTypeValues = Object.values(ViewType);\n            if (typeof newView === \"string\") {\n                if (!viewTypeValues.includes(newView)) {\n                    consoleError(`You tried to change the view but the view you specified is not a valid view name. Please use` +\n                        ` the valid view names; ${viewTypeValues.join(\", \")}.`);\n                    issueWithNewView = true;\n                }\n            }\n            else if (typeof newView === \"object\") {\n                Object.keys(newView).forEach((key) => {\n                    if (!viewTypeValues.includes(key)) {\n                        // If an item in the newView object does not match any of the supported view types then log an error.\n                        consoleError(`You tried to change the state of multiple views by providing an object, however you included the key` +\n                            ` \"${key}\" within the object which is not a valid view name. Please use the valid view names; ` +\n                            `${viewTypeValues.join(\", \")}.`);\n                        issueWithNewView = true;\n                    }\n                });\n            }\n            else {\n                consoleError(\"You tried to change the view but the view you provided was not a string or an object. You can either change\" +\n                    ' to one of the supported views by providing a string, ex. \"launcher\", \"mainWindow\", or \"tour\". Or you can' +\n                    ' change the state of multiple views by providing an object, ex. { \"launcher\": true, \"mainWindow\": false,' +\n                    ' \"tour\": true }. Please use one of these supported options.');\n                issueWithNewView = true;\n            }\n            if (!issueWithNewView) {\n                // If there are no major issues then try to change the view to the newView.\n                await serviceManager.actions.changeView(newView, {\n                    viewChangeReason: ViewChangeReason.CALLED_CHANGE_VIEW,\n                });\n            }\n        },\n        addNotification: (notification) => {\n            consoleWarn(\"This method is deprecated. Please use instance.notifications.addNotification() instead.\");\n            serviceManager.actions.addNotification(notification);\n        },\n        notifications: {\n            addNotification: (notification) => {\n                debugLog(\"Called instance.addNotification\", notification);\n                serviceManager.actions.addNotification(notification);\n            },\n            removeNotifications: (groupID) => {\n                debugLog(\"Called instance.removeNotifications\", groupID);\n                serviceManager.actions.removeNotification(groupID);\n            },\n            removeAllNotifications: () => {\n                debugLog(\"Called instance.removeAllNotifications\");\n                serviceManager.actions.removeAllNotifications();\n            },\n        },\n        updateMainHeaderTitle: (title) => {\n            debugLog(\"Called instance.updateMainHeaderTitle\", title);\n            if (!title) {\n                title = null;\n            }\n            serviceManager.actions.updateMainHeaderTitle(title);\n        },\n        updateHomeScreenConfig: (homeScreenConfig) => {\n            debugLog(\"Called instance.updateHomeScreenConfig\", homeScreenConfig);\n            const homeScreenConfigClone = cloneDeep(homeScreenConfig);\n            const isAIThemeEnabled = serviceManager.store.getState().theme.useAITheme;\n            if (isAIThemeEnabled) {\n                if (homeScreenConfig?.background) {\n                    // If the AI theme is enabled and the user is trying to change the home screen background then log a warning\n                    // and ignore / remove the updates for the background. This is following the same behavior as\n                    // updateCSSVariables which logs a warning and ignores updates for variables not supported in the AI theme.\n                    consoleWarn(\"The home screen background can not be changed when the AI theme is enabled.\");\n                    delete homeScreenConfigClone.background;\n                }\n            }\n            serviceManager.actions.updateHomeScreenConfig(withoutEmptyStarters(homeScreenConfigClone));\n        },\n        getState: () => serviceManager.actions.getPublicWebChatState(),\n        writeableElements: createWriteableElementsProxy(serviceManager),\n        scrollToMessage: (messageID, animate) => {\n            debugLog(\"Called instance.scrollToMessage\", messageID, animate);\n            serviceManager.mainWindow?.doScrollToMessage(messageID, animate);\n        },\n        updateLauncherConfig: (config) => serviceManager.actions.updateLauncherConfig(config),\n        customPanels: serviceManager.customPanelManager,\n        updateCustomMenuOptions: (options) => {\n            debugLog(\"Called instance.updateCustomMenuOptions\", options);\n            serviceManager.store.dispatch(actions.setAppStateValue(\"customMenuOptions\", options));\n        },\n        restartConversation: async () => {\n            debugLog(\"Called instance.restartConversation\");\n            return serviceManager.actions.restartConversation();\n        },\n        agentEndConversation: () => {\n            debugLog(\"Called instance.agentEndConversation\");\n            consoleWarn(`The instance.agentEndConversation method is deprecated. Use instance.serviceDesk.endConversation instead.`);\n            return serviceManager.actions.agentEndConversation(false);\n        },\n        updateIsTypingCounter(direction) {\n            debugLog(\"Called instance.updateIsTypingCounter\", direction);\n            const { store } = serviceManager;\n            if (direction === \"increase\") {\n                store.dispatch(actions.addIsTypingCounter(1));\n            }\n            else if (direction === \"decrease\") {\n                if (store.getState().botMessageState.isTypingCounter <= 0) {\n                    consoleError(\"You cannot decrease the typing counter when it is already <= 0\");\n                    return;\n                }\n                store.dispatch(actions.addIsTypingCounter(-1));\n            }\n            else {\n                consoleError(`[updateIsTypingCounter] Invalid direction: ${direction}. Valid values are \"increase\" and \"decrease\".`);\n            }\n        },\n        updateIsLoadingCounter(direction) {\n            debugLog(\"Called instance.updateIsLoadingCounter\", direction);\n            const { store } = serviceManager;\n            if (direction === \"increase\") {\n                store.dispatch(actions.addIsLoadingCounter(1));\n            }\n            else if (direction === \"decrease\") {\n                if (store.getState().botMessageState.isLoadingCounter <= 0) {\n                    consoleError(\"You cannot decrease the loading counter when it is already <= 0\");\n                    return;\n                }\n                store.dispatch(actions.addIsLoadingCounter(-1));\n            }\n            else {\n                consoleError(`[updateIsLoadingCounter] Invalid direction: ${direction}. Valid values are \"increase\" and \"decrease\".`);\n            }\n        },\n        updateIsChatLoadingCounter(direction) {\n            debugLog(\"Called instance.updateIsChatLoadingCounter\", direction);\n            const { store } = serviceManager;\n            if (direction === \"increase\") {\n                store.dispatch(actions.addIsHydratingCounter(1));\n            }\n            else if (direction === \"decrease\") {\n                if (store.getState().botMessageState.isHydratingCounter <= 0) {\n                    consoleError(\"You cannot decrease the hydrating counter when it is already <= 0\");\n                    return;\n                }\n                store.dispatch(actions.addIsHydratingCounter(-1));\n            }\n            else {\n                consoleError(`[updateIsChatLoadingCounter] Invalid direction: ${direction}. Valid values are \"increase\" and \"decrease\".`);\n            }\n        },\n        updateHeaderConfig: (config) => {\n            const configCopy = cloneDeep(config);\n            serviceManager.store.dispatch(actions.updateChatHeaderConfig(configCopy));\n        },\n        updateMainHeaderAvatar: (config) => {\n            serviceManager.store.dispatch(actions.updateMainHeaderAvatar(config));\n        },\n        updateBotName: (name) => serviceManager.actions.updateBotName(name),\n        updateBotAvatarURL: (url) => serviceManager.actions.updateBotAvatarURL(url),\n        elements: {\n            getMainWindow,\n            getMessageInput,\n            getHomeScreenInput,\n        },\n        tours: {\n            startTour: async (message) => {\n                debugLog(\"Called instance.tours.startTour\", message);\n                await serviceManager.actions.send(message, MessageSendSource.START_TOUR_METHOD, { skipTourCard: true });\n            },\n            endTour: async () => {\n                debugLog(\"Called instance.tours.endTour\");\n                serviceManager.actions.endTour({\n                    viewChangeReason: ViewChangeReason.CALLED_END_TOUR,\n                });\n            },\n            goToNextStep: async () => {\n                debugLog(\"Called instance.tours.goToNextStep\");\n                serviceManager.actions.changeStepInTour({ nextStep: true });\n            },\n            goToStep: async (stepId) => {\n                debugLog(\"Called instance.tours.goToStep\", stepId);\n                serviceManager.actions.goToSpecificTourStep(stepId);\n            },\n        },\n        messaging: {\n            addMessage: (message, options = {}) => {\n                debugLog(\"Called instance.messaging.addMessage\", message, options);\n                serviceManager.messageService.messageLoadingManager.end();\n                return serviceManager.actions.receive(message, options?.isLatestWelcomeNode ?? false, null, {\n                    disableFadeAnimation: options?.disableFadeAnimation,\n                });\n            },\n            addMessageChunk: async (chunk, options = {}) => {\n                debugLog(\"Called instance.messaging.addMessageChunk\", chunk, options);\n                serviceManager.messageService.messageLoadingManager.end();\n                await serviceManager.actions.receiveChunk(chunk, null, options);\n            },\n            removeMessages: async (messageIDs) => {\n                debugLog(\"Called instance.messaging.removeMessages\", messageIDs);\n                return serviceManager.actions.removeMessages(messageIDs);\n            },\n            clearConversation: () => {\n                debugLog(\"Called instance.messaging.clearConversation\");\n                return serviceManager.actions.restartConversation({\n                    skipHydration: true,\n                    endAgentConversation: false,\n                    fireEvents: false,\n                });\n            },\n            insertHistory: (messages) => {\n                debugLog(\"Called instance.messaging.insertHistory\", messages);\n                return serviceManager.actions.insertHistory(messages);\n            },\n        },\n        requestFocus: () => {\n            debugLog(\"Called instance.requestFocus\");\n            serviceManager.appWindow?.requestFocus();\n        },\n        serviceDesk: {\n            endConversation: () => {\n                debugLog(\"Called instance.serviceDesk.endConversation\");\n                return serviceManager.actions.agentEndConversation(false);\n            },\n            updateIsSuspended: async (isSuspended) => {\n                debugLog(\"Called instance.serviceDesk.updateIsSuspended\", isSuspended);\n                return serviceManager.actions.agentUpdateIsSuspended(isSuspended);\n            },\n        },\n    };\n    if (serviceManager.store.getState().config.public.debug) {\n        consoleDebug(\"[ChatInstanceImpl] Created chat instance\", instance);\n    }\n    return instance;\n}\n/**\n * Returns a proxy object of type WriteableElements that Deb will use to send set her custom content and should only\n * fire amplitude events once.\n */\nfunction createWriteableElementsProxy(serviceManager) {\n    const elementSet = new Set();\n    const handler = {\n        get(target, element) {\n            if (!elementSet.has(element)) {\n                elementSet.add(element);\n            }\n            return target[element];\n        },\n    };\n    return new Proxy(serviceManager.writeableElements, handler);\n}\n\nexport { createChatInstance };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/* eslint-disable prefer-destructuring */\nconst NODE_ENV = \"production\";\nconst VERSION = \"0.3.3\";\n\nexport { NODE_ENV, VERSION };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * In the future we may want different types of notification messages, for example one of them will be a\n * text_notification.\n *\n * @category Config\n */\nvar NotificationType;\n(function (NotificationType) {\n    NotificationType[\"TEXT_NOTIFICATION\"] = \"text_notification\";\n})(NotificationType || (NotificationType = {}));\n// The array of timeouts that will dictate the amount of intervals the bounce animation should play for the launcher.\nconst BOUNCING_ANIMATION_TIMEOUTS = [15000, 60000];\n// The amount of time until the entrance animation is automatically triggered for either launcher.\nconst TIME_TO_ENTRANCE_ANIMATION_START = 15000;\n\nexport { BOUNCING_ANIMATION_TIMEOUTS, NotificationType, TIME_TO_ENTRANCE_ANIMATION_START };\n","import isEqual from 'lodash-es/isEqual.js';\nimport { VERSION } from '../environmentVariables.js';\nimport { NotificationType, TIME_TO_ENTRANCE_ANIMATION_START } from '../../../types/config/LauncherConfig.js';\nimport { DEFAULT_CUSTOM_PANEL_ID } from '../utils/constants.js';\nimport { deepFreeze } from '../utils/lang/objectUtils.js';\nimport '../../../types/utilities/carbonTypes.js';\nimport { CarbonTheme } from '../../../types/config/PublicConfig.js';\nimport { CornersType } from '../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Miscellaneous utilities to help in reducers.\n */\nconst DEFAULT_LAUNCHER = {\n    config: {\n        is_on: true,\n        mobile: {\n            is_on: true,\n            title: \"\",\n            time_to_expand: TIME_TO_ENTRANCE_ANIMATION_START,\n            new_expand_time: false,\n            time_to_reduce: 10000,\n            notification_type: NotificationType.TEXT_NOTIFICATION,\n        },\n        desktop: {\n            is_on: true,\n            title: \"\",\n            new_expand_time: false,\n            time_to_expand: TIME_TO_ENTRANCE_ANIMATION_START,\n            notification_type: NotificationType.TEXT_NOTIFICATION,\n        },\n    },\n};\ndeepFreeze(DEFAULT_LAUNCHER);\nconst DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS = {\n    title: null,\n    hideBackButton: false,\n    hidePanelHeader: false,\n    disableAnimation: false,\n};\ndeepFreeze(DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS);\nconst DEFAULT_CUSTOM_PANEL_STATE = {\n    isOpen: false,\n    panelID: DEFAULT_CUSTOM_PANEL_ID,\n    options: DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS,\n};\ndeepFreeze(DEFAULT_CUSTOM_PANEL_STATE);\nconst DEFAULT_IFRAME_PANEL_STATE = {\n    isOpen: false,\n    messageItem: null,\n};\ndeepFreeze(DEFAULT_IFRAME_PANEL_STATE);\nconst DEFAULT_CITATION_PANEL_STATE = {\n    isOpen: false,\n    citationItem: null,\n};\ndeepFreeze(DEFAULT_CITATION_PANEL_STATE);\nconst DEFAULT_TOUR_STATE = {\n    activeTourStepItems: null,\n};\ndeepFreeze(DEFAULT_TOUR_STATE);\nconst DEFAULT_MESSAGE_PANEL_STATE = {\n    isOpen: false,\n    localMessageItem: null,\n    isMessageForInput: false,\n};\ndeepFreeze(DEFAULT_MESSAGE_PANEL_STATE);\nconst VIEW_STATE_ALL_CLOSED = {\n    launcher: false,\n    mainWindow: false,\n    tour: false,\n};\ndeepFreeze(VIEW_STATE_ALL_CLOSED);\nconst VIEW_STATE_LAUNCHER_OPEN = {\n    launcher: true,\n    mainWindow: false,\n    tour: false,\n};\ndeepFreeze(VIEW_STATE_LAUNCHER_OPEN);\nconst VIEW_STATE_MAIN_WINDOW_OPEN = {\n    mainWindow: true,\n    launcher: false,\n    tour: false,\n};\ndeepFreeze(VIEW_STATE_MAIN_WINDOW_OPEN);\nconst DEFAULT_PERSISTED_TO_BROWSER = {\n    chatState: {\n        version: VERSION,\n        disclaimersAccepted: {},\n        homeScreenState: {\n            isHomeScreenOpen: false,\n            showBackToBot: false,\n        },\n        hasSentNonWelcomeMessage: false,\n        persistedTourState: {\n            activeTourID: null,\n            activeTourCurrentStepIndex: null,\n        },\n        agentState: {\n            isConnected: false,\n            isSuspended: false,\n            agentProfiles: {},\n        },\n    },\n    launcherState: {\n        wasLoadedFromBrowser: false,\n        version: VERSION,\n        viewState: VIEW_STATE_ALL_CLOSED,\n        activeTour: false,\n        showUnreadIndicator: false,\n        mobileLauncherIsExtended: false,\n        mobileLauncherWasReduced: false,\n        mobileLauncherDisableBounce: false,\n        desktopLauncherIsExpanded: false,\n        desktopLauncherWasMinimized: false,\n        bounceTurn: 1,\n        hasSentNonWelcomeMessage: false,\n    },\n};\ndeepFreeze(DEFAULT_PERSISTED_TO_BROWSER);\nconst DEFAULT_CHAT_MESSAGES_STATE = {\n    localMessageIDs: [],\n    messageIDs: [],\n    isTypingCounter: 0,\n    isLoadingCounter: 0,\n    isHydratingCounter: 0,\n    isScrollAnchored: false,\n};\ndeepFreeze(DEFAULT_CHAT_MESSAGES_STATE);\nconst DEFAULT_MESSAGE_STATE = {\n    allMessageItemsByID: {},\n    allMessagesByID: {},\n    botMessageState: {\n        ...DEFAULT_CHAT_MESSAGES_STATE,\n    },\n};\ndeepFreeze(DEFAULT_MESSAGE_STATE);\nconst DEFAULT_INPUT_STATE = () => ({\n    fieldVisible: true,\n    isReadonly: false,\n    files: [],\n    allowFileUploads: false,\n    allowMultipleFileUploads: false,\n    allowedFileUploadTypes: null,\n    stopStreamingButtonState: {\n        currentStreamID: null,\n        isVisible: false,\n        isDisabled: false,\n    },\n});\nconst DEFAULT_AGENT_STATE = {\n    isConnecting: false,\n    isReconnecting: false,\n    numUnreadMessages: 0,\n    fileUploadInProgress: false,\n    showScreenShareRequest: false,\n    isScreenSharing: false,\n    isAgentTyping: false,\n    inputState: DEFAULT_INPUT_STATE(),\n};\ndeepFreeze(DEFAULT_AGENT_STATE);\nconst DEFAULT_THEME_STATE = {\n    carbonTheme: CarbonTheme.G10,\n    useAITheme: false,\n    corners: CornersType.ROUND,\n};\ndeepFreeze(DEFAULT_THEME_STATE);\nconst DEFAULT_LAYOUT_STATE = {\n    showFrame: true,\n    hasContentMaxWidth: true,\n};\ndeepFreeze(DEFAULT_LAYOUT_STATE);\n/**\n * Determines the {@link AnnounceMessage} to show based on a potential change in the visibility of the widget. If the\n * widget is either opened or closed, an announcement should be made and this will set that announcement. If the state\n * of the widget hasn't changed, this will return the current announcement unchanged.\n *\n * @param previousState The previous state of the application.\n * @param newViewState Indicates the widgets new view state.\n */\nfunction calcAnnouncementForWidgetOpen(previousState, newViewState) {\n    if (isEqual(previousState.persistedToBrowserStorage.launcherState.viewState, newViewState)) {\n        // No change in the view state so return the current announcement.\n        return previousState.announceMessage;\n    }\n    // The view has changed so show the appropriate message.\n    // TODO TOUR: I18N. This will need to be updated before ga. For now the announcement only cares if the main window is\n    // opened. If the tour is opened, the announcement will be that the window is closed.\n    return {\n        messageID: newViewState.mainWindow\n            ? \"window_ariaWindowOpened\"\n            : \"window_ariaWindowClosed\",\n    };\n}\n/**\n * Returns a new state that has the {@link ChatMessagesState} modified for the given chat type with the new properties.\n * If the chat state is for a thread, then the thread that is currently being viewed will be modified.\n */\nfunction applyBotMessageState(state, newState) {\n    return {\n        ...state,\n        botMessageState: {\n            ...state.botMessageState,\n            ...newState,\n        },\n    };\n}\nfunction handleViewStateChange(state, viewState) {\n    // If the main window is opened and the page is visible, mark any unread messages as read.\n    let { agentState } = state;\n    let { showUnreadIndicator } = state.persistedToBrowserStorage.launcherState;\n    if (viewState.mainWindow && state.isBrowserPageVisible) {\n        if (agentState.numUnreadMessages !== 0) {\n            agentState = {\n                ...agentState,\n                numUnreadMessages: 0,\n            };\n        }\n        showUnreadIndicator = false;\n    }\n    return {\n        ...state,\n        announceMessage: calcAnnouncementForWidgetOpen(state, viewState),\n        agentState,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            launcherState: {\n                ...state.persistedToBrowserStorage.launcherState,\n                viewState,\n                showUnreadIndicator,\n            },\n        },\n    };\n}\nfunction setHomeScreenOpenState(state, isOpen, showBackToBot) {\n    if (showBackToBot === undefined) {\n        showBackToBot =\n            state.persistedToBrowserStorage.chatState.homeScreenState.showBackToBot;\n    }\n    return {\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                homeScreenState: {\n                    ...state.persistedToBrowserStorage.chatState.homeScreenState,\n                    isHomeScreenOpen: isOpen,\n                    showBackToBot,\n                },\n            },\n        },\n    };\n}\n/**\n * Sets the give property of the {@link LocalMessageUIState} associated with the message of the given ID to the\n * given value.\n *\n * @param state The current state to change.\n * @param localMessageID The ID of the message to update.\n * @param propertyName The name of the property to update.\n * @param propertyValue The value to set on the property.\n */\nfunction applyLocalMessageUIState(state, localMessageID, propertyName, propertyValue) {\n    const oldMessage = state.allMessageItemsByID[localMessageID];\n    if (oldMessage) {\n        return {\n            ...state,\n            allMessageItemsByID: {\n                ...state.allMessageItemsByID,\n                [localMessageID]: {\n                    ...oldMessage,\n                    ui_state: {\n                        ...oldMessage.ui_state,\n                        [propertyName]: propertyValue,\n                    },\n                },\n            },\n        };\n    }\n    return state;\n}\n/**\n * Adds the given full message to the redux store. This will add it global to the global map as well as add the\n * id to the specific chat type.\n */\nfunction applyFullMessage(state, message) {\n    // Add the original message to the global map.\n    const newState = {\n        ...state,\n        allMessagesByID: {\n            ...state.allMessagesByID,\n            [message.id]: message,\n        },\n    };\n    // Now add the full message ID to the specific ChatMessagesState but only if it's a new message.\n    if (!state.allMessagesByID[message.id]) {\n        const currentMessageIDs = state.botMessageState.messageIDs;\n        const newMessageIDs = [...currentMessageIDs, message.id];\n        return applyBotMessageState(newState, { messageIDs: newMessageIDs });\n    }\n    return newState;\n}\n\nexport { DEFAULT_AGENT_STATE, DEFAULT_CHAT_MESSAGES_STATE, DEFAULT_CITATION_PANEL_STATE, DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS, DEFAULT_CUSTOM_PANEL_STATE, DEFAULT_IFRAME_PANEL_STATE, DEFAULT_INPUT_STATE, DEFAULT_LAUNCHER, DEFAULT_LAYOUT_STATE, DEFAULT_MESSAGE_PANEL_STATE, DEFAULT_MESSAGE_STATE, DEFAULT_PERSISTED_TO_BROWSER, DEFAULT_THEME_STATE, DEFAULT_TOUR_STATE, VIEW_STATE_ALL_CLOSED, VIEW_STATE_LAUNCHER_OPEN, VIEW_STATE_MAIN_WINDOW_OPEN, applyBotMessageState, applyFullMessage, applyLocalMessageUIState, handleViewStateChange, setHomeScreenOpenState };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Denotes the type of note.\n *\n * @category Messaging\n */\nvar NoteType;\n(function (NoteType) {\n    /**\n     * Represents the history of the conversation. The only type currently used by Web chat client.\n     */\n    NoteType[\"HISTORY\"] = \"HISTORY\";\n    /**\n     * Arbitrary text or/and image to presented to the human agent.\n     */\n    NoteType[\"MESSAGE\"] = \"MESSAGE\";\n    /**\n     * An non multi-turn Answer.\n     */\n    NoteType[\"ANSWER\"] = \"ANSWER\";\n    /**\n     * A multi-turn suggestion that an agent can approve or reject.\n     */\n    NoteType[\"FLOW\"] = \"FLOW\";\n    /**\n     * An error message to be presented to the human agent.\n     */\n    NoteType[\"ERROR\"] = \"ERROR\";\n})(NoteType || (NoteType = {}));\n\nexport { NoteType };\n","import { gray100, white } from '../../../node_modules/@carbon/colors/es/index.js';\nimport Color from 'color';\nimport { consoleError } from './miscUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A set of utilities for manipulating colors.\n */\n// The minimum allowed contrast for accessibility rules.\nconst MIN_CONTRAST = 4.5;\n/**\n * Converts the given hexadecimal formatted color string into an array with the red, blue and green components\n * separated. This function requires the string to be either a 3 or 6 digit hexadecimal code with a leading hash\n * mark. It does not validate that the string is in the proper format.\n */\nfunction hexCodeToRGB(color) {\n    if (color.length === 7) {\n        const red = color.substring(1, 3);\n        const blue = color.substring(3, 5);\n        const green = color.substring(5, 7);\n        return [parseInt(red, 16), parseInt(blue, 16), parseInt(green, 16)];\n    }\n    if (color.length === 4) {\n        const red = color.substring(1, 2);\n        const blue = color.substring(2, 3);\n        const green = color.substring(3, 4);\n        return [\n            parseInt(red + red, 16),\n            parseInt(blue + blue, 16),\n            parseInt(green + green, 16),\n        ];\n    }\n    consoleError(`Unsupported color code: \"${color}\"`);\n    return [0, 0, 0];\n}\n/**\n * Calculates the contrast ratio between the two colors. Contrast values can range from 1 to 21. A value of 4.5 is\n * considered the minimum between a foreground and background color to meet accessibility guidelines.\n *\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nfunction calculateContrast(color1, color2) {\n    const rgb1 = hexCodeToRGB(color1);\n    const rgb2 = hexCodeToRGB(color2);\n    const luminance1 = calculateRelativeLuminance(rgb1);\n    const luminance2 = calculateRelativeLuminance(rgb2);\n    let contrast;\n    if (luminance1 > luminance2) {\n        contrast = (luminance1 + 0.05) / (luminance2 + 0.05);\n    }\n    else {\n        contrast = (luminance2 + 0.05) / (luminance1 + 0.05);\n    }\n    return contrast;\n}\n/**\n * Calculates the relative luminance of the given color (provided as separate RGB values).\n *\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nfunction calculateRelativeLuminance([r8, g8, b8]) {\n    const rRGB = r8 / 255;\n    const gRGB = g8 / 255;\n    const bRGB = b8 / 255;\n    const R = rRGB <= 0.03928 ? rRGB / 12.92 : ((rRGB + 0.055) / 1.055) ** 2.4;\n    const G = gRGB <= 0.03928 ? gRGB / 12.92 : ((gRGB + 0.055) / 1.055) ** 2.4;\n    const B = bRGB <= 0.03928 ? bRGB / 12.92 : ((bRGB + 0.055) / 1.055) ** 2.4;\n    const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    return luminance;\n}\n/**\n * Returns either a white or a black color to use as the text color on a background of the given background color.\n * This will ensure that the text color chosen is of sufficient contrast.\n */\nfunction whiteOrBlackText(background) {\n    return calculateContrast(gray100, background) >= MIN_CONTRAST\n        ? gray100\n        : white;\n}\n/**\n * Adjust a given color's lightness by a specified number of percentage points.\n */\nfunction adjustLightness(token, shift) {\n    const original = Color(token).hsl().object();\n    return Color({ ...original, l: original.l + shift })\n        .round()\n        .hex()\n        .toLowerCase();\n}\n\nexport { MIN_CONTRAST, adjustLightness, calculateContrast, hexCodeToRGB, whiteOrBlackText };\n","import { white, gray100, gray10, blue60, gray80 } from '../../../node_modules/@carbon/colors/es/index.js';\nimport { whiteOrBlackText, adjustLightness, calculateContrast, MIN_CONTRAST, hexCodeToRGB } from './colors.js';\nimport { WA_CONSOLE_PREFIX } from './constants.js';\nimport { CarbonTheme } from '../../../types/config/PublicConfig.js';\nimport { CarbonThemeClassNames } from '../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains utility functions to process CSS for Carbon AI chat. It deals with things like transforming Object Maps\n * of CSS variables into CSS and properly injecting default Carbon colors into CSS variables.\n */\n// The prefix that is added to each CSS variable in the application.\nconst CSS_VAR_PREFIX = \"--cds-\";\nconst CSS_CHAT_PREFIX = \"chat-\";\n// Regex to determine a 3 or 6 digit hexadecimal color\nconst HEXADECIMAL_REGEX = /#([a-f0-9]{3}){1,2}\\b/i;\n// Some carbon colors need to be overridden in order to support our theming options. Map the overrides for the light\n// themes here.\nconst INTERNAL_OVERRIDES_LIGHT_THEME_MAP = {\n    // In light themes make the quick action chat buttons black since the default link blue may not match the users theme.\n    \"$chat-button\": \"#000000\",\n    \"$chat-button-text-hover\": \"#525252\",\n};\n// Some carbon colors need to be overridden in order to support our theming options. Map the overrides for the dark\n// themes here.\nconst INTERNAL_OVERRIDES_DARK_THEME_MAP = {\n    // In dark themes make the quick action chat buttons white since the default light link blue may not match the users\n    // theme.\n    \"$chat-button\": \"#ffffff\",\n    \"$chat-button-text-hover\": \"#f4f4f4\",\n};\n/**\n * Converts the given map of CSS variable into a string that is formatted for inserting into a style tag.\n */\nfunction convertCSSVariablesToString(cssVariables) {\n    // First convert the variables to a CSS string.\n    const pieces = Object.keys(cssVariables).map((key) => {\n        const value = cssVariables[key];\n        if (value === undefined) {\n            return \"\";\n        }\n        const fullName = key.startsWith(\"$\")\n            ? `${CSS_VAR_PREFIX}${key.replace(/^\\$/, \"\")}`\n            : `${CSS_VAR_PREFIX}${CSS_CHAT_PREFIX}${key}`;\n        return `${fullName}:${value};`;\n    });\n    let cssVariablesString = \"\";\n    const allValues = pieces.join(\"\");\n    const prefix = \"\";\n    if (allValues.length > 0) {\n        // Including a namespace in the styles allows us to support multiple widgets on the same page without their styles\n        // conflicting.\n        const rule = `${prefix}.WACContainer .cds--white, ${prefix}.WACContainer .cds--g10, ${prefix}.WACContainer .cds--g90, ${prefix}.WACContainer .cds--g100`;\n        cssVariablesString = `${rule}${`, :host`}{${allValues}}`;\n    }\n    return cssVariablesString;\n}\n/**\n * This will generate a set of CSS variables that will overwrite the default values based on the customizations that\n * are specified in the given remote config.\n *\n * @param whiteLabelVariables The set of customized styles.\n * @param carbonTheme The Carbon theme that is being used.\n */\nfunction remoteStylesToCSSVars(whiteLabelVariables, carbonTheme) {\n    const cssOverrides = {};\n    const primaryColor = whiteLabelVariables[\"BASE-primary-color\"];\n    const secondaryColor = whiteLabelVariables[\"BASE-secondary-color\"];\n    const accentColor = whiteLabelVariables[\"BASE-accent-color\"];\n    if (primaryColor) {\n        cssOverrides[\"PRIMARY-color\"] = primaryColor;\n        cssOverrides[\"PRIMARY-color-text\"] = whiteOrBlackText(primaryColor);\n        cssOverrides[\"PRIMARY-color-hover\"] = adjustLightness(primaryColor, -8);\n        cssOverrides[\"PRIMARY-color-active\"] = adjustLightness(primaryColor, -10);\n        // We need to calculate the focus color for the buttons in the header. The focus color for the white and g10\n        // themes is the same as the accent color. For g90 and g100, the focus color is white.\n        const useAccentColor = accentColor || blue60;\n        const tryFocusColor = carbonTheme === CarbonTheme.G90 || carbonTheme === CarbonTheme.G100\n            ? white\n            : useAccentColor;\n        let useFocusColor;\n        if (calculateContrast(primaryColor, tryFocusColor) >= MIN_CONTRAST) {\n            // The default color works fine.\n            useFocusColor = tryFocusColor;\n        }\n        else if (tryFocusColor !== useAccentColor &&\n            calculateContrast(primaryColor, useAccentColor) >= MIN_CONTRAST) {\n            // The default doesn't work so let's try the accent.\n            useFocusColor = useAccentColor;\n        }\n        else if (tryFocusColor !== white &&\n            calculateContrast(primaryColor, white) >= MIN_CONTRAST) {\n            // The accent doesn't work, so let's try white.\n            useFocusColor = white;\n        }\n        else {\n            // If white doesn't work, then gray100 will.\n            useFocusColor = gray100;\n        }\n        if (useFocusColor !== tryFocusColor) {\n            cssOverrides[\"PRIMARY-color-focus\"] = useFocusColor;\n        }\n    }\n    if (secondaryColor) {\n        cssOverrides[\"SECONDARY-color\"] = secondaryColor;\n        cssOverrides[\"SECONDARY-color-text\"] = whiteOrBlackText(secondaryColor);\n    }\n    else if (carbonTheme === CarbonTheme.G90 ||\n        carbonTheme === CarbonTheme.G100) {\n        // We don't like the default Carbon color for the sent text bubble in the g90 and g100 color themes.\n        cssOverrides[\"SECONDARY-color\"] = `var(${CSS_VAR_PREFIX}layer-02)`;\n        cssOverrides[\"SECONDARY-color-text\"] = `var(${CSS_VAR_PREFIX}text-primary);`;\n    }\n    if (accentColor) {\n        const colorMap = ACCENT_COLOR_MAPS[carbonTheme];\n        // The custom color basically corresponds to Blue 60 are we will replace all the occurrences of Blue 60 with\n        // that custom color. For the other shades of blue, we will calculate a relative color from the custom color and\n        // replace those colors with this calculated color.\n        const accentBlue20 = adjustLightness(accentColor, 40);\n        const accentBlue60Hover = adjustLightness(accentColor, -8);\n        const accentBlue80 = adjustLightness(accentColor, -20);\n        fillValues(cssOverrides, colorMap.blue20, accentBlue20);\n        fillValues(cssOverrides, colorMap.blue60, accentColor);\n        fillValues(cssOverrides, colorMap.blue60Hover, accentBlue60Hover);\n        fillValues(cssOverrides, colorMap.blue80, accentBlue80);\n        // Update the launcher variables with the appropriate accent colors for the button states.\n        cssOverrides[\"LAUNCHER-color-background\"] = accentColor;\n        cssOverrides[\"LAUNCHER-color-background-hover\"] = accentBlue60Hover;\n        cssOverrides[\"LAUNCHER-color-background-active\"] = accentBlue80;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-background\"] = accentColor;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-hover\"] = accentBlue60Hover;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-active\"] = accentBlue80;\n        cssOverrides[\"ACCENT-color\"] = accentColor;\n        const accentColorRGB = hexCodeToRGB(accentColor);\n        cssOverrides[\"ACCENT-color-r\"] = accentColorRGB[0].toString();\n        cssOverrides[\"ACCENT-color-g\"] = accentColorRGB[1].toString();\n        cssOverrides[\"ACCENT-color-b\"] = accentColorRGB[2].toString();\n        // The ghost button text color defaults to $link-01 but since we've decided to not override $link-01, we need to\n        // change the color of the ghost button separately.\n        cssOverrides[\"ACCENT-color-ghost-text\"] = accentColor;\n        // Now figure out what font color would go with a background color that's \"Blue 60\".\n        const accentColorBW = whiteOrBlackText(accentColor);\n        cssOverrides[\"ACCENT-color-text\"] = accentColorBW;\n        cssOverrides[\"ACCENT-color-background-hover\"] = accentBlue60Hover;\n        cssOverrides[\"ACCENT-color-background-active\"] = accentBlue80;\n        // Update the launcher variables with the appropriate BW colors.\n        cssOverrides[\"LAUNCHER-color-focus-border\"] = accentColorBW;\n        cssOverrides[\"LAUNCHER-color-avatar\"] = accentColorBW;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-text\"] = accentColorBW;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-focus-border\"] =\n            accentColorBW;\n        cssOverrides[\"LAUNCHER-MOBILE-color-text\"] = accentColorBW;\n        // This color is either black or white and is based on the contrast difference with the accent color. Its primary use\n        // is the color of button on top of the accent color.\n        cssOverrides[\"ACCENT-color-bw\"] = accentColorBW;\n        // When ACCENT-color-bw is used as a button color we need a hover and active color.\n        cssOverrides[\"ACCENT-color-bw-hover\"] = adjustLightness(accentColorBW, -8);\n        // The active color is a little darker than the hover color.\n        cssOverrides[\"ACCENT-color-bw-active\"] = adjustLightness(accentColorBW, -10);\n        // Also need an inverse of ACCENT-color-bw so that we can have accessible text within our bw buttons.\n        cssOverrides[\"ACCENT-color-bw-inverse\"] =\n            accentColorBW === gray100 ? white : gray100;\n        // Need a slightly more gray version of the bw accent color.\n        cssOverrides[\"ACCENT-color-bw-gray\"] =\n            accentColorBW === gray100 ? gray80 : gray10;\n        // A slightly darker or lighter accent color (darker if the accent color was already dark, lighter if it was already\n        // light). Used for the launcher experiments where we only have one accent color but really need two.\n        cssOverrides[\"ACCENT-color-pastel\"] =\n            accentColorBW === gray100\n                ? adjustLightness(accentColor, 20)\n                : adjustLightness(accentColor, -15);\n    }\n    return cssOverrides;\n}\n/**\n * This structure maintains a map for each of the named colors in Carbon that are a shade of blue. When the tooling\n * specifies a custom accent color, we will replace all occurrences of Blue 60 in each of the Carbon color themes\n * with that accent color as well as appropriate adjustments of the accent color for each of the shades of blue.\n *\n * Note: to preserve the color of links as their default Carbon colors, $link-01 and $inverse-link are excluded from\n * these maps.\n */\nconst ACCENT_COLOR_MAPS = {\n    white: {\n        blue20: [\"$highlight\"],\n        blue60: [\n            \"$background-brand\",\n            \"$interactive\",\n            \"$border-interactive\",\n            \"$button-primary\",\n            \"$button-tertiary\",\n            \"$icon-interactive\",\n            \"$focus\",\n        ],\n        blue60Hover: [\"$button-primary-hover\", \"$button-tertiary-hover\"],\n        blue80: [\"$button-primary-active\", \"$button-tertiary-active\"],\n    },\n    g10: {\n        blue20: [\"$highlight\"],\n        blue60: [\n            \"$background-brand\",\n            \"$interactive\",\n            \"$border-interactive\",\n            \"$button-primary\",\n            \"$button-tertiary\",\n            \"$icon-interactive\",\n            \"$focus\",\n        ],\n        blue60Hover: [\"$button-primary-hover\", \"$button-tertiary-hover\"],\n        blue80: [\"$button-primary-active\", \"$button-tertiary-active\"],\n    },\n    g90: {\n        blue20: [],\n        blue60: [\n            \"$background-brand\",\n            \"$interactive\",\n            \"$border-interactive\",\n            \"$button-primary\",\n            \"$button-tertiary\",\n            \"$focus-inverse\",\n        ],\n        blue60Hover: [\"$button-primary-hover\", \"$button-tertiary-hover\"],\n        blue80: [\"$button-primary-active\", \"$highlight\", \"$button-tertiary-active\"],\n    },\n    g100: {\n        blue20: [],\n        blue60: [\n            \"$background-brand\",\n            \"$interactive\",\n            \"$border-interactive\",\n            \"$button-primary\",\n            \"$button-tertiary\",\n            \"$focus-inverse\",\n        ],\n        blue60Hover: [\"$button-primary-hover\", \"$button-tertiary-hover\"],\n        blue80: [\"$button-primary-active\", \"$highlight\", \"$button-tertiary-active\"],\n    },\n};\n/**\n * Sets the given value for each property of the given set of names in the given map.\n *\n * @param styles The set of styles that need to be replaced.\n * @param propertyNames The names of the styles to replace.\n * @param value The value to replace each of the styles with.\n */\nfunction fillValues(styles, propertyNames, value) {\n    propertyNames.forEach((propertyName) => {\n        styles[propertyName] = value;\n    });\n}\n/**\n * This function will merge the CSS variables from the public and remote configurations. Any variables in the public\n * configuration will override values in the remote configuration. Any values in the remote configuration that are\n * the empty string will be ignored.\n */\nfunction mergeCSSVariables(publicVars, whiteLabelVariables, carbonTheme, useAITheme) {\n    carbonTheme = carbonTheme || CarbonTheme.G10;\n    useAITheme = useAITheme || false;\n    publicVars = publicVars || {};\n    const internalOverrides = createInternalCSSOverridesMap(carbonTheme, useAITheme);\n    const result = { ...internalOverrides, ...publicVars };\n    Object.entries(result).forEach(([key, value]) => {\n        // Variables starting with \"$\" are carbon theme tokens and should all be colors\n        if (key.startsWith(\"$\") && !value.match(HEXADECIMAL_REGEX)) {\n            console.warn(`${WA_CONSOLE_PREFIX} You tried to call \"updateCSSVariables\" with an invalid value for \"${key}\": \"${publicVars[key]}\". You must use hexadecimal values for colors.`);\n            // Delete color values that are not in hexadecimal format to ensure we can use them in methods in ./colors.\n            delete result[key];\n        }\n    });\n    const remoteVars = remoteStylesToCSSVars(whiteLabelVariables || {}, carbonTheme);\n    Object.entries(remoteVars).forEach(([key, value]) => {\n        if (value !== \"\" && publicVars[key] === undefined) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\n/**\n * This function replaces the default carbon colors for some specific scss variables. After this function is called the\n * public and remote values in mergeCSSVariables can override whatever is set here.\n */\nfunction createInternalCSSOverridesMap(carbonTheme, useAITheme) {\n    let internalOverridesMap = {};\n    if (!useAITheme) {\n        // Some carbon colors need to be overridden in order to support our theming options (when the user isn't using the\n        // AI theme). For now these overrides only apply to the quick action chat buttons since their carbon default, link\n        // blue, may not match the users theme. But this could be extended to other overrides in the future.\n        if ([CarbonTheme.G10, CarbonTheme.WHITE].includes(carbonTheme)) {\n            // In light themes make the quick action chat buttons black.\n            internalOverridesMap = {\n                ...internalOverridesMap,\n                ...INTERNAL_OVERRIDES_LIGHT_THEME_MAP,\n            };\n        }\n        else if ([CarbonTheme.G90, CarbonTheme.G100].includes(carbonTheme)) {\n            // In dark themes make the quick action chat buttons white.\n            internalOverridesMap = {\n                ...internalOverridesMap,\n                ...INTERNAL_OVERRIDES_DARK_THEME_MAP,\n            };\n        }\n    }\n    return internalOverridesMap;\n}\n// Given a themeState determine which classNames should be used on the \"WACContainer--render\" element.\nfunction getThemeClassNames(themeState) {\n    let themeClassnames;\n    switch (themeState?.carbonTheme) {\n        case CarbonTheme.WHITE:\n            themeClassnames = CarbonThemeClassNames.WHITE;\n            break;\n        case CarbonTheme.G10:\n            themeClassnames = CarbonThemeClassNames.G10;\n            break;\n        case CarbonTheme.G90:\n            themeClassnames = CarbonThemeClassNames.G90;\n            break;\n        case CarbonTheme.G100:\n            themeClassnames = CarbonThemeClassNames.G100;\n            break;\n        default:\n            themeClassnames = CarbonThemeClassNames.G10;\n            break;\n    }\n    if (themeState?.useAITheme) {\n        themeClassnames += \" WAC--aiTheme\";\n    }\n    return themeClassnames;\n}\n\nexport { convertCSSVariablesToString, getThemeClassNames, mergeCSSVariables };\n","import { VIEW_STATE_ALL_CLOSED } from '../store/reducerUtils.js';\nimport { consoleError } from './miscUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Take a newView, either in string format or as a partial {@link ViewState}, and combine it with the current viewState\n * to form a complete view state that is then returned.\n */\nfunction constructViewState(newView, appState) {\n    const { viewState } = appState.persistedToBrowserStorage.launcherState;\n    // Start with the existing view state.\n    let newViewState;\n    // Depending on the type of newView go through different steps to construct a new viewState.\n    if (typeof newView === \"string\") {\n        // If the newView is of type string then set all the views to false except for the view of the provided string\n        // which should be true.\n        newViewState = { ...VIEW_STATE_ALL_CLOSED, [newView]: true };\n    }\n    else {\n        // If the newView is not a string then merge the newView with the existing viewState. This will cause any views\n        // provided in newView to overwrite the existing view state, while preserving the view state of any views not\n        // included in the newView.\n        newViewState = { ...viewState, ...newView };\n    }\n    return newViewState;\n}\n/**\n * Take a viewState and validate that it makes sense against other pieces of state. For example, we only want to show a\n * tour if there is a tour to be shown. If the validation fails then false will be returned, otherwise true will be.\n */\nfunction validateViewState(viewState, appState) {\n    const { activeTour } = appState.persistedToBrowserStorage.launcherState;\n    if (viewState.tour && !activeTour) {\n        // If the new viewState is supposed to show a tour, but there is no active tour, then log an error and return false.\n        consoleError(\"Error changing the view. The new view was supposed to show a tour however there is no active tour to show.\" +\n            \" Changing the view has been canceled.\");\n        return false;\n    }\n    return true;\n}\n\nexport { constructViewState, validateViewState };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport isEqual from 'lodash-es/isEqual.js';\nimport merge from 'lodash-es/merge.js';\nimport inputItemToLocalItem from '../schema/inputItemToLocalItem.js';\nimport { outputItemToLocalItem, createLocalMessageItemsForNestedMessageItems } from '../schema/outputItemToLocalItem.js';\nimport { AgentsOnlineStatus } from '../../../types/config/ServiceDeskConfig.js';\nimport actions from '../store/actions.js';\nimport { agentUpdateIsSuspended } from '../store/agentActions.js';\nimport { DEFAULT_PERSISTED_TO_BROWSER, VIEW_STATE_LAUNCHER_OPEN } from '../store/reducerUtils.js';\nimport '../../../types/state/AppState.js';\nimport { NoteType } from '../../../types/messaging/History.js';\nimport { arrayLastValue, asyncForEach } from '../utils/lang/arrayUtils.js';\nimport { deepFreeze } from '../utils/lang/objectUtils.js';\nimport { sleep } from '../utils/lang/promiseUtils.js';\nimport { uuid } from '../utils/lang/uuid.js';\nimport { createWelcomeRequest, isLiveAgentMessage, isRequest, createMessageRequestForText, addDefaultsToMessage, isResponse, createMessageResponseForText, isStreamCompleteItem, isStreamPartialItem, isStreamFinalResponse, renderAsUserDefinedMessage, isResponseWithNestedItems, streamItemID, isPause, isConnectToAgent, hasTourUserDefinedType, hasServiceDesk, isChannelTransferToAgent, isTyping } from '../utils/messageUtils.js';\nimport { debugLog, isEnableDebugLog, consoleError, consoleWarn, callOnError } from '../utils/miscUtils.js';\nimport { resolvablePromise } from '../utils/resolvablePromise.js';\nimport { mergeCSSVariables } from '../utils/styleUtils.js';\nimport { constructViewState, validateViewState } from '../utils/viewStateUtils.js';\nimport { MessageResponseTypes } from '../../../types/messaging/Messages.js';\nimport { BusEventType, MessageSendSource, TourStartReason, MainWindowCloseReason, ViewChangeReason, MainWindowOpenReason } from '../../../types/events/eventBusTypes.js';\nimport { OnErrorType } from '../../../types/config/PublicConfig.js';\nimport { setIntl } from '../utils/intlUtils.js';\nimport { UUIDType } from '../utils/lang/UUIDType.js';\nimport { ViewType } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst VALID_PUBLIC_VARS_IN_AI_THEME_LIST = [\n    \"BASE-height\",\n    \"BASE-max-height\",\n    \"BASE-width\",\n    \"BASE-z-index\",\n];\nconst VALID_PUBLIC_VARS_IN_AI_THEME_SET = new Set(VALID_PUBLIC_VARS_IN_AI_THEME_LIST);\nconst UPDATE_CSS_VARS_AI_THEME_WARNING_MESSAGE = `[updateCSSVariables] The AI theme is enabled and only ${VALID_PUBLIC_VARS_IN_AI_THEME_LIST.join(\", \")} can be updated.`;\n/**\n * This class is responsible for handling various \"actions\" that the system can perform including actions that can\n * be initiated by custom code running in the host page and is an implementation of the public interface to the widget.\n */\nclass ChatActionsImpl {\n    constructor(serviceManager) {\n        /**\n         * Indicates if we are currently hydrating (the Promise above is unresolved).\n         */\n        this.hydrating = false;\n        /**\n         * Indicates if a restart is currently in progress.\n         */\n        this.restarting = false;\n        /**\n         * Indicates if Carbon AI chat has been hydrated at least once. This is used when a rehydration occurs so that we avoid\n         * performing certain operations more than once.\n         */\n        this.alreadyHydrated = false;\n        /**\n         * Queue of received chunks.\n         */\n        this.chunkQueue = [];\n        this.serviceManager = serviceManager;\n    }\n    /**\n     * Fetch welcome node and (if applicable) history store.\n     *\n     * @param alternateWelcomeRequest Indicates if a different message should be used as a message requesting the\n     * welcome node. This message behaves a little differently from the welcome node in that it's assumed that this\n     * message is actively needed. It will bypass the home screen if it is enabled and it was always append this\n     * message to the end of any session history that is retrieved.\n     * @param alternateWelcomeRequestSource The source of the alternate welcome message.\n     * @param alternateOptions The send to send along with the alternate welcome request.\n     */\n    async hydrateChat(alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions) {\n        // Make sure we only fire this event once after the thread that actually does the hydration is finished.\n        let fireReady = false;\n        try {\n            if (!this.hydrationPromise) {\n                this.hydrating = true;\n                this.hydrationPromise = this.doHydrateChat(alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions);\n                fireReady = true;\n            }\n            await this.hydrationPromise;\n        }\n        finally {\n            this.hydrating = false;\n        }\n        if (fireReady) {\n            await this.serviceManager.fire({ type: BusEventType.CHAT_READY });\n        }\n    }\n    /**\n     * Fetch welcome node and (if applicable) history.\n     *\n     * @param alternateWelcomeRequest Indicates if a different message should be used as a message requesting the\n     * welcome node. This message behaves a little differently from the welcome node in that it's assumed that this\n     * message is actively needed. It will bypass the home screen if it is enabled and it was always append this\n     * message to the end of any session history that is retrieved.\n     * @param alternateWelcomeRequestSource The source of the alternate welcome message.\n     * @param alternateOptions The options to send along with the alternate welcome request.\n     */\n    async doHydrateChat(alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions) {\n        debugLog(\"Hydrating Carbon AI chat\", alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions);\n        // Load the history and main config but only if it's the first time we are hydrating.\n        let history;\n        const { serviceManager } = this;\n        serviceManager.store.dispatch(actions.addIsHydratingCounter(1));\n        if (!this.alreadyHydrated) {\n            history = await this.serviceManager.historyService.loadHistory();\n            if (serviceManager.humanAgentService) {\n                // Once we've got the main config which contains the details for connecting to a service desk, we can\n                // initialize the human agent service.\n                debugLog(\"Initializing the human agent service\");\n                await serviceManager.humanAgentService.initialize();\n            }\n            else {\n                debugLog(\"No service desk integrations present\");\n            }\n        }\n        const { config } = serviceManager.store.getState();\n        if (!history) {\n            if (!alternateWelcomeRequest) {\n                const state = serviceManager.store.getState();\n                if (state.homeScreenConfig?.is_on) {\n                    // If no history was loaded, there are no messages already sent, and there is a home screen,\n                    // then we need to show the home screen.\n                    serviceManager.store.dispatch(actions.setHomeScreenIsOpen(true));\n                }\n                else if (!config.public.messaging?.skipWelcome) {\n                    // If no history was loaded, there are no messages already sent, and there is no home screen, then we need\n                    // to fetch the welcome node. We use returnBeforeStreaming to ensure that we don't get stuck in the\n                    // loading state if the welcome message happens to return a streaming response.\n                    await serviceManager.actions.send(createWelcomeRequest(), MessageSendSource.WELCOME_REQUEST, { returnBeforeStreaming: true }, true);\n                }\n            }\n        }\n        else {\n            // Need to populate the history in redux (specifically botMessageState) before creating elements for custom\n            // responses. createElementsForUserDefinedResponse() fires a userDefinedResponse event where users may choose\n            // to call instance.updateHistoryUserDefined(messageID, data). That instance function will fail to save user\n            // data if the messageID provided can't be found in the botMessageState array. So we need to hydrate that\n            // state before firing userDefinedResponse events.\n            serviceManager.store.dispatch(actions.hydrateMessageHistory(history.messageHistory));\n            await this.createElementsForUserDefinedResponses(history.messageHistory);\n            // If the latest message is a panel response type, we should open it.\n            if (history.latestPanelLocalMessageItem) {\n                this.openResponsePanel(history.latestPanelLocalMessageItem, true);\n            }\n        }\n        if (alternateWelcomeRequest) {\n            // If there was an alternate welcome request, we always want to send it and bypass the home screen.\n            serviceManager.store.dispatch(actions.setHomeScreenIsOpen(false));\n            await serviceManager.actions.send(alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions, true);\n        }\n        // After both history and welcome are loaded indicate we've got everything.\n        serviceManager.store.dispatch(actions.chatWasHydrated());\n        serviceManager.store.dispatch(actions.addIsHydratingCounter(-1));\n        if (history) {\n            const lastMessageID = arrayLastValue(history.messageHistory.botMessageState.localMessageIDs);\n            const lastMessage = history.messageHistory.allMessageItemsByID[lastMessageID];\n            const lastOriginalMessage = history.messageHistory.allMessagesByID[lastMessage?.fullMessageID];\n            if (!isLiveAgentMessage(lastMessage) && isRequest(lastOriginalMessage)) {\n                // If the last message in history is a request that means that the user left the page before we received the\n                // response and the response is actually still being calculated. In this case we want to \"reconnect\" to the\n                // back-end so that we can receive the response when it becomes available. To do that all we have to do is\n                // resend the original request. But we don't want the resend to appear in the message list (because it is\n                // already there).\n                serviceManager.messageService.resendMessage(lastOriginalMessage, lastMessage.ui_state.id);\n            }\n        }\n        // Note, we're not waiting for the human agent service to handle the hydration. It may start an asynchronous\n        // process to reconnect the user to an agent but that is considered separate from the main hydration.\n        const allowReconnect = config.public.serviceDesk.allowReconnect ?? true;\n        this.serviceManager?.humanAgentService?.handleHydration(allowReconnect, Boolean(history));\n        this.alreadyHydrated = true;\n    }\n    getPublicWebChatState() {\n        const state = this.serviceManager.store.getState();\n        const { persistedToBrowserStorage } = state;\n        const { chatState, launcherState } = persistedToBrowserStorage;\n        const publicWebChatState = {\n            isConnectedWithHumanAgent: chatState.agentState.isConnected,\n            isWebChatOpen: launcherState.viewState.mainWindow,\n            isConnectingWithHumanAgent: state.agentState.isConnecting,\n            isHomeScreenOpen: chatState.homeScreenState.isHomeScreenOpen,\n            isDebugEnabled: isEnableDebugLog(),\n            hasUserSentMessage: chatState.hasSentNonWelcomeMessage,\n            isTourActive: launcherState.activeTour,\n            viewState: { ...launcherState.viewState },\n            serviceDesk: {\n                isConnected: chatState.agentState.isConnected,\n                isConnecting: state.agentState.isConnecting,\n                isSuspended: chatState.agentState.isSuspended ?? false,\n            },\n            locale: this.serviceManager.store.getState().locale,\n            intl: this.serviceManager.intl,\n        };\n        return publicWebChatState;\n    }\n    /**\n     * Calls the send function but catches any errors and logs them to avoid us having any uncaught exceptions thrown\n     * to the browser.\n     */\n    async sendWithCatch(message, source, options = {}, ignoreHydration = false) {\n        try {\n            await this.send(message, source, options, ignoreHydration);\n        }\n        catch (error) {\n            consoleError(\"An error occurred sending the message\", error);\n        }\n    }\n    /**\n     * Sends the given message to the assistant on the remote server. This will result in a \"pre:send\" and \"send\" event\n     * being fired on the event bus. The returned promise will resolve once a response has received and processed and\n     * both the \"pre:receive\" and \"receive\" events have fired. It will reject when too many errors have occurred and\n     * the system gives up retrying.\n     *\n     * @param message The message to send.\n     * @param source The source of the message.\n     * @param options Options for the sent message.\n     * @param ignoreHydration Indicates if this function should not check to see if the Carbon AI chat is hydrated before\n     * performing send.\n     */\n    async send(message, source, options = {}, ignoreHydration = false) {\n        const messageRequest = typeof message === \"string\"\n            ? createMessageRequestForText(message)\n            : message;\n        // If the home screen is open, we want to close it as soon as a message is sent. Note that this will also apply\n        // if the Carbon AI chat hasn't been opened yet.\n        if (this.serviceManager.store.getState().persistedToBrowserStorage.chatState\n            .homeScreenState.isHomeScreenOpen) {\n            this.serviceManager.store.dispatch(actions.setHomeScreenIsOpen(false));\n        }\n        // If the response panel is open, it should be closed on every message sent.\n        if (this.serviceManager.store.getState().responsePanelState.isOpen) {\n            this.serviceManager.store.dispatch(actions.setResponsePanelIsOpen(false));\n        }\n        if (this.hydrationPromise || ignoreHydration) {\n            if (!ignoreHydration) {\n                // If hydration has already started, then make sure to wait for it to finish.\n                await this.hydrationPromise;\n            }\n            await this.doSend(messageRequest, source, options);\n        }\n        else {\n            // If no hydration has started, then we need to start the hydration and use this message as the alternate for\n            // the welcome node.\n            await this.hydrateChat(messageRequest, source, options);\n        }\n    }\n    /**\n     * Sends the given message to the assistant on the remote server. This will result in a \"pre:send\" and \"send\" event\n     * being fired on the event bus. The returned promise will resolve once a response has received and processed and\n     * both the \"pre:receive\" and \"receive\" events have fired. It will reject when too many errors have occurred and\n     * the system gives up retrying.\n     *\n     * @param message The message to send.\n     * @param source The source of the message.\n     * @param options Options for sending the message.\n     */\n    async doSend(message, source, options = {}) {\n        const { store } = this.serviceManager;\n        addDefaultsToMessage(message);\n        // Grab the original text before it can be modified by a pre:send handler.\n        const originalUserText = message.history?.label || message.input.text;\n        // If the options object instructs us to create a silent message, update the history object to respect the silent\n        // setting. This means that the message will not show in the UI, but will be sent to the API.\n        if (options.silent) {\n            message.history.silent = true;\n        }\n        const localMessage = inputItemToLocalItem(message, originalUserText);\n        // If history.silent is set to true, we don't add the message to the redux store as we do not want to show it.\n        // Likewise, in schema/historyToMessages, if the message is coming from the history store, we do not add it to redux\n        // either.\n        if (!message.history.silent) {\n            store.dispatch(actions.addLocalMessageItem(localMessage, message, true));\n        }\n        else {\n            store.dispatch(actions.addMessage(message));\n        }\n        // This message is coming from an option/suggestion response type, and we need to let the previous message that\n        // displayed the options which item should be marked in state as selected.\n        if (options.setValueSelectedForMessageID) {\n            store.dispatch(actions.messageSetOptionSelected(options.setValueSelectedForMessageID, message));\n        }\n        // Now freeze the message so nobody can mess with it since that object came from outside. We'll then create a\n        // clone of this message so that it may be modifiable by a pre:send listener when the message is ready to be\n        // sent (which may happen later if other messages are in the queue). We'll have to replace our store object once\n        // that happens.\n        deepFreeze(message);\n        await this.serviceManager.messageService.send(cloneDeep(message), source, localMessage.ui_state.id, options);\n    }\n    /**\n     * Instructs the widget to process the given message as an incoming message received from the assistant. This will\n     * fire a \"pre:receive\" event immediately and a \"receive\" event after the event has been processed by the widget.\n     * This method completes when all message items have been processed (including the time delay that may be introduced\n     * by a pause).\n     *\n     * @param message A v2 message API Response object.\n     * @param isLatestWelcomeNode Indicates if this message is a new welcome message that has just been shown to the user\n     * and isn't a historical welcome message.\n     * @param requestMessage The optional {@link MessageRequest} that this response is a response to.\n     * @param requestOptions The options that were included when the request was sent.\n     */\n    async receive(message, isLatestWelcomeNode = false, requestMessage, requestOptions) {\n        const { restartCount: initialRestartCount } = this.serviceManager;\n        // Received messages should be given an id if they don't have one.\n        if (!message.id) {\n            message.id = uuid(UUIDType.MESSAGE);\n        }\n        const preReceiveEvent = {\n            type: BusEventType.PRE_RECEIVE,\n            data: message,\n        };\n        // Fire the pre:receive event. User code is allowed to modify the message at this point.\n        await this.serviceManager.fire(preReceiveEvent);\n        if (initialRestartCount !== this.serviceManager.restartCount) {\n            // If a restart occurred during the await above, we need to exit.\n            return;\n        }\n        if (!isLatestWelcomeNode) {\n            this.serviceManager.store.dispatch(actions.updateHasSentNonWelcomeMessage(true));\n        }\n        if (initialRestartCount !== this.serviceManager.restartCount) {\n            // If a restart occurred during the await above, we need to exit.\n            return;\n        }\n        const { languagePack } = this.serviceManager.store.getState();\n        if (isResponse(message)) {\n            // Even though processMessageResponse is an async function we do not await it in case a pause response type is\n            // being processed. If we waited for the function to finished when a pause response type is being processed there\n            // would be a pause before firing the receive event lower down, which would be incorrect since we have actually\n            // received the event.\n            this.processMessageResponse(message, isLatestWelcomeNode, requestMessage, false, requestOptions).catch((error) => {\n                consoleError(\"Error processing the message response\", error);\n            });\n        }\n        else {\n            const inlineError = createMessageResponseForText(languagePack.errors_singleMessage, message.thread_id, MessageResponseTypes.INLINE_ERROR);\n            this.receive(inlineError, false);\n        }\n        // Now freeze the message so nobody can mess with it since that object came from outside.\n        deepFreeze(message);\n        // Don't fire with the cloned message since we don't want to let anyone mess with it.\n        await this.serviceManager.fire({\n            type: BusEventType.RECEIVE,\n            data: message,\n        });\n    }\n    /**\n     * Removes the messages with the given IDs from the chat view.\n     */\n    async removeMessages(messageIDs) {\n        this.serviceManager.store.dispatch(actions.removeMessages(messageIDs));\n    }\n    /**\n     * Inserts the given messages into the chat window as part of the chat history. This will fire the history:begin\n     * and history:end events.\n     */\n    async insertHistory(messages) {\n        // Note: there is currently a gap here. If this is called with a partial list of messages that include\n        // \"update_history\" event messages to add updates to messages not also in this list, then they will not update\n        // correctly. I'm going to wait to see how this functionality shakes out and see if this is really going to end\n        // up being necessary.\n        // If we're inserting more history into a chat that already has messages, we want to preserve the relative\n        // scroll position of the existing messages from the bottom.\n        const scrollBottom = this.serviceManager.mainWindow?.getMessagesScrollBottom();\n        const state = this.serviceManager.store.getState();\n        // TODO: This doesn't work right if this is called more than once.\n        const notes = {\n            notes: [{ type: NoteType.HISTORY, body: messages }],\n        };\n        const history = await this.serviceManager.historyService.loadHistory(notes);\n        // Merge the existing state on top of the new state (with the current state taking precedence over anything\n        // that that's in the inserted state).\n        const currentAppStateMessages = {\n            allMessageItemsByID: state.allMessageItemsByID,\n            allMessagesByID: state.allMessagesByID,\n            botMessageState: state.botMessageState,\n        };\n        const newAppStateMessages = merge({}, history.messageHistory, currentAppStateMessages);\n        // Now make sure the message arrays are merged correctly.\n        newAppStateMessages.botMessageState.messageIDs = [\n            ...history.messageHistory.botMessageState.messageIDs,\n            ...currentAppStateMessages.botMessageState.messageIDs,\n        ];\n        newAppStateMessages.botMessageState.localMessageIDs = [\n            ...history.messageHistory.botMessageState.localMessageIDs,\n            ...currentAppStateMessages.botMessageState.localMessageIDs,\n        ];\n        this.serviceManager.store.dispatch(actions.hydrateMessageHistory(newAppStateMessages));\n        await this.createElementsForUserDefinedResponses(history.messageHistory);\n        // Restore the scroll position.\n        this.serviceManager.mainWindow?.doAutoScroll({\n            scrollToBottom: scrollBottom,\n        });\n    }\n    /**\n     * Receives a chunk from a stream.\n     */\n    async receiveChunk(chunk, messageID, options = {}) {\n        const chunkPromise = resolvablePromise();\n        this.chunkQueue.push({ chunk, messageID, options, chunkPromise });\n        if (this.chunkQueue.length === 1) {\n            this.processChunkQueue();\n        }\n        return chunkPromise;\n    }\n    async processChunkQueue() {\n        const { chunk, options, chunkPromise } = this.chunkQueue[0];\n        let { messageID } = this.chunkQueue[0];\n        const isCompleteItem = isStreamCompleteItem(chunk);\n        const isPartialItem = isStreamPartialItem(chunk);\n        const { store } = this.serviceManager;\n        const isStopGeneratingVisible = store.getState().botInputState.stopStreamingButtonState.isVisible;\n        if (isPartialItem) {\n            const streamingData = chunk.partial_item.streaming_metadata;\n            if (streamingData.cancellable && !isStopGeneratingVisible) {\n                store.dispatch(actions.setStopStreamingButtonVisible(true));\n            }\n        }\n        if (isCompleteItem || isPartialItem) {\n            if (!messageID) {\n                messageID = chunk.streaming_metadata.response_id;\n            }\n            if (!store.getState().allMessagesByID[messageID]) {\n                store.dispatch(actions.streamingStart(messageID));\n            }\n            const item = chunk.partial_item ||\n                chunk.complete_item;\n            store.dispatch(actions.streamingAddChunk(messageID, item, isCompleteItem, options.disableFadeAnimation ?? true));\n            if (chunk.partial_response?.history) {\n                if (Object.keys(chunk.partial_response).length > 1) {\n                    throw new Error(`The partial_response object only supports the \"history\" property.`);\n                }\n                store.dispatch(actions.streamingMergeHistory(messageID, chunk.partial_response?.history));\n            }\n            // Now make sure to handle any user_defined response items in the chunk.\n            await this.handleUserDefinedResponseItemsChunk(messageID, chunk, item);\n        }\n        else if (isStreamFinalResponse(chunk)) {\n            // Note that while this function is called from the streaming handler in the MessageService, the final_response\n            // path here is not taken. The MessageService uses the processSuccess path instead after the stream is\n            // complete. This path is only taken by custom code calling the public receiveChunk method.\n            this.receive(chunk.final_response, options.isLatestWelcomeNode, null, {\n                disableFadeAnimation: true,\n            });\n        }\n        if ((isCompleteItem || isStreamFinalResponse(chunk)) &&\n            isStopGeneratingVisible) {\n            // Once a complete or final response is received, reset the visible and disabled states for the \"stop streaming\"\n            // button.\n            store.dispatch(actions.setStopStreamingButtonDisabled(false));\n            store.dispatch(actions.setStopStreamingButtonVisible(false));\n        }\n        this.chunkQueue.shift();\n        chunkPromise.doResolve();\n        if (this.chunkQueue[0]) {\n            this.processChunkQueue();\n        }\n    }\n    /**\n     * Creates the HTML element for a user defined response and adds it to the registry (if it does not already exist).\n     */\n    getOrCreateUserDefinedElement(messageItemID) {\n        let userDefinedItem = this.serviceManager.userDefinedElementRegistry.get(messageItemID);\n        if (!userDefinedItem) {\n            userDefinedItem = {\n                element: document.createElement(\"div\"),\n                slotName: `slot-user-defined-${uuid()}`,\n            };\n            userDefinedItem.element.setAttribute(\"slot\", userDefinedItem.slotName);\n            this.serviceManager.userDefinedElementRegistry.set(messageItemID, userDefinedItem);\n        }\n        return userDefinedItem;\n    }\n    /**\n     * If the given message should be rendered as a user defined message, this will create a host element for the message\n     * and fire the {@link BusEventType.USER_DEFINED_RESPONSE} event so that the event listeners can attach whatever they\n     * want to the host element.\n     */\n    async handleUserDefinedResponseItems(localMessage, originalMessage) {\n        if (renderAsUserDefinedMessage(localMessage.item)) {\n            let element;\n            let slotName;\n            if (!localMessage.item.user_defined?.silent) {\n                // If the message is silent, don't create a host element for it since it's not going to be rendered.\n                ({ element, slotName } = this.getOrCreateUserDefinedElement(localMessage.ui_state.id));\n            }\n            const userDefinedResponseEvent = {\n                type: BusEventType.USER_DEFINED_RESPONSE,\n                data: {\n                    message: localMessage.item,\n                    fullMessage: originalMessage,\n                    element,\n                    slot: slotName,\n                    fullWidth: false,\n                },\n            };\n            await this.serviceManager.fire(userDefinedResponseEvent);\n            if (userDefinedResponseEvent.data.fullWidth) {\n                this.serviceManager.store.dispatch(actions.setMessageUIProperty(localMessage.ui_state.id, \"fullWidth\", true));\n            }\n        }\n        else if (isResponseWithNestedItems(localMessage.item)) {\n            const { itemsLocalMessageItemIDs, bodyLocalMessageItemIDs, footerLocalMessageItemIDs, gridLocalMessageItemIDs, } = localMessage.ui_state;\n            const { allMessageItemsByID } = this.serviceManager.store.getState();\n            /**\n             * Will attempt to create an element for the custom response using the provided local message id.\n             */\n            const createElementForNestedUserDefinedResponse = (localMessageItemID) => {\n                const nestedLocalMessage = allMessageItemsByID[localMessageItemID];\n                return this.handleUserDefinedResponseItems(nestedLocalMessage, originalMessage);\n            };\n            if (gridLocalMessageItemIDs?.length) {\n                await asyncForEach(gridLocalMessageItemIDs, (row) => asyncForEach(row, (cell) => asyncForEach(cell, (itemID) => createElementForNestedUserDefinedResponse(itemID))));\n            }\n            if (itemsLocalMessageItemIDs?.length) {\n                await asyncForEach(itemsLocalMessageItemIDs, createElementForNestedUserDefinedResponse);\n            }\n            if (bodyLocalMessageItemIDs?.length) {\n                await asyncForEach(bodyLocalMessageItemIDs, createElementForNestedUserDefinedResponse);\n            }\n            if (footerLocalMessageItemIDs?.length) {\n                await asyncForEach(footerLocalMessageItemIDs, createElementForNestedUserDefinedResponse);\n            }\n        }\n    }\n    /**\n     * If the given message should be rendered as a user defined message, this will create a host element for the message\n     * and fire the {@link BusEventType.CHUNK_USER_DEFINED_RESPONSE} event so that the event listeners can attach whatever\n     * they want to the host element.\n     *\n     * Note, this function does not currently support nested items inside the chunk.\n     */\n    async handleUserDefinedResponseItemsChunk(messageID, chunk, messageItem) {\n        if (renderAsUserDefinedMessage(messageItem)) {\n            const { store } = this.serviceManager;\n            const itemID = streamItemID(messageID, messageItem);\n            let element;\n            let slotName;\n            if (!messageItem.user_defined?.silent) {\n                // If the message is silent, don't create a host element for it since it's not going to be rendered.\n                ({ element, slotName } = this.getOrCreateUserDefinedElement(itemID));\n            }\n            const userDefinedResponseEvent = {\n                type: BusEventType.CHUNK_USER_DEFINED_RESPONSE,\n                data: {\n                    messageItem,\n                    chunk,\n                    element,\n                    slot: slotName,\n                    fullWidth: false,\n                },\n            };\n            await this.serviceManager.fire(userDefinedResponseEvent);\n            if (store.getState().allMessageItemsByID[itemID].ui_state.fullWidth !==\n                userDefinedResponseEvent.data.fullWidth) {\n                store.dispatch(actions.setMessageUIProperty(itemID, \"fullWidth\", userDefinedResponseEvent.data.fullWidth));\n            }\n        }\n    }\n    /**\n     * Takes each item in the appropriate output array and dispatches correct actions. We may want to look into\n     * turning this into a formal queue as the pause response_type may cause us to lose correct order in fast\n     * conversations.\n     *\n     * @param fullMessage A v2 message API Response object.\n     * @param isLatestWelcomeNode If it is a new welcome node, we want to pass that data along.\n     * @param requestMessage The optional {@link MessageRequest} that this response is a response to.\n     * @param isProvidedFromTransfer Indicates that the message was provided from a channel transfer.\n     * @param requestOptions The options that were included when the request was sent.\n     */\n    async processMessageResponse(fullMessage, isLatestWelcomeNode, requestMessage, isProvidedFromTransfer, requestOptions = {}) {\n        const { store } = this.serviceManager;\n        const { config } = store.getState();\n        const initialRestartCount = this.serviceManager.restartCount;\n        const output = fullMessage.output.generic;\n        fullMessage.request_id = requestMessage?.id;\n        addDefaultsToMessage(fullMessage);\n        store.dispatch(actions.addMessage(fullMessage));\n        // The ID of the previous (visible) message item that was added to the store. When adding new items from the\n        // response, this is used to ensure that each item is added in the right position.\n        let previousItemID = null;\n        // Need a regular for loop to allow for the await below.\n        for (let index = 0; index < output.length &&\n            initialRestartCount === this.serviceManager.restartCount; index++) {\n            const messageItem = output[index];\n            if (messageItem) {\n                const pause = isPause(messageItem);\n                const agent = isConnectToAgent(messageItem);\n                const tour = hasTourUserDefinedType(messageItem);\n                const localMessageItem = outputItemToLocalItem(messageItem, fullMessage, isLatestWelcomeNode, requestOptions.disableFadeAnimation);\n                // If the message item is a tour and the tour card is supposed to be skipped then start the tour now.\n                if (tour &&\n                    (requestOptions.skipTourCard || messageItem.user_defined?.skip_card)) {\n                    // Determine the reason the tour is starting. If the startTour method was used and skip_card is true then the\n                    // method being used will take priority.\n                    const startTourReason = requestOptions.skipTourCard\n                        ? TourStartReason.START_TOUR_METHOD\n                        : TourStartReason.SKIP_CARD;\n                    // Determine the reason the view is changing.\n                    const { viewState } = store.getState().persistedToBrowserStorage.launcherState;\n                    if (viewState.mainWindow) {\n                        // If the mainWindow is visible then use the MainWindowCloseReasons and fire the window:close events. If the\n                        // startTour method was used and skip_card is true then the method being used will take priority.\n                        const mainWindowCloseReason = requestOptions.skipTourCard\n                            ? MainWindowCloseReason.CALLED_START_TOUR\n                            : MainWindowCloseReason.TOUR_SKIP_CARD;\n                        // No need to await startTour() here since there is nothing else in this function that is dependent on\n                        // startTours completion.\n                        this.startTour(localMessageItem, startTourReason, {\n                            mainWindowCloseReason,\n                        }).catch((error) => {\n                            consoleError(\"Error starting the tour\", error);\n                        });\n                    }\n                    else {\n                        // If the mainWindow is not visible then use the ViewChangeReasons and do not fire the window:close events.\n                        // If the startTour method was used and skip_card is true then the method being used will take priority.\n                        const viewChangeReason = requestOptions.skipTourCard\n                            ? ViewChangeReason.CALLED_START_TOUR\n                            : ViewChangeReason.TOUR_SKIP_CARD;\n                        // No need to await startTour() here since there is nothing else in this function that is dependent on\n                        // startTours completion.\n                        this.startTour(localMessageItem, startTourReason, {\n                            viewChangeReason,\n                        }).catch((error) => {\n                            consoleError(\"Error starting the tour\", error);\n                        });\n                    }\n                }\n                else if (!tour && requestOptions.skipTourCard) {\n                    // If instance.startTour() was used but a tour response was not received then log an error.\n                    consoleError(\"The message response received was not a tour, so the tour card was not skipped nor was a tour started by the startTour() call.\");\n                }\n                const nestedLocalMessageItems = [];\n                createLocalMessageItemsForNestedMessageItems(localMessageItem, fullMessage, false, nestedLocalMessageItems, true);\n                store.dispatch(actions.addNestedMessages(nestedLocalMessageItems));\n                if (agent && isResponse(fullMessage)) {\n                    // For the \"connect_to_agent\" response, we need to determine the agents' availability before we can\n                    // continue to process the message items. Let's increment the typing counter while we're waiting for a\n                    // result from areAnyAgentsOnline.\n                    store.dispatch(actions.addIsTypingCounter(1));\n                    // Determine if the CTA card should display a service desk error.\n                    if (!hasServiceDesk(config)) {\n                        // Report this error.\n                        const message = 'Web chat received a \"connect_to_agent\" message but there is no service desk configured. Check your chat configuration.';\n                        this.errorOccurred({\n                            errorType: OnErrorType.INTEGRATION_ERROR,\n                            message,\n                        });\n                        // Make sure this state is reflected in history.\n                        store.dispatch(actions.setMessageHistoryProperty(localMessageItem.fullMessageID, \"agent_no_service_desk\", true));\n                    }\n                    // eslint-disable-next-line no-await-in-loop\n                    const agentAvailability = await this.serviceManager.humanAgentService?.checkAreAnyAgentsOnline(fullMessage);\n                    // If a restart occurred while waiting for the agents online check, then skip the processing below.\n                    if (initialRestartCount === this.serviceManager.restartCount) {\n                        // Update the value in the redux store.\n                        store.dispatch(actions.setMessageHistoryProperty(localMessageItem.fullMessageID, \"agent_availability\", agentAvailability));\n                        let shouldAutoRequestAgent = false;\n                        // If this transfer to agent message was provided from a transfer, the agent card should make an auto request\n                        // on behalf of the user. It's possible to receive a transfer to agent response from Carbon AI chat if the response\n                        // types are not provided the \"channels\" attribute, so this check exists to make sure we only add\n                        // shouldAutoRequestAgent if the agent response was provided from a transfer as opposed to a regular message\n                        // request.\n                        if (isProvidedFromTransfer) {\n                            shouldAutoRequestAgent = isChannelTransferToAgent(fullMessage);\n                        }\n                        // If configured, then auto-connect right now.\n                        if (config.public.serviceDesk?.skipConnectAgentCard) {\n                            shouldAutoRequestAgent = true;\n                        }\n                        // Decrement the typing counter to get rid of the pause.\n                        store.dispatch(actions.addIsTypingCounter(-1));\n                        if (shouldAutoRequestAgent &&\n                            agentAvailability === AgentsOnlineStatus.ONLINE) {\n                            this.serviceManager.humanAgentService.startChat(localMessageItem, fullMessage);\n                        }\n                    }\n                }\n                if (pause) {\n                    const showIsTyping = isTyping(messageItem);\n                    if (showIsTyping) {\n                        store.dispatch(actions.addIsTypingCounter(1));\n                    }\n                    // If this message is a pause, then just sleep for the pause duration before continuing. We don't actually\n                    // render anything for this message since it's really an instruction so we won't create a LocalMessage for\n                    // it and it won't be added to the redux store.\n                    // eslint-disable-next-line no-await-in-loop\n                    await sleep(messageItem.time);\n                    if (showIsTyping &&\n                        initialRestartCount === this.serviceManager.restartCount) {\n                        store.dispatch(actions.addIsTypingCounter(-1));\n                    }\n                }\n                else {\n                    // In order to ensure that the addMessages get called in correct order, we need to add an `await` here to\n                    // pause further processing until this one is sent.\n                    // eslint-disable-next-line no-await-in-loop\n                    await this.handleUserDefinedResponseItems(localMessageItem, fullMessage);\n                    if (!localMessageItem.item.user_defined?.silent &&\n                        initialRestartCount === this.serviceManager.restartCount) {\n                        this.serviceManager.store.dispatch(actions.addLocalMessageItem(localMessageItem, fullMessage, false, previousItemID));\n                        previousItemID = localMessageItem.ui_state.id;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Opens the response panel using the provided local message item to render the content in the panel.\n     */\n    openResponsePanel(localMessageItem, isMessageForInput) {\n        this.serviceManager.store.dispatch(actions.setResponsePanelContent(localMessageItem, isMessageForInput));\n        this.serviceManager.store.dispatch(actions.setResponsePanelIsOpen(true));\n    }\n    /**\n     * Inserts a locally created {@link MessageResponse} message into the message system.\n     */\n    async insertLocalMessageResponse(message) {\n        message.id = uuid(UUIDType.MESSAGE);\n        await this.processMessageResponse(message, false, null, false, {});\n    }\n    /**\n     * Updates the language pack in use by the widget. This will merge in the provided language pack with the existing\n     * one, leaving any missing keys unchanged.\n     */\n    updateLanguagePack(changes) {\n        const { languagePack, locale } = this.serviceManager.store.getState();\n        const messages = {\n            ...languagePack,\n            ...changes,\n        };\n        setIntl(this.serviceManager, locale, messages);\n    }\n    /**\n     * Adds a new notification to be shown in the UI.\n     */\n    addNotification(notification) {\n        this.serviceManager.store.dispatch(actions.addNotification(notification));\n    }\n    /**\n     * Removes a notification with the provided groupId.\n     */\n    removeNotification(groupID) {\n        this.serviceManager.store.dispatch(actions.removeNotifications({ groupID }));\n    }\n    /**\n     * Removes all notifications.\n     */\n    removeAllNotifications() {\n        this.serviceManager.store.dispatch(actions.removeAllNotifications());\n    }\n    /**\n     * This updates the map that can be used to override the values for CSS variables in the application. Each key of the\n     * map is the name of a variable (without the \"--cds-chat-\" prefix) and the value is whatever the value of\n     * the variable should be set at. The values in the provided map will be merged with any variables that may already be defined in\n     * the public config which allows this function to update only the specific variables desired.\n     *\n     * @param publicVars A map of CSS variables. Each key of the map is the name of a variable (without the\n     * \"--cds-chat-\" prefix) and the value is whatever the value of the variable should be set at.\n     * @param whiteLabelVariables The set of variables for white labeling. These\n     * are not directly set as CSS variables but go through a translation process first that turns them into CSS\n     * variables.\n     */\n    updateCSSVariables(publicVars, whiteLabelVariables = {}) {\n        const { store } = this.serviceManager;\n        const { theme } = store.getState();\n        const { carbonTheme, useAITheme } = theme;\n        // If the AI theme is enabled, only a set amount of public variables should be allowed.\n        if (useAITheme) {\n            const usePublicVars = publicVars;\n            publicVars = {};\n            whiteLabelVariables = {};\n            usePublicVars &&\n                Object.entries(usePublicVars).forEach(([variable]) => {\n                    if (VALID_PUBLIC_VARS_IN_AI_THEME_SET.has(variable)) {\n                        publicVars[variable] = usePublicVars[variable];\n                    }\n                    else {\n                        consoleWarn(UPDATE_CSS_VARS_AI_THEME_WARNING_MESSAGE);\n                    }\n                });\n        }\n        else {\n            // Merge css variables in config objects with those passed into this function.\n            publicVars = {\n                ...publicVars,\n            };\n            whiteLabelVariables = {\n                ...whiteLabelVariables,\n            };\n        }\n        const allVariables = mergeCSSVariables(publicVars, whiteLabelVariables, carbonTheme, useAITheme);\n        store.dispatch(actions.updateCSSVariables(allVariables, publicVars, whiteLabelVariables));\n    }\n    /**\n     * Updates the bot name used in, amongst other places, as the default for the title in the header bar of the chat\n     * widget when AI theme is off. We use this method currently only when in WYSIWYG mode in the tooling configuration\n     * page.\n     *\n     * @param name A new name for the bot.\n     */\n    updateBotName(name) {\n        this.serviceManager.store.dispatch(actions.updateBotName(name));\n    }\n    /**\n     * Public method to update the title of the main bot header. This would be used instead of the botName if it is\n     * defined.\n     */\n    updateMainHeaderTitle(title) {\n        this.serviceManager.store.dispatch(actions.updateMainHeaderTitle(title));\n    }\n    /**\n     * Updates the bot avatar in the header bar of the chat widget. We use this method currently only when in WYSIWYG mode\n     * in the tooling configuration page.\n     *\n     * @param url A new avatar image url for the bot.\n     */\n    updateBotAvatarURL(url) {\n        this.serviceManager.store.dispatch(actions.updateBotAvatarURL(url));\n    }\n    /**\n     * Updates the currently active homeScreenConfig. Currently only used in tooling to show live updates when editing web\n     * chat configuration.\n     */\n    updateHomeScreenConfig(homeScreenConfig) {\n        this.serviceManager.store.dispatch(actions.updateHomeScreenConfig(homeScreenConfig));\n    }\n    /**\n     * Updates the current state of the launcher.\n     */\n    updateLauncherConfig(launcherConfig) {\n        this.serviceManager.store.dispatch(actions.updateLauncherConfig(launcherConfig));\n    }\n    /**\n     * Construct the newViewState from the newView provided. Fire the view:pre:change and view:change events, as well as\n     * window:pre:open, window:open, or window:pre:close, window:close if instructed to do so. If the view change isn't\n     * canceled by the events then change the view. If the main window or tour are open after changing the view, and\n     * doNotHydrate isn't true and the chat is not already hydrated, then hydrate the chat.\n     */\n    async changeView(newView, reason, tryHydrating = true, forceViewChange = false) {\n        const { store } = this.serviceManager;\n        const { viewState } = store.getState().persistedToBrowserStorage.launcherState;\n        // Build the new viewState object.\n        let newViewState = constructViewState(newView, store.getState());\n        if (!validateViewState(newViewState, store.getState())) {\n            // If the newViewState had an issue and was unable to be verified then do not change the view.\n            return viewState;\n        }\n        if (!isEqual(newViewState, viewState) || forceViewChange) {\n            // If the newViewState is different from the current viewState, or the viewChange is being forced to happen, fire\n            // the view:change events and change which views are visible.\n            await this.fireViewChangeEventsAndChangeView(newViewState, reason);\n            // Check and see if the chat should be hydrated.\n            newViewState =\n                store.getState().persistedToBrowserStorage.launcherState.viewState;\n            if (tryHydrating &&\n                (newViewState.mainWindow || newViewState.tour) &&\n                !store.getState().isHydrated) {\n                // If it's ok to hydrate, the main window or tour are now visible, and the chat isn't hydrated, then hydrate\n                // the chat. Since this function is only responsible for changing the view don't await hydrateChat(), instead\n                // let hydrateChat complete on its own time.\n                this.hydrateChat().catch((error) => {\n                    consoleError(\"Error hydrating the chat\", error);\n                });\n            }\n        }\n        // Return the newViewState. This could be the same as the original viewState if there was no difference between the\n        // original viewState and the proposed newViewState, or it could be an updated viewState. The updated viewState\n        // could be what was originally sent to fireViewChangeEventsAndChangeView, or it could be a viewState that has been\n        // modified by Deb during the view:pre:change event.\n        return newViewState;\n    }\n    /**\n     * Fire the \"view:pre:change\" and \"view:change\" events. This will return a boolean to indicate if the process was\n     * cancelled and the view should remain unchanged. If the view change isn't canceled by the events then this will\n     * switch to the newViewState that's been provided. This method is private to force the use of the changeView method\n     * above as an entry point to this method.\n     *\n     * @returns True to indicate that the view was changed. False indicates the view change was cancelled.\n     */\n    async fireViewChangeEventsAndChangeView(newViewState, reason) {\n        const { store } = this.serviceManager;\n        if (store.getState().viewChanging) {\n            // If the view is already in the middle of changing then throw an error.\n            throw new Error(\"The view may not be changed while a view change event is already running. Please make sure to resolve any promises from these events.\");\n        }\n        store.dispatch(actions.setViewChanging(true));\n        const { viewState } = store.getState().persistedToBrowserStorage.launcherState;\n        // If we have a mainWindowOpenReason or mainWindowCloseReason then this viewChangeReason will be determined lower down.\n        const { viewChangeReason } = reason;\n        // Freeze the previous viewState since we don't want to allow Deb to modify it.\n        const oldViewState = deepFreeze(viewState);\n        try {\n            // Create the view:pre:change event and fire it.\n            const preViewChangeEvent = {\n                type: BusEventType.VIEW_PRE_CHANGE,\n                reason: viewChangeReason,\n                oldViewState,\n                newViewState,\n                cancelViewChange: false,\n            };\n            await this.serviceManager.fire(preViewChangeEvent);\n            if (preViewChangeEvent.cancelViewChange) {\n                // If the view changing was canceled in the event then log a message and don't change the view.\n                debugLog(\"The view changing was cancelled by a view:pre:change event.\");\n                return;\n            }\n            // Validate the view state returned from the view:pre:change event.\n            if (!validateViewState(preViewChangeEvent.newViewState, store.getState())) {\n                // If the view state had an issue and was unable to be verified then do not change the view.\n                return;\n            }\n            // If there were no issues with the new view state then use it.\n            newViewState = preViewChangeEvent.newViewState;\n            // Actually change the viewState in store.\n            store.dispatch(actions.setViewState(deepFreeze(newViewState)));\n            // Create the view:change event and fire it.\n            const viewChangeEvent = {\n                type: BusEventType.VIEW_CHANGE,\n                reason: viewChangeReason,\n                oldViewState,\n                newViewState,\n                cancelViewChange: false,\n            };\n            await this.serviceManager.fire(viewChangeEvent);\n            if (viewChangeEvent.cancelViewChange) {\n                // If the view changing was canceled in the event then log a message and switch the viewState back to what it was\n                // originally.\n                store.dispatch(actions.setViewState(oldViewState));\n                debugLog(\"The view changing was cancelled by a view:change event.\");\n                return;\n            }\n            // Validate the view state returned from the view:change event.\n            if (!validateViewState(viewChangeEvent.newViewState, store.getState())) {\n                // If the view state had an issue and was unable to be verified then switch the viewState back to what it was\n                // originally.\n                store.dispatch(actions.setViewState(oldViewState));\n                return;\n            }\n            // If there were no issues with the new view state then use it.\n            newViewState = viewChangeEvent.newViewState;\n            // Actually change the viewState in store for the last time.\n            store.dispatch(actions.setViewState(deepFreeze(newViewState)));\n        }\n        finally {\n            store.dispatch(actions.setViewChanging(false));\n        }\n    }\n    /**\n     * To start the tour save all the new tour data in store, fire the view:change events (as well as the window:close\n     * events if the main window is open), and then switch to the tour view. If the view:change events are successful then\n     * fire the tour:start and tour:step events as well.\n     */\n    async startTour(message, startTourReason, changeViewReason) {\n        // Save all the new tour info in store.\n        this.serviceManager.store.dispatch(actions.setTourData(message.fullMessageID));\n        // Fire the appropriate events and try to open the tour.\n        const newViewState = await this.changeView(ViewType.TOUR, changeViewReason);\n        if (newViewState.tour) {\n            // If the tour is now visible then fire the tour:start event.\n            await this.serviceManager.fire({\n                type: BusEventType.TOUR_START,\n                reason: startTourReason,\n            });\n            // Then fire the tour:step event with the first steps info.\n            await this.serviceManager.fire({\n                type: BusEventType.TOUR_STEP,\n                step: this.serviceManager.store.getState().tourState\n                    .activeTourStepItems[0],\n            });\n        }\n    }\n    /**\n     * To end the tour fire the view:change events and switch to the launcher. If the view:change events are successful\n     * then clear all the tour data from store.\n     */\n    async endTour(reason) {\n        const { viewState } = this.serviceManager.store.getState().persistedToBrowserStorage\n            .launcherState;\n        let newViewState = viewState;\n        if (viewState.tour) {\n            // If a tour is open then change to the launcher.\n            newViewState = await this.changeView(ViewType.LAUNCHER, reason);\n        }\n        if (!newViewState.tour) {\n            // If the tour is no longer visible or wasn't visible then clear the tour data.\n            this.serviceManager.store.dispatch(actions.clearTourData());\n            return true;\n        }\n        // If changeView didn't hide the tour, then the tour data was not cleared, so return false.\n        return false;\n    }\n    /**\n     * Look for the provided stepId string within the tour step items. If a step with a matching step_id is found then\n     * move to that step within the tour.\n     */\n    goToSpecificTourStep(stepId) {\n        const { activeTourStepItems } = this.serviceManager.store.getState().tourState;\n        // Find the index of the step with a step_id string matching the provided stepId.\n        const newStepIndex = activeTourStepItems.findIndex((stepItem) => stepItem.step_id === stepId);\n        if (newStepIndex) {\n            // If a matching step is found then change to that step in the tour.\n            this.changeStepInTour({ newStepIndex });\n        }\n        else {\n            // If a matching step is not found then log an error and don't change the tour step.\n            consoleError(`No step with the id \"${stepId}\" was found within the current tour. As a result, goToTourStep() did not change the current tour step.`);\n        }\n    }\n    /**\n     * Change the tour step, either to a specific step, the next step, or the previous step. After changing the step send\n     * a tour:step event.\n     */\n    async changeStepInTour(changeStepOptions) {\n        const { store } = this.serviceManager;\n        const { activeTourStepItems } = store.getState().tourState;\n        const { activeTourCurrentStepIndex } = store.getState().persistedToBrowserStorage.chatState.persistedTourState;\n        // Get the new default step number if there is one.\n        let { newStepIndex } = changeStepOptions;\n        if (changeStepOptions.nextStep) {\n            newStepIndex = activeTourCurrentStepIndex + 1;\n        }\n        else if (changeStepOptions.previousStep) {\n            newStepIndex = activeTourCurrentStepIndex - 1;\n        }\n        // Change to the new step in the tour.\n        store.dispatch(actions.changeStepInTour(newStepIndex));\n        // Get the new step number from store in case the number that was provided had been out of bounds for the step array.\n        const actualNewStepIndex = store.getState().persistedToBrowserStorage.chatState.persistedTourState\n            .activeTourCurrentStepIndex;\n        if (actualNewStepIndex === newStepIndex) {\n            // Fire the tour step event with the new step info.\n            await this.serviceManager.fire({\n                type: BusEventType.TOUR_STEP,\n                step: activeTourStepItems[actualNewStepIndex],\n            });\n        }\n        else {\n            consoleWarn(\"The tour tried to change to a step that was out of bounds for the step array, so no step change was made.\");\n        }\n    }\n    /**\n     * Fires an error event to notify listeners that an error occurred.\n     *\n     * @param error Details about the error or the error object.\n     */\n    errorOccurred(error) {\n        consoleError(\"An error has occurred\", error);\n        if (error.catastrophicErrorType) {\n            this.serviceManager.store.dispatch(actions.setAppStateValue(\"catastrophicErrorType\", error.catastrophicErrorType));\n        }\n        callOnError(this.serviceManager.additionalChatParameters.onError, error);\n    }\n    /**\n     * Restarts the conversation with the assistant. This does not make any changes to a conversation with a human agent.\n     * This will clear all the current assistant messages from the main bot view and cancel any outstanding messages.\n     * This will also clear any active tour data and re-show the input field if it was hidden. Lastly, this will clear\n     * the current assistant session which will force a new session to start on the next message.\n     */\n    async restartConversation(options = {}) {\n        const { skipHydration = false, endAgentConversation = true, fireEvents = true, } = options;\n        debugLog(\"Restarting conversation\");\n        if (this.restarting) {\n            consoleWarn(\"You cannot restart a conversation while a previous restart is still pending.\");\n            return;\n        }\n        this.restarting = true;\n        try {\n            const { serviceManager } = this;\n            const { store } = serviceManager;\n            if (fireEvents) {\n                await serviceManager.fire({\n                    type: BusEventType.PRE_RESTART_CONVERSATION,\n                });\n            }\n            serviceManager.restartCount++;\n            if (this.hydrating) {\n                await this.hydrationPromise;\n            }\n            const currentState = store.getState();\n            const { persistedToBrowserStorage } = currentState;\n            const { viewState } = persistedToBrowserStorage.launcherState;\n            // If we're connected to an agent, we need to end the agent chat.\n            const { isConnecting } = currentState.agentState;\n            const { isConnected } = currentState.persistedToBrowserStorage.chatState.agentState;\n            if ((isConnected || isConnecting) && endAgentConversation) {\n                await serviceManager.humanAgentService.endChat(true, false, false);\n            }\n            if (viewState.tour) {\n                // If a tour is open then try to open the main window. Specify not to hydrate the chat because hydration is\n                // planned to happen after restart:conversation has fired below. We don't need to clear the tour data in store\n                // since the restartConversation redux action will do that.\n                await this.serviceManager.actions.changeView(ViewType.MAIN_WINDOW, {\n                    mainWindowOpenReason: MainWindowOpenReason.CALLED_RESTART_CONVERSATION,\n                }, false);\n            }\n            this.serviceManager.instance.updateAssistantInputFieldVisibility(true);\n            this.serviceManager.messageService.cancelAllMessageRequests();\n            store.dispatch(actions.restartConversation());\n            if (!skipHydration) {\n                // Clear this promise in case the restart event below triggers another hydration.\n                this.hydrationPromise = null;\n            }\n            if (fireEvents) {\n                await serviceManager.fire({ type: BusEventType.RESTART_CONVERSATION });\n            }\n            if (this.hydrating) {\n                await this.hydrationPromise;\n            }\n            if (!skipHydration && !serviceManager.store.getState().isHydrated) {\n                // Trigger re-hydration.\n                this.hydrationPromise = null;\n                if (store.getState().persistedToBrowserStorage.launcherState.viewState\n                    .mainWindow) {\n                    await serviceManager.actions.hydrateChat();\n                }\n            }\n            else {\n                store.dispatch(actions.chatWasHydrated());\n            }\n        }\n        finally {\n            this.restarting = false;\n        }\n    }\n    /**\n     * Remove any record of the current session from the browser.\n     *\n     * @param keepOpenState If we are destroying the session to restart the chat this can be used to preserve if the web\n     * chat is open.\n     */\n    async destroySession(keepOpenState) {\n        const { store } = this.serviceManager;\n        const { persistedToBrowserStorage } = store.getState();\n        const originalViewState = persistedToBrowserStorage.launcherState.viewState;\n        const newPersistedToBrowserStorage = cloneDeep(DEFAULT_PERSISTED_TO_BROWSER);\n        if (keepOpenState) {\n            // If we want to keep the open state then copy it from browser storage.\n            newPersistedToBrowserStorage.launcherState.viewState = originalViewState;\n            if (originalViewState.tour) {\n                // If a tour was previously open then change the viewState to close the tour and open the main window instead.\n                newPersistedToBrowserStorage.launcherState.viewState = {\n                    ...originalViewState,\n                    tour: false,\n                    mainWindow: true,\n                };\n            }\n        }\n        else {\n            // If we don't want to keep the open state then set the launcher to be open.\n            newPersistedToBrowserStorage.launcherState.viewState =\n                VIEW_STATE_LAUNCHER_OPEN;\n        }\n        this.serviceManager.messageService.cancelAllMessageRequests();\n        this.serviceManager.userSessionStorageService.clearLauncherSession();\n        this.serviceManager.userSessionStorageService.clearChatSession();\n        this.serviceManager.store.dispatch(actions.setAppStateValue(\"persistedToBrowserStorage\", newPersistedToBrowserStorage));\n    }\n    /**\n     * Ends the conversation with a human agent. This does not request confirmation from the user first. If the user\n     * is not connected or connecting to a human agent, this function has no effect. You can determine if the user is\n     * connected or connecting by calling {@link ChatInstance.getState}. Note that this function\n     * returns a Promise that only resolves when the conversation has ended. This includes after the\n     * {@link BusEventType.AGENT_PRE_END_CHAT} and {@link BusEventType.AGENT_END_CHAT} events have been fired and\n     * resolved.\n     */\n    agentEndConversation(endedByUser) {\n        return this.serviceManager.humanAgentService.endChat(endedByUser);\n    }\n    /**\n     * Sets the suspended state for an agent conversation. A conversation can be suspended or un-suspended only if the\n     * user is currently connecting or connected to an agent. If a conversation is suspended, then messages from the user\n     * will no longer be routed to the service desk and incoming messages from the service desk will not be displayed. In\n     * addition, the current connection status with an agent will not be shown.\n     */\n    agentUpdateIsSuspended(isSuspended) {\n        this.serviceManager.store.dispatch(agentUpdateIsSuspended(isSuspended));\n    }\n    /**\n     * Creates the custom response elements for all the messages in the given set. This is used in particular when\n     * loading a list of messages from history.\n     */\n    async createElementsForUserDefinedResponses(messages) {\n        await asyncForEach(Object.values(messages.allMessageItemsByID), (localMessage) => {\n            const originalMessage = messages.allMessagesByID[localMessage.fullMessageID];\n            return this.handleUserDefinedResponseItems(localMessage, originalMessage);\n        });\n    }\n}\n\nexport { ChatActionsImpl };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport { asyncForEach, asArray } from '../utils/lang/arrayUtils.js';\nimport { debugStackTrace, consoleError, consoleLog, consoleWarn, isEnableDebugLog, debugLog } from '../utils/miscUtils.js';\nimport { resolvablePromise } from '../utils/resolvablePromise.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is our event bus. It takes subscriptions to events and attaches handlers that are called when\n * the event is fired.\n */\nconst HANDLER_NOT_FUNCTION = \"The event handler is not a function.\";\nclass EventBus {\n    constructor() {\n        /**\n         * This is a map of all the event handlers by type with the map key being the type of event (e.g. \"send\").\n         */\n        this.handlersByType = new Map();\n        /**\n         * This set is used to keep track of which events are currently running. This is to prevent the same event from\n         * running more than once at the same time. This check is only performed on asynchronous events and does not cover\n         * the \"*\" event.\n         */\n        this.eventsTypesRunning = new Set();\n        /**\n         * The current number of async events that are currently running.\n         */\n        this.eventsRunningCount = 0;\n    }\n    /**\n     * Fires the given event and notifiers all listeners for this event type. All event listeners that listen for all\n     * (\"*\") events will also be notified. Events will be fired in the order in which they were registered.\n     *\n     * @param busEvent A single event.\n     * @param instance The current instance of the Carbon AI chat that is passed to the event handlers\n     */\n    async fire(busEvent, instance) {\n        logEvent(\"Before fire\", busEvent);\n        const { type } = busEvent;\n        if (!type) {\n            throw new Error(`Attempted to fire an event with no type! ${JSON.stringify(busEvent)}`);\n        }\n        function wrappedHandler(handler) {\n            const result = handler(busEvent, instance);\n            if (result && !(result instanceof Promise)) {\n                consoleWarn(`An event handler for event ${type} returned a non-promise. This might be a mistake.`, result);\n            }\n            return result;\n        }\n        if (this.eventsTypesRunning.has(type)) {\n            throw new Error(`An event of type ${type} is already running. Please make sure that you have resolved the Promises for any earlier events that were fired.`);\n        }\n        try {\n            this.eventsRunningCount++;\n            try {\n                this.eventsTypesRunning.add(type);\n                // Run all the handlers for the given type.\n                const handlersForType = this.handlersByType.get(type);\n                if (handlersForType && handlersForType.length) {\n                    // Copy the array in case it's modified by an event handler.\n                    const handlersCopy = handlersForType.slice();\n                    await asyncForEach(handlersCopy, wrappedHandler);\n                }\n            }\n            finally {\n                this.eventsTypesRunning.delete(type);\n            }\n        }\n        finally {\n            this.eventsRunningCount--;\n            if (this.waitForEmptyPromise && this.eventsRunningCount === 0) {\n                // If waitForEmpty is waiting for all the events to finish and we've just finished the last one, then let it\n                // know.\n                this.waitForEmptyPromise.doResolve();\n            }\n        }\n        logEvent(\"After fire\", busEvent);\n    }\n    /**\n     * Fires the given event and notifiers all listeners for this event type. All event listeners that listen for all\n     * (\"*\") events will also be notified. Events will be fired in the order in which they were registered. This\n     * function fires the events synchronously.\n     *\n     * @param busEvent A single event.\n     * @param instance The current instance of the Carbon AI chat that is passed to the event handlers\n     */\n    fireSync(busEvent, instance) {\n        logEvent(\"Before fire\", busEvent);\n        const { type } = busEvent;\n        // Run all the handlers for the given type.\n        const handlersForType = this.handlersByType.get(type);\n        if (handlersForType && handlersForType.length) {\n            // Copy the array in case it's modified by an event handler.\n            const handlersCopy = handlersForType.slice();\n            handlersCopy.forEach((handler) => handler(busEvent, instance));\n        }\n        logEvent(\"After fire\", busEvent);\n    }\n    /**\n     * This function will wait for all executing async events to finish. If any new events are fired while this\n     * function is waiting, it will wait for those as well.\n     */\n    async waitForEmpty() {\n        if (this.eventsRunningCount === 0) {\n            return;\n        }\n        if (!this.waitForEmptyPromise) {\n            this.waitForEmptyPromise = resolvablePromise();\n        }\n        await this.waitForEmptyPromise;\n        this.waitForEmptyPromise = null;\n    }\n    /**\n     * Adds the given event handler as a listener for events of the given type.\n     *\n     * @param handlers The handler or handlers along with the event type to start listening for events.\n     * @returns The instance for method chaining.\n     */\n    on(handlers) {\n        const data = asArray(handlers);\n        data.forEach(({ type, handler }) => {\n            if (!type) {\n                throw new Error(`Attempted to listen to an event with no type: \"${type}\"!`);\n            }\n            if (typeof handler === \"function\") {\n                if (!this.handlersByType.has(type)) {\n                    this.handlersByType.set(type, []);\n                }\n                const handlersForType = this.handlersByType.get(type);\n                debugStackTrace(`[EventBus] Adding ${type} event handler`, handler);\n                handlersForType.push(handler);\n            }\n            else {\n                consoleError(HANDLER_NOT_FUNCTION, handler);\n            }\n        });\n        return this;\n    }\n    /**\n     * Removes an event listener that was previously added via {@link on} or {@link once}.\n     *\n     * @param handlers The handler or handlers along with the event type to stop listening for events.\n     * @returns The instance for method chaining.\n     */\n    off(handlers) {\n        const data = asArray(handlers);\n        data.forEach(({ type, handler }) => {\n            const handlersForType = this.handlersByType.get(type);\n            if (handlersForType) {\n                if (handler) {\n                    const index = handlersForType.indexOf(handler);\n                    if (index !== -1) {\n                        const removed = handlersForType.splice(index, 1);\n                        debugStackTrace(`[EventBus] Removing ${type} event handlers`, removed);\n                    }\n                }\n                else {\n                    // If no handler is specified, unsubscribe all the handlers.\n                    debugStackTrace(`[EventBus] Removing all ${type} event handlers`);\n                    this.handlersByType.set(type, []);\n                }\n            }\n        });\n        return this;\n    }\n    /**\n     * Adds the given event handler as a listener for events of the given type. After the first event is handled, this\n     * handler will automatically be removed.\n     *\n     * @param handlers The handler or handlers along with the event type to start listening for an event.\n     * @returns The instance for method chaining.\n     */\n    once(handlers) {\n        const data = asArray(handlers);\n        data.forEach(({ type, handler }) => {\n            if (typeof handler === \"function\") {\n                const onceHandler = (event, instance) => {\n                    this.off({ type, handler: onceHandler });\n                    return handler(event, instance);\n                };\n                this.on({ type, handler: onceHandler });\n            }\n            else {\n                consoleError(HANDLER_NOT_FUNCTION, handler);\n            }\n        });\n        return this;\n    }\n    /**\n     * Outputs debug information for all of the currently registered event bus listeners.\n     */\n    logListeners() {\n        this.handlersByType.forEach((listeners, type) => {\n            console.group(`Event ${type} (${listeners.length})`);\n            listeners.forEach((listener) => {\n                consoleLog(\"Listener\", listener);\n            });\n            console.groupEnd();\n        });\n    }\n    clear() {\n        this.handlersByType.clear();\n        return this;\n    }\n}\n/**\n * Outputs the given event to the console.\n */\nfunction logEvent(message, busEvent) {\n    if (isEnableDebugLog()) {\n        // If this object is modified after we log it, the output may not actually show the original value so making a\n        // copy ensure we see the actual value that it had at this moment.\n        const eventCopy = cloneDeep(busEvent);\n        debugLog(`[EventBus] ${message}`, eventCopy);\n    }\n}\n\nexport { EventBus };\n","import actions from '../store/actions.js';\nimport { DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS } from '../store/reducerUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This function takes in the service manager to help create a custom panel instance. The panel instance is created\n * using a function instead of a class because a private property at runtime can still be accessible. The service\n * manager is passed in instead made a private property.\n */\nfunction createCustomPanelInstance(serviceManager) {\n    const customPanelInstance = {\n        open(options = DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS) {\n            const { store } = serviceManager;\n            store.dispatch(actions.setCustomPanelConfigOptions(options));\n            store.dispatch(actions.setCustomPanelOpen(true));\n        },\n        close() {\n            serviceManager.store.dispatch(actions.setCustomPanelOpen(false));\n        },\n    };\n    return Object.freeze(customPanelInstance);\n}\n\nexport { createCustomPanelInstance };\n","import { notesToLoadedHistory } from '../schema/historyToMessages.js';\nimport actions from '../store/actions.js';\nimport '../../../types/state/AppState.js';\nimport { NoteType } from '../../../types/messaging/History.js';\nimport { consoleError } from '../utils/miscUtils.js';\nimport { MainWindowOpenReason } from '../../../types/events/eventBusTypes.js';\nimport { ViewType } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This service is responsible for loading conversation history data.\n */\nclass HistoryService {\n    constructor(serviceManager) {\n        this.serviceManager = serviceManager;\n    }\n    /**\n     * Fetch from history store. If no history is found (no session or the session has expired), this will return null.\n     */\n    async loadHistory(useHistory) {\n        const state = this.serviceManager.store.getState();\n        const { config, persistedToBrowserStorage } = state;\n        const publicConfig = config.public;\n        const { viewState } = persistedToBrowserStorage.launcherState;\n        try {\n            let resultData;\n            if (useHistory) {\n                resultData = useHistory;\n            }\n            else if (publicConfig.messaging?.customLoadHistory) {\n                const items = await publicConfig.messaging.customLoadHistory(this.serviceManager.instance);\n                // The \"author\" property is not currently included in our public NoteItem type. Web chat does not use it.\n                const note = {\n                    type: NoteType.HISTORY,\n                    body: items,\n                };\n                resultData = { notes: [note] };\n            }\n            if (resultData) {\n                // If there is result data then grab the notes array, transform it into a LoadedHistory, and return it.\n                const historyNotes = resultData?.notes;\n                return notesToLoadedHistory(historyNotes, this.serviceManager);\n            }\n            if (viewState.tour) {\n                // If there is no resultData, and a tour was open then try to open the main window. Specify not to hydrate the\n                // chat because we're already in the middle of hydrating. This is done below the above checks for a sessionID,\n                // since it's possible the sessionID will not exist while the viewState still does. If this happened it would\n                // cause the tour to stay stuck open, with no content to show, which we don't want.\n                await this.serviceManager.actions.changeView(ViewType.MAIN_WINDOW, { mainWindowOpenReason: MainWindowOpenReason.SESSION_HISTORY }, false);\n                // Clear the tour state, regardless if changeView was successful or not, since there is no tour data to be\n                // shown. This is done instead of calling serviceManager.actions.endTour() because this scenario is a little\n                // more complicated than the generic endTour scenario.\n                this.serviceManager.store.dispatch(actions.clearTourData());\n            }\n        }\n        catch (error) {\n            consoleError(\"An error occurred while attempting to load the conversation history\", error);\n        }\n        return null;\n    }\n}\n\nexport { HistoryService };\n","import { DEFAULT_MESSAGE_STATE, DEFAULT_CHAT_MESSAGES_STATE } from '../store/reducerUtils.js';\nimport { MessageErrorState } from '../../../types/messaging/LocalMessageItem.js';\nimport { NoteType } from '../../../types/messaging/History.js';\nimport '../utils/constants.js';\nimport { findLast } from '../utils/lang/arrayUtils.js';\nimport { deepFreeze } from '../utils/lang/objectUtils.js';\nimport { isResponse, isRequest, isPause, isResponseWithNestedItems, THREAD_ID_MAIN, isOptionItem, isDateResponseType, isEventRequest } from '../utils/messageUtils.js';\nimport inputItemToLocalItem from './inputItemToLocalItem.js';\nimport { outputItemToLocalItem, createLocalMessageItemsForNestedMessageItems } from './outputItemToLocalItem.js';\nimport { BusEventType } from '../../../types/events/eventBusTypes.js';\nimport { FileStatusValue } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Given an array of every received and sent message, change to correct data format. Eventually, this is going to\n * have to work with paginated data.\n *\n * Note that this function also has side effects because it fires history events as it is processing the loaded history.\n *\n * @param notes An array of the {@link Note} objects returned from the history store.\n * @param serviceManager A reference to the {@link ServiceManager}.\n */\nasync function notesToLoadedHistory(notes, serviceManager) {\n    // Create an empty version of our state and the final result object.\n    const allLocalMessagesByID = {};\n    const allMessagesByID = {};\n    const loadingState = {\n        serviceManager,\n        allMessages: [],\n        allMessagesByID,\n        allLocalMessagesByID,\n        threadMessagesByThreadID: {},\n        responsesByRequestID: {},\n        relatedMessageByID: {},\n        localMessagesByOriginalMessageID: {},\n        lastThreadID: null,\n        loadedHistory: {\n            messageHistory: {\n                allMessageItemsByID: allLocalMessagesByID,\n                allMessagesByID,\n                botMessageState: null,\n            },\n            latestTransferToAgentResponse: null,\n            latestPanelLocalMessageItem: null,\n        }};\n    // First locate all the messages from history we need.\n    await notesToMessages(notes, loadingState);\n    if (!loadingState.allMessages.length) {\n        // If we have the latest transfer to agent response and no other message, it means session history is disabled, and\n        // we only have this response to render.\n        if (loadingState.loadedHistory.latestTransferToAgentResponse) {\n            return {\n                ...loadingState.loadedHistory,\n                messageHistory: DEFAULT_MESSAGE_STATE,\n            };\n        }\n        // If we didn't actually find any messages, just return null to indicate that. This will trigger the widget to\n        // get fetch the welcome node.\n        return null;\n    }\n    // Generate the LocalMessage objects for the messages and divide into threads.\n    createLocalMessages(loadingState);\n    // Create the ChatMessagesState that correspond to each of the threads.\n    createChatStates(loadingState);\n    // Locate the most recent welcome node and mark it as such.\n    markIsLatestWelcomeNode(loadingState);\n    // Find all the options and suggestions and figure out which, if any, options the user chose.\n    markSelectedOptions(loadingState);\n    // Note: We need to consider if we should clone the LocalMessage objects that get put into multiple threads\n    // (namely the first and last message in a thread that's also added to the main thread). If anything attempts to\n    // modify the ui_state value in those messages, it will affect both. Right now the only time that happens is the\n    // property for doing a11y announcements but since that property isn't active for historical messages, we don't\n    // really have to do this now. This is a bit of a landmine I'm leaving here for now so sorry :-). To do the clone\n    // the only thing that needs to be different is the ID.\n    return loadingState.loadedHistory;\n}\n/**\n * Converts the given list of {@link Note} objects into a flat list of all the message objects to process.\n */\nasync function notesToMessages(notes, loadingState) {\n    const { allMessages, allMessagesByID, responsesByRequestID, relatedMessageByID, serviceManager, localMessagesByOriginalMessageID, } = loadingState;\n    if (!notes?.length) {\n        return;\n    }\n    // Find all the messages from history.\n    notes.forEach((note) => {\n        if (note.type === NoteType.HISTORY) {\n            const sessionHistory = note.body;\n            const pushAndPrepareMessage = (historyItem) => {\n                const { message } = historyItem;\n                if (!isEventRequest(message) &&\n                    (isRequest(message) || isResponse(message))) {\n                    addMessage(message, loadingState, historyItem);\n                }\n            };\n            sessionHistory.forEach(pushAndPrepareMessage);\n        }\n    });\n    // We need to do a little more processing on all the events now. We iterate backwards just to make it easier to\n    // remove items.\n    for (let index = allMessages.length - 1; index >= 0; index--) {\n        const message = allMessages[index];\n        if (message.history?.file_upload_status === FileStatusValue.UPLOADING) {\n            // If a file upload was in the middle of uploading and the user left before it was complete, we need to mark\n            // it as complete and also display it as an error.\n            message.history.file_upload_status = FileStatusValue.COMPLETE;\n            message.history.error_state = MessageErrorState.FAILED;\n        }\n        if (isResponse(message) && message.history.silent) {\n            // If we find a message response that was silent, we need to actually throw it away. We treat these like\n            // messages that were never actually received. This is currently only used for hiding the responses we get on\n            // a 3rd strike from suggestions.\n            allMessages.splice(index, 1);\n            delete allMessagesByID[message.id];\n        }\n        else {\n            localMessagesByOriginalMessageID[message.id] = [];\n            if (isResponse(message) && message.request_id) {\n                responsesByRequestID[message.request_id] = message;\n            }\n            if (message.history.relatedMessageID) {\n                relatedMessageByID[message.history.relatedMessageID] = message;\n            }\n        }\n    }\n    if (!allMessages.length) {\n        // If we didn't find any messages, then return right now.\n        return;\n    }\n    // Freeze the array so the listeners can't mess with it.\n    Object.freeze(allMessages);\n    // Fire the event that says we're loading from history. The messages are allowed to be modified at this point.\n    const beginEvent = {\n        type: BusEventType.HISTORY_BEGIN,\n        messages: allMessages,\n    };\n    await serviceManager.eventBus.fire(beginEvent, serviceManager.instance);\n    // The message is not allowed to be modified so freeze it.\n    allMessages.forEach(deepFreeze);\n    // Fire the event that says we're done loading from history.\n    await serviceManager.eventBus.fire({ type: BusEventType.HISTORY_END, messages: allMessages }, serviceManager.instance);\n}\n/**\n * Adds the given message to the messages lists.\n */\nfunction addMessage(message, loadingState, historyItem) {\n    // Make sure the message has the timestamp that was generated by the service and not the potentially\n    // client generated timestamp it originally had.\n    message.history = message.history || {};\n    message.history.from_history = true;\n    message.history.timestamp = new Date(historyItem.time).getTime();\n    if (message.thread_id !== THREAD_ID_MAIN) {\n        loadingState.lastThreadID = message.thread_id;\n    }\n    loadingState.allMessagesByID[message.id] = message;\n    loadingState.allMessages.push(message);\n}\n/**\n * Creates all the {@link LocalMessageItem} objects that correspond to all the {@link GenericItem} values in all the\n * given message requests and responses.\n */\nfunction createLocalMessages(loadingState) {\n    const { allMessages, allLocalMessagesByID, localMessagesByOriginalMessageID, } = loadingState;\n    allMessages.forEach((message) => {\n        if (isRequest(message)) {\n            if (!message.history?.silent) {\n                const text = message.history?.label || message.input.text;\n                const localMessage = inputItemToLocalItem(message, text);\n                localMessagesByOriginalMessageID[message.id].push(localMessage);\n                allLocalMessagesByID[localMessage.ui_state.id] = localMessage;\n            }\n        }\n        else {\n            const items = getResponseItems(message);\n            if (items?.length) {\n                items.forEach((messageItem) => {\n                    // Pause messages should be ignored when loaded from history. We should also ignore any messages that aren't\n                    // targeted for the chat channel.\n                    if (!isPause(messageItem)) {\n                        const localMessage = outputItemToLocalItem(messageItem, message, false);\n                        if (isResponseWithNestedItems(localMessage.item)) {\n                            const nestedLocalMessageItems = [];\n                            createLocalMessageItemsForNestedMessageItems(localMessage, message, true, nestedLocalMessageItems, true);\n                            nestedLocalMessageItems.forEach((localMessageItem) => {\n                                const localMessageID = localMessageItem.ui_state.id;\n                                loadingState.loadedHistory.messageHistory.allMessageItemsByID[localMessageID] = localMessageItem;\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        addMessageToThread(message, loadingState);\n    });\n}\n/**\n * Returns all the generic items for the given message either if it's a message response or a local response.\n */\nfunction getResponseItems(message) {\n    if (isResponse(message)) {\n        return message.output.generic;\n    }\n    return null;\n}\n/**\n * Adds the given message to the given thread. If the message is the first message in its thread, it will also be\n * added to the main thread.\n */\nfunction addMessageToThread(message, loadingState) {\n    // Messages from the server may have a thread ID if a multi-turn has started. Make sure anything that's not an\n    // agent thread is put into the main thread.\n    const { threadMessagesByThreadID } = loadingState;\n    let thread = threadMessagesByThreadID[THREAD_ID_MAIN];\n    if (!thread) {\n        thread = [];\n        threadMessagesByThreadID[THREAD_ID_MAIN] = thread;\n    }\n    thread.push(message);\n}\n/**\n * Creates all of the {@link ChatMessagesState} objects that all the appropriate threads.\n */\nfunction createChatStates(loadingState) {\n    const { loadedHistory, threadMessagesByThreadID, localMessagesByOriginalMessageID, } = loadingState;\n    loadedHistory.messageHistory.botMessageState = toChatMessageState(threadMessagesByThreadID[THREAD_ID_MAIN], localMessagesByOriginalMessageID);\n}\n/**\n * Creates a {@link ChatMessagesState} for the given array of local messages.\n */\nfunction toChatMessageState(messages, localMessagesByFullMessageID) {\n    const localMessageIDs = [];\n    const messageIDs = [];\n    if (messages) {\n        messages.forEach((message) => {\n            messageIDs.push(message.id);\n            localMessagesByFullMessageID[message.id].forEach((localMessage) => {\n                localMessageIDs.push(localMessage.ui_state.id);\n            });\n        });\n    }\n    return {\n        ...DEFAULT_CHAT_MESSAGES_STATE,\n        localMessageIDs,\n        messageIDs,\n    };\n}\n/**\n * Checks if most recent input is a request for a welcome node. If it is, it marks the response ui_state as\n * isLatestWelcomeNode.\n */\nfunction markIsLatestWelcomeNode(loadingState) {\n    const { responsesByRequestID, threadMessagesByThreadID, localMessagesByOriginalMessageID, } = loadingState;\n    const mainThreadMessages = threadMessagesByThreadID[THREAD_ID_MAIN];\n    // Look for the most recent welcome message.\n    const welcomeRequest = findLast(mainThreadMessages, (message) => isRequest(message) && message.history.is_welcome_request);\n    if (welcomeRequest) {\n        // See if we have a response to this request and if so, mark it.\n        const welcomeResponse = responsesByRequestID[welcomeRequest.id];\n        if (welcomeResponse) {\n            localMessagesByOriginalMessageID[welcomeResponse.id].forEach((localMessage) => {\n                localMessage.ui_state.isWelcomeResponse = true;\n            });\n        }\n    }\n}\n/**\n * Goes through all the messages looking for the option and suggestion responses. For each of those, this will\n * look to see if there's a related message request where the user chose one of the options and then marks the\n * option or suggestion with the value that was chosen.\n */\nfunction markSelectedOptions({ allMessages, relatedMessageByID, localMessagesByOriginalMessageID, }) {\n    allMessages.forEach((message) => {\n        if (isResponse(message)) {\n            localMessagesByOriginalMessageID[message.id].forEach((localMessage) => {\n                if (isOptionItem(localMessage.item)) {\n                    // This is an option response. Let's see if another message said it's related to this\n                    // message in which case, that other message should tell us which option the user chose.\n                    const relatedRequest = relatedMessageByID[message.id];\n                    if (isRequest(relatedRequest)) {\n                        localMessage.ui_state.optionSelected = relatedRequest;\n                    }\n                }\n                else if (isDateResponseType(localMessage)) {\n                    const relatedRequest = relatedMessageByID[message.id];\n                    if (isRequest(relatedRequest)) {\n                        localMessage.ui_state.originalUserText =\n                            relatedRequest.history.label;\n                    }\n                }\n            });\n        }\n    });\n}\n\nexport { notesToLoadedHistory };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A class that manages if the message is taking to long to load. Allows you to identify if behaviors for if a request\n * exceeds an amount of time to timeout or exceeds an amount of time to not show a loading indicator.\n */\nclass MessageLoadingManager {\n    /**\n     * Start the counters.\n     *\n     * @param onExceededMaxSilentLoading The callback to call if the call exceeds the max loading time.\n     * @param onEnd The callback when .end() is called. If .end() is called with .end(boolean), that will be passed.\n     * @param onTimeout The callback if the timer times out and we should error out the message.\n     * @param msMaxSilentLoading The amount of time in MS we wait before showing a progress bar.\n     * @param msMaxAttempt The max amount of time that has passed before we give up.\n     */\n    start(onExceededMaxSilentLoading, onEnd, onTimeout, msMaxSilentLoading, msMaxAttempt) {\n        this.hasExceededMaxSilentLoading = false;\n        this.onEnd = onEnd;\n        this.onSilentLoading = setTimeout(() => {\n            this.hasExceededMaxSilentLoading = true;\n            onExceededMaxSilentLoading();\n        }, msMaxSilentLoading);\n        this.onMaxAttempt = setTimeout(() => {\n            onTimeout();\n        }, msMaxAttempt);\n    }\n    /**\n     * Called when message succeeds/fails the loading manager is no longer needed. Calls this.end and resets the class.\n     */\n    end() {\n        if (this.onMaxAttempt) {\n            clearTimeout(this.onMaxAttempt);\n        }\n        if (this.onSilentLoading) {\n            clearTimeout(this.onSilentLoading);\n        }\n        if (this.onEnd) {\n            this.onEnd(this.hasExceededMaxSilentLoading);\n        }\n        this.hasExceededMaxSilentLoading = null;\n        this.onEnd = null;\n    }\n}\n\nexport { MessageLoadingManager };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport inputItemToLocalItem from '../schema/inputItemToLocalItem.js';\nimport { createLocalMessageForInlineError } from '../schema/outputItemToLocalItem.js';\nimport actions from '../store/actions.js';\nimport { MessageErrorState } from '../../../types/messaging/LocalMessageItem.js';\nimport { deepFreeze } from '../utils/lang/objectUtils.js';\nimport { MessageLoadingManager } from '../utils/messageServiceUtils.js';\nimport { getLastBotResponseWithContext, THREAD_ID_MAIN } from '../utils/messageUtils.js';\nimport { debugLog, consoleError, safeFetchTextWithTimeout } from '../utils/miscUtils.js';\nimport { resolvablePromise } from '../utils/resolvablePromise.js';\nimport { MessageInputType } from '../../../types/messaging/Messages.js';\nimport { MessageSendSource, BusEventType } from '../../../types/events/eventBusTypes.js';\nimport { OnErrorType } from '../../../types/config/PublicConfig.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// Time in ms between retry attempts.\nconst MS_BETWEEN_RETRIES = [1000, 3000, 5000];\n// The maximum amount of time we allow retries to take place. If we pass this time limit, we throw an error, stop\n// retrying, and move on to the next item in the queue. 120 seconds is the longest Cerberus allows for, so we'll\n// set this a little higher than that.\nconst MS_MAX_ATTEMPT = 150 * 1000;\n// The maximum amount of time we allow to pass before the error indicator becomes visible.\nconst MS_MAX_SILENT_ERROR = 6000;\n// The maximum amount of time we allow to pass before the loading indicator becomes visible.\nconst MS_MAX_SILENT_LOADING = 4000;\n// Types of different retry behaviors. SILENT will retry without letting the end user know we are retrying, VISIBLE will\n// show the user that we are retrying.\nvar RetryType;\n(function (RetryType) {\n    RetryType[RetryType[\"SILENT\"] = 1] = \"SILENT\";\n    RetryType[RetryType[\"VISIBLE\"] = 2] = \"VISIBLE\";\n})(RetryType || (RetryType = {}));\nclass MessageService {\n    constructor(serviceManager, publicConfig) {\n        /**\n         * The value indicates that there is a pending locale change that needs to be sent to the assistant on the next\n         * message request.\n         */\n        this.pendingLocale = false;\n        /**\n         * Indicates if the locale has been explicitly set by the host page. This is used to ensure we only send a locale\n         * to the assistant when it has been explicitly set.\n         */\n        this.localeIsExplicit = false;\n        this.serviceManager = serviceManager;\n        this.messageLoadingManager = new MessageLoadingManager();\n        this.queue = {\n            waiting: [],\n            current: null,\n        };\n        const timeoutOverride = publicConfig.messaging?.messageTimeoutSecs;\n        this.timeoutMS = timeoutOverride ? timeoutOverride * 1000 : MS_MAX_ATTEMPT;\n    }\n    /**\n     * Process a response from assistant with 200 response code, send and return the messageResponse.\n     *\n     * @param current The current item in the send queue.\n     * @param received JSON output from v2 API.\n     */\n    async processSuccess(current, received) {\n        const { requestOptions, isProcessed } = current;\n        const isWelcomeNode = Boolean(current.message.history.is_welcome_request);\n        // If this message was already invalidated, don't do anything.\n        if (isProcessed) {\n            return;\n        }\n        // Clear any error state that may be associated with the message.\n        this.setMessageErrorState(current, MessageErrorState.NONE);\n        // After updating the error state get the message from the pendingRequest since it has potentially been updated by\n        // setting the error state.\n        const { message } = current;\n        // Do all the normal things for our general message requests, however for event messages we skip this.\n        if (received) {\n            if (message.input.message_type !== MessageInputType.EVENT) {\n                if (!isWelcomeNode) {\n                    this.messageLoadingManager.end();\n                }\n                received.history = received.history || {};\n                received.history.timestamp = received.history.timestamp || Date.now();\n                current.trackData.lastRequestTime =\n                    Date.now() - current.timeLastRequest;\n                current.trackData.totalRequestTime =\n                    Date.now() - current.timeFirstRequest;\n                // Send receive event.\n                await this.serviceManager.actions.receive(received, isWelcomeNode, message, requestOptions);\n            }\n            this.messageLoadingManager.end();\n        }\n        if (current.isProcessed) {\n            // If the response has already been processed (perhaps the message was cancelled) then stop processing.\n            return;\n        }\n        // Resolve the promise that lets the original caller who sent the message know that the message has been sent\n        // successfully.\n        {\n            current.sendMessagePromise.doResolve();\n            current.isProcessed = true;\n        }\n        this.moveToNextQueueItem();\n    }\n    /**\n     * Adds an inline error message to the list.\n     */\n    addErrorMessage() {\n        const { store } = this.serviceManager;\n        const errorMessage = store.getState().languagePack.errors_singleMessage;\n        const { originalMessage, localMessage } = createLocalMessageForInlineError(errorMessage);\n        store.dispatch(actions.addLocalMessageItem(localMessage, originalMessage, true));\n    }\n    /**\n     * This function is used to resend a message that had been previously sent, but for which we never received a\n     * response. The below will resend the message so we can wait for the response once it is available.\n     */\n    async resendMessage(message, localMessageID) {\n        await this.send(cloneDeep(message), MessageSendSource.HYDRATE_RESEND, localMessageID, {\n            skipQueue: true,\n            silent: true,\n        });\n    }\n    /**\n     * Send to the assistant API, IF we are inside the window to show an error, also update the error state on the\n     * message.\n     */\n    sendToAssistantAndUpdateErrorState(current) {\n        // If this message was already invalidated, don't do anything.\n        if (current.isProcessed) {\n            return;\n        }\n        this.sendToAssistant(current);\n        const now = Date.now();\n        const msSinceStarted = now - current.timeFirstRequest;\n        const isSilentErrorWindow = MS_MAX_SILENT_ERROR > msSinceStarted;\n        const type = isSilentErrorWindow ? RetryType.SILENT : RetryType.VISIBLE;\n        if (type === RetryType.VISIBLE) {\n            // Once we've hit the visible retry state, we need to mark the message as retrying and we need to mark all\n            // the other messages that are still waiting as waiting.\n            this.setMessageErrorState(current, MessageErrorState.RETRYING);\n            this.queue.waiting.forEach((waitingMessage) => {\n                this.setMessageErrorState(waitingMessage, MessageErrorState.WAITING);\n            });\n        }\n    }\n    /**\n     * Process a message returned from assistant with non-200 error code. This function will attempt to retry the request\n     * up to the length of RETRY_BEHAVIOR. If more than we require more retires than that, we fail the message.\n     *\n     * @param pendingRequest The current item in the send queue.\n     * @param resultText The raw result text or error message (if any) returned from the request.\n     * @param allowRetry Indicates if a retry is permitted.\n     */\n    async processError(pendingRequest, resultText, allowRetry) {\n        const { message, timeFirstRequest, timeLastRequest, tryCount, isProcessed, trackData, requestOptions, } = pendingRequest;\n        // If we got a 400 response code for a welcome message and it contains the \"no skills\" message, we should just\n        // stop now and put the widget into a general error state.\n        const isWelcome = message.history.is_welcome_request;\n        const now = Date.now();\n        const msSinceStarted = now - timeFirstRequest;\n        // We are still in the \"allow attempts\" window if we have not exceeded the total amount of time allowed and if\n        // we have not exceeded the number of retries allowed.\n        const isInAttemptWindow = this.timeoutMS > msSinceStarted && tryCount < MS_BETWEEN_RETRIES.length;\n        // If this message was already invalidated, don't do anything.\n        if (isProcessed) {\n            return;\n        }\n        trackData.lastRequestTime = Date.now() - timeLastRequest;\n        trackData.totalRequestTime = Date.now() - timeFirstRequest;\n        if (isInAttemptWindow && allowRetry) {\n            // This is the general/unknown error case. Pause before trying again.\n            trackData.numErrors++;\n            const retryDelay = MS_BETWEEN_RETRIES[pendingRequest.tryCount++];\n            setTimeout(() => {\n                this.sendToAssistantAndUpdateErrorState(pendingRequest);\n            }, retryDelay);\n        }\n        else {\n            // Show a catastrophic error if we are just starting out.\n            let catastrophicErrorType = false;\n            if (isWelcome) {\n                catastrophicErrorType = true;\n            }\n            else if (requestOptions.silent) {\n                // If we are in the middle of a two-step response or the message that was sent was silent, we have to throw an\n                // error manually since there isn't any user message to reference.\n                this.addErrorMessage();\n            }\n            this.serviceManager.actions.errorOccurred({\n                errorType: OnErrorType.MESSAGE_COMMUNICATION,\n                message: \"An error occurred sending a message\",\n                otherData: resultText,\n                catastrophicErrorType,\n            });\n            this.rejectFinalErrorOnMessage(pendingRequest, resultText);\n        }\n    }\n    /**\n     * If we are no longer going to retry sending a message, we call this function to mark the message as failed.\n     */\n    rejectFinalErrorOnMessage(pendingRequest, resultText = \"An undefined error occurred trying to send your message.\") {\n        const { sendMessagePromise } = pendingRequest;\n        // At this point we've either failed too many times or we failed right away while trying to load the welcome node.\n        this.setMessageErrorState(pendingRequest, MessageErrorState.FAILED);\n        // After updating the error state get the message from the pendingRequest since it has potentially been updated by\n        // setting the error state.\n        const { message } = pendingRequest;\n        // No need to call this if it's an event message or a welcome node request.\n        if (pendingRequest === this.queue.current &&\n            message.input.message_type !== MessageInputType.EVENT &&\n            !message.history.is_welcome_request) {\n            this.messageLoadingManager.end();\n        }\n        // Reject the promise that lets the original caller who sent the message know that the message failed to be sent.\n        sendMessagePromise.doReject(new Error(resultText));\n        pendingRequest.isProcessed = true;\n        if (pendingRequest === this.queue.current) {\n            // Move on to next item in queue.\n            this.moveToNextQueueItem();\n        }\n    }\n    /**\n     * Sends the message to watsonx Assistant Backend. Returns \"any\" in the error case.\n     *\n     * @param current The current item in the send queue.\n     */\n    async sendToAssistant(current) {\n        const { store } = this.serviceManager;\n        const state = store.getState();\n        const { customSendMessage } = state.config.public.messaging;\n        current.timeLastRequest = Date.now();\n        if (current.isProcessed) {\n            return;\n        }\n        try {\n            // We may update the timezone and locale on this message so we need to clone it and then update the store with\n            // the new object.\n            const message = cloneDeep(current.message);\n            current.message = message;\n            store.dispatch(actions.updateMessage(message));\n            const controller = new AbortController();\n            current.sendMessageController = controller;\n            debugLog(\"Called customSendMessage\", message);\n            await customSendMessage(message, { signal: controller.signal }, this.serviceManager.instance);\n            await this.processSuccess(current, null);\n        }\n        catch (error) {\n            consoleError(\"An error occurred while sending a message\", error);\n            const resultText = (error &&\n                (typeof error === \"string\" ? error : JSON.stringify(error))) ||\n                \"There was an unidentified error.\";\n            this.processError(current, resultText, !customSendMessage);\n        }\n    }\n    /**\n     * If there are items in the send queue, will grab the zero index item and send it to the assistant back-end via\n     * this.sendToAssistant.\n     */\n    async runQueueIfReady() {\n        if (!this.queue.current && this.queue.waiting.length > 0) {\n            const { eventBus, store } = this.serviceManager;\n            this.clearCurrentQueueItem();\n            this.queue.current = this.queue.waiting.shift();\n            const { current } = this.queue;\n            const { message, source } = current;\n            const state = store.getState();\n            const { config } = store.getState();\n            const { public: publicConfig } = config;\n            current.timeFirstRequest = Date.now();\n            // Do all the normal things for our general messageRequests, however for event messages we skip this.\n            if (message.input.message_type !== MessageInputType.EVENT) {\n                const lastResponse = getLastBotResponseWithContext(state);\n                if (lastResponse) {\n                    message.thread_id = THREAD_ID_MAIN;\n                }\n                // Welcome node fetching gets the spinner instead of the progress bar.\n                if (!message.history.is_welcome_request) {\n                    const LOADING_INDICATOR_TIMER = !publicConfig.messaging?.messageLoadingIndicatorTimeoutSecs &&\n                        publicConfig.messaging?.messageLoadingIndicatorTimeoutSecs !== 0\n                        ? MS_MAX_SILENT_LOADING\n                        : publicConfig.messaging.messageLoadingIndicatorTimeoutSecs *\n                            1000;\n                    this.messageLoadingManager.start(() => {\n                        this.serviceManager.store.dispatch(actions.addIsLoadingCounter(1));\n                    }, (didExceedMaxLoading) => {\n                        if (didExceedMaxLoading) {\n                            this.serviceManager.store.dispatch(actions.addIsLoadingCounter(-1));\n                        }\n                    }, () => {\n                        this.cancelMessageRequestByID(message.id, true);\n                    }, LOADING_INDICATOR_TIMER, this.timeoutMS);\n                }\n                if (current.isProcessed) {\n                    // This message was cancelled.\n                    return;\n                }\n                // Grab the original text before it can be modified by a pre:send handler.\n                const originalUserText = message.history?.label || message.input.text;\n                // Fire the pre:send event. User code is allowed to modify the message at this point. If this takes longer than MS_MAX_SILENT_LOADING\n                // we show a loading state.\n                await eventBus.fire({\n                    type: BusEventType.PRE_SEND,\n                    data: message,\n                    source,\n                }, this.serviceManager.instance);\n                if (current.isProcessed) {\n                    // This message was cancelled.\n                    return;\n                }\n                // We now want to update the store with whatever edits have been made to the message.\n                const localMessage = inputItemToLocalItem(message, originalUserText, current.localMessageID);\n                // If history.silent is set to true, we don't add the message to the redux store as we do not want to show it, so\n                // we don't need to update it here either.\n                if (!message.history.silent) {\n                    store.dispatch(actions.updateLocalMessageItem(localMessage));\n                    store.dispatch(actions.updateMessage(message));\n                }\n                deepFreeze(message);\n                await eventBus.fire({ type: BusEventType.SEND, data: message, source }, this.serviceManager.instance);\n            }\n            this.sendToAssistant(current);\n        }\n    }\n    /**\n     * Add a new message to the message queue.\n     *\n     * @param message A new message to add to the message queue.\n     @param source The source of the message.\n     * @param localMessageID The ID of the {@link LocalMessageItem} created from the current request.\n     * @param sendMessagePromise A promise that we will resolve or reject if the message is sent.\n     * @param requestOptions The options that were included when the request was sent.\n     */\n    addToMessageQueue(message, source, localMessageID, sendMessagePromise, requestOptions = {}) {\n        const newPendingMessage = {\n            localMessageID,\n            message,\n            sendMessagePromise,\n            requestOptions: requestOptions || {},\n            timeFirstRequest: 0,\n            timeLastRequest: 0,\n            trackData: {\n                numErrors: 0,\n                lastRequestTime: 0,\n                totalRequestTime: 0,\n            },\n            tryCount: 0,\n            isProcessed: false,\n            source,\n        };\n        this.queue.waiting.push(newPendingMessage);\n        // If the current message has entered the retrying state, then we need to update the new message to put it into\n        // the waiting state.\n        if (this.queue.current) {\n            if (message.history?.error_state === MessageErrorState.RETRYING) {\n                this.setMessageErrorState(newPendingMessage, MessageErrorState.WAITING);\n            }\n        }\n    }\n    /**\n     * Performs any finishes steps necessary to complete the current queue item.\n     */\n    clearCurrentQueueItem() {\n        if (this.queue.current) {\n            this.queue.current = null;\n        }\n    }\n    /**\n     * Move to next step in queue.\n     */\n    moveToNextQueueItem() {\n        this.clearCurrentQueueItem();\n        this.runQueueIfReady();\n    }\n    /**\n     * Changes the error state for the message with the given id and makes an a11y announcement if appropriate.\n     */\n    setMessageErrorState(pendingRequest, errorState) {\n        const { message } = pendingRequest;\n        // Find the current state for the message. Note that we want to look up the current state from the store which\n        // might be different from the message object we originally sent.\n        const { allMessagesByID } = this.serviceManager.store.getState();\n        // Update the error state if it's changed (but don't try to change an undefined state to NONE).\n        const messageToUpdate = allMessagesByID[message.id];\n        if (messageToUpdate) {\n            const currentState = messageToUpdate.history?.error_state;\n            const errorSame = currentState === errorState ||\n                (errorState === MessageErrorState.NONE && !currentState);\n            if (!errorSame) {\n                // Figure out what announcement we need to make. Note that we don't announce changes in to the WAITING state.\n                let announceMessageID;\n                // eslint-disable-next-line default-case\n                switch (errorState) {\n                    case MessageErrorState.FAILED: {\n                        announceMessageID = \"errors_ariaMessageFailed\";\n                        break;\n                    }\n                }\n                // Announce the change if necessary.\n                if (announceMessageID) {\n                    this.serviceManager.store.dispatch(actions.announceMessage({ messageID: announceMessageID }));\n                }\n                this.serviceManager.store.dispatch(actions.setMessageErrorState(message.id, errorState));\n                // After updating store get the updated message back from store and use it within the messageService. If we\n                // don't get the updated message back within the message service we could try to save an updated version of this\n                // message in store in the future but the copy within this service will be out of date.\n                const { allMessagesByID } = this.serviceManager.store.getState();\n                pendingRequest.message = allMessagesByID[message.id];\n            }\n        }\n    }\n    /**\n     * Send a message to watsonx Assistant back-end. Returns \"any\" in the error case.\n     *\n     * @param message Takes an object in the shape of a v2 message API Send object. See\n     * [Docs](https://cloud.ibm.com/apidocs/assistant-v2#send-user-input-to-assistant).\n     * @param source The source of the message.\n     * @param localMessageID The ID of the {@link LocalMessageItem} created from the current request.\n     * @param requestOptions The options that were included when the request was sent.\n     */\n    send(message, source, localMessageID, requestOptions) {\n        message.history.timestamp = message.history.timestamp || Date.now();\n        // The messageService does different things based off the message type so lets make sure one exists.\n        message.input = message.input || {};\n        message.input.message_type =\n            message.input.message_type || MessageInputType.TEXT;\n        // Create a Promise that the caller can wait on that we'll resolve if/when the message is finally successfully sent\n        // to the assistant. This gets resolved or rejected in this.processSuccess or this.processError respectively.\n        const sendMessagePromise = resolvablePromise();\n        // Add our new message to the queue and kick off the queue.\n        this.addToMessageQueue(message, source, localMessageID, sendMessagePromise, requestOptions);\n        this.runQueueIfReady();\n        // Return the promise that is either successfully resolve or rejected in this.processSuccess or this.processError.\n        return sendMessagePromise;\n    }\n    /**\n     * Cancels all message requests including any that are running now and any that are waiting in the queue.\n     */\n    cancelAllMessageRequests() {\n        while (this.queue.waiting.length) {\n            this.cancelMessageRequestByID(this.queue.waiting[0].message.id, false);\n        }\n        if (this.queue.current) {\n            this.cancelMessageRequestByID(this.queue.current.message.id, false);\n            this.clearCurrentQueueItem();\n        }\n    }\n    /**\n     * Cancel a message given an ID. Can be a message in process or one that is waiting to be processed.\n     */\n    async cancelMessageRequestByID(messageID, logError) {\n        let pendingRequest;\n        if (this.queue.current?.message.id === messageID) {\n            pendingRequest = this.queue.current;\n        }\n        else {\n            const index = this.queue.waiting.findIndex((item) => item.message.id === messageID);\n            if (index !== -1) {\n                pendingRequest = this.queue.waiting[index];\n                this.queue.waiting.splice(index, 1);\n            }\n        }\n        if (pendingRequest) {\n            const { lastResponse, sendMessageController } = pendingRequest;\n            // If someone is using customMessageSend, we let them know they should abort the request.\n            sendMessageController?.abort(\"Message was cancelled\");\n            this.rejectFinalErrorOnMessage(pendingRequest, \"Message was cancelled\");\n            if (logError) {\n                this.serviceManager.actions.errorOccurred({\n                    errorType: OnErrorType.MESSAGE_COMMUNICATION,\n                    message: \"Message was cancelled\",\n                    otherData: await safeFetchTextWithTimeout(lastResponse),\n                });\n            }\n        }\n    }\n}\n\nexport { MessageService as default };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nclass NamespaceService {\n    constructor(namespace) {\n        this.originalName = namespace;\n        this.attributeSafe = namespace;\n        this.suffix = getSuffix(namespace);\n    }\n}\n/**\n * From a given namespace, generate a unique token safe to be used as a suffix to a classname or attribute.\n * If no namespace provided, returns an empty string.\n */\nfunction getSuffix(namespace) {\n    const computedName = computeNamespaceName(namespace);\n    return computedName?.length ? `--${namespace}` : \"\";\n}\n/**\n * Given a namespace, trims and returns. If no namespace provided, returns an empty string.\n */\nfunction computeNamespaceName(namespace) {\n    return namespace ? namespace.trim() : \"\";\n}\n\nexport { NamespaceService };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a global class responsible for managing and providing access to references of \"services\" in the application.\n * Services should not hold references to each other but rather should always use the service manager to access\n * other services. This will allow for services to be created lazily and to support circular dependencies.\n */\nclass ServiceManager {\n    constructor() {\n        /**\n         * This is a registry of the elements that act as the hosts for custom responses. The key of the map is the ID of\n         * the message and the value is an object with the Element created by the widget that was provided to event listeners that they\n         * can attach their own elements to. These elements are attached to the appropriate React component when rendered. Optionally, this\n         * object can also include a slotName for when rendering the element into a slot when shadowRoot is enabled.\n         */\n        this.userDefinedElementRegistry = new Map();\n        /**\n         * Indicates the number of times that a restart has occurred. This can be used by various asynchronous operations to\n         * determine if a restart occurred during the operation and if the results should be ignored.\n         */\n        this.restartCount = 0;\n    }\n    /**\n     * Convenience functions for firing events on the event bus.\n     */\n    async fire(busEvent) {\n        return this.eventBus.fire(busEvent, this.instance);\n    }\n}\n\nexport { ServiceManager };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// This file is a mock of the localStorage API. In IE11 when developing on localhost, we can get access denied errors.\n// This is just a small fallback for that use case.\nlet innerStorage = {};\nconst storage = {\n    getItem(key) {\n        return innerStorage[key];\n    },\n    setItem(key, value) {\n        innerStorage[key] = value;\n    },\n    removeItem(key) {\n        delete innerStorage[key];\n    },\n    length: Object.keys(innerStorage).length,\n    clear() {\n        innerStorage = {};\n    },\n    key(index) {\n        return Object.keys(innerStorage)[index];\n    },\n};\n\nexport { storage as default };\n","import { VERSION } from '../environmentVariables.js';\nimport { IS_SESSION_STORAGE } from '../utils/browserUtils.js';\nimport { consoleError } from '../utils/miscUtils.js';\nimport storage$1 from './mockStorage.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This module is responsible for managing the storage of persisted session data. This way if a user\n * navigates to a new page, the state of the window, thread and other UI state items will remain in tact.\n */\n// We use sessionStorage instead of localStorage to not have to have a public cookie policy that must be accepted in EU.\nconst storage = IS_SESSION_STORAGE()\n    ? window.sessionStorage\n    : storage$1;\nclass UserSessionStorageService {\n    constructor(serviceManager) {\n        this.serviceManager = serviceManager;\n        this.prefix = `CARBON_CHAT_SESSION${this.serviceManager?.namespace?.suffix || \"\"}`;\n    }\n    /**\n     * Get the session object.\n     */\n    loadChatSession() {\n        try {\n            const chatSessionString = storage.getItem(this.getChatSessionKey());\n            const chatSession = chatSessionString\n                ? JSON.parse(chatSessionString)\n                : null;\n            // If the saved session is from a previous version of Carbon AI chat, we just throw it away to avoid having to deal with\n            // having to make sure these sessions are backwards compatible.\n            if (chatSession?.version === VERSION) {\n                return chatSession;\n            }\n            this.clearChatSession();\n            return null;\n        }\n        catch (error) {\n            this.clearChatSession();\n            return null;\n        }\n    }\n    /**\n     * Get the session object.\n     */\n    loadLauncherSession() {\n        try {\n            const launcherSessionString = storage.getItem(this.getLauncherSessionKey());\n            const launcherSession = launcherSessionString\n                ? JSON.parse(launcherSessionString)\n                : null;\n            // If the saved session is from a previous version of Carbon AI chat, we just throw it away to avoid having to deal with\n            // having to make sure these sessions are backwards compatible.\n            if (launcherSession?.version === VERSION) {\n                launcherSession.wasLoadedFromBrowser = true;\n                return launcherSession;\n            }\n            this.clearLauncherSession();\n            return null;\n        }\n        catch (error) {\n            this.clearLauncherSession();\n            return null;\n        }\n    }\n    /**\n     * Set a new version of the user based session.\n     */\n    persistChatSession(session) {\n        try {\n            storage.setItem(this.getChatSessionKey(), JSON.stringify(session));\n        }\n        catch (error) {\n            consoleError(\"Error in persistChatSession\", error);\n        }\n    }\n    /**\n     * Set a new version of the user based session.\n     */\n    persistLauncherSession(session) {\n        try {\n            storage.setItem(this.getLauncherSessionKey(), JSON.stringify(session));\n        }\n        catch (error) {\n            consoleError(\"Error in persistLauncherSession\", error);\n        }\n    }\n    /**\n     * Remove the given session from storage.\n     */\n    clearChatSession() {\n        try {\n            storage.removeItem(this.getChatSessionKey());\n        }\n        catch (error) {\n            consoleError(\"Error in clearChatSession\", error);\n        }\n    }\n    /**\n     * Remove the given session from storage.\n     */\n    clearLauncherSession() {\n        try {\n            storage.removeItem(this.getLauncherSessionKey());\n        }\n        catch (error) {\n            consoleError(\"Error in clearLauncherSession\", error);\n        }\n    }\n    /**\n     * Returns the sessionStorage key for the session id for the given user.\n     */\n    getChatSessionKey() {\n        return this.prefix;\n    }\n    /**\n     * Returns the sessionStorage key for the session id for the given user.\n     */\n    getLauncherSessionKey() {\n        return this.prefix;\n    }\n}\n\nexport { UserSessionStorageService };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains customizer functions for lodash utility functions that accept them.\n */\n/**\n * Returns the new array value which will replace the current value since we don't want both values to get merged.\n */\nfunction replaceCurrentArrayValue(currentValue, newValue) {\n    if (Array.isArray(newValue)) {\n        return newValue;\n    }\n    // Let the method itself handle merging non-array values.\n    return undefined;\n}\n\nexport { replaceCurrentArrayValue };\n","import { HA_END_CHAT, HA_UPDATE_FILE_UPLOAD_IN_PROGRESS, HA_SET_IS_SCREEN_SHARING, HA_UPDATE_CAPABILITIES, HA_SET_AGENT_LEFT_CHAT, HA_UPDATE_IS_TYPING, HA_UPDATE_IS_SUSPENDED, HA_SET_PERSISTED_STATE, HA_SET_AGENT_JOINED, HA_SET_SHOW_SCREEN_SHARE_REQUEST, HA_SET_AGENT_AVAILABILITY, HA_SET_IS_RECONNECTING, HA_SET_IS_CONNECTING } from './agentActions.js';\nimport { applyLocalMessageUIState } from './reducerUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Redux reducers for human agent actions.\n */\nconst agentReducers = {\n    [HA_SET_IS_CONNECTING]: (state, action) => {\n        const { isConnecting, localMessageID } = action;\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                isConnecting,\n                activeLocalMessageID: localMessageID,\n                // When connecting, clear any unread messages from a previous conversation.\n                numUnreadMessages: isConnecting\n                    ? 0\n                    : state.agentState.numUnreadMessages,\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    agentState: {\n                        ...state.persistedToBrowserStorage.chatState.agentState,\n                        isSuspended: isConnecting\n                            ? state.persistedToBrowserStorage.chatState.agentState.isSuspended\n                            : false,\n                    },\n                },\n            },\n        };\n    },\n    [HA_SET_IS_RECONNECTING]: (state, action) => {\n        const { isReconnecting } = action;\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                isReconnecting,\n            },\n        };\n    },\n    [HA_SET_AGENT_AVAILABILITY]: (state, action) => {\n        if (!state.agentState.isConnecting) {\n            // If the agent is not currently connecting, just ignore the availability update.\n            return state;\n        }\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                availability: state.agentState.isConnecting\n                    ? action.availability\n                    : null,\n            },\n        };\n    },\n    [HA_SET_SHOW_SCREEN_SHARE_REQUEST]: (state, { showRequest }) => {\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                showScreenShareRequest: showRequest,\n            },\n        };\n    },\n    [HA_SET_AGENT_JOINED]: (state, action) => {\n        const agentProfiles = {\n            ...state.persistedToBrowserStorage.chatState.agentState.agentProfiles,\n        };\n        const { agentProfile } = action;\n        if (agentProfile) {\n            agentProfiles[agentProfile.id] = agentProfile;\n        }\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                isConnecting: false,\n                isReconnecting: false,\n                availability: null,\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    agentState: {\n                        ...state.persistedToBrowserStorage.chatState.agentState,\n                        isConnected: true,\n                        agentProfile,\n                        agentProfiles,\n                    },\n                },\n            },\n        };\n    },\n    [HA_SET_PERSISTED_STATE]: (state, action) => ({\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                agentState: {\n                    ...state.persistedToBrowserStorage.chatState.agentState,\n                    serviceDeskState: action.state,\n                },\n            },\n        },\n    }),\n    [HA_UPDATE_IS_SUSPENDED]: (state, action) => {\n        if (!state.agentState.isConnecting &&\n            !state.persistedToBrowserStorage.chatState.agentState.isConnected) {\n            // If the user is not connecting or connected to an agent, then we can't update the suspended state.\n            return state;\n        }\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    agentState: {\n                        ...state.persistedToBrowserStorage.chatState.agentState,\n                        isSuspended: action.isSuspended,\n                    },\n                },\n            },\n        };\n    },\n    [HA_UPDATE_IS_TYPING]: (state, action) => {\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                isAgentTyping: action.isTyping,\n            },\n        };\n    },\n    [HA_SET_AGENT_LEFT_CHAT]: (state) => \n    // Remove the agent's profile and typing indicator.\n    ({\n        ...state,\n        botMessageState: {\n            ...state.botMessageState,\n        },\n        agentState: {\n            ...state.agentState,\n            isAgentTyping: false,\n        },\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                agentState: {\n                    ...state.persistedToBrowserStorage.chatState.agentState,\n                    agentProfile: null,\n                },\n            },\n        },\n    }),\n    [HA_UPDATE_CAPABILITIES]: (state, action) => {\n        const newInputState = {\n            ...state.agentState.inputState,\n            ...action.capabilities,\n        };\n        if (!newInputState.allowFileUploads) {\n            newInputState.files = [];\n        }\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                inputState: newInputState,\n            },\n        };\n    },\n    [HA_SET_IS_SCREEN_SHARING]: (state, { isSharing }) => ({\n        ...state,\n        agentState: {\n            ...state.agentState,\n            isScreenSharing: isSharing,\n        },\n    }),\n    [HA_UPDATE_FILE_UPLOAD_IN_PROGRESS]: (state, action) => ({\n        ...state,\n        agentState: {\n            ...state.agentState,\n            fileUploadInProgress: action.fileUploadInProgress,\n        },\n    }),\n    [HA_END_CHAT]: (state) => {\n        // Update the UI state of the current CTA message to indicate that chat was ended.\n        let newState = applyLocalMessageUIState(state, state.agentState.activeLocalMessageID, \"wasAgentChatEnded\", true);\n        // End the chat.\n        newState = {\n            ...newState,\n            agentState: {\n                ...newState.agentState,\n                isConnecting: false,\n                isReconnecting: false,\n                availability: null,\n                activeLocalMessageID: null,\n                isAgentTyping: false,\n                inputState: {\n                    ...newState.agentState.inputState,\n                    isReadonly: false,\n                },\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    agentState: {\n                        ...state.persistedToBrowserStorage.chatState.agentState,\n                        isConnected: false,\n                        isSuspended: false,\n                        agentProfile: null,\n                    },\n                },\n            },\n        };\n        return newState;\n    },\n};\n\nexport { agentReducers };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * When the message history is being hydrated and there was an active tour, or when starting a tour, populate the tour\n * step items. If the message with the tour data can not be found, or there is no activeTourID, clear all the existing\n * tour data.\n */\nfunction populateTourStepItems(state) {\n    const { activeTourID } = state.persistedToBrowserStorage.chatState.persistedTourState;\n    if (activeTourID) {\n        // If there's an activeTourID find the originalMessage that contains a localMessage that triggered the current\n        // active tour.\n        const originalMessage = state.allMessagesByID[activeTourID];\n        // Find the GenericItem within the originalMessage that has the active tour data.\n        const tourMessageItem = originalMessage?.output?.generic?.find((message) => Boolean(message.user_defined?.steps));\n        if (tourMessageItem) {\n            // Populate the tourState now that we have the active tour data.\n            return {\n                ...state,\n                tourState: {\n                    ...state.tourState,\n                    activeTourStepItems: tourMessageItem.user_defined?.steps,\n                },\n            };\n        }\n    }\n    // If the message with the tour data can not be found, or there is no activeTourID, clear all the existing tour data.\n    return clearTourState(state);\n}\n/**\n * Clear all tour state.\n */\nfunction clearTourState(state) {\n    return {\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                persistedTourState: {\n                    activeTourID: null,\n                    activeTourCurrentStepIndex: null,\n                },\n            },\n            launcherState: {\n                ...state.persistedToBrowserStorage.launcherState,\n                activeTour: false,\n            },\n        },\n        tourState: {\n            ...state.tourState,\n            activeTourStepItems: null,\n        },\n    };\n}\n\nexport { clearTourState, populateTourStepItems };\n","import merge from 'lodash-es/merge.js';\nimport mergeWith from 'lodash-es/mergeWith.js';\nimport { outputItemToLocalItem } from '../schema/outputItemToLocalItem.js';\nimport '../utils/constants.js';\nimport { replaceCurrentArrayValue } from '../utils/customizers.js';\nimport { streamItemID, isResponse, isRequest } from '../utils/messageUtils.js';\nimport { UPDATE_MAIN_HEADER_AVATAR, SET_STREAM_ID, SET_STOP_STREAMING_BUTTON_DISABLED, SET_STOP_STREAMING_BUTTON_VISIBLE, UPDATE_MAX_VISIBLE_HEADER_OBJECTS, UPDATE_CHAT_HEADER_CONFIG, STREAMING_ADD_CHUNK, STREAMING_MERGE_HISTORY, STREAMING_START, SET_RESPONSE_PANEL_CONTENT, SET_RESPONSE_PANEL_IS_OPEN, ADD_NESTED_MESSAGES, FILE_UPLOAD_INPUT_ERROR, CLEAR_INPUT_FILES, REMOVE_ALL_NOTIFICATIONS, REMOVE_NOTIFICATIONS, ADD_NOTIFICATION, REMOVE_LOCAL_MESSAGE_ITEM, REMOVE_INPUT_FILE, ADD_INPUT_FILE, SET_IS_BROWSER_PAGE_VISIBLE, UPDATE_INPUT_STATE, CHANGE_STEP_IN_TOUR, CLEAR_TOUR_DATA, SET_TOUR_DATA, SET_CUSTOM_PANEL_OPTIONS, SET_CUSTOM_PANEL_OPEN, SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN, CLOSE_IFRAME_PANEL, OPEN_IFRAME_CONTENT, SET_LAUNCHER_MINIMIZED, SET_CHAT_MESSAGES_PROPERTY, SET_LAUNCHER_CONFIG_PROPERTY, SET_LAUNCHER_PROPERTY, UPDATE_LAUNCHER_CONFIG, TOGGLE_HOME_SCREEN, SET_HOME_SCREEN_IS_OPEN, ACCEPTED_DISCLAIMER, ANNOUNCE_MESSAGE, MERGE_HISTORY, SET_MESSAGE_HISTORY_PROPERTY, SET_MESSAGE_UI_PROPERTY, UPDATE_HOME_SCREEN_CONFIG, UPDATE_CSS_VARIABLES, UPDATE_MAIN_HEADER_TITLE, UPDATE_LAUNCHER_AVATAR_URL, UPDATE_BOT_AVATAR_URL, UPDATE_BOT_NAME, SET_INITIAL_VIEW_CHANGE_COMPLETE, SET_VIEW_CHANGING, SET_VIEW_STATE, UPDATE_HAS_SENT_NON_WELCOME_MESSAGE, UPDATE_PERSISTED_CHAT_STATE, SET_APP_STATE_VALUE, ADD_IS_HYDRATING_COUNTER, ADD_IS_LOADING_COUNTER, ADD_IS_TYPING_COUNTER, MESSAGE_SET_OPTION_SELECTED, ADD_MESSAGE, UPDATE_MESSAGE, UPDATE_LOCAL_MESSAGE_ITEM, REMOVE_MESSAGES, ADD_LOCAL_MESSAGE_ITEM, HYDRATE_MESSAGE_HISTORY, RESTART_CONVERSATION, HYDRATE_CHAT, CHANGE_STATE } from './actions.js';\nimport { agentReducers } from './agentReducers.js';\nimport { setHomeScreenOpenState, applyFullMessage, applyBotMessageState, applyLocalMessageUIState, handleViewStateChange, DEFAULT_CUSTOM_PANEL_STATE, DEFAULT_CITATION_PANEL_STATE, DEFAULT_IFRAME_PANEL_STATE } from './reducerUtils.js';\nimport { clearTourState, populateTourStepItems } from './tourReducerUtils.js';\nimport { AgentMessageType } from '../../../types/messaging/Messages.js';\nimport { FileStatusValue, LauncherType } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The set of agent message types that should be excluded on the unread agent message count.\nconst EXCLUDE_AGENT_UNREAD = new Set([\n    AgentMessageType.USER_ENDED_CHAT,\n    AgentMessageType.CHAT_WAS_ENDED,\n    AgentMessageType.RELOAD_WARNING,\n]);\nconst reducers = {\n    [CHANGE_STATE]: (state, action) => merge({}, state, action.partialState),\n    [HYDRATE_CHAT]: (state) => ({\n        ...state,\n        isHydrated: true,\n    }),\n    [RESTART_CONVERSATION]: (state) => {\n        let newState = {\n            ...state,\n            botMessageState: {\n                ...state.botMessageState,\n                localMessageIDs: [],\n                messageIDs: [],\n                isTypingCounter: 0,\n                isScrollAnchored: false,\n            },\n            allMessageItemsByID: {},\n            allMessagesByID: {},\n            iFramePanelState: {\n                ...DEFAULT_IFRAME_PANEL_STATE,\n            },\n            viewSourcePanelState: {\n                ...DEFAULT_CITATION_PANEL_STATE,\n            },\n            customPanelState: {\n                ...DEFAULT_CUSTOM_PANEL_STATE,\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    homeScreenState: {\n                        ...state.persistedToBrowserStorage.chatState.homeScreenState,\n                        showBackToBot: false,\n                    },\n                },\n            },\n            isHydrated: false,\n            catastrophicErrorType: null,\n        };\n        // Clear the tour state on restart.\n        newState = clearTourState(newState);\n        if (newState.homeScreenConfig.is_on) {\n            newState = setHomeScreenOpenState(newState, true);\n        }\n        return newState;\n    },\n    // TODO: Need session history test case for setting the alternate suggestions values\n    [HYDRATE_MESSAGE_HISTORY]: (state, action) => {\n        let newState = {\n            ...state,\n            ...action.messageHistory,\n        };\n        // If there's an active tour then use the new state with message history to populate the tour state.\n        if (state.persistedToBrowserStorage.chatState.persistedTourState.activeTourID) {\n            newState = populateTourStepItems(newState);\n        }\n        return newState;\n    },\n    [ADD_LOCAL_MESSAGE_ITEM]: (state, action) => {\n        const { messageItem, message, addMessage, addAfterID } = action;\n        const { id } = messageItem.ui_state;\n        // If we receive back a silent message, we don't want to add to the store.\n        const isSilent = message.history.silent;\n        let newState = state;\n        if (addMessage) {\n            newState = applyFullMessage(newState, message);\n        }\n        const currentIndex = newState.botMessageState.localMessageIDs.findIndex((existingID) => existingID === id);\n        const newLocalMessageIDs = [...newState.botMessageState.localMessageIDs];\n        let insertAtIndex = currentIndex;\n        if (currentIndex !== -1) {\n            // Remove the ID from the array. We may insert it back at this index.\n            newLocalMessageIDs.splice(currentIndex, 1);\n        }\n        else {\n            // By default, insert the new ID at the end.\n            insertAtIndex = newLocalMessageIDs.length;\n        }\n        // If an \"addAfterID\" was provided, use that to determine where to put this new ID.\n        if (addAfterID) {\n            const afterIDIndex = newLocalMessageIDs.findIndex((existingID) => existingID === addAfterID);\n            if (afterIDIndex !== -1) {\n                insertAtIndex = afterIDIndex + 1;\n            }\n        }\n        // Insert the ID.\n        newLocalMessageIDs.splice(insertAtIndex, 0, id);\n        if (!isSilent) {\n            newState = {\n                ...newState,\n                allMessageItemsByID: {\n                    ...newState.allMessageItemsByID,\n                    [id]: messageItem,\n                },\n                botMessageState: {\n                    ...newState.botMessageState,\n                    localMessageIDs: newLocalMessageIDs,\n                },\n            };\n            if (newState.persistedToBrowserStorage.chatState.homeScreenState\n                .isHomeScreenOpen) {\n                // When a message has been sent, we don't want the home screen open anymore.\n                newState = setHomeScreenOpenState(newState, false);\n            }\n            const isBotMessage = !messageItem.item.agent_message_type;\n            const isMainWindowOpen = state.persistedToBrowserStorage.launcherState.viewState.mainWindow;\n            if (!isBotMessage && (!isMainWindowOpen || !state.isBrowserPageVisible)) {\n                // This message is with an agent, and it occurred while the main window was closed or the page is not\n                // visible, so it may need to be counted as an unread message.\n                const fromAgent = !isRequest(message);\n                if (fromAgent &&\n                    !EXCLUDE_AGENT_UNREAD.has(messageItem.item.agent_message_type)) {\n                    // If this message came from an agent, then add one to the unread count, but not if it's one of the excluded\n                    // types.\n                    newState = {\n                        ...newState,\n                        agentState: {\n                            ...newState.agentState,\n                            numUnreadMessages: newState.agentState.numUnreadMessages + 1,\n                        },\n                    };\n                }\n            }\n        }\n        return newState;\n    },\n    [REMOVE_MESSAGES]: (state, { messageIDs }) => {\n        const idsSet = new Set(messageIDs);\n        const newAllMessages = { ...state.allMessagesByID };\n        const newAllMessageItems = { ...state.allMessageItemsByID };\n        // Remove all the message IDs from the message list.\n        const newMessageIDs = state.botMessageState.messageIDs.filter((messageID) => !idsSet.has(messageID));\n        // Remove all the message items from the items list for items that are part of one of the messages being\n        // removed. Also remove the matching items from the map.\n        const newMessageItemsIDs = state.botMessageState.localMessageIDs.filter((messageItemID) => {\n            const messageItem = newAllMessageItems[messageItemID];\n            const removeItem = idsSet.has(messageItem?.fullMessageID);\n            if (removeItem) {\n                delete newAllMessageItems[messageItemID];\n            }\n            return !removeItem;\n        });\n        // Remove the message objects from the map.\n        messageIDs.forEach((messageID) => {\n            delete newAllMessages[messageID];\n        });\n        const newState = {\n            ...state,\n            allMessagesByID: newAllMessages,\n            allMessageItemsByID: newAllMessageItems,\n            botMessageState: {\n                ...state.botMessageState,\n                messageIDs: newMessageIDs,\n                localMessageIDs: newMessageItemsIDs,\n            },\n        };\n        return newState;\n    },\n    [UPDATE_LOCAL_MESSAGE_ITEM]: (state, action) => {\n        const { messageItem } = action;\n        return {\n            ...state,\n            allMessageItemsByID: {\n                ...state.allMessageItemsByID,\n                [messageItem.ui_state.id]: messageItem,\n            },\n        };\n    },\n    [UPDATE_MESSAGE]: (state, action) => {\n        const { message } = action;\n        return {\n            ...state,\n            allMessagesByID: {\n                ...state.allMessagesByID,\n                [message.id]: message,\n            },\n        };\n    },\n    [ADD_MESSAGE]: (state, action) => {\n        const { message } = action;\n        const messageID = message.id;\n        let newState = state;\n        if (isResponse(message)) {\n            // For message responses, we need to re-order any items that may already be present in the store if they had\n            // been added during a previous stream. We're going to use the following algorithm.\n            //\n            // 1. Locate the first item already in the list. This will be the insertion point for the re-ordered items.\n            // 2. Remove all existing items from the list.\n            // 3. Insert the new items back into the list at the insertion point but only items that were previously in\n            //    the list.\n            //\n            // Example: if we've got response 1 with items 1.1 and 1.2, response 2 with items 2.1, 2.2, 2.3, and response 3\n            // with 3.1. We start with.\n            //\n            //  [1.1, 1.2, 2.1, 2.2, 2.3, 3.1]\n            //\n            // Now, we \"re-add\" message 2 expect that we 2.1 and 2.2 are reversed in order and 2.3 and 2.4 is going to be\n            // added ([2.2, 2.1, 2.4]).\n            //\n            // 1. The first item is \"2.1\" at index 2.\n            // 2. Remove all items for response 2 giving us [1.1, 1.2, 3.1]\n            // 3. Insert 2.1 and 2.2 (those were the only items we already had) back in the list at index 2 in the new order.\n            //    item 2.4 will be inserted later as an individual item.\n            //\n            // Result: [1.1, 1.2, 2.2, 2.1, 3.1]\n            // Get the ordered list of the new items. Only items with a stream ID can be re-ordered at this point.\n            const itemIDsInNewMessage = [];\n            message.output.generic.forEach((item) => {\n                const id = streamItemID(messageID, item);\n                if (id) {\n                    itemIDsInNewMessage.push(id);\n                }\n            });\n            const newAllMessageItemsByID = { ...state.allMessageItemsByID };\n            const existingItemIDs = [];\n            let firstFoundIndex;\n            // Remove all the existing items for this message. Also keep track of where the first one was found.\n            const newLocalMessageIDs = state.botMessageState.localMessageIDs.filter((itemID, index) => {\n                const item = state.allMessageItemsByID[itemID];\n                const isItemInMessage = item.fullMessageID === messageID;\n                if (isItemInMessage) {\n                    if (firstFoundIndex === undefined) {\n                        firstFoundIndex = index;\n                    }\n                    if (!itemIDsInNewMessage.includes(itemID)) {\n                        // If this item is not in the new message, then remove the whole item object.\n                        delete newAllMessageItemsByID[itemID];\n                    }\n                    else {\n                        // Otherwise, this item will may get re-inserted back into the list (if it still exists).\n                        existingItemIDs.push(itemID);\n                    }\n                }\n                // Keep the item if it's not in the new message.\n                return !isItemInMessage;\n            });\n            // Now insert the message items back into the list at the right spot, but only the items we already had.\n            if (existingItemIDs.length) {\n                const itemIDsToInsert = itemIDsInNewMessage.filter((itemID) => existingItemIDs.includes(itemID));\n                if (itemIDsToInsert.length) {\n                    newLocalMessageIDs.splice(firstFoundIndex, 0, ...itemIDsToInsert);\n                }\n            }\n            newState = {\n                ...newState,\n                allMessageItemsByID: newAllMessageItemsByID,\n                botMessageState: {\n                    ...newState.botMessageState,\n                    localMessageIDs: newLocalMessageIDs,\n                },\n            };\n        }\n        return applyFullMessage(newState, message);\n    },\n    [MESSAGE_SET_OPTION_SELECTED]: (state, action) => {\n        const newMessagesByID = {\n            ...state.allMessageItemsByID,\n        };\n        newMessagesByID[action.messageID] = {\n            ...state.allMessageItemsByID[action.messageID],\n            ui_state: {\n                ...state.allMessageItemsByID[action.messageID].ui_state,\n                optionSelected: action.sentMessage,\n            },\n        };\n        return {\n            ...state,\n            allMessageItemsByID: newMessagesByID,\n        };\n    },\n    [ADD_IS_TYPING_COUNTER]: (state, action) => {\n        return {\n            ...state,\n            botMessageState: {\n                ...state.botMessageState,\n                isTypingCounter: Math.max(state.botMessageState.isTypingCounter + action.addToIsTyping, 0),\n            },\n        };\n    },\n    [ADD_IS_LOADING_COUNTER]: (state, action) => {\n        return {\n            ...state,\n            botMessageState: {\n                ...state.botMessageState,\n                isLoadingCounter: Math.max(state.botMessageState.isLoadingCounter + action.addToIsLoading, 0),\n            },\n        };\n    },\n    [ADD_IS_HYDRATING_COUNTER]: (state, action) => {\n        return {\n            ...state,\n            botMessageState: {\n                ...state.botMessageState,\n                isHydratingCounter: Math.max(state.botMessageState.isHydratingCounter + action.addToIsHydrating, 0),\n            },\n        };\n    },\n    [SET_APP_STATE_VALUE]: (state, action) => ({\n        ...state,\n        [action.key]: action.value,\n    }),\n    [UPDATE_PERSISTED_CHAT_STATE]: (state, action) => ({\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                ...action.chatState,\n            },\n        },\n    }),\n    [UPDATE_HAS_SENT_NON_WELCOME_MESSAGE]: (state, action) => {\n        if (state.persistedToBrowserStorage.chatState.hasSentNonWelcomeMessage ===\n            action.hasSentNonWelcomeMessage) {\n            return state;\n        }\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    hasSentNonWelcomeMessage: action.hasSentNonWelcomeMessage,\n                },\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    hasSentNonWelcomeMessage: action.hasSentNonWelcomeMessage,\n                },\n            },\n        };\n    },\n    [SET_VIEW_STATE]: (state, action) => {\n        return handleViewStateChange(state, action.viewState);\n    },\n    [SET_VIEW_CHANGING]: (state, action) => ({\n        ...state,\n        viewChanging: action.viewChanging,\n    }),\n    [SET_INITIAL_VIEW_CHANGE_COMPLETE]: (state, action) => ({\n        ...state,\n        initialViewChangeComplete: action.changeComplete,\n    }),\n    [UPDATE_BOT_NAME]: (state, action) => {\n        return {\n            ...state,\n            botName: action.name,\n            headerDisplayName: state.theme.useAITheme\n                ? state.headerDisplayName\n                : action.name,\n        };\n    },\n    [UPDATE_BOT_AVATAR_URL]: (state, action) => ({\n        ...state,\n        botAvatarURL: action.url,\n    }),\n    [UPDATE_LAUNCHER_AVATAR_URL]: (state, action) => ({\n        ...state,\n        launcher: {\n            ...state.launcher,\n            config: {\n                ...state.launcher.config,\n                mobile: {\n                    ...state.launcher.config.mobile,\n                    avatar_url_override: action.source,\n                },\n                desktop: {\n                    ...state.launcher.config.desktop,\n                    avatar_url_override: action.source,\n                },\n            },\n        },\n    }),\n    [UPDATE_MAIN_HEADER_TITLE]: (state, action) => ({\n        ...state,\n        headerDisplayName: action.title,\n    }),\n    [UPDATE_CSS_VARIABLES]: (state, action) => {\n        const { config } = state;\n        const { variables } = action;\n        // Update css variables in app config with merged css variables.\n        const newConfig = {\n            public: {\n                ...config.public,\n            },\n        };\n        return {\n            ...state,\n            // This is modifying the original config objects. We may need to hold a reference to the original at some point.\n            config: newConfig,\n            cssVariableOverrides: variables,\n        };\n    },\n    // Right now we just merge here. When we understand home screen enough to open up these values to a developer,\n    // we will probably want to split this reducer into individual parts.\n    [UPDATE_HOME_SCREEN_CONFIG]: (state, action) => {\n        // background_gradient is deprecated. When it's removed the following config manipulation function can be removed\n        // and the merge in this reducer can go back to using action.homeScreenConfig for the new value instead of\n        // newHomeScreenConfig.\n        const newHomeScreenConfig = action.homeScreenConfig;\n        return {\n            ...state,\n            homeScreenConfig: mergeWith({}, state.homeScreenConfig, newHomeScreenConfig, replaceCurrentArrayValue),\n        };\n    },\n    [SET_MESSAGE_UI_PROPERTY]: (state, action) => {\n        return applyLocalMessageUIState(state, action.localMessageID, action.propertyName, action.propertyValue);\n    },\n    [SET_MESSAGE_HISTORY_PROPERTY]: (state, action) => {\n        const { messageID, propertyName, propertyValue } = action;\n        const oldMessage = state.allMessagesByID[messageID];\n        if (oldMessage) {\n            return {\n                ...state,\n                allMessagesByID: {\n                    ...state.allMessagesByID,\n                    [messageID]: {\n                        ...oldMessage,\n                        history: {\n                            ...oldMessage.history,\n                            [propertyName]: propertyValue,\n                        },\n                    },\n                },\n            };\n        }\n        return state;\n    },\n    [MERGE_HISTORY]: (state, action) => {\n        const oldMessage = state.allMessagesByID[action.messageID];\n        if (oldMessage) {\n            return {\n                ...state,\n                allMessagesByID: {\n                    ...state.allMessagesByID,\n                    [action.messageID]: {\n                        ...oldMessage,\n                        history: merge({}, oldMessage.history, action.history),\n                    },\n                },\n            };\n        }\n        return state;\n    },\n    [ANNOUNCE_MESSAGE]: (state, action) => ({\n        ...state,\n        announceMessage: action.message,\n    }),\n    [ACCEPTED_DISCLAIMER]: (state) => ({\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                disclaimersAccepted: {\n                    ...state.persistedToBrowserStorage.chatState.disclaimersAccepted,\n                    [window.location.hostname]: true,\n                },\n            },\n        },\n    }),\n    [SET_HOME_SCREEN_IS_OPEN]: (state, { isOpen }) => setHomeScreenOpenState(state, isOpen),\n    [TOGGLE_HOME_SCREEN]: (state) => setHomeScreenOpenState(state, !state.persistedToBrowserStorage.chatState.homeScreenState\n        .isHomeScreenOpen, true),\n    [UPDATE_LAUNCHER_CONFIG]: (state, action) => {\n        const newConfig = merge({}, state.launcher.config, action.launcherConfig);\n        return {\n            ...state,\n            launcher: {\n                ...state.launcher,\n                config: newConfig,\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    desktopLauncherIsExpanded: newConfig.is_on && newConfig.desktop.is_on\n                        ? state.persistedToBrowserStorage.launcherState\n                            .desktopLauncherIsExpanded\n                        : false,\n                    mobileLauncherIsExtended: newConfig.is_on && newConfig.mobile.is_on\n                        ? state.persistedToBrowserStorage.launcherState\n                            .mobileLauncherIsExtended\n                        : false,\n                },\n            },\n        };\n    },\n    [SET_LAUNCHER_PROPERTY]: (state, action) => {\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    [action.propertyName]: action.propertyValue,\n                },\n            },\n        };\n    },\n    [SET_LAUNCHER_CONFIG_PROPERTY]: (state, action) => {\n        const newState = {\n            ...state,\n            launcher: {\n                ...state.launcher,\n                config: {\n                    ...state.launcher.config,\n                },\n            },\n        };\n        if (!action.launcherType || action.launcherType === LauncherType.DESKTOP) {\n            newState.launcher.config.desktop = {\n                ...state.launcher.config.desktop,\n                [action.propertyName]: action.propertyValue,\n            };\n        }\n        if (!action.launcherType || action.launcherType === LauncherType.MOBILE) {\n            newState.launcher.config.mobile = {\n                ...state.launcher.config.mobile,\n                [action.propertyName]: action.propertyValue,\n            };\n        }\n        return newState;\n    },\n    [SET_CHAT_MESSAGES_PROPERTY]: (state, action) => {\n        return applyBotMessageState(state, {\n            [action.propertyName]: action.propertyValue,\n        });\n    },\n    [SET_LAUNCHER_MINIMIZED]: (state) => {\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    desktopLauncherIsExpanded: false,\n                    desktopLauncherWasMinimized: true,\n                },\n            },\n        };\n    },\n    [OPEN_IFRAME_CONTENT]: (state, { messageItem }) => {\n        return {\n            ...state,\n            iFramePanelState: {\n                ...state.iFramePanelState,\n                messageItem,\n                isOpen: true,\n            },\n            announceMessage: {\n                messageID: \"iframe_ariaOpenedPanel\",\n            },\n        };\n    },\n    [CLOSE_IFRAME_PANEL]: (state) => {\n        return {\n            ...state,\n            iFramePanelState: {\n                ...state.iFramePanelState,\n                isOpen: false,\n            },\n            announceMessage: {\n                messageID: \"iframe_ariaClosedPanel\",\n            },\n        };\n    },\n    [SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN]: (state, action) => {\n        return {\n            ...state,\n            viewSourcePanelState: {\n                ...state.viewSourcePanelState,\n                citationItem: action.citationItem,\n                relatedSearchResult: action.relatedSearchResult,\n                isOpen: action.isOpen,\n            },\n        };\n    },\n    [SET_CUSTOM_PANEL_OPEN]: (state, action) => {\n        return {\n            ...state,\n            customPanelState: {\n                ...state.customPanelState,\n                isOpen: action.isOpen,\n            },\n        };\n    },\n    [SET_CUSTOM_PANEL_OPTIONS]: (state, action) => {\n        return {\n            ...state,\n            customPanelState: {\n                ...state.customPanelState,\n                options: action.options,\n            },\n        };\n    },\n    [SET_TOUR_DATA]: (state, action) => {\n        const newStateWithPersistedTourData = {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    persistedTourState: {\n                        activeTourID: action.newActiveTourMessageID,\n                        activeTourCurrentStepIndex: 0,\n                    },\n                },\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    activeTour: true,\n                },\n            },\n        };\n        return populateTourStepItems(newStateWithPersistedTourData);\n    },\n    [CLEAR_TOUR_DATA]: (state) => {\n        return clearTourState(state);\n    },\n    [CHANGE_STEP_IN_TOUR]: (state, action) => {\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    persistedTourState: {\n                        ...state.persistedToBrowserStorage.chatState.persistedTourState,\n                        activeTourCurrentStepIndex: Math.max(Math.min(action.newStepNumber, state.tourState.activeTourStepItems.length - 1), 0),\n                    },\n                },\n            },\n        };\n    },\n    [UPDATE_INPUT_STATE]: (state, action) => {\n        const currentInputState = getInputState(state, action.isInputToAgent);\n        const newInputState = {\n            ...currentInputState,\n            ...action.newState,\n        };\n        const newState = applyInputState(state, newInputState, action.isInputToAgent);\n        return newState;\n    },\n    [SET_IS_BROWSER_PAGE_VISIBLE]: (state, action) => {\n        // If the page becomes visible while the main window is open, then clear the number of unread messages.\n        let numUnreadMessages;\n        const isMainWindowOpen = state.persistedToBrowserStorage.launcherState.viewState.mainWindow;\n        if (isMainWindowOpen && action.isVisible) {\n            numUnreadMessages = 0;\n        }\n        else {\n            numUnreadMessages = state.agentState.numUnreadMessages;\n        }\n        return {\n            ...state,\n            isBrowserPageVisible: action.isVisible,\n            agentState: {\n                ...state.agentState,\n                numUnreadMessages,\n            },\n        };\n    },\n    [ADD_INPUT_FILE]: (state, { file, isInputToAgent }) => {\n        const currentInputState = getInputState(state, isInputToAgent);\n        return applyInputState(state, {\n            ...currentInputState,\n            files: [...currentInputState.files, file],\n        }, isInputToAgent);\n    },\n    [REMOVE_INPUT_FILE]: (state, { fileID, isInputToAgent }) => {\n        const currentInputState = getInputState(state, isInputToAgent);\n        const newUploads = [...currentInputState.files];\n        const index = newUploads.findIndex((file) => file.id === fileID);\n        if (index !== -1) {\n            newUploads.splice(index, 1);\n        }\n        return applyInputState(state, {\n            ...currentInputState,\n            files: newUploads,\n        }, isInputToAgent);\n    },\n    [REMOVE_LOCAL_MESSAGE_ITEM]: (state, { localMessageItemID }) => {\n        const newLocalMessageIDs = state.botMessageState.localMessageIDs.filter((id) => id !== localMessageItemID);\n        const allMessageItemsByID = {\n            ...state.allMessageItemsByID,\n        };\n        if (allMessageItemsByID[localMessageItemID]) {\n            delete allMessageItemsByID[localMessageItemID];\n        }\n        return {\n            ...state,\n            allMessageItemsByID,\n            botMessageState: {\n                ...state.botMessageState,\n                localMessageIDs: newLocalMessageIDs,\n            },\n        };\n    },\n    [ADD_NOTIFICATION]: (state, { notification, notificationID, }) => {\n        return {\n            ...state,\n            notifications: state.notifications.concat({\n                id: notificationID,\n                notification,\n            }),\n        };\n    },\n    [REMOVE_NOTIFICATIONS]: (state, { groupID, notificationID }) => {\n        return {\n            ...state,\n            notifications: state.notifications.filter((notification) => {\n                if (notificationID) {\n                    return notification.id !== notificationID;\n                }\n                return notification.notification.groupID !== groupID;\n            }),\n        };\n    },\n    [REMOVE_ALL_NOTIFICATIONS]: (state) => {\n        return {\n            ...state,\n            notifications: [],\n        };\n    },\n    [CLEAR_INPUT_FILES]: (state, { isInputToAgent }) => {\n        const currentInputState = getInputState(state, isInputToAgent);\n        return applyInputState(state, {\n            ...currentInputState,\n            files: [],\n        }, isInputToAgent);\n    },\n    [FILE_UPLOAD_INPUT_ERROR]: (state, { fileID, errorMessage, isInputToAgent, }) => {\n        const currentInputSate = getInputState(state, isInputToAgent);\n        const newUploads = [...currentInputSate.files];\n        const index = newUploads.findIndex((file) => file.id === fileID);\n        if (index !== -1) {\n            newUploads[index] = {\n                ...newUploads[index],\n                isError: true,\n                errorMessage,\n                status: FileStatusValue.COMPLETE,\n            };\n        }\n        return applyInputState(state, {\n            ...currentInputSate,\n            files: newUploads,\n        }, isInputToAgent);\n    },\n    [ADD_NESTED_MESSAGES]: (state, { localMessageItems }) => {\n        const allMessageItemsByID = { ...state.allMessageItemsByID };\n        localMessageItems.forEach((localMessageItem) => {\n            allMessageItemsByID[localMessageItem.ui_state.id] = localMessageItem;\n        });\n        return {\n            ...state,\n            allMessageItemsByID,\n        };\n    },\n    [SET_RESPONSE_PANEL_IS_OPEN]: (state, { isOpen }) => {\n        return {\n            ...state,\n            responsePanelState: {\n                ...state.responsePanelState,\n                isOpen,\n            },\n        };\n    },\n    [SET_RESPONSE_PANEL_CONTENT]: (state, { localMessageItem, isMessageForInput, }) => {\n        return {\n            ...state,\n            responsePanelState: {\n                ...state.responsePanelState,\n                localMessageItem,\n                isMessageForInput,\n            },\n        };\n    },\n    [STREAMING_START]: (state, { messageID }) => {\n        // Add an empty placeholder where we will start adding the streaming chunks as they come in.\n        const streamIntoResponse = {\n            id: messageID,\n            output: {\n                generic: [],\n            },\n            history: {\n                timestamp: Date.now(),\n            },\n        };\n        return applyFullMessage(state, streamIntoResponse);\n    },\n    [STREAMING_MERGE_HISTORY]: (state, { messageID, history, }) => {\n        const existingMessage = state.allMessagesByID[messageID];\n        const newMessage = merge({}, existingMessage, { history });\n        if (existingMessage) {\n            return {\n                ...state,\n                allMessagesByID: {\n                    ...state.allMessagesByID,\n                    [messageID]: newMessage,\n                },\n            };\n        }\n        return state;\n    },\n    [STREAMING_ADD_CHUNK]: (state, { chunkItem, fullMessageID, isCompleteItem, disableFadeAnimation, }) => {\n        const message = state.allMessagesByID[fullMessageID];\n        // This might be undefined if we haven't seen this item before.\n        const localItemID = streamItemID(fullMessageID, chunkItem);\n        const existingLocalMessageItem = state.allMessageItemsByID[localItemID];\n        let { localMessageIDs } = state.botMessageState;\n        let newItem;\n        if (!existingLocalMessageItem) {\n            // This is a new item we haven't seen before. We will need the response type to know what to with this item which\n            // should always be available in the first chunk. We will then need to add this item to the store so it'll appear.\n            newItem = outputItemToLocalItem(chunkItem, message, false);\n            newItem.ui_state.needsAnnouncement = false;\n            newItem.ui_state.disableFadeAnimation = disableFadeAnimation;\n            newItem.ui_state.isIntermediateStreaming = true;\n            if (isCompleteItem) {\n                newItem.ui_state.streamingState = { chunks: [], isDone: true };\n            }\n            else {\n                newItem.ui_state.streamingState = {\n                    chunks: [chunkItem],\n                    isDone: false,\n                };\n            }\n            localMessageIDs = [...localMessageIDs, localItemID];\n            if (!newItem.item.response_type) {\n                throw new Error(`New chunk item does not have a response_type: ${JSON.stringify(chunkItem)}`);\n            }\n        }\n        else if (isCompleteItem) {\n            // This is a complete item.\n            newItem = outputItemToLocalItem(chunkItem, message, false);\n            newItem.ui_state.needsAnnouncement = false;\n            newItem.ui_state.disableFadeAnimation = disableFadeAnimation;\n            newItem.ui_state.streamingState = { chunks: [], isDone: true };\n        }\n        else {\n            // This is a new chunk on an existing item. We need to merge it with the existing item and add the new chunk.\n            newItem = {\n                ...existingLocalMessageItem,\n                ui_state: {\n                    ...existingLocalMessageItem?.ui_state,\n                    streamingState: {\n                        ...existingLocalMessageItem?.ui_state.streamingState,\n                        chunks: [\n                            ...(existingLocalMessageItem?.ui_state.streamingState?.chunks ||\n                                []),\n                            chunkItem,\n                        ],\n                    },\n                },\n            };\n        }\n        return {\n            ...state,\n            allMessageItemsByID: {\n                ...state.allMessageItemsByID,\n                [localItemID]: newItem,\n            },\n            botMessageState: {\n                ...state.botMessageState,\n                localMessageIDs,\n            },\n        };\n    },\n    [UPDATE_CHAT_HEADER_CONFIG]: (state, { chatHeaderConfig }) => {\n        return {\n            ...state,\n            chatHeaderState: {\n                ...state.chatHeaderState,\n                config: {\n                    ...state.chatHeaderState.config,\n                    ...chatHeaderConfig,\n                },\n            },\n        };\n    },\n    [UPDATE_MAX_VISIBLE_HEADER_OBJECTS]: (state, { maxTotal }) => {\n        return {\n            ...state,\n            chatHeaderState: {\n                ...state.chatHeaderState,\n                maxVisibleHeaderObjects: maxTotal,\n            },\n        };\n    },\n    [SET_STOP_STREAMING_BUTTON_VISIBLE]: (state, { isVisible }) => {\n        return {\n            ...state,\n            botInputState: {\n                ...state.botInputState,\n                stopStreamingButtonState: {\n                    ...state.botInputState.stopStreamingButtonState,\n                    isVisible,\n                },\n            },\n        };\n    },\n    [SET_STOP_STREAMING_BUTTON_DISABLED]: (state, { isDisabled }) => {\n        return {\n            ...state,\n            botInputState: {\n                ...state.botInputState,\n                stopStreamingButtonState: {\n                    ...state.botInputState.stopStreamingButtonState,\n                    isDisabled,\n                },\n            },\n        };\n    },\n    [SET_STREAM_ID]: (state, { currentStreamID }) => {\n        return {\n            ...state,\n            botInputState: {\n                ...state.botInputState,\n                stopStreamingButtonState: {\n                    ...state.botInputState.stopStreamingButtonState,\n                    currentStreamID,\n                },\n            },\n        };\n    },\n    [UPDATE_MAIN_HEADER_AVATAR]: (state, { config }) => {\n        return {\n            ...state,\n            headerAvatarConfig: config,\n        };\n    },\n};\n/**\n * Applies a change to the current input state. This will determine which input state should be updated based on whether\n * the user is connected to an agent or not.\n */\nfunction applyInputState(state, newInputState, isInputToAgent) {\n    if (isInputToAgent) {\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                inputState: newInputState,\n            },\n        };\n    }\n    return {\n        ...state,\n        botInputState: newInputState,\n    };\n}\n/**\n * Returns the given input state.\n */\nfunction getInputState(state, isInputToAgent) {\n    return isInputToAgent ? state.agentState.inputState : state.botInputState;\n}\n// Merge in the other reducers.\nObject.assign(reducers, agentReducers);\n\nexport { reducers };\n","import merge from 'lodash-es/merge.js';\nimport { createStore } from 'redux';\nimport { NODE_ENV } from '../environmentVariables.js';\nimport { IS_PHONE } from '../utils/browserUtils.js';\nimport '../utils/constants.js';\nimport { withoutEmptyStarters } from '../utils/homeScreenUtils.js';\nimport { getBotName } from '../utils/miscUtils.js';\nimport { mergeCSSVariables } from '../utils/styleUtils.js';\nimport { reducers } from './reducers.js';\nimport { DEFAULT_THEME_STATE, VIEW_STATE_MAIN_WINDOW_OPEN, VIEW_STATE_LAUNCHER_OPEN, DEFAULT_LAUNCHER, DEFAULT_PERSISTED_TO_BROWSER, DEFAULT_INPUT_STATE, DEFAULT_MESSAGE_STATE, VIEW_STATE_ALL_CLOSED, DEFAULT_TOUR_STATE, DEFAULT_MESSAGE_PANEL_STATE, DEFAULT_CUSTOM_PANEL_STATE, DEFAULT_CITATION_PANEL_STATE, DEFAULT_IFRAME_PANEL_STATE, DEFAULT_AGENT_STATE, DEFAULT_LAYOUT_STATE } from './reducerUtils.js';\nimport '../../../types/instance/apiTypes.js';\nimport enLanguagePack from '../../languages/en.json.js';\nimport { CornersType } from '../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction doCreateStore(config, serviceManager) {\n    // Determine the value for useAITheme.\n    let useAITheme;\n    if (config.public.themeConfig?.useAITheme !== undefined) {\n        // If a value is set in the public config then use that.\n        useAITheme = config.public.themeConfig?.useAITheme;\n    }\n    else {\n        // If neither config is setting a value than use the default.\n        useAITheme = DEFAULT_THEME_STATE.useAITheme;\n    }\n    // The theme state uses a default for each property which can be overridden by the public config if specified. If a\n    // value for the property is not specified in the public config, then the default can be overridden by the remote\n    // config.\n    const themeState = {\n        carbonTheme: config.public.themeConfig?.carbonTheme || DEFAULT_THEME_STATE.carbonTheme,\n        useAITheme,\n        corners: getThemeCornersType(config),\n    };\n    const botName = getBotName(themeState.useAITheme, config);\n    const initialState = {\n        ...DEFAULT_MESSAGE_STATE,\n        notifications: [],\n        botInputState: {\n            ...DEFAULT_INPUT_STATE(),\n            isReadonly: config.public.isReadonly,\n            fieldVisible: !config.public.isReadonly,\n        },\n        agentState: { ...DEFAULT_AGENT_STATE },\n        botName,\n        headerDisplayName: useAITheme ? null : botName,\n        botAvatarURL: config.public.botAvatarURL || null,\n        headerAvatarConfig: null,\n        chatWidthBreakpoint: null,\n        chatWidth: null,\n        chatHeight: null,\n        // Any IBM set variables will override variables coming from remote. We keep this in redux so we can track the\n        // current state of the theming variables as they are updated and merged at different times.\n        cssVariableOverrides: mergeCSSVariables({}, {}, themeState.carbonTheme, themeState.useAITheme),\n        isHydrated: false,\n        // The language pack will start as English. If a different language pack is provided or updated, it will be\n        // merged in with a redux action.\n        languagePack: enLanguagePack,\n        locale: \"en\",\n        config,\n        originalConfig: config,\n        suspendScrollDetection: false,\n        homeScreenConfig: withoutEmptyStarters({}),\n        persistedToBrowserStorage: {\n            ...DEFAULT_PERSISTED_TO_BROWSER,\n            chatState: {\n                ...DEFAULT_PERSISTED_TO_BROWSER.chatState,\n                homeScreenState: {\n                    ...DEFAULT_PERSISTED_TO_BROWSER.chatState.homeScreenState,\n                },\n            },\n        },\n        launcher: merge({}, DEFAULT_LAUNCHER, {\n            config: merge({}, {}, {\n                mobile: {},\n            }, { is_on: config.public.showLauncher }),\n        }),\n        iFramePanelState: DEFAULT_IFRAME_PANEL_STATE,\n        viewSourcePanelState: DEFAULT_CITATION_PANEL_STATE,\n        isDestroyed: false,\n        customPanelState: DEFAULT_CUSTOM_PANEL_STATE,\n        viewChanging: false,\n        initialViewChangeComplete: false,\n        targetViewState: \n        // If openChatByDefault is set to true then the Carbon AI chat should open automatically. This value will be overridden\n        // by session history if a session exists. This overwriting is intentional since we only want openChatByDefault to\n        // open the main window the first time the chat loads for a user.\n        config.public.openChatByDefault\n            ? VIEW_STATE_MAIN_WINDOW_OPEN\n            : VIEW_STATE_LAUNCHER_OPEN,\n        responsePanelState: DEFAULT_MESSAGE_PANEL_STATE,\n        customMenuOptions: null,\n        tourState: DEFAULT_TOUR_STATE,\n        isBrowserPageVisible: true,\n        showNonHeaderBackgroundCover: false,\n        theme: themeState,\n        layout: getLayoutState(config),\n        chatHeaderState: {\n            config: null,\n            maxVisibleHeaderObjects: 0,\n        },\n    };\n    // Go pre-fill the launcher state from session storage if it exists.\n    const sessionStorageLauncherState = serviceManager.userSessionStorageService?.loadLauncherSession();\n    if (sessionStorageLauncherState) {\n        // Use the viewState from session storage as the targetViewState. Note, this overwrites the value that was set for\n        // targetViewState above, which took into account if openChatByDefault is true. This overwriting is intentional\n        // since we only want those openChatByDefault to open the main window the first time the chat loads for a user.\n        // After doCreateStore is finished Chat.startInternal() will try to change the view to this\n        // targetViewState.\n        initialState.targetViewState = sessionStorageLauncherState.viewState;\n        // In order to keep the initial view state as the default view state we need to change the session storage\n        // view state to the default before replacing the launcher state with the session storage state.\n        sessionStorageLauncherState.viewState = VIEW_STATE_ALL_CLOSED;\n        // Replace the launcher state with the session storage state.\n        initialState.persistedToBrowserStorage.launcherState =\n            sessionStorageLauncherState;\n    }\n    const enhancer = config.public.debug || NODE_ENV === \"development\"\n        ? window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__({\n                name: \"CarbonAIChat\",\n                instanceId: `Chat${serviceManager.namespace.suffix}`,\n            })\n        : undefined;\n    return createStore(reducerFunction, initialState, enhancer);\n}\n/**\n * Returns the corner type for the Carbon AI chat widget.\n */\nfunction getThemeCornersType(config) {\n    if (getLayoutState(config).showFrame === false ||\n        IS_PHONE ||\n        config.public.themeConfig?.corners === CornersType.SQUARE) {\n        return CornersType.SQUARE;\n    }\n    return DEFAULT_THEME_STATE.corners;\n}\nfunction getLayoutState(config) {\n    if (config.public.themeConfig?.useAITheme) {\n        return {\n            showFrame: config.public.layout?.showFrame ?? true,\n            hasContentMaxWidth: config.public.layout?.hasContentMaxWidth ?? true,\n        };\n    }\n    return merge({}, DEFAULT_LAYOUT_STATE, config.public.layout);\n}\n/**\n * This is the global reducer for the redux store. It will use the map of reducers from the \"reducers\" array to map\n * the action type to the sub-reducer for that specific action.\n */\nfunction reducerFunction(state, action) {\n    return action && reducers[action.type]\n        ? reducers[action.type](state, action)\n        : state;\n}\n\nexport { doCreateStore };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport { consoleDebug, consoleWarn } from './utils/miscUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst DEFAULT_PUBLIC_CONFIG = {\n    openChatByDefault: false,\n    showLauncher: true,\n    shouldTakeFocusIfOpensAutomatically: true,\n    serviceDesk: {},\n    messaging: {},\n    themeConfig: {\n        useAITheme: true,\n    },\n};\n/**\n * Create new Carbon AI chat instance.\n *\n * @param pagePublicConfig The public config options object that came from the page.\n * @param chatConstructorPromise A promise that resolves with the WatsonAssistantChat class. This can either be a\n * script tab with some onload handlers, or could be an import() statement. Because of our use of MFEs, we are\n * currently limited to the former.\n * @param render Function to pass into Chat class to call instead of render function.\n * @returns Promise object that resolves with your new instance. See [./instance.md](./instance.md).\n */\nasync function instantiateWidget(pagePublicConfig, chatConstructorPromise, render, element) {\n    const config = cloneDeep(pagePublicConfig);\n    if (!config.messaging?.customSendMessage) {\n        throw new Error(`You must set messaging.customSendMessage in your configuration object.`);\n    }\n    if (config?.debug) {\n        consoleDebug(\"[ChatEntry] Called instantiateWidget\", config);\n    }\n    if (document.location.protocol !== \"https:\") {\n        consoleWarn('Your page is not running with \"https\"; your data will not be sent  securely.');\n    }\n    if (document.compatMode !== \"CSS1Compat\") {\n        consoleWarn('Your page is running in quirks mode; you may experience layout issues with the chat. Add \"<!DOCTYPE html>\" to the page to run in standards mode.');\n    }\n    // Extract the extra properties from the page config we don't want to put in to the redux store.\n    const { onError, ...publicConfig } = config;\n    const Chat = await chatConstructorPromise(publicConfig);\n    const additionalChatParameters = {\n        onError,\n        render,\n    };\n    return new Chat(publicConfig, element, additionalChatParameters);\n}\n\nexport { DEFAULT_PUBLIC_CONFIG, instantiateWidget };\n","import dayjs from 'dayjs';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat.js';\nimport isEqual from 'lodash-es/isEqual.js';\nimport merge from 'lodash-es/merge.js';\nimport { createChatInstance } from './ChatInstanceImpl.js';\nimport { createServiceManager } from './loadServices.js';\nimport actions from './store/actions.js';\nimport { VIEW_STATE_ALL_CLOSED } from './store/reducerUtils.js';\nimport { loadLanguagePack, loadLocale } from './utils/languages.js';\nimport { hasServiceDesk } from './utils/messageUtils.js';\nimport { consoleDebug, consoleError } from './utils/miscUtils.js';\nimport { DEFAULT_PUBLIC_CONFIG } from './chatEntryFunctions.js';\nimport { MainWindowOpenReason, ViewChangeReason } from '../../types/events/eventBusTypes.js';\nimport { setIntl } from './utils/intlUtils.js';\nimport { loadHAA } from '../dynamic-imports/dynamic-imports.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// Dayjs is a date library similar to moment, but that allows you to compose how much functionality you need. Here we\n// add the ability to add strings in the format of a given locale.\ndayjs.extend(LocalizedFormat);\nclass Chat {\n    /**\n     * Create new Carbon AI chat instance.\n     *\n     * @param publicConfigProvided The public config provided by the user.\n     * @param customHostElement The host element into which to render the widget. This is provided in the original public\n     * config from the host page.\n     * @param additionalChatParametersProvided An object with values important to Carbon AI chat that are separate from the\n     * external configs\n     */\n    constructor(publicConfigProvided, customHostElement, additionalChatParametersProvided) {\n        if (publicConfigProvided?.debug) {\n            consoleDebug(\"Constructed chat widget\", publicConfigProvided);\n        }\n        // Make a clone of the public config so we don't get messed up if someone modifies this object outside of our\n        // control. Also add in any default values that might be missing.\n        const publicConfig = merge({}, DEFAULT_PUBLIC_CONFIG, publicConfigProvided);\n        this.additionalChatParameters = additionalChatParametersProvided || {};\n        // Note that because redux objects are immutable (which we ensured with the clone above), we can set the public\n        // and publicOriginal values to the same object. If the public value is changed, a new object will be created.\n        this.appConfig = {\n            public: publicConfig,\n        };\n        this.customHostElement = customHostElement;\n    }\n    /**\n     * Starts the chat widget. This will return a promise that resolves to an instance of the started widget that can\n     * be used by the host page to interact with the widget.\n     */\n    async start() {\n        try {\n            const result = await this.startInternal();\n            return result.instance;\n        }\n        catch (error) {\n            consoleError(\"There was an error starting your chat\", error);\n            return null;\n        }\n    }\n    /**\n     * Starts the chat widget. This will return a promise that resolves to an instance of the started widget that can\n     * be used by the host page to interact with the widget. This internal version of the function also provides\n     * access to helper objects that were constructed at the same time as the chat instance.\n     */\n    async startInternal() {\n        // Check if integration has a service desk configured in the tooling. If they do, we will use it with\n        // connect_to_agent response_type.\n        const doesHaveServiceDesk = hasServiceDesk(this.appConfig);\n        this.serviceManager = await createServiceManager(this.appConfig, this.additionalChatParameters);\n        // Asynchronously load all of the various dependencies that the Carbon AI chat depends on.\n        const [languagePack, localePack, render, createHumanAgentService] = await Promise.all([\n            loadLanguagePack(this.serviceManager.store.getState().languagePack),\n            loadLocale(this.serviceManager.store.getState().locale),\n            Promise.resolve(this.additionalChatParameters.render),\n            doesHaveServiceDesk\n                ? loadHAA()\n                : Promise.resolve(null),\n        ]);\n        this.serviceManager.customHostElement = this.customHostElement;\n        if (createHumanAgentService) {\n            // We'll create the service now but we can't initialize it until we load the service desk information\n            // from the remote config.\n            this.serviceManager.humanAgentService = createHumanAgentService(this.serviceManager);\n        }\n        // Update Redux with new values for language, locale, and messages.\n        setIntl(this.serviceManager, localePack.name, languagePack);\n        // Tell dayjs to globally use the locale.\n        dayjs.locale(localePack);\n        // Here we render the application. If the tour or main window are supposed to be open then we will hydrate the\n        // chat if sessionHistory is enabled, or fetch the welcome node if it's disabled.\n        const reallyRenderAndReturnInstance = async () => {\n            // Render the React application.\n            await render({ serviceManager: this.serviceManager });\n            const initialState = this.serviceManager.store.getState();\n            const { wasLoadedFromBrowser } = initialState.persistedToBrowserStorage.launcherState;\n            const { targetViewState } = initialState;\n            const { openChatByDefault } = initialState.config.public;\n            if (targetViewState.mainWindow) {\n                // If the main window is supposed to be open (because openChatByDefault was set to true, or because the\n                // viewState, in session storage, said that the main window was previously open) then fire the open:window\n                // and view:change events, and try to change the view and hydrate the chat. The default event reason will be\n                // session_history.\n                let mainWindowOpenReason = MainWindowOpenReason.SESSION_HISTORY;\n                if (openChatByDefault && !wasLoadedFromBrowser) {\n                    // If openChatByDefault is true, and this is a new session, then the window:open reason will be\n                    // open_by_default and the view:change reason will be webChatDefault.\n                    mainWindowOpenReason = MainWindowOpenReason.OPEN_BY_DEFAULT;\n                }\n                await this.serviceManager.actions.changeView(targetViewState, {\n                    mainWindowOpenReason,\n                });\n            }\n            else {\n                // If a tour and/or the launcher are supposed to be open, or nothing is supposed to be open, then only fire\n                // the view:change events and try to change the view.\n                const viewChangeReason = ViewChangeReason.WEB_CHAT_LOADED;\n                // If a tour is supposed to be open then try to hydrate the chat.\n                const tryHydrating = targetViewState.tour;\n                // If nothing is supposed to be open then force the view:change events to fire. Since the default viewState\n                // is all views closed, and the targetViewState is all views closed, changeView would see two equal\n                // viewStates and not bother trying to fire the events unless forced to.\n                const forceViewChange = isEqual(targetViewState, VIEW_STATE_ALL_CLOSED);\n                await this.serviceManager.actions.changeView(targetViewState, { viewChangeReason }, tryHydrating, forceViewChange);\n            }\n            // Lastly set the initialViewChangeComplete so that the launcher and other components can begin their\n            // animations if they're visible.\n            this.serviceManager.store.dispatch(actions.setInitialViewChangeComplete(true));\n            return this.serviceManager.instance;\n        };\n        // As part of the view change work a bug was exposed where someone calling openWindow, closeWindow, or\n        // toggleOpen, immediately after calling instance.render() (and without waiting for render to finish), would\n        // trigger viewChange to throw an error because it was in the middle of changing the view to set the view to the\n        // targetViewState and couldn't accept another view change request at that time. The solution is to force the\n        // instance.openWindow, instance.closeWindow, and instance.toggleOpen functions to wait for this renderPromise\n        // to complete before allowing them to try and trigger a view change. This can be removed when the deprecated\n        // window methods and events are removed.\n        const renderAndReturnInstance = () => {\n            const promise = reallyRenderAndReturnInstance();\n            this.serviceManager.renderPromise = promise;\n            return promise;\n        };\n        // Create the \"started\" instance of the widget.\n        this.serviceManager.instance = createChatInstance({\n            serviceManager: this.serviceManager,\n            callRender: renderAndReturnInstance,\n        });\n        return {\n            instance: this.serviceManager.instance,\n            serviceManager: this.serviceManager,\n        };\n    }\n}\n\nexport { Chat as default };\n","import { ChatActionsImpl } from './events/ChatActionsImpl.js';\nimport { EventBus } from './events/EventBus.js';\nimport { createCustomPanelManager } from './services/CustomPanelManager.js';\nimport { HistoryService } from './services/HistoryService.js';\nimport MessageService from './services/MessageService.js';\nimport { NamespaceService } from './services/NamespaceService.js';\nimport { ServiceManager } from './services/ServiceManager.js';\nimport { UserSessionStorageService } from './services/UserSessionStorageService.js';\nimport { doCreateStore } from './store/doCreateStore.js';\nimport { copyToSessionStorage, createHandleWindowTitle } from './store/subscriptions.js';\nimport './utils/constants.js';\nimport { setEnableDebugLog, setEnableDebugStackTracesLog } from './utils/miscUtils.js';\nimport { setIntl } from './utils/intlUtils.js';\nimport { WriteableElementName } from '../../types/instance/ChatInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains the code needed to bootstrap all the shared services in Carbon AI chat. Services are used to hold\n * functions that are used throughout the application that need access to the current instance of the Carbon AI chat.\n */\nasync function createServiceManager(appConfig, additionalChatParameters) {\n    const publicConfig = appConfig.public;\n    const serviceManager = new ServiceManager();\n    // Create all the services we will be using.\n    serviceManager.additionalChatParameters = additionalChatParameters;\n    serviceManager.namespace = new NamespaceService(publicConfig.namespace);\n    serviceManager.userSessionStorageService = new UserSessionStorageService(serviceManager);\n    serviceManager.actions = new ChatActionsImpl(serviceManager);\n    serviceManager.eventBus = new EventBus();\n    serviceManager.store = doCreateStore(appConfig, serviceManager);\n    serviceManager.historyService = new HistoryService(serviceManager);\n    serviceManager.messageService = new MessageService(serviceManager, publicConfig);\n    serviceManager.store.subscribe(copyToSessionStorage(serviceManager));\n    if (!publicConfig.disableWindowTitleChanges) {\n        serviceManager.store.subscribe(createHandleWindowTitle(serviceManager));\n    }\n    serviceManager.customPanelManager = createCustomPanelManager(serviceManager);\n    setIntl(serviceManager, serviceManager.store.getState().locale, serviceManager.store.getState().languagePack);\n    // Create all custom elements for Deb.\n    serviceManager.writeableElements = {\n        [WriteableElementName.AI_TOOLTIP_AFTER_DESCRIPTION_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.WELCOME_NODE_BEFORE_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.HEADER_BOTTOM_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.BEFORE_INPUT_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.HOME_SCREEN_HEADER_BOTTOM_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.HOME_SCREEN_AFTER_STARTERS_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.HOME_SCREEN_BEFORE_INPUT_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.CUSTOM_PANEL_ELEMENT]: document.createElement(\"div\"),\n    };\n    if (publicConfig.debug) {\n        setEnableDebugLog(true);\n    }\n    if (publicConfig.debugStackTraces) {\n        setEnableDebugStackTracesLog(true);\n    }\n    return serviceManager;\n}\n\nexport { createServiceManager };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The amount of time to delay after displaying \"New message\" in the window title before it changes to \"(n) Original\n// message\".\nconst UNREAD_COUNT_TITLE_TIME = 10000;\n/**\n * Copies persistedToBrowserStorage to the session history.\n */\nfunction copyToSessionStorage(serviceManager) {\n    let previousPersistedToBrowserStorage = serviceManager.store.getState().persistedToBrowserStorage;\n    return () => {\n        const { persistedToBrowserStorage } = serviceManager.store.getState();\n        const persistChatSession = previousPersistedToBrowserStorage !== persistedToBrowserStorage;\n        if (persistChatSession) {\n            previousPersistedToBrowserStorage = persistedToBrowserStorage;\n            serviceManager.userSessionStorageService.persistChatSession(persistedToBrowserStorage.chatState);\n            serviceManager.userSessionStorageService.persistLauncherSession(persistedToBrowserStorage.launcherState);\n        }\n    };\n}\n/**\n * This creates a subscription that listens for changes to unread live agent messages and updates the window title\n * as appropriate to show the user that messages are unread.\n */\nfunction createHandleWindowTitle(serviceManager) {\n    const { store } = serviceManager;\n    let originalTitle;\n    let changeTitleTimer;\n    let previousState = store.getState();\n    return () => {\n        const state = store.getState();\n        const { agentState } = store.getState();\n        const { numUnreadMessages } = agentState;\n        if (numUnreadMessages !== previousState.agentState.numUnreadMessages) {\n            if (!numUnreadMessages) {\n                // Nothing unread anymore so reset the window title.\n                clearTimeout(changeTitleTimer);\n                if (originalTitle) {\n                    window.document.title = originalTitle;\n                    originalTitle = null;\n                }\n            }\n            else {\n                // A new message has appeared so change the title to \"New Message\" and then set a timer to change it to a\n                // version that has \"(n)\" in it.\n                clearTimeout(changeTitleTimer);\n                if (!originalTitle) {\n                    originalTitle = window.document.title;\n                }\n                window.document.title = state.languagePack.agent_newMessage;\n                changeTitleTimer = setTimeout(() => {\n                    window.document.title = `(${numUnreadMessages}) ${originalTitle}`;\n                }, UNREAD_COUNT_TITLE_TIME);\n            }\n        }\n        previousState = state;\n    };\n}\n\nexport { copyToSessionStorage, createHandleWindowTitle };\n","import { DEFAULT_CUSTOM_PANEL_ID } from '../utils/constants.js';\nimport { createCustomPanelInstance } from './CustomPanelInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This function takes in the service manager to help create a custom panel manager. The panel manager is created\n * using a function instead of a class because a private property at runtime can still be accessible. Instead of\n * creating a private panels property we create the variable within the scope of the function.\n */\nfunction createCustomPanelManager(serviceManger) {\n    // A panels object holding all created panels. In the future if we ever support multiple panels, Deb would be able to\n    // populate this object.\n    const panels = {\n        [DEFAULT_CUSTOM_PANEL_ID]: createCustomPanelInstance(serviceManger),\n    };\n    return Object.freeze({\n        getPanel() {\n            return panels[DEFAULT_CUSTOM_PANEL_ID];\n        },\n    });\n}\n\nexport { createCustomPanelManager };\n","import React, { useRef, useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { AriaAnnouncerContext } from '../../contexts/AriaAnnouncerContext.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport { AriaAnnouncerComponent } from './AriaAnnouncerComponent.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is responsible for providing a context that gives access to the component we use to perform aria\n * announcements. It will also listen for changes in {@link AppState.announceMessage} and triggers the announcements\n * of that.\n */\nfunction AriaAnnouncerProvider(props) {\n    const intl = useIntl();\n    const { store } = useServiceManager();\n    const announcerRef = useRef();\n    const announcerFunction = useCallback((value) => {\n        // It's possible for some component to try to do an announcement before this component has actually been mounted\n        // (because it's later in the DOM). If that happens, then we need to delay the announcement a bit.\n        if (!announcerRef.current) {\n            setTimeout(() => announcerRef.current.announceValue(value));\n        }\n        else {\n            announcerRef.current.announceValue(value);\n        }\n    }, []);\n    const previousAnnounceMessageRef = useRef();\n    useEffect(() => {\n        // This effect will register a listener on the store that watches for changes in the announceMessage property\n        // and when it changes, it will issue an announcement request on the announcer component.\n        const unsubscribe = store.subscribe(() => {\n            const currentAnnounceMessage = store.getState().announceMessage;\n            if (currentAnnounceMessage !== previousAnnounceMessageRef.current) {\n                announcerFunction(currentAnnounceMessage);\n                previousAnnounceMessageRef.current = currentAnnounceMessage;\n            }\n        });\n        return unsubscribe;\n    }, [store, announcerFunction]);\n    return (React.createElement(AriaAnnouncerContext.Provider, { value: announcerFunction },\n        props.children,\n        React.createElement(AriaAnnouncerComponent, { intl: intl, ref: announcerRef })));\n}\n\nexport { AriaAnnouncerProvider };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Returns the aria-label string from the provided language pack for the launcher button based on the open and view\n * state.\n */\nfunction getLauncherButtonAriaLabel(languagePack, isLauncherHidden, isTourActive) {\n    if (isTourActive) {\n        return isLauncherHidden\n            ? languagePack.launcher_isTourOpen\n            : languagePack.launcher_isTourClosed;\n    }\n    return isLauncherHidden\n        ? languagePack.launcher_isOpen\n        : languagePack.launcher_isClosed;\n}\n\nexport { getLauncherButtonAriaLabel };\n","import AiLaunch from '@carbon/icons-react/es/AiLaunch.js';\nimport ArrowUpLeft from '@carbon/icons-react/es/ArrowUpLeft.js';\nimport ChatLaunch from '@carbon/icons-react/es/ChatLaunch.js';\nimport { Button } from '@carbon/react';\nimport cx from 'classnames';\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { useSelector } from 'react-redux';\nimport { doFocusRef } from '../../utils/domUtils.js';\nimport { getLauncherButtonAriaLabel } from './launcherUtils.js';\nimport { ButtonKindEnum } from '../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/* eslint-disable react/no-danger */\nfunction Launcher(props, ref) {\n    const { onToggleOpen, languagePack, unreadAgentCount, intl, serviceManager, showUnreadIndicator, className, tabIndex, launcherHidden, activeTour, } = props;\n    const launcherAvatarURL = useSelector((state) => state.theme.useAITheme\n        ? undefined\n        : state.launcher.config.desktop.avatar_url_override);\n    const useAITheme = useSelector((state) => state.theme.useAITheme);\n    /**\n     * A React ref to the button in this component.\n     */\n    const buttonRef = React.createRef();\n    useImperativeHandle(ref, () => ({\n        /**\n         * This is a function that will request that focus be moved to the button. This request for focus is normally\n         * triggered within App.tsx.\n         */\n        requestFocus: () => {\n            doFocusRef(buttonRef);\n        },\n    }));\n    let ariaLabel = getLauncherButtonAriaLabel(languagePack, launcherHidden, activeTour);\n    if (unreadAgentCount !== 0) {\n        ariaLabel += `. ${intl.formatMessage({ id: \"icon_ariaUnreadMessages\" }, { count: unreadAgentCount })}`;\n    }\n    let launcherAvatar = useAITheme ? (React.createElement(AiLaunch, { size: 24, className: \"WACLauncher_svg\" })) : (React.createElement(ChatLaunch, { size: 24, className: \"WACLauncher__svg\" }));\n    if (launcherAvatarURL) {\n        launcherAvatar = (React.createElement(\"img\", { className: \"WACLauncher__Avatar\", src: launcherAvatarURL, alt: \"\", \"aria-hidden\": true }));\n    }\n    /**\n     * Renders the corresponding variation of the launcher button.\n     */\n    return (React.createElement(\"div\", { className: cx(\"WACLauncher__ButtonContainer\", \"WACLauncher__ButtonContainer--round\", className, {\n            \"WACLauncher__ButtonContainer--hidden\": launcherHidden,\n        }) },\n        React.createElement(Button, { \"aria-label\": ariaLabel, className: cx(\"WACLauncher__Button\", {\n                WACLauncher__TourButton: activeTour,\n            }), id: `WACLauncher__Button${serviceManager.namespace.suffix}`, kind: ButtonKindEnum.PRIMARY, type: \"button\", onClick: onToggleOpen, ref: buttonRef, tabIndex: tabIndex },\n            activeTour ? (React.createElement(ArrowUpLeft, { size: 24, className: \"WACLauncher__svg\" })) : (launcherAvatar),\n            (unreadAgentCount !== 0 || showUnreadIndicator) && (React.createElement(\"div\", { className: \"WAC__countIndicator\" }, unreadAgentCount !== 0 ? unreadAgentCount : \"\")))));\n}\nconst LauncherExport = forwardRef(Launcher);\n\nexport { LauncherExport as Launcher };\n","import Close from '@carbon/icons-react/es/Close.js';\nimport { Tag } from '@carbon/react';\nimport cx from 'classnames';\nimport React from 'react';\nimport { Launcher as LauncherExport } from './Launcher.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction LauncherComplex(props) {\n    const { serviceManager, languagePack, intl, launcherConfig, launcherComplexRef, launcherRef, onOpen, onMinimize, unreadAgentCount, showUnreadIndicator, desktopLauncherIsExpanded, launcherHidden, activeTour, className, } = props;\n    const { launcher_desktopGreeting, launcher_closeButton, launcher_ariaIsExpanded, } = languagePack;\n    function getLauncherContent() {\n        // Use the title from the launcher config.\n        if (launcherConfig.desktop.title) {\n            return launcherConfig.desktop.title;\n        }\n        // If there is nothing set in the launcher config then use our own default.\n        return launcher_desktopGreeting;\n    }\n    /**\n     * Renders the complex variation of the launcher.\n     */\n    return (React.createElement(\"div\", { className: cx(\"WACLauncher__ButtonContainer\", \"WACLauncherComplex__Container\", className, {\n            \"WACLauncher__ButtonContainer--hidden\": launcherHidden,\n        }), ref: launcherComplexRef },\n        React.createElement(\"button\", { className: \"WACLauncherComplex__ContentButton\", type: \"button\", onClick: onOpen, disabled: !desktopLauncherIsExpanded },\n            React.createElement(\"div\", { className: cx(\"WACWidget__textEllipsis\", {\n                    WACLauncherComplex__Text: !launcherHidden,\n                }) }, getLauncherContent())),\n        React.createElement(LauncherExport, { serviceManager: serviceManager, languagePack: languagePack, intl: intl, ref: launcherRef, onToggleOpen: onOpen, className: \"WACLauncherComplex__SmallLauncherContainer\", unreadAgentCount: unreadAgentCount, showUnreadIndicator: showUnreadIndicator, launcherHidden: launcherHidden, activeTour: activeTour }),\n        React.createElement(Tag, { className: \"WACLauncher__CloseButton\", \"aria-label\": launcher_ariaIsExpanded, onClick: onMinimize, disabled: !desktopLauncherIsExpanded },\n            React.createElement(\"div\", { className: \"WACLauncher__CloseButtonInnerWrapper\" },\n                React.createElement(Close, { className: \"WACLauncher__CloseButtonIcon\" }),\n                launcher_closeButton))));\n}\n\nexport { LauncherComplex };\n","import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { useOnMount } from '../../hooks/useOnMount.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport actions from '../../store/actions.js';\nimport { BOUNCING_ANIMATION_TIMEOUTS } from '../../../../types/config/LauncherConfig.js';\nimport { Launcher as LauncherExport } from './Launcher.js';\nimport { LauncherComplex } from './LauncherComplex.js';\nimport { LauncherType } from '../../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The amount of time it takes the desktop launcher to minimize.\nconst TIME_FOR_MINIMIZE_ANIMATION = 400;\n// The amount of time it takes the launcher to bounce.\nconst TIME_FOR_BOUNCE_ANIMATION = 500;\nconst LauncherDesktopContainer = (props) => {\n    const { launcherRef, onDoToggle, requestFocus, launcherHidden, activeTour } = props;\n    const serviceManager = useServiceManager();\n    const languagePack = useLanguagePack();\n    const intl = useIntl();\n    const browserLauncherState = useSelector((state) => state.persistedToBrowserStorage.launcherState);\n    const { desktopLauncherWasMinimized, desktopLauncherIsExpanded, bounceTurn, showUnreadIndicator, viewState, } = browserLauncherState;\n    const launcherState = useSelector((state) => state.launcher);\n    const launcherConfig = launcherState.config;\n    const { time_to_expand, new_expand_time } = launcherConfig.desktop;\n    const isExpandedLauncherEnabled = launcherConfig.desktop.is_on;\n    const unreadAgentCount = useSelector((state) => state.agentState.numUnreadMessages);\n    const [smallLauncherClassName, setSmallLauncherClassName] = useState(\"\");\n    const [complexLauncherClassName, setComplexLauncherClassName] = useState(\"\");\n    const launcherComplexRef = useRef();\n    const launcherHiddenRef = useRef();\n    launcherHiddenRef.current = launcherHidden;\n    const animateOnceVisible = useRef(false);\n    const bounceTurnRef = useRef();\n    bounceTurnRef.current = bounceTurn;\n    const animationStartTimerRef = useRef();\n    const animationFinishedTimerRef = useRef();\n    const firstBounceAnimationStartTimerRef = useRef();\n    const firstBounceAnimationFinishedTimerRef = useRef();\n    const secondBounceAnimationStartTimerRef = useRef();\n    const secondBounceAnimationFinishedTimerRef = useRef();\n    /**\n     * Measure the height of the complex launcher and set it as a css variable so that the expand animation can move the\n     * greeting message the right distance.\n     */\n    const determineLauncherHeight = useCallback(() => {\n        // In order to move the small launcher up a dynamic distance depending on the amount of content in the launcher we\n        // need to measure the height of the launcher and use that as a variable within the launcher expanding animation.\n        const expandedLauncherHeight = `${launcherComplexRef.current?.offsetHeight}px`;\n        if (launcherComplexRef.current?.style?.setProperty) {\n            launcherComplexRef.current.style.setProperty(\"--cds-chat-LAUNCHER-desktop-expanded-height\", expandedLauncherHeight);\n        }\n    }, []);\n    /**\n     * If the launcher isn't open then expand the launcher.\n     */\n    const startExpandLauncher = useCallback(() => {\n        // Because these timeouts for the expand animation are triggered within useOnMount the value for launcherHidden will\n        // be the same as its initial value when this component mounted and this useOnMount function was created. In order\n        // to check against the up-to-date value we need to keep a ref up to date that stores the new value. This works\n        // because the pointer to the ref existed when the useOnMount function was created, then the value of the\n        // ref.current has been updated on each render to match the current value. If we tried to use an object to keep\n        // track of the current value instead of a ref then a new object with a different pointer would be created each\n        // render, and this useOnMount function would only be aware of the object that existed on the first render.\n        // We are no longer checking if the launcher has been minimized here since our instance methods are supposed to\n        // allow the user to pop up a new greeting message even if one has already been minimized.\n        if (!launcherHiddenRef.current) {\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"desktopLauncherIsExpanded\", true));\n            // Determine the height of the complex launcher.\n            determineLauncherHeight();\n            // Add the className for the intro animation.\n            setComplexLauncherClassName(\"WACLauncherComplex__Container--introAnimation\");\n        }\n    }, [determineLauncherHeight, serviceManager.store]);\n    /**\n     * Set two timers, one to begin to expand animation on the launcher, the other to fire an event when the expand\n     * animation finishes.\n     */\n    const setExpandAnimationTimers = useCallback(() => {\n        // Timer to switch to launcherComplex which will trigger an expand animation and allow focus on the content button and\n        // close button.\n        animationStartTimerRef.current = setTimeout(() => {\n            startExpandLauncher();\n        }, time_to_expand);\n    }, [time_to_expand, startExpandLauncher]);\n    /**\n     * Clear the existing expand animation timers.\n     */\n    const clearExpandAnimationTimers = useCallback(() => {\n        clearTimeout(animationStartTimerRef.current);\n        clearTimeout(animationFinishedTimerRef.current);\n    }, []);\n    /**\n     * If the launcher isn't open then bounce the launcher.\n     */\n    const startBounceAnimation = useCallback(() => {\n        if (!launcherHiddenRef.current) {\n            // Add the bounce animation class to the launcher.\n            setSmallLauncherClassName(\"WACLauncher__ButtonContainer--bounceAnimation\");\n        }\n    }, []);\n    /**\n     * Once the launcher has finished bouncing send an event and increment the bounce turn so the user doesn't see that\n     * same bounce again on the next page change or reload.\n     */\n    const finishBounceAnimation = useCallback(() => {\n        if (!launcherHiddenRef.current) {\n            // Change the launcher animation class from bounce to noAnimation.\n            setSmallLauncherClassName(\"WACLauncher__ButtonContainer--noAnimation\");\n            // Increment the bounce turn counter, so we know where to pick up from if the page is reloaded/changed.\n            bounceTurnRef.current++;\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"bounceTurn\", bounceTurnRef.current));\n        }\n    }, [serviceManager.store]);\n    /**\n     * Start the timers to show the bounce animation on the launcher and to send a track event when the animation\n     * finishes. If the user hasn't seen any bounce animations yet then 4 timers are started, one set is responsible for a\n     * bounce at 15s, the next set will be responsible for a bounce 60s later. If the user has already seen the bounce at\n     * 15s, and this is the next page load, then timers are only needed for a bounce animation 60s from now.\n     */\n    const setBounceAnimationTimers = useCallback(() => {\n        if (bounceTurnRef.current === 1) {\n            // If there have not been any bounce animations yet then set a timer for 15s from now for the first bounce.\n            firstBounceAnimationStartTimerRef.current = setTimeout(() => {\n                startBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[0]);\n            // After the first bounce is done remove the animation className and send a tracking event.\n            firstBounceAnimationFinishedTimerRef.current = setTimeout(() => {\n                finishBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[0] + TIME_FOR_BOUNCE_ANIMATION);\n            // Set another timer for 60s after the first bounce has completed to show a second bounce.\n            secondBounceAnimationStartTimerRef.current = setTimeout(() => {\n                startBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[0] + BOUNCING_ANIMATION_TIMEOUTS[1]);\n            // After the second bounce is done remove the animation className and send a tracking event.\n            secondBounceAnimationFinishedTimerRef.current = setTimeout(() => {\n                finishBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[0] + BOUNCING_ANIMATION_TIMEOUTS[1] + TIME_FOR_BOUNCE_ANIMATION);\n        }\n        else if (bounceTurnRef.current === 2) {\n            // If there has already been a bounce animation then set a timer for 60s from now for the second bounce.\n            secondBounceAnimationStartTimerRef.current = setTimeout(() => {\n                startBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[1]);\n            // After the second bounce is done remove the animation className and send a tracking event.\n            secondBounceAnimationFinishedTimerRef.current = setTimeout(() => {\n                finishBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[1] + TIME_FOR_BOUNCE_ANIMATION);\n        }\n    }, [finishBounceAnimation, startBounceAnimation]);\n    /**\n     * Clear the existing bounce animation timers.\n     */\n    const clearBounceAnimationTimers = useCallback(() => {\n        clearTimeout(firstBounceAnimationStartTimerRef.current);\n        clearTimeout(firstBounceAnimationFinishedTimerRef.current);\n        clearTimeout(secondBounceAnimationStartTimerRef.current);\n        clearTimeout(secondBounceAnimationFinishedTimerRef.current);\n    }, []);\n    /**\n     * Clear the expand and bounce timers and set the launcher state to minimized and bounce turn 3. This way if the page\n     * is reloaded the launcher will behave as if it has already been opened and won't try and show a greeting.\n     */\n    const setDefaultLauncherState = useCallback(() => {\n        // Clear to expand timers and set the launcher to minimized so that it will stay minimized on page change/reload.\n        clearExpandAnimationTimers();\n        serviceManager.store.dispatch(actions.setLauncherMinimized());\n        // Clear the bounce timers and set the bounce turn to 3 so that no more bounces will occur after page\n        // change/reload.\n        clearBounceAnimationTimers();\n        serviceManager.store.dispatch(actions.setLauncherProperty(\"bounceTurn\", 3));\n        // If the launcher was planning on animating once visible then we should no longer do that.\n        animateOnceVisible.current = false;\n        setSmallLauncherClassName(\"WACLauncher__ButtonContainer--noAnimation\");\n    }, [\n        clearBounceAnimationTimers,\n        clearExpandAnimationTimers,\n        serviceManager.store,\n    ]);\n    useOnMount(() => {\n        if (desktopLauncherIsExpanded) {\n            // If the launcher is already expanded then it must have been expanded on a previous page load so a simpler\n            // animation should be shown.\n            // Because of the view change work all views now start hidden. If we try to run determineLauncherHeight while the\n            // launcher is hidden we would get incorrect results since LauncherComplex changes it's height by adding and\n            // removing classNames, when the launcher is visible, that effect the size of the text. We also need to wait to\n            // add the animation class until the launcher is visible, otherwise the animation will start before the user can\n            // see the launcher. For these reasons we simply set a ref to true that is used in combination with\n            // viewState.launcher lower down to appropriately calculate the height and add the className once the launcher is\n            // actually visible.\n            animateOnceVisible.current = true;\n        }\n        else if (!desktopLauncherWasMinimized && isExpandedLauncherEnabled) {\n            // If the launcher hasn't been minimized and isn't expanded then start the timers to expand the launcher.\n            setExpandAnimationTimers();\n            return () => {\n                clearExpandAnimationTimers();\n            };\n        }\n        else if (desktopLauncherWasMinimized && bounceTurn !== 3) {\n            // If the launcher was previously minimized, and we haven't preformed the bounce animation twice then we want to\n            // continue the bounce animations on whatever step we were on.\n            setBounceAnimationTimers();\n            return () => {\n                clearBounceAnimationTimers();\n            };\n        }\n        return undefined;\n    });\n    // If the launcher is now visible, and we intended to show a simple animation when the launcher mounted, now is the time\n    // to do it since the user can now see the launcher. This will not run again until the page is reloaded since we\n    // currently don't unmount the launcher when its not visible, instead we just hide it with css.\n    useEffect(() => {\n        if (viewState.launcher && animateOnceVisible.current) {\n            // Determine the height of the complex launcher.\n            determineLauncherHeight();\n            // Add the className for the simple intro animation.\n            setComplexLauncherClassName(\"WACLauncherComplex__Container--simpleAnimation\");\n            animateOnceVisible.current = false;\n        }\n    }, [determineLauncherHeight, viewState.launcher]);\n    // If the main window or tour have been opened then clear all timers and set the launcher state as if it had been\n    // clicked open. This is to protect against scenarios where the main window or tour are opened using other methods\n    // besides clicking on the launcher.\n    useEffect(() => {\n        if (viewState.mainWindow || viewState.tour) {\n            // Clear timers and update launcher state so that no more greeting messages or bounces occur.\n            setDefaultLauncherState();\n        }\n    }, [viewState, setDefaultLauncherState]);\n    // If the launcher time_to_expand changes then we need to clear the existing timers and start new ones with the new\n    // time.\n    useEffect(() => {\n        if (new_expand_time) {\n            // End any bounce animation timers that may have been in progress, but do not reset the bounce turns counter.\n            // Instead, the user will continue on whatever bounce turn they left off on (15s or 60s) after they've minimized\n            // the new greeting message and refreshed the page.\n            clearBounceAnimationTimers();\n            clearExpandAnimationTimers();\n            setExpandAnimationTimers();\n            serviceManager.store.dispatch(actions.setLauncherConfigProperty(\"new_expand_time\", false, LauncherType.DESKTOP));\n        }\n    }, [\n        animationFinishedTimerRef,\n        animationStartTimerRef,\n        new_expand_time,\n        setExpandAnimationTimers,\n        clearExpandAnimationTimers,\n        clearBounceAnimationTimers,\n        serviceManager.store,\n    ]);\n    // If the launcher title has changed then we need to recalculate the height and update the styles.\n    const prevLauncherTitle = usePrevious(launcherConfig.desktop.title);\n    useEffect(() => {\n        // The check at the end that makes sure one of the two values is truthy has been added to stop this from running\n        // when prevLauncherTitle was undefined and launcherConfig.desktop.title was an empty string.\n        if (prevLauncherTitle !== launcherConfig.desktop.title &&\n            (launcherConfig.desktop.title || prevLauncherTitle)) {\n            determineLauncherHeight();\n        }\n    }, [determineLauncherHeight, launcherConfig, prevLauncherTitle]);\n    const onMinimize = useCallback(() => {\n        setComplexLauncherClassName(\"WACLauncherComplex__Container--closeAnimation\");\n        // Wait for the minimize animation to finish before switching back to the original launcher.\n        setTimeout(() => {\n            // Remove the animation class from the small launcher so that it doesn't try and animate in when we make this\n            // switch.\n            setSmallLauncherClassName(\"WACLauncher__ButtonContainer--noAnimation\");\n            serviceManager.store.dispatch(actions.setLauncherMinimized());\n            // Let the component re-render before moving focus.\n            setTimeout(requestFocus);\n        }, TIME_FOR_MINIMIZE_ANIMATION);\n    }, [requestFocus, serviceManager.store]);\n    const onOpen = useCallback(() => {\n        // Clear timers and update launcher state so that no more greeting messages or bounces occur.\n        setDefaultLauncherState();\n        onDoToggle();\n    }, [onDoToggle, setDefaultLauncherState]);\n    let launcher;\n    if (desktopLauncherIsExpanded) {\n        launcher = (React.createElement(LauncherComplex, { serviceManager: serviceManager, languagePack: languagePack, intl: intl, launcherComplexRef: launcherComplexRef, launcherRef: launcherRef, launcherConfig: launcherConfig, onOpen: onOpen, onMinimize: onMinimize, unreadAgentCount: unreadAgentCount, showUnreadIndicator: showUnreadIndicator, desktopLauncherIsExpanded: desktopLauncherIsExpanded, launcherHidden: launcherHidden, activeTour: activeTour, className: complexLauncherClassName }));\n    }\n    else {\n        launcher = (React.createElement(LauncherExport, { serviceManager: serviceManager, languagePack: languagePack, intl: intl, ref: launcherRef, onToggleOpen: onOpen, unreadAgentCount: unreadAgentCount, showUnreadIndicator: showUnreadIndicator, className: smallLauncherClassName, launcherHidden: launcherHidden, activeTour: activeTour }));\n    }\n    return launcher;\n};\n\nexport { LauncherDesktopContainer };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Triggers an animation event by temporarily adding the given classname to the given element. When the animation is\n * finished, the classname will be removed.\n *\n * The end of the animation can be determined a number of ways. If no additional arguments are specified, an\n * animation listener is added to the event and as soon as the first animation is finished, that counts as the end\n * of animations. You can also specify the name of an animation that will trigger the end of the animation. This can\n * be useful if you have multiple animations that run in sequence. Or lastly, you can simply specify a time duration.\n *\n * Keep in mind that the animation events bubble so if there are animations running on child elements, those will\n * trigger the events on this element.\n *\n * @param element This element to trigger the animation on.\n * @param className The name of the class to add and later remove from the element.\n * @param endAnimationNameOrDelay The name of an animation to indicate when the animation is finished or a number\n * indicating the duration in milliseconds to wait before ending the animation.\n * @param endAnimationCallback An optional callback that can be called when the animation is finished.\n */\nfunction animateWithClass(element, className, endAnimationNameOrDelay, endAnimationCallback) {\n    if (element) {\n        element.classList.add(className);\n        if (typeof endAnimationNameOrDelay === \"number\") {\n            setTimeout(() => {\n                element.classList.remove(className);\n                if (endAnimationCallback) {\n                    endAnimationCallback();\n                }\n            }, endAnimationNameOrDelay);\n        }\n        else {\n            const listener = (event) => {\n                if (!endAnimationNameOrDelay ||\n                    event.animationName === endAnimationNameOrDelay) {\n                    element.removeEventListener(\"animationend\", listener);\n                    element.removeEventListener(\"animationcancel\", listener);\n                    element.classList.remove(className);\n                    if (endAnimationCallback) {\n                        endAnimationCallback();\n                    }\n                }\n            };\n            element.addEventListener(\"animationend\", listener);\n            element.addEventListener(\"animationcancel\", listener);\n        }\n    }\n}\n/**\n * Uses the provided element to play the given animation after each amount of time in the given timeouts array.\n *\n * @param element The element to apply the provided animation class to.\n * @param animation The animation class to play after the provided number of timeouts.\n * @param timeouts An array of timeouts that determines how long to wait before playing the animation. The first\n * timeout will be set immediately and a listener will wait for the animation to end before moving to the next timeout.\n * @param options Options with helper functions that fire throughout the lifecycle of the recurring animations.\n *\n * @returns endAnimation A function that will stop playing the provided animation when called.\n */\nfunction setAnimationTimeouts(element, animation, timeouts, options) {\n    const { startingIndex, beforeAll, afterAll, beforeEach, afterEach } = options;\n    // The index of the current timeout value to start off on in the array.\n    let index = startingIndex || 0;\n    // Determines if the animation should be prevented from playing.\n    let terminate = false;\n    // The ID of the setTimeout function.\n    let timeoutID = null;\n    /**\n     * This will recursively play the provided animation class on the provided element after the amount of time specified\n     * in the timeouts array.\n     */\n    function playAnimation() {\n        // Call beforeAll immediately after this function is called.\n        if (beforeAll && index === 0) {\n            beforeAll();\n        }\n        // If the index equals the total number of values in the array, we are outside the scope of the array and have\n        // completed the animations.\n        const isComplete = index === timeouts.length;\n        if (!isComplete && !terminate) {\n            // Capture the timeout ID so we can clear it when needed.\n            timeoutID = setTimeout(setAnimationListener, timeouts[index]);\n        }\n        else if (isComplete && afterAll) {\n            afterAll();\n        }\n    }\n    /**\n     * Handles replaying the animation on the element using the next timeout in the array and resetting the element\n     * to it's original state to prepare for the next animation.\n     */\n    function replayAnimation() {\n        if (afterEach) {\n            afterEach();\n        }\n        // Move onto the next timeout in the array.\n        index++;\n        // Remove this event listener so that it doesn't get fired again.\n        element.removeEventListener(\"animationend\", replayAnimation);\n        // Remove the animation class since it has ended.\n        element.classList.remove(animation);\n        // Attempt to replay the animation.\n        playAnimation();\n    }\n    /**\n     * Handles playing and replaying the animation on the provided element.\n     */\n    function setAnimationListener() {\n        if (beforeEach) {\n            beforeEach();\n        }\n        // Begin the process to play the animation.\n        element.addEventListener(\"animationend\", replayAnimation);\n        element.classList.add(animation);\n    }\n    playAnimation();\n    /**\n     * The callback function that will stop the recurring animation.\n     */\n    return () => {\n        // Prevent the animation from playing/replaying.\n        terminate = true;\n        clearTimeout(timeoutID);\n        // Remove the animation class in case it's still applied and the event listener.\n        element.classList.remove(animation);\n        element.removeEventListener(\"animationend\", replayAnimation);\n    };\n}\n\nexport { animateWithClass, setAnimationTimeouts };\n","import ArrowUpLeft from '@carbon/icons-react/es/ArrowUpLeft.js';\nimport ChatLaunch from '@carbon/icons-react/es/ChatLaunch.js';\nimport { Button } from '@carbon/react';\nimport cx from 'classnames';\nimport React, { forwardRef, useState, useRef, useImperativeHandle, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useAriaAnnouncer } from '../../hooks/useAriaAnnouncer.js';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { animateWithClass } from '../../utils/animationUtils.js';\nimport { IS_MOBILE } from '../../utils/browserUtils.js';\nimport { doFocusRef } from '../../utils/domUtils.js';\nimport { getLauncherButtonAriaLabel } from './launcherUtils.js';\nimport { ButtonKindEnum } from '../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst MAX_EXTENDED_LAUNCHER_WIDTH = 400;\n/**\n * A new mobile specific launcher experiment that extends its width to the left and transitions between home screen\n * starters with a fade animation.\n */\nfunction LauncherExtended(props, ref) {\n    const { unreadAgentCount, showUnreadIndicator, serviceManager, launcherConfig, isExtended, playExtendAnimation, onToggleOpen, onSwipeRight, onReduceEnd, className, launcherHidden, activeTour, } = props;\n    const ariaAnnouncer = useAriaAnnouncer();\n    const languagePack = useLanguagePack();\n    const intl = useIntl();\n    const launcherAvatarURL = useSelector((state) => state.theme.useAITheme\n        ? undefined\n        : state.launcher.config.mobile.avatar_url_override);\n    const [animateExtendedState, setAnimateExtendedState] = useState(playExtendAnimation);\n    const [showGreetingMessage, setShowGreetingMessage] = useState(false);\n    const prevIsExtended = usePrevious(isExtended);\n    const buttonRef = useRef();\n    const extendedContainerRef = useRef();\n    const greetingMessageRef = useRef();\n    const textHolderRef = useRef();\n    // The touch coordinates captured when the user touched the launcher.\n    const touchStartRef = useRef({\n        touchStartX: null,\n        touchStartY: null,\n    });\n    const shouldReduceExtendedLauncher = !isExtended && prevIsExtended;\n    const extendWithAnimation = isExtended && animateExtendedState;\n    const extendWithoutAnimation = isExtended && !animateExtendedState;\n    const launcherGreetingMessage = launcherConfig.mobile.title || languagePack.launcher_mobileGreeting;\n    let ariaLabel = getLauncherButtonAriaLabel(languagePack, launcherHidden, activeTour);\n    if (unreadAgentCount !== 0) {\n        ariaLabel += `. ${intl.formatMessage({ id: \"icon_ariaUnreadMessages\" }, { count: unreadAgentCount })}`;\n    }\n    let launcherAvatar = React.createElement(ChatLaunch, { size: 24, className: \"WACLauncher__svg\" });\n    if (launcherAvatarURL) {\n        // eslint-disable-next-line jsx-a11y/alt-text\n        launcherAvatar = (React.createElement(\"img\", { className: \"WACLauncher__Avatar\", src: launcherAvatarURL, \"aria-hidden\": true, alt: \"\" }));\n    }\n    useImperativeHandle(ref, () => ({\n        requestFocus: () => {\n            doFocusRef(buttonRef);\n        },\n        launcherContainerElement: () => {\n            return extendedContainerRef.current;\n        },\n    }));\n    // This effect handles calculating the launcher's extended width. If the greeting message ends up changing, this\n    // should also re-calculate it.\n    useEffect(() => {\n        const textHolderElement = textHolderRef.current;\n        const greetingMessageElement = greetingMessageRef.current;\n        const extendedContainerElement = extendedContainerRef.current;\n        calculateAndSetMaxExtendedLauncherWidth(textHolderElement, greetingMessageElement, extendedContainerElement);\n    }, [ariaAnnouncer, extendWithoutAnimation, launcherGreetingMessage]);\n    // This handles displaying the greeting message and setting up the touch event listeners to reduce the extended\n    // launcher when in the extended state. If the launcher is reducing, the greeting message will be hidden and the\n    // launcher state will be update in session storage to reflect the reduced state.\n    useEffect(() => {\n        if (isExtended) {\n            // Fade in and announce the greeting message if the \"extend\" animation is played.\n            if (animateExtendedState) {\n                doFadeAnimationForElements({ fadeInElement: greetingMessageRef.current, fadeInTime: 300 }, () => {\n                    setAnimateExtendedState(false);\n                });\n            }\n            else {\n                // Only un-hide the greeting message.\n                setShowGreetingMessage(true);\n            }\n            // If the launcher is prevented from reducing, there's no need to setup touch listeners.\n            const buttonEl = buttonRef.current;\n            // Calls a function that will fire a callback function when it detects the user has swiped right on the launcher.\n            const handleTouchMove = (event) => {\n                checkIfUserSwipedRight(event.touches[0], touchStartRef.current, onSwipeRight);\n            };\n            // Capture the coordinates the user has touched the launcher on and add a touchmove listener to determine if the\n            // user swiped right on the launcher to close.\n            const handleTouchStart = (event) => {\n                const { clientX, clientY } = event.touches[0];\n                const touchStart = touchStartRef.current;\n                touchStart.touchStartX = clientX;\n                touchStart.touchStartY = clientY;\n                buttonRef.current.addEventListener(\"touchmove\", handleTouchMove);\n            };\n            buttonEl.addEventListener(\"touchstart\", handleTouchStart);\n            return () => {\n                buttonEl.removeEventListener(\"touchmove\", handleTouchMove);\n                buttonEl.removeEventListener(\"touchstart\", handleTouchStart);\n            };\n        }\n        else if (shouldReduceExtendedLauncher) {\n            // An animationend event handler that's called once the event reduce animation has ended.\n            const reduceAnimationEndListener = () => {\n                onReduceEnd();\n                // Once the \"reduce\" animation has finished reset the extended state flag so that the fade up animation for the\n                // text will play if another greeting message is triggered.\n                setAnimateExtendedState(true);\n                extendedContainerRef.current.removeEventListener(\"animationend\", reduceAnimationEndListener);\n            };\n            // Update the extendLauncher flag to false so that the user doesn't see the launcher animation on the next page\n            // load.\n            extendedContainerRef.current.addEventListener(\"animationend\", reduceAnimationEndListener);\n            // Fade out the greeting message.\n            doFadeAnimationForElements({\n                fadeOutElement: greetingMessageRef.current,\n            });\n        }\n        return undefined;\n    }, [\n        animateExtendedState,\n        ariaAnnouncer,\n        isExtended,\n        launcherGreetingMessage,\n        onReduceEnd,\n        onSwipeRight,\n        shouldReduceExtendedLauncher,\n    ]);\n    return (React.createElement(\"div\", { className: cx(\"WACLauncher__ButtonContainer WACLauncher__ButtonContainer--round WACLauncherExtended__Container\", className, {\n            \"WACLauncher__ButtonContainer--hidden\": launcherHidden,\n            \"WACLauncherExtended__Button--extended\": extendWithoutAnimation,\n            \"WACLauncherExtended__Button--extendedAnimation\": extendWithAnimation,\n            \"WACLauncherExtended__Button--reducedAnimation\": shouldReduceExtendedLauncher,\n        }), ref: extendedContainerRef },\n        React.createElement(Button, { \"aria-label\": ariaLabel, className: cx(\"WACLauncher__Button\", \"WACLauncherExtended__Button\", {\n                WACLauncher__TourButton: activeTour,\n            }), kind: activeTour ? ButtonKindEnum.GHOST : ButtonKindEnum.PRIMARY, type: \"button\", ref: buttonRef, onClick: onToggleOpen },\n            React.createElement(\"div\", { className: \"WACLauncherExtended__WrapperContainer\" },\n                React.createElement(\"div\", { className: \"WACLauncherExtended__Wrapper\" },\n                    React.createElement(\"div\", { className: \"WACLauncherExtended__TextHolder\", ref: textHolderRef },\n                        React.createElement(\"div\", { className: cx(\"WACLauncherExtended__Greeting\", {\n                                \"WACLauncherExtended__Element--hidden\": !showGreetingMessage,\n                            }), ref: greetingMessageRef },\n                            React.createElement(\"div\", { className: \"WACLauncherExtended__GreetingText\", \"aria-hidden\": !isExtended }, launcherGreetingMessage))),\n                    React.createElement(\"div\", { className: \"WACLauncher__IconHolder\", id: `WACLauncher__Button${serviceManager.namespace.suffix}` }, activeTour ? (React.createElement(ArrowUpLeft, { size: 24, className: \"WACLauncher__svg\" })) : (launcherAvatar)))),\n            (unreadAgentCount !== 0 || showUnreadIndicator) && (React.createElement(\"div\", { className: \"WAC__countIndicator\" }, unreadAgentCount !== 0 ? unreadAgentCount : \"\")))));\n}\n/**\n * This will do the math to determine the max-width in pixels the launcher is allowed to extend on a given device using\n * the provided elements and set the calculated width as a css variable.\n */\nfunction calculateAndSetMaxExtendedLauncherWidth(textHolderEl, greetingMessageEl, extendedContainerEl) {\n    // The number in pixels that don't make up the space the launcher text can fill up.\n    // 68px = 6px (left/right button border width) + 50px (launcher icon container) + 12px (text holder left padding)\n    const nonTextSpace = 68;\n    const maxLauncherExtendedWidth = getMaxLauncherExtendedWidth();\n    // The max-width in pixels the launcher text can take up if the launcher were to fully extend the devices' width.\n    // Add 12px to account for text holder container left padding.\n    const maxTextHolderWidth = maxLauncherExtendedWidth - nonTextSpace + 12;\n    // Set the text holder width and un-hide the greeting message element so that we can get the width of the greeting\n    // message text to help calculate how far the launcher should extend to fit the text.\n    textHolderEl.style.setProperty(\"width\", `${maxTextHolderWidth}px`);\n    // The width of the greeting message element is the max width minus the border width and left padding.\n    greetingMessageEl.style.setProperty(\"width\", `${maxTextHolderWidth - 12}px`);\n    greetingMessageEl.style.setProperty(\"display\", \"flex\");\n    const { clientWidth } = greetingMessageEl.querySelector(\".WACLauncherExtended__GreetingText\");\n    // We should add a pixel to compensate for lack of clientWidth precision. It's possible for 1 line of text to be\n    // rendered as 2 lines because HTML may render text with a precise width of 219.266 pixels, but clientWidth will\n    // return the floor value which would be just 219.\n    let launcherExtendedWidth = clientWidth + nonTextSpace + 1;\n    // Make sure the launcher width doesn't exceed the max width.\n    if (launcherExtendedWidth > MAX_EXTENDED_LAUNCHER_WIDTH) {\n        launcherExtendedWidth = MAX_EXTENDED_LAUNCHER_WIDTH;\n    }\n    // Remove temporary styles applied.\n    greetingMessageEl.removeAttribute(\"style\");\n    textHolderEl.removeAttribute(\"style\");\n    // Reduce the wrapper's extended width by 6 pixels to account for the launcher button's border width.\n    // setWrapperExtendedWidth(launcherExtendedWidth - 6);\n    // Set the extended width property to animate to.\n    extendedContainerEl.style.setProperty(\"--cds-chat--LAUNCHER-EXTENDED-width\", `${launcherExtendedWidth}px`);\n}\n/**\n * Performs the fade in/out animations on the provided elements.\n */\nfunction doFadeAnimationForElements({ fadeOutElement, fadeInElement, fadeInTime = 600, }, callback) {\n    if (fadeOutElement) {\n        fadeOutElement.classList.remove(\"WACLauncherExtended__Element--hidden\");\n        animateWithClass(fadeOutElement, \"WACLauncherExtended__Element--FadeOut\", 500, () => {\n            fadeOutElement.classList.add(\"WACLauncherExtended__Element--hidden\");\n            fadeOutElement.classList.remove(\"WACLauncherExtended__Element--FadeOut\");\n            // If there is no element provided to fade in, fire the callback function after the fade out animation is complete.\n            if (!fadeInElement && callback) {\n                callback();\n            }\n        });\n    }\n    if (fadeInElement) {\n        setTimeout(() => {\n            fadeInElement.classList.remove(\"WACLauncherExtended__Element--hidden\");\n            animateWithClass(fadeInElement, \"WACLauncherExtended__Element--FadeIn\", 600, () => {\n                fadeInElement.classList.remove(\"WACLauncherExtended__Element--FadeIn\");\n                // Fire the callback after the fade in animation has ended.\n                if (callback) {\n                    callback();\n                }\n            });\n        }, fadeInTime);\n    }\n}\n/**\n * Calculates if the user has swiped right on their screen over the extended launcher and fires a callback function if\n * this is the case.\n */\nfunction checkIfUserSwipedRight(touchList, touchStartCoordinates, callback) {\n    const { touchStartX, touchStartY } = touchStartCoordinates;\n    if (touchStartX === null || touchStartY === null) {\n        return;\n    }\n    // Capture the coordinates the user moved to.\n    const { clientX: touchEndX, clientY: touchEndY } = touchList;\n    // Get the difference between when the user began swiping and where they ended.\n    const differenceX = touchEndX - touchStartX;\n    const differenceY = touchEndY - touchStartY;\n    // If the absolute value of the X difference is greater than Y, this means the user swiped left or right on their\n    // device more than they swiped up or down.\n    if (Math.abs(differenceX) > Math.abs(differenceY)) {\n        // If the difference is greater than 0, this means the user swiped right, and we should fire the callback function.\n        if (differenceX > 0) {\n            callback();\n        }\n    }\n    // Reset the starting coordinates\n    touchStartCoordinates.touchStartX = null;\n    touchStartCoordinates.touchStartY = null;\n}\n/**\n * Returns the max width the launcher should animate to which is determined by using the lowest value between the\n * screen height or width for mobile devices. If the user is on a tablet, we don't want the launcher to extend\n * unnecessarily far, so we should cap at it 400px.\n */\nfunction getMaxLauncherExtendedWidth() {\n    const launcherPosition = IS_MOBILE ? 32 : 64;\n    const { width, height } = window.screen;\n    const lowestValue = Math.min(height, width);\n    const extendedWidth = lowestValue - launcherPosition;\n    return Math.min(extendedWidth, MAX_EXTENDED_LAUNCHER_WIDTH);\n}\nconst LauncherExtendedExport = React.memo(forwardRef(LauncherExtended));\n\nexport { LauncherExtendedExport as LauncherExtended };\n","import cx from 'classnames';\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useOnMount } from '../../hooks/useOnMount.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport actions from '../../store/actions.js';\nimport { BOUNCING_ANIMATION_TIMEOUTS } from '../../../../types/config/LauncherConfig.js';\nimport { setAnimationTimeouts } from '../../utils/animationUtils.js';\nimport { LauncherExtended as LauncherExtendedExport } from './LauncherExtended.js';\nimport { LauncherType } from '../../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction LauncherMobileContainer(props) {\n    const { launcherRef, onToggleOpen, launcherHidden, activeTour } = props;\n    const serviceManager = useServiceManager();\n    const { config: launcherConfig } = useSelector((state) => state.launcher);\n    const unreadAgentCount = useSelector((state) => state.agentState.numUnreadMessages);\n    const { mobileLauncherIsExtended: isExtended, mobileLauncherWasReduced: wasReduced, mobileLauncherDisableBounce: disableBounce, bounceTurn, showUnreadIndicator, viewState, } = useSelector((state) => state.persistedToBrowserStorage.launcherState);\n    const [isStartingBounceAnimation, setIsStartingBounceAnimation] = useState(false);\n    const prevIsExtended = usePrevious(isExtended);\n    const prevWasReduced = usePrevious(wasReduced);\n    // The bounce turn start off on in the recurring animation flow. We only care about the initial value and not its\n    // subsequent values as the user goes through the flow. This will allow the user to continue where they left off in\n    // the flow.\n    const initialBounceTurn = useRef(bounceTurn).current;\n    const previouslyPlayedExtendAnimation = useRef(wasReduced).current;\n    const extendLauncherTimeoutIDRef = useRef(null);\n    const reduceLauncherTimeoutIDRef = useRef(null);\n    const endBounceAnimationRef = useRef(null);\n    const shouldBounceRef = useRef(previouslyPlayedExtendAnimation && !disableBounce);\n    const { time_to_expand, new_expand_time, time_to_reduce } = launcherConfig.mobile;\n    const isExpandedLauncherEnabled = launcherConfig.mobile.is_on;\n    // If the launcher container mounted with the mobile launcher not in the extended state, and it's previous value is\n    // undefined, this means the launcher should be in the extended state playing the extended animation if not in the\n    // tooling preview.\n    const playExtendAnimation = prevIsExtended === undefined && !isExtended;\n    // Indicates if the launcher is playing the \"extend\" animation.\n    const isExtending = prevIsExtended !== undefined && !prevIsExtended && isExtended;\n    // Indicates if the launcher has completed the \"reduce\" animation.\n    const hasReduced = prevWasReduced !== undefined && !prevWasReduced && wasReduced;\n    // Prevents the launcher from playing the fade in animation after a rerender.\n    const disableIntroAnimation = isExtending || hasReduced || isStartingBounceAnimation;\n    const setLauncherStateAsReduced = useCallback(() => {\n        if (!wasReduced) {\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherWasReduced\", true));\n        }\n    }, [wasReduced, serviceManager]);\n    // This function kicks off the process of reducing the extended launcher, such as when the user scrolls the page, by\n    // setting mobileLauncherIsExtended in launcher state to false. If the user does scroll the page, it will be tracked.\n    const reduceLauncher = useCallback(() => {\n        clearTimeouts();\n        if (isExtended) {\n            document.removeEventListener(\"scroll\", reduceLauncher);\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherIsExtended\", false));\n        }\n    }, [isExtended, serviceManager]);\n    const setExpandAnimationTimeout = useCallback(() => {\n        // Begin timeout to set launcher in the extended state.\n        extendLauncherTimeoutIDRef.current = setTimeout(() => {\n            if (!isExtended && !isExtending) {\n                // Since the launcher is going to expand, set the reduced flag to false.\n                serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherWasReduced\", false));\n                serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherIsExtended\", true));\n            }\n        }, time_to_expand);\n    }, [isExtended, isExtending, serviceManager.store, time_to_expand]);\n    // Clear the expand and bounce timers and set the launcher state to reduced and bounce disabled. This way if the page\n    // is reloaded the launcher will behave as if it has already been opened and won't try and show a greeting.\n    const setDefaultLauncherState = useCallback(() => {\n        const endBounceAnimation = endBounceAnimationRef.current;\n        if (endBounceAnimation) {\n            endBounceAnimation();\n            endBounceAnimationRef.current = null;\n        }\n        // Prevent the launcher from bouncing if it was toggled and allowed to play the bounce animation.\n        serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherDisableBounce\", true));\n        reduceLauncher();\n        // The launcher should be set as reduced to prevent it from extending on the next page load.\n        setLauncherStateAsReduced();\n    }, [reduceLauncher, serviceManager.store, setLauncherStateAsReduced]);\n    // When the launcher mounts, we should determine if it should prepare to play the \"extend\" animation, or kickoff the\n    // bounce animation. We should kick off the bounce animation early if we have to so that we can easily determine\n    // later on if it should be canceled.\n    useOnMount(() => {\n        // Determine if the mobile launcher wasn't reduced and can play the \"extend\" animation.\n        if (!wasReduced && playExtendAnimation && isExpandedLauncherEnabled) {\n            setExpandAnimationTimeout();\n        }\n        else if (shouldBounceRef.current) {\n            const launcherContainerElement = launcherRef?.current?.launcherContainerElement();\n            if (launcherContainerElement) {\n                const startRecurringBounceAnimation = () => {\n                    // This function is added as an event listener to the container, however the function isn't actually run until\n                    // the event listener is triggered. Because of this it's possible that the state has since changed, and we\n                    // actually don't want to bounce the launcher after all, so we need to check that we still want to bounce.\n                    if (shouldBounceRef.current) {\n                        // Track the bounce turn the user is currently on in the recurring animation flow.\n                        let turnCounter = initialBounceTurn;\n                        launcherContainerElement.removeEventListener(\"animationend\", startRecurringBounceAnimation);\n                        setIsStartingBounceAnimation(true);\n                        endBounceAnimationRef.current = setAnimationTimeouts(launcherContainerElement, \"WACLauncher__ButtonContainer--bounceAnimation\", BOUNCING_ANIMATION_TIMEOUTS, {\n                            startingIndex: initialBounceTurn - 1,\n                            afterEach: () => {\n                                // Increase the turn counter and have Carbon AI chat remember where the user left off in the flow.\n                                turnCounter++;\n                                serviceManager.store.dispatch(actions.setLauncherProperty(\"bounceTurn\", turnCounter));\n                            },\n                            afterAll: () => {\n                                serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherDisableBounce\", true));\n                            },\n                        });\n                    }\n                };\n                // Once the launcher container has completed fading in, kick off the recurring bounce animation.\n                launcherContainerElement.addEventListener(\"animationend\", startRecurringBounceAnimation);\n            }\n        }\n    });\n    // If the main window or tour have been opened then clear all timers and set the launcher state as if it had been\n    // clicked open. This is to protect against scenarios where the main window or tour are opened using other methods\n    // besides clicking on the launcher.\n    useEffect(() => {\n        if (viewState.mainWindow || viewState.tour) {\n            // Clear timers and update launcher state so that no more greeting messages or bounces occur.\n            setDefaultLauncherState();\n        }\n    }, [viewState, setDefaultLauncherState]);\n    // If the launcher time_to_expand changes then we need to clear the existing timers and start new ones with the new time.\n    useEffect(() => {\n        if (new_expand_time) {\n            // If the launcher was supposed to bounce make sure it doesn't.\n            if (shouldBounceRef.current) {\n                shouldBounceRef.current = false;\n            }\n            // If there was an existing bounce timer going then clear the timeout so the bounce animation doesn't show.\n            const endBounceAnimation = endBounceAnimationRef.current;\n            if (endBounceAnimation) {\n                endBounceAnimation();\n                endBounceAnimationRef.current = null;\n            }\n            // If there was an existing \"extend\" timer going then clear the timeout so the original extend doesn't occur.\n            if (extendLauncherTimeoutIDRef.current) {\n                clearTimeout(extendLauncherTimeoutIDRef.current);\n            }\n            // Set the \"expand\" timers again with the new timeout that's been provided.\n            setExpandAnimationTimeout();\n            serviceManager.store.dispatch(actions.setLauncherConfigProperty(\"new_expand_time\", false, LauncherType.MOBILE));\n        }\n    }, [\n        setExpandAnimationTimeout,\n        new_expand_time,\n        serviceManager.store,\n        shouldBounceRef,\n    ]);\n    function clearTimeouts() {\n        const extendLauncherTimeoutID = extendLauncherTimeoutIDRef.current;\n        const reduceLauncherTimeoutID = reduceLauncherTimeoutIDRef.current;\n        // Clears all the existing timeouts that were set.\n        if (reduceLauncherTimeoutID) {\n            clearTimeout(reduceLauncherTimeoutID);\n            reduceLauncherTimeoutIDRef.current = null;\n        }\n        if (extendLauncherTimeoutID) {\n            clearTimeout(extendLauncherTimeoutID);\n            extendLauncherTimeoutIDRef.current = null;\n        }\n    }\n    // When the launcher is toggled, reduce the launcher if it's extended and open the widget.\n    const handleToggleOpen = useCallback(() => {\n        setDefaultLauncherState();\n        onToggleOpen();\n    }, [onToggleOpen, setDefaultLauncherState]);\n    // Track the user swiping to the right over the launcher and reduce the launcher.\n    const handleSwipeRight = useCallback(() => {\n        reduceLauncher();\n    }, [reduceLauncher]);\n    // When the launcher extends and a proper reduce timeout is set, we should kick off the timeout that will reduce the\n    // launcher.\n    useEffect(() => {\n        if (isExtended) {\n            // Begin timeout to reduce extended launcher.\n            reduceLauncherTimeoutIDRef.current = setTimeout(() => {\n                reduceLauncher();\n            }, time_to_reduce);\n            // Detect the user scrolling the page to begin reducing the launcher.\n            document.addEventListener(\"scroll\", reduceLauncher);\n        }\n    }, [isExtended, reduceLauncher, time_to_reduce, serviceManager]);\n    return (React.createElement(LauncherExtendedExport, { className: cx({\n            \"WACLauncher__ButtonContainer--noAnimation\": disableIntroAnimation,\n        }), ref: launcherRef, serviceManager: serviceManager, launcherConfig: launcherConfig, showUnreadIndicator: showUnreadIndicator, unreadAgentCount: unreadAgentCount, isExtended: isExtended, playExtendAnimation: playExtendAnimation, onToggleOpen: handleToggleOpen, onSwipeRight: handleSwipeRight, onReduceEnd: setLauncherStateAsReduced, launcherHidden: launcherHidden, activeTour: activeTour }));\n}\n\nexport { LauncherMobileContainer };\n","import React, { useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useEffectDidUpdate } from '../../hooks/useEffectDidUpdate.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport '../../../../types/state/AppState.js';\nimport { IS_PHONE } from '../../utils/browserUtils.js';\nimport { LauncherDesktopContainer } from './LauncherDesktopContainer.js';\nimport { LauncherMobileContainer } from './LauncherMobileContainer.js';\nimport { ViewChangeReason, MainWindowOpenReason } from '../../../../types/events/eventBusTypes.js';\nimport { ViewType } from '../../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction LauncherContainer() {\n    const serviceManager = useServiceManager();\n    const launcherRef = useRef();\n    const viewState = useSelector((state) => state.persistedToBrowserStorage.launcherState.viewState);\n    const initialViewChangeComplete = useSelector((state) => state.initialViewChangeComplete);\n    const launcherHidden = !viewState.launcher;\n    const activeTour = useSelector((state) => state.persistedToBrowserStorage.launcherState.activeTour);\n    const requestFocus = useCallback(() => {\n        launcherRef.current?.requestFocus();\n    }, [launcherRef]);\n    // If there's an active tour then on launcher click switch to the tour view. If there is not an active tour then on\n    // launcher click, fire the window open events, and switch to the main window. After switching to either the tour or\n    // the main window kick off hydration if the chat isn't hydrated yet.\n    const onDoToggle = useCallback(() => {\n        if (activeTour) {\n            // If there's an active tour then try to open the tour on launcher click.\n            return serviceManager.actions.changeView(ViewType.TOUR, {\n                viewChangeReason: ViewChangeReason.LAUNCHER_CLICKED,\n            });\n        }\n        // Otherwise try to open the main window on launcher click.\n        return serviceManager.actions.changeView(ViewType.MAIN_WINDOW, {\n            mainWindowOpenReason: MainWindowOpenReason.DEFAULT_LAUNCHER,\n        });\n    }, [activeTour, serviceManager.actions]);\n    useEffectDidUpdate(() => {\n        // If the main window and tour view are closed, and the launcher is visible, then we should request focus on the\n        // launcher. We need to wait for the initial view change to complete before requesting focus when the viewState\n        // changes. This is because we don't want to request focus after the first view change when\n        // Chat.startInternal switches from all views closed to whatever the starting view state is. Instead\n        // we want to wait to request focus until after user interactions that trigger changes to the viewState.\n        if (viewState.launcher &&\n            !viewState.mainWindow &&\n            !viewState.tour &&\n            initialViewChangeComplete) {\n            launcherRef.current?.requestFocus();\n        }\n    }, [viewState]);\n    let launcherContainer;\n    if (IS_PHONE) {\n        launcherContainer = (React.createElement(LauncherMobileContainer, { launcherRef: launcherRef, onToggleOpen: onDoToggle, launcherHidden: launcherHidden, activeTour: activeTour }));\n    }\n    else {\n        launcherContainer = (React.createElement(LauncherDesktopContainer, { launcherRef: launcherRef, onDoToggle: onDoToggle, requestFocus: requestFocus, launcherHidden: launcherHidden, activeTour: activeTour }));\n    }\n    return launcherContainer;\n}\n\nexport { LauncherContainer };\n","import { useRef, useEffect } from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This hook behaves the same as useEffect except that it only runs when the given inputs change (skipping the first\n * effect where the inputs are new).\n */\nfunction useEffectDidUpdate(effect, deps) {\n    const hasRunRef = useRef(false);\n    useEffect(() => {\n        if (hasRunRef.current) {\n            return effect();\n        }\n        hasRunRef.current = true;\n        return undefined;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n}\n\nexport { useEffectDidUpdate };\n","import Loading from '../../react/carbon/Loading.js';\nimport cx from 'classnames';\nimport React, { useContext } from 'react';\nimport { HideComponentContext } from '../contexts/HideComponentContext.js';\nimport { BotHeader as BotHeaderExport } from './header/BotHeader.js';\nimport { HomeScreenHeader as HomeScreenHeaderExport } from './homeScreen/HomeScreenHeader.js';\nimport { AnnounceOnMountComponent as AnnounceOnMountComponentExport } from './util/AnnounceOnMountComponent.js';\nimport { MountChildrenOnDelay } from './util/MountChildrenOnDelay.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is rendered while the Carbon AI chat is hydrating.\n */\nfunction HydrationPanel({ onClose, languagePack, isHydrated, headerDisplayName, useHomeScreenVersion, }) {\n    // This panel gets hidden instead of unmounted by the overlay container. We want to unmount the loading spinner\n    // below when that happens.\n    const isHidden = useContext(HideComponentContext);\n    let header;\n    if (useHomeScreenVersion) {\n        header = React.createElement(HomeScreenHeaderExport, { onClose: onClose });\n    }\n    else {\n        header = (React.createElement(BotHeaderExport, { onClose: onClose, headerDisplayName: headerDisplayName, onToggleHomeScreen: null, includeWriteableElement: false }));\n    }\n    return (React.createElement(\"div\", { className: \"WAC WAC__hydratingContainer\" },\n        header,\n        React.createElement(\"div\", { className: cx(\"WAC__hydrating\", \"WACPanelContent\", {\n                \"WAC__hydrating--homeScreen\": useHomeScreenVersion,\n            }) }, !isHidden && (React.createElement(MountChildrenOnDelay, { delay: 400 },\n            !isHydrated && (React.createElement(AnnounceOnMountComponentExport, { announceOnce: languagePack.window_ariaWindowLoading })),\n            React.createElement(Loading, { active: true, overlay: false, assistiveText: languagePack.window_ariaWindowLoading }))))));\n}\n\nexport { HydrationPanel };\n","import React, { useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { BusEventType } from '../../../../types/events/eventBusTypes.js';\nimport { useAriaAnnouncer } from '../../hooks/useAriaAnnouncer.js';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport actions from '../../store/actions.js';\nimport { DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS } from '../../store/reducerUtils.js';\nimport { AnimationInType, AnimationOutType } from '../../../../types/utilities/Animation.js';\nimport { consoleError } from '../../utils/miscUtils.js';\nimport { BasePanelComponent as BasePanelComponentExport } from '../BasePanelComponent.js';\nimport { OverlayPanel, OverlayPanelName } from '../OverlayPanel.js';\nimport WriteableElement from '../WriteableElement.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is a custom panel that renders external content similar to custom response types.\n */\nfunction CustomPanel(props) {\n    const { useAITheme, onPanelOpenEnd, onPanelCloseEnd, onPanelOpenStart, onPanelCloseStart, onClose, onCloseAndRestart, onClickRestart, } = props;\n    const languagePack = useLanguagePack();\n    const { isOpen, options } = useSelector((state) => state.customPanelState);\n    const { title, hidePanelHeader, disableDefaultCloseAction, disableAnimation, onClickBack, onClickClose, onClickCloseAndRestart, } = options;\n    const serviceManager = useServiceManager();\n    const ariaAnnouncer = useAriaAnnouncer();\n    const prevIsOpen = usePrevious(isOpen);\n    const openAnimation = disableAnimation\n        ? AnimationInType.NONE\n        : AnimationInType.SLIDE_IN_FROM_BOTTOM;\n    const closeAnimation = disableAnimation\n        ? AnimationOutType.NONE\n        : AnimationOutType.SLIDE_OUT_TO_BOTTOM;\n    useEffect(() => {\n        if (prevIsOpen !== isOpen && isOpen) {\n            // Announce the title if it's visible.\n            if (!hidePanelHeader && title) {\n                ariaAnnouncer(title);\n            }\n        }\n    }, [ariaAnnouncer, hidePanelHeader, isOpen, prevIsOpen, title]);\n    const onClickBackLocal = useCallback(() => {\n        serviceManager.store.dispatch(actions.setCustomPanelOpen(false));\n        onClickBack?.();\n    }, [serviceManager, onClickBack]);\n    const onClickCloseLocal = useCallback(() => {\n        if (!disableDefaultCloseAction) {\n            checkAllowClose(serviceManager.store.getState().viewChanging);\n            onClose();\n        }\n        onClickClose?.();\n    }, [disableDefaultCloseAction, onClickClose, onClose, serviceManager]);\n    // Note that this is not called until after the user has confirmed the action.\n    const onCloseAndRestartLocal = useCallback(() => {\n        if (!disableDefaultCloseAction) {\n            checkAllowClose(serviceManager.store.getState().viewChanging);\n            onCloseAndRestart();\n        }\n        onClickCloseAndRestart?.();\n    }, [\n        disableDefaultCloseAction,\n        onClickCloseAndRestart,\n        onCloseAndRestart,\n        serviceManager,\n    ]);\n    return (React.createElement(OverlayPanel, { className: \"WAC__overlay--covering\", onOpenStart: () => {\n            serviceManager.eventBus.fire({ type: BusEventType.CUSTOM_PANEL_PRE_OPEN }, serviceManager.instance);\n            onPanelOpenStart();\n        }, onOpenEnd: () => {\n            serviceManager.eventBus.fire({ type: BusEventType.CUSTOM_PANEL_OPEN }, serviceManager.instance);\n            onPanelOpenEnd();\n        }, onCloseStart: () => {\n            serviceManager.eventBus.fire({ type: BusEventType.CUSTOM_PANEL_PRE_CLOSE }, serviceManager.instance);\n            onPanelCloseStart();\n        }, onCloseEnd: () => {\n            serviceManager.eventBus.fire({ type: BusEventType.CUSTOM_PANEL_CLOSE }, serviceManager.instance);\n            onPanelCloseEnd();\n            serviceManager.store.dispatch(actions.setCustomPanelConfigOptions(DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS));\n        }, animationOnOpen: openAnimation, animationOnClose: closeAnimation, shouldOpen: isOpen, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.CUSTOM },\n        React.createElement(BasePanelComponentExport, { className: \"WACCustomPanel\", eventName: \"Custom panel opened\", eventDescription: \"A user opened a custom panel.\", labelBackButton: languagePack.general_returnToAssistant, isOpen: isOpen, title: title, useAITheme: useAITheme, onClickBack: onClickBackLocal, onClickClose: onClickCloseLocal, onClickCloseAndRestart: onCloseAndRestartLocal, onClickRestart: onClickRestart, hidePanelHeader: hidePanelHeader, hideBackButton: options.hideBackButton, hideCloseButton: options.hideCloseButton, hideCloseAndRestartButton: options.hideCloseAndRestartButton },\n            React.createElement(WriteableElement, { slotName: \"customPanelElement\", className: \"WACCustomPanel__ContentContainer\" }))));\n}\n/**\n * Checks the given flag and throws an error if it is true.\n */\nfunction checkAllowClose(viewChanging) {\n    if (viewChanging) {\n        const message = \"You are attempting to close Carbon AI chat from a custom panel while Carbon AI chat is currently running a view\" +\n            \" change event which is not permitted. Please use the disableDefaultCloseAction option to disable\" +\n            \" this behavior for the custom panel and then use onClickClose to resolve your Promise that is handling\" +\n            \" the event; that Promise will allow you to close Carbon AI chat.\";\n        consoleError(message);\n        throw new Error(message);\n    }\n}\nconst CustomPanelExport = React.memo(CustomPanel);\n\nexport { CustomPanelExport as CustomPanel };\n","import 'intl-pluralrules';\nimport cx from 'classnames';\nimport FocusTrap from 'focus-trap-react';\nimport React, { Component, Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { HydrationPanel } from '../../components/HydrationPanel.js';\nimport { OverlayPanel, OverlayPanelName } from '../../components/OverlayPanel.js';\nimport { CustomPanel as CustomPanelExport } from '../../components/panels/CustomPanel.js';\nimport { HideComponent } from '../../components/util/HideComponent.js';\nimport VisuallyHidden from '../../components/util/VisuallyHidden.js';\nimport { ModalPortalRootContext } from '../../contexts/ModalPortalRootContext.js';\nimport actions from '../../store/actions.js';\nimport { selectIsInputToAgent, selectInputState, selectAgentDisplayState } from '../../store/selectors.js';\nimport { AnimationOutType, AnimationInType } from '../../../../types/utilities/Animation.js';\nimport { ChatWidthBreakpoint } from '../../../../types/state/AppState.js';\nimport { addClassNameToState, removeClassNameFromState } from '../../../../types/utilities/HasAddRemoveClassName.js';\nimport { IS_IOS, getIPhoneHeightOffset, IS_MOBILE } from '../../utils/browserUtils.js';\nimport '../../utils/constants.js';\nimport { doFocusRef, SCROLLBAR_WIDTH } from '../../utils/domUtils.js';\nimport { arrayLastValue } from '../../utils/lang/arrayUtils.js';\nimport { createMessageRequestForText, createMessageRequestForChoice } from '../../utils/messageUtils.js';\nimport { consoleError, createDidCatchErrorData } from '../../utils/miscUtils.js';\nimport { MessageSendSource, MainWindowCloseReason } from '../../../../types/events/eventBusTypes.js';\nimport { lazyChat, lazyCatastrophicError, lazyDisclaimer, lazyHomeScreenContainer, lazyIFramePanel, lazyViewSourcePanel, lazyBodyAndFooterPanelComponent } from '../../../dynamic-imports/dynamic-imports.js';\nimport { ViewType } from '../../../../types/instance/apiTypes.js';\nimport { CornersType } from '../../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst Chat = lazyChat();\nconst CatastrophicError = lazyCatastrophicError();\nconst Disclaimer = lazyDisclaimer();\nconst HomeScreenContainer = lazyHomeScreenContainer();\nconst IFramePanel = lazyIFramePanel();\nconst ViewSourcePanel = lazyViewSourcePanel();\nconst BodyAndFooterPanelComponent = lazyBodyAndFooterPanelComponent();\n// Indicates the messages container is at the standard, default width.\nconst WIDTH_BREAKPOINT_STANDARD = \"WAC--standardWidth\";\n// Indicates the messages container is at a narrow width breakpoint (small phones).\nconst WIDTH_BREAKPOINT_NARROW = \"WAC--narrowWidth\";\n// Indicates the messages container is at a wide width breakpoint.\nconst WIDTH_BREAKPOINT_WIDE = \"WAC--wideWidth\";\nclass MainWindow extends Component {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = {\n            closing: false,\n            open: this.props.persistedToBrowserStorage.launcherState.viewState\n                .mainWindow,\n            modalPortalHostElement: null,\n            numPanelsOpen: 0,\n            numPanelsAnimating: 0,\n            numPanelsCovering: 0,\n            isHydrationAnimationComplete: this.props.isHydrated,\n            shouldAutoFocus: this.props.config.public.shouldTakeFocusIfOpensAutomatically,\n            extraClassNames: [],\n            areModulesLoaded: false,\n        };\n        /**\n         * A React ref to the \"WACMainWindow\" element.\n         */\n        this.mainWindowRef = React.createRef();\n        /**\n         * A React ref to the \"WACWidget\" element.\n         */\n        this.containerRef = React.createRef();\n        /**\n         * A React ref to the bot {@link Chat} component.\n         */\n        this.botChatRef = React.createRef();\n        /**\n         * A React ref to the bot {@link Input} component.\n         */\n        this.homeScreenInputRef = React.createRef();\n        /**\n         * A React ref to the bot {@link Disclaimer} component.\n         */\n        this.disclaimerRef = React.createRef();\n        /**\n         * A React ref to the {@link BrandingOverlayComponent} component.\n         */\n        this.brandingRef = React.createRef();\n        /**\n         * A React ref to the animation container element.\n         */\n        this.animationContainerRef = React.createRef();\n        /**\n         * A React ref to the {@link IFramePanel} component.\n         */\n        this.iframePanelRef = React.createRef();\n        /**\n         * A React ref to the {@link ViewSourcePanel}.\n         */\n        this.viewSourcePanelRef = React.createRef();\n        /**\n         * The previous value of the body \"visibility\" property before the widget was opened.\n         */\n        this.previousBodyVisibility = undefined;\n        /**\n         * The previous value of the body \"position\" property before the widget was opened.\n         */\n        this.previousBodyPosition = undefined;\n        /**\n         * This will check to see if the messages list is anchored to the bottom of the panel and if so, ensure that the\n         * list is still scrolled to the bottom. It will also set the classname appropriate to the current width.\n         */\n        this.onResize = () => {\n            let appChatWidthBreakpoint;\n            const height = this.containerRef?.current?.offsetHeight;\n            const width = this.containerRef?.current?.offsetWidth;\n            // The minimum width of the wide size + 1rem of padding on each side.\n            if (width >= 672 + 16 + 16) {\n                appChatWidthBreakpoint = ChatWidthBreakpoint.WIDE;\n            }\n            else if (width >= 360) {\n                appChatWidthBreakpoint = ChatWidthBreakpoint.STANDARD;\n            }\n            else {\n                appChatWidthBreakpoint = ChatWidthBreakpoint.NARROW;\n            }\n            this.props.serviceManager.store.dispatch(actions.setAppStateValue(\"chatWidth\", width));\n            this.props.serviceManager.store.dispatch(actions.setAppStateValue(\"chatHeight\", height));\n            this.props.serviceManager.store.dispatch(actions.setAppStateValue(\"chatWidthBreakpoint\", appChatWidthBreakpoint));\n        };\n        /**\n         * This is called when the visual viewport is resized.\n         */\n        this.onVisualViewportResize = () => {\n            this.updateFromVisualViewport();\n        };\n        /**\n         * The visual viewport is a relatively new API that provide this information about the actual visible area of the\n         * browser. This takes into account things like the navigation bars and the keyboard. When the browser supports it\n         * we can get more accurate about adjusting based on those things.\n         */\n        this.updateFromVisualViewport = () => {\n            const element = this.props.serviceManager.container;\n            const { visualViewport } = window;\n            if (visualViewport) {\n                // The viewport height is the visible area and the offset top is how much the viewport has been scrolled. The\n                // viewport scrolling occurs on iOS devices when the keyboard is open but not on android.\n                element.style.setProperty(\"--cds-chat-viewport-height\", `${visualViewport.height}px`);\n                element.style.setProperty(\"--cds-chat-viewport-width\", `${visualViewport.width}px`);\n                element.style.setProperty(\"--cds-chat-viewport-offsetTop\", `${visualViewport.offsetTop}px`);\n                element.style.setProperty(\"--cds-chat-viewport-offsetLeft\", `${visualViewport.offsetLeft}px`);\n            }\n            else {\n                // For browsers that don't support the visual viewport, for now we'll just settle on these values which only\n                // sort of works.\n                let height = \"100vh\";\n                if (IS_IOS) {\n                    const offset = getIPhoneHeightOffset();\n                    height = `calc(100vh - ${offset}px)`;\n                }\n                element.style.setProperty(\"--cds-chat-viewport-height\", height);\n                element.style.setProperty(\"--cds-chat-viewport-width\", \"100vw\");\n                element.style.setProperty(\"--cds-chat-viewport-offsetTop\", \"0\");\n                element.style.setProperty(\"--cds-chat-viewport-offsetLeft\", \"0\");\n            }\n        };\n        /**\n         * Sets the element that is used as the host for {@link ModalPortal}.\n         */\n        this.setModalPortalHostElement = (ref) => {\n            if (this.state.modalPortalHostElement !== ref) {\n                this.setState({ modalPortalHostElement: ref });\n            }\n        };\n        this.onSendInput = async (text, source, options) => {\n            const isInputToAgent = selectIsInputToAgent(this.props);\n            const { serviceManager } = this.props;\n            const state = serviceManager.store.getState();\n            const { files } = selectInputState(state);\n            if (isInputToAgent) {\n                // If we're connected to an agent, then send the message to the agent instead of the bot.\n                serviceManager.humanAgentService.sendMessageToAgent(text, files);\n            }\n            else {\n                const messageRequest = createMessageRequestForText(text);\n                serviceManager.actions.sendWithCatch(messageRequest, source, {\n                    ...options,\n                });\n            }\n            if (files.length) {\n                serviceManager.store.dispatch(actions.clearInputFiles(isInputToAgent));\n            }\n        };\n        this.onSendHomeButtonInput = (input) => {\n            const messageRequest = createMessageRequestForChoice(input);\n            this.props.serviceManager.actions.sendWithCatch(messageRequest, MessageSendSource.HOME_SCREEN_STARTER);\n        };\n        // When the animation is complete, we go ahead and set the state to remove chat from DOM\n        this.removeChatFromDom = () => {\n            this.containerRef.current.removeEventListener(\"animationend\", this.removeChatFromDom);\n            this.setState({\n                open: false,\n                closing: false,\n            });\n        };\n        // Reset Carbon AI chat to new session.\n        this.onRestart = async () => {\n            await this.props.serviceManager.actions.restartConversation();\n            this.requestFocus();\n        };\n        // Close window.\n        this.onClose = async () => {\n            return this.doClose(false);\n        };\n        /**\n         * Called when the close-and-restart button is clicked. This will close the chat window and restart the bot\n         * conversation. It will in addition, end any agent conversation that is active and switch back to the bot view. This\n         * will be called after the user is presented with a confirmation panel.\n         */\n        this.onCloseAndRestart = async () => {\n            return this.doClose(true);\n        };\n        /**\n         * The callback that can be called to toggle between the home screen and the bot view.\n         */\n        this.onToggleHomeScreen = () => {\n            this.props.serviceManager.store.dispatch(actions.toggleHomeScreen());\n        };\n        /**\n         * Puts focus on the default focusable item for the current state of the application.\n         */\n        this.requestFocus = () => {\n            try {\n                if (this.state.shouldAutoFocus && !IS_MOBILE) {\n                    // Put focus either on the input field or on the launcher button.\n                    if (this.getShowDisclaimer()) {\n                        if (this.disclaimerRef.current) {\n                            // Focus the disclaimer accept button.\n                            doFocusRef(this.disclaimerRef);\n                        }\n                    }\n                    else if (this.getShowHomeScreen()) {\n                        if (this.homeScreenInputRef.current) {\n                            // Focus the home screen input field. Must be on timeout because of the home screen's own internal animations.\n                            this.homeScreenInputRef.current.takeFocus();\n                        }\n                    }\n                    else if (this.props.iFramePanelState.isOpen) {\n                        if (this.iframePanelRef.current) {\n                            // Focus the iframe panel close button.\n                            this.iframePanelRef.current.requestFocus();\n                        }\n                    }\n                    else if (this.botChatRef.current) {\n                        // Focus the bot input field.\n                        this.botChatRef.current.requestInputFocus();\n                    }\n                }\n            }\n            catch (error) {\n                consoleError(\"An error occurred in MainWindow.requestFocus\", error);\n            }\n        };\n        /**\n         * Called when the user starts or stops typing.\n         */\n        this.onUserTyping = (isTyping) => {\n            if (this.props.serviceManager.store.getState().persistedToBrowserStorage\n                .chatState.agentState.isConnected) {\n                this.props.serviceManager.humanAgentService.userTyping(isTyping);\n            }\n        };\n        /**\n         * After accepting the disclaimer, we animate the disclaimer screen away.\n         */\n        this.onAcceptDisclaimer = () => {\n            this.props.serviceManager.store.dispatch(actions.acceptDisclaimer());\n        };\n        /**\n         * Update the panel counter to show a panel has opened, and add any proper focus.\n         */\n        this.onPanelOpenStart = (coverBackground) => {\n            this.setState((prevState) => ({\n                numPanelsOpen: prevState.numPanelsOpen + 1,\n                numPanelsAnimating: prevState.numPanelsAnimating + 1,\n                numPanelsCovering: prevState.numPanelsCovering + (coverBackground ? 1 : 0),\n            }), this.requestFocus);\n        };\n        /**\n         * Update the panel counter to show a panel has opened.\n         */\n        this.onPanelOpenEnd = () => {\n            this.setState((prevState) => ({\n                numPanelsAnimating: prevState.numPanelsAnimating - 1,\n            }));\n        };\n        /**\n         * Update the panel counter to show a panel has started to close.\n         */\n        this.onPanelCloseStart = () => {\n            this.setState((prevState) => ({ numPanelsAnimating: prevState.numPanelsAnimating + 1 }), this.requestFocus);\n        };\n        /**\n         * Update the panel counter to show a panel has started to close.\n         */\n        this.onPanelCloseEnd = (coverBackground) => {\n            this.setState((prevState) => ({\n                numPanelsOpen: prevState.numPanelsOpen - 1,\n                numPanelsAnimating: prevState.numPanelsAnimating - 1,\n                numPanelsCovering: prevState.numPanelsCovering - (coverBackground ? 1 : 0),\n            }));\n        };\n        /**\n         * Mark the hydration panel as closed with animation completed.\n         */\n        this.onHydrationPanelClose = () => {\n            this.setState({ isHydrationAnimationComplete: true }, this.requestFocus);\n        };\n    }\n    componentDidMount() {\n        const { persistedToBrowserStorage, config, serviceManager, mainWindowRef } = this.props;\n        const { viewState } = persistedToBrowserStorage.launcherState;\n        const { public: publicConfig } = config;\n        serviceManager.mainWindow = this;\n        mainWindowRef.current = this;\n        this.mainWindowObserver = new ResizeObserver(this.onResize);\n        this.mainWindowObserver.observe(this.containerRef.current);\n        if (IS_MOBILE && !publicConfig.disableCustomElementMobileEnhancements) {\n            const { visualViewport } = window;\n            if (visualViewport) {\n                visualViewport.addEventListener(\"resize\", this.onVisualViewportResize);\n                visualViewport.addEventListener(\"scroll\", this.updateFromVisualViewport);\n            }\n            // For devices that don't support the visual viewport we'll set some default values anyway.\n            this.updateFromVisualViewport();\n            this.updateBody(false);\n        }\n        // Make the scrollbar width available to CSS.\n        this.containerRef.current.style.setProperty(\"--cds-chat-scrollbar-width\", `${SCROLLBAR_WIDTH()}px`);\n        if (viewState.mainWindow) {\n            this.loadPanels();\n        }\n    }\n    componentWillUnmount() {\n        // Remove the listeners and observer we added previously.\n        this.mainWindowObserver.unobserve(this.containerRef.current);\n    }\n    /**\n     * This function is called when the app is destroyed. This component is never actually unmounted; the entire\n     * container holding the Carbon AI chat is simply removed from the DOM.\n     */\n    destroy() {\n        if (IS_MOBILE &&\n            !this.props.config.public.disableCustomElementMobileEnhancements) {\n            const { visualViewport } = window;\n            if (visualViewport) {\n                visualViewport.removeEventListener(\"resize\", this.onVisualViewportResize);\n                visualViewport.removeEventListener(\"scroll\", this.updateFromVisualViewport);\n            }\n        }\n        this.updateBody(true);\n    }\n    componentDidUpdate(oldProps, oldState) {\n        const newProps = this.props;\n        const newState = this.state;\n        const { persistedToBrowserStorage, useCustomHostElement, isDestroyed } = newProps;\n        const { viewState } = persistedToBrowserStorage.launcherState;\n        const { open } = newState;\n        const prevViewState = oldProps.persistedToBrowserStorage.launcherState.viewState;\n        if (viewState.mainWindow !== prevViewState.mainWindow) {\n            // If viewState.mainWindow has changed then perform the necessary updates.\n            this.updateBody(false);\n            this.updateFromVisualViewport();\n        }\n        if (isDestroyed && !oldProps.isDestroyed) {\n            this.destroy();\n        }\n        if ((oldState.areModulesLoaded !== newState.areModulesLoaded ||\n            oldProps.isHydrated !== newProps.isHydrated) &&\n            newProps.isHydrated &&\n            newState.areModulesLoaded) {\n            // If both areModulesLoaded and isHydrated have changed and isHydrated is true and areModulesLoaded is true, then\n            // we can go ahead and request focus on the active panel.\n            this.setState({ isHydrationAnimationComplete: true }, () => {\n                requestAnimationFrame(() => {\n                    this.requestFocus();\n                });\n            });\n        }\n        if (viewState.mainWindow && (!prevViewState.mainWindow || !open)) {\n            // If the main Carbon AI chat window is now open, and it was not previously then perform the necessary updates.\n            // See https://reactjs.org/docs/react-component.html#componentdidupdate.\n            this.setState({ open: true }, () => {\n                this.requestFocus();\n            });\n            this.loadPanels();\n        }\n        else if (!viewState.mainWindow &&\n            prevViewState.mainWindow &&\n            oldState.open &&\n            open) {\n            // If the main Carbon AI chat window was previously open but is now no longer open then preform the necessary updates.\n            // See https://reactjs.org/docs/react-component.html#componentdidupdate.\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ closing: true });\n            if (useCustomHostElement) {\n                this.removeChatFromDom();\n            }\n            else {\n                this.containerRef.current.addEventListener(\"animationend\", this.removeChatFromDom);\n                this.requestFocus();\n            }\n        }\n        if (newProps.config.public.shouldTakeFocusIfOpensAutomatically) {\n            // This code is to prevent the widget from grabbing focus when a reset occurs. The autofocus value starts as\n            // true but when we detect a reset, we turn the autofocus off until the user sends a message.\n            if (!oldProps.persistedToBrowserStorage.chatState\n                .hasSentNonWelcomeMessage &&\n                newProps.persistedToBrowserStorage.chatState.hasSentNonWelcomeMessage &&\n                !this.state.shouldAutoFocus) {\n                // eslint-disable-next-line react/no-did-update-set-state\n                this.setState({ shouldAutoFocus: true });\n            }\n            else if (oldProps.botMessageState.localMessageIDs.length >\n                newProps.botMessageState.localMessageIDs.length &&\n                this.state.shouldAutoFocus) {\n                // If there are fewer messages than there were previously, we infer that the Carbon AI chat has been restarted.\n                // In that case, don't do any autofocusing.\n                this.setState({ shouldAutoFocus: false });\n            }\n            else if (oldProps.botMessageState.localMessageIDs.length <\n                newProps.botMessageState.localMessageIDs.length &&\n                !this.state.shouldAutoFocus) {\n                // If a new message comes in, turn autofocusing back on.\n                this.setState({ shouldAutoFocus: true });\n            }\n        }\n        const newLastItemID = arrayLastValue(newProps.botMessageState.localMessageIDs);\n        const oldLastItemID = arrayLastValue(oldProps.botMessageState.localMessageIDs);\n        if (newLastItemID !== oldLastItemID && newState.shouldAutoFocus) {\n            // The last item has changed. If it's not from history, then request focus.\n            const lastMessageItem = newProps.allMessageItemsByID[newLastItemID];\n            const lastMessage = newProps.allMessagesByID[lastMessageItem?.fullMessageID];\n            if (!lastMessage?.history?.from_history) {\n                this.requestFocus();\n            }\n        }\n    }\n    componentDidCatch(error, errorInfo) {\n        this.props.serviceManager.actions.errorOccurred(createDidCatchErrorData(\"MainWindow\", error, errorInfo, true));\n    }\n    /**\n     * Lazy loads in all the different panels when Carbon AI chat is loaded.\n     */\n    loadPanels() {\n        Promise.all([\n            Chat.preload(),\n            CatastrophicError.preload(),\n            Disclaimer.preload(),\n            HomeScreenContainer.preload(),\n            IFramePanel.preload(),\n            ViewSourcePanel.preload(),\n            BodyAndFooterPanelComponent.preload(),\n        ]).then(() => {\n            this.setState({ areModulesLoaded: true });\n        });\n    }\n    /**\n     * This function will apply the necessary updates to the body element. This is primarily used to deal with\n     * adjustments made to mobile devices.\n     */\n    updateBody(unmounting) {\n        if (IS_IOS &&\n            !this.props.config.public.disableCustomElementMobileEnhancements) {\n            if ((window.screen.width <= 500 || window.screen.height <= 500) &&\n                this.props.persistedToBrowserStorage.launcherState.viewState\n                    .mainWindow &&\n                !unmounting) {\n                this.previousBodyVisibility =\n                    document.body.style.getPropertyValue(\"visibility\");\n                this.previousBodyPosition =\n                    document.body.style.getPropertyValue(\"position\");\n                // On iOS devices when the keyboard is opened the viewport is immediately resized to the shorter view that is\n                // visible between the navigation bar and the keyboard. However, this occurs before the keyboard has fully slid\n                // into view. When the resize occurs we shrink the widget to the size of the viewport but this means that\n                // during the animation the widget is too short and what is behind the widget becomes momentarily visible. To\n                // deal with that we hide the body while the widget is open. For code searchability adding the words\n                // \"visibility: hidden !important\" since that is how this styling is rendered on the body.\n                document.body.style.setProperty(\"visibility\", \"hidden\", \"important\");\n                // To prevent the widget from being scrollable in a way that gets it into a bad state, we can set the body\n                // to a fixed position. For code searchability adding the words \"position: fixed !important\" since that is how\n                // this styling is rendered on the body.\n                document.body.style.setProperty(\"position\", \"fixed\", \"important\");\n            }\n            else {\n                document.body.style.setProperty(\"visibility\", this.previousBodyVisibility);\n                document.body.style.setProperty(\"position\", this.previousBodyPosition);\n            }\n        }\n    }\n    /**\n     * Closes the main window and optional performs a close-and-restart.\n     */\n    async doClose(fromCloseAndRestart) {\n        const { serviceManager } = this.props;\n        const { activeTour } = serviceManager.store.getState().persistedToBrowserStorage.launcherState;\n        // Fire the view:change and window:close events. If the view change is canceled then the main window will stay open.\n        if (fromCloseAndRestart) {\n            // If the chat is restarting then try to open the launcher.\n            const newViewState = await serviceManager.actions.changeView(ViewType.LAUNCHER, {\n                mainWindowCloseReason: MainWindowCloseReason.MAIN_WINDOW_CLOSED_AND_RESTARTED,\n            });\n            if (!newViewState.mainWindow) {\n                // If the main window is no longer visible restart the conversation.\n                await serviceManager.actions.restartConversation();\n            }\n        }\n        else {\n            // If the chat is not restarting and there is an active tour then try to open the tour view, otherwise try to open\n            // the launcher.\n            await serviceManager.actions.changeView(activeTour ? ViewType.TOUR : ViewType.LAUNCHER, {\n                mainWindowCloseReason: MainWindowCloseReason.DEFAULT_MINIMIZE,\n            });\n        }\n    }\n    /**\n     * Note: This function relies on a lie which is  homeScreenState.isHomeScreenOpen which by default is true when store\n     * is created based on whether Home Screen is enabled and only later updated to its real value after hydration.\n     */\n    getShowHomeScreen() {\n        return (this.props.homeScreenConfig.is_on &&\n            this.props.persistedToBrowserStorage.chatState.homeScreenState\n                .isHomeScreenOpen &&\n            !this.getShowDisclaimer());\n    }\n    getShowDisclaimer() {\n        return (this.props.config.public.disclaimer?.is_on &&\n            !this.props.persistedToBrowserStorage.chatState.disclaimersAccepted[window.location.hostname]);\n    }\n    /**\n     * Initiates a doAutoScroll on the currently visible chat panel.\n     */\n    doAutoScroll(options) {\n        this.botChatRef?.current?.doAutoScroll(options);\n    }\n    /**\n     * Returns the current scrollBottom value for the message scroll panel.\n     */\n    getMessagesScrollBottom() {\n        return this.botChatRef?.current?.getMessagesScrollBottom();\n    }\n    /**\n     * Scrolls to the (full) message with the given ID. Since there may be multiple message items in a given\n     * message, this will scroll the first message to the top of the message window.\n     *\n     * @param messageID The (full) message ID to scroll to.\n     * @param animate Whether or not the scroll should be animated. Defaults to true.\n     */\n    doScrollToMessage(messageID, animate = true) {\n        this.botChatRef.current?.doScrollToMessage(messageID, animate);\n    }\n    /**\n     * Returns the element that represents the input field (text area) on the main message area.\n     */\n    getMessageInput() {\n        return this.botChatRef.current?.getMessageInput();\n    }\n    /**\n     * Returns the element that represents the input field (text area) on the home screen.\n     */\n    getHomeScreenInput() {\n        return this.homeScreenInputRef.current?.getMessageInput();\n    }\n    /**\n     * Adds the given class name to the main window element.\n     */\n    addClassName(name) {\n        this.setState(addClassNameToState(name));\n    }\n    /**\n     * Removes the given class name from the main window element.\n     */\n    removeClassName(name) {\n        this.setState(removeClassNameFromState(name));\n    }\n    /**\n     * Returns the chat widget portion of the application.\n     *\n     * Note: If the home screen mini variation is to be displayed, the hydration panel shouldn't be rendered because\n     * otherwise it appears for a split second before home screen is loaded.\n     */\n    renderChat() {\n        const { isHydrated, config, chatWidthBreakpoint } = this.props;\n        const { areModulesLoaded } = this.state;\n        const showCovering = this.state.numPanelsCovering > 0 &&\n            config.public.layout?.hasContentMaxWidth &&\n            chatWidthBreakpoint === ChatWidthBreakpoint.WIDE;\n        return (React.createElement(\"div\", { className: \"WACWidget--content\" },\n            this.renderCustomPanel(),\n            this.renderHydrationPanel(),\n            isHydrated && areModulesLoaded && (React.createElement(React.Fragment, null,\n                this.renderDisclaimerPanel(),\n                this.renderResponsePanel(),\n                this.renderHomeScreenPanel(),\n                this.renderIFramePanel(),\n                this.renderViewSourcePanel(),\n                showCovering && React.createElement(\"div\", { className: \"WACBackgroundCover\" }),\n                this.renderBotChat()))));\n    }\n    /**\n     * Render the chat with the assistant.\n     */\n    renderBotChat() {\n        const { botName, languagePack, config, serviceManager, botMessageState, agentState, allMessageItemsByID, isHydrated, locale, theme, headerDisplayName, headerAvatarConfig: headerAvatar, } = this.props;\n        const { numPanelsAnimating, numPanelsOpen, isHydrationAnimationComplete } = this.state;\n        const inputState = selectInputState(this.props);\n        const agentDisplayState = selectAgentDisplayState(this.props);\n        const showDisclaimer = this.getShowDisclaimer();\n        let hideBotContainer;\n        if (!isHydrationAnimationComplete) {\n            // If the Hydration animation is still running then hide the bot container.\n            hideBotContainer = true;\n        }\n        else if (numPanelsAnimating > 0) {\n            // If any panel is animating then show the bot container for the duration of the animation.\n            hideBotContainer = false;\n        }\n        else if (numPanelsOpen > 0) {\n            // Otherwise if any panel is open than hide the bot container.\n            hideBotContainer = true;\n        }\n        return (React.createElement(HideComponent, { className: \"WACBotContainer\", hidden: hideBotContainer },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(Chat, { botName: botName, headerDisplayName: headerDisplayName, headerAvatarConfig: headerAvatar, ref: this.botChatRef, languagePack: languagePack, config: config, serviceManager: serviceManager, onClose: this.onClose, onCloseAndRestart: this.onCloseAndRestart, messageState: botMessageState, onSendInput: (text) => this.onSendInput(text, MessageSendSource.MESSAGE_INPUT), agentState: agentState, agentDisplayState: agentDisplayState, allMessageItemsByID: allMessageItemsByID, onRestart: this.onRestart, isHydrated: isHydrated, isHydrationAnimationComplete: isHydrationAnimationComplete && !showDisclaimer, inputState: inputState, onToggleHomeScreen: this.onToggleHomeScreen, onUserTyping: this.onUserTyping, locale: locale, useAITheme: theme.useAITheme, carbonTheme: theme.carbonTheme }))));\n    }\n    renderInnerHydrationPanel() {\n        const { botMessageState, serviceManager, languagePack, headerDisplayName, persistedToBrowserStorage, homeScreenConfig, } = this.props;\n        const { areModulesLoaded } = this.state;\n        // We need to make an educated guess whether the home screen is going to be displayed after hydration is\n        // complete, so we can show a version of the hydration panel that matches to avoid a flickering transition when\n        // the hydration panel is only displayed very briefly. If the user's assistant session has expired, this will be\n        // wrong, but it's rare enough to be not worth addressing.\n        const useHomeScreenVersion = homeScreenConfig.is_on &&\n            !persistedToBrowserStorage.launcherState.hasSentNonWelcomeMessage;\n        return (React.createElement(HydrationPanel, { headerDisplayName: headerDisplayName, isHydrated: botMessageState.isHydratingCounter === 0 && areModulesLoaded, serviceManager: serviceManager, onClose: this.onClose, languagePack: languagePack, useHomeScreenVersion: useHomeScreenVersion }));\n    }\n    /**\n     * Render the panel with the loading state when we are hydrating the Carbon AI chat.\n     */\n    renderHydrationPanel() {\n        const { botMessageState, serviceManager, catastrophicErrorType, persistedToBrowserStorage, } = this.props;\n        const { viewState } = persistedToBrowserStorage.launcherState;\n        const { areModulesLoaded } = this.state;\n        return (React.createElement(OverlayPanel, { onOpenStart: () => this.onPanelOpenStart(false), onCloseStart: this.onPanelCloseStart, onOpenEnd: this.onPanelOpenEnd, onCloseEnd: () => {\n                this.onHydrationPanelClose();\n                this.onPanelCloseEnd(false);\n            }, animationOnOpen: AnimationInType.NONE, animationOnClose: AnimationOutType.NONE, shouldOpen: (botMessageState.isHydratingCounter > 0 || !areModulesLoaded) &&\n                !catastrophicErrorType &&\n                viewState.mainWindow, shouldHide: false, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.HYDRATING }, this.renderInnerHydrationPanel()));\n    }\n    /**\n     * Render the panel for when the Carbon AI chat completely fails.\n     */\n    renderCatastrophicPanel() {\n        const { serviceManager, botName, languagePack, headerDisplayName } = this.props;\n        return (React.createElement(OverlayPanel, { animationOnOpen: AnimationInType.NONE, animationOnClose: AnimationOutType.NONE, shouldOpen: true, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.CATASTROPHIC },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(CatastrophicError, { onClose: this.onClose, headerDisplayName: headerDisplayName, serviceManager: serviceManager, languagePack: languagePack, onRestart: this.onRestart, showHeader: true, botName: botName }))));\n    }\n    /**\n     * Render the disclaimer panel.\n     */\n    renderDisclaimerPanel() {\n        const { serviceManager, config } = this.props;\n        const showDisclaimer = this.getShowDisclaimer();\n        return config.public.disclaimer?.is_on ? (React.createElement(OverlayPanel, { onOpenStart: () => this.onPanelOpenStart(false), onCloseStart: this.onPanelCloseStart, onOpenEnd: this.onPanelOpenEnd, onCloseEnd: () => this.onPanelCloseEnd(false), animationOnOpen: AnimationInType.FADE_IN, animationOnClose: AnimationOutType.FADE_OUT, shouldOpen: showDisclaimer, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.DISCLAIMER },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(Disclaimer, { onAcceptDisclaimer: this.onAcceptDisclaimer, onClose: this.onClose, disclaimerHTML: config.public.disclaimer?.disclaimerHTML, disclaimerAcceptButtonRef: this.disclaimerRef })))) : null;\n    }\n    /**\n     * Render the home screen panel.\n     */\n    renderHomeScreenPanel() {\n        const { isHydrationAnimationComplete } = this.state;\n        const showHomeScreen = this.getShowHomeScreen();\n        return (React.createElement(Suspense, { fallback: null },\n            React.createElement(HomeScreenContainer, { onPanelOpenStart: () => this.onPanelOpenStart(false), onPanelOpenEnd: this.onPanelOpenEnd, onPanelCloseStart: this.onPanelCloseStart, onPanelCloseEnd: () => this.onPanelCloseEnd(false), onClose: this.onClose, onCloseAndRestart: this.onCloseAndRestart, onSendBotInput: (text) => this.onSendInput(text, MessageSendSource.HOME_SCREEN_INPUT), onSendButtonInput: this.onSendHomeButtonInput, onRestart: this.onRestart, showHomeScreen: showHomeScreen, isHydrationAnimationComplete: isHydrationAnimationComplete, homeScreenInputRef: this.homeScreenInputRef, onToggleHomeScreen: this.onToggleHomeScreen, requestFocus: this.requestFocus })));\n    }\n    /**\n     * Renders a panel containing an iframe to load the provided source. Only render the iframe panel if there's a source\n     * to load. The reason being that the panel will receive an empty source and after 10 seconds will announce that the\n     * source is not available.\n     */\n    renderIFramePanel() {\n        const { serviceManager, iFramePanelState } = this.props;\n        return (React.createElement(OverlayPanel, { className: \"WAC__overlay--covering\", onOpenStart: () => this.onPanelOpenStart(true), onCloseStart: this.onPanelCloseStart, onOpenEnd: this.onPanelOpenEnd, onCloseEnd: () => this.onPanelCloseEnd(true), animationOnOpen: AnimationInType.SLIDE_IN_FROM_BOTTOM, animationOnClose: AnimationOutType.SLIDE_OUT_TO_BOTTOM, shouldOpen: iFramePanelState.isOpen, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.IFRAME },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(IFramePanel, { useAITheme: this.props.theme.useAITheme, ref: this.iframePanelRef, onClickClose: this.onClose, onClickRestart: this.onRestart, onClickCloseAndRestart: this.onCloseAndRestart }))));\n    }\n    renderViewSourcePanel() {\n        const { serviceManager, viewSourcePanelState } = this.props;\n        return (React.createElement(OverlayPanel, { className: \"WAC__overlay--covering\", onOpenStart: () => this.onPanelOpenStart(true), onCloseStart: this.onPanelCloseStart, onOpenEnd: this.onPanelOpenEnd, onCloseEnd: () => this.onPanelCloseEnd(true), animationOnOpen: AnimationInType.SLIDE_IN_FROM_BOTTOM, animationOnClose: AnimationOutType.SLIDE_OUT_TO_BOTTOM, shouldOpen: viewSourcePanelState.isOpen, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.CONVERSATIONAL_SEARCH_CITATION },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(ViewSourcePanel, { ref: this.viewSourcePanelRef, onClickClose: this.onClose, onClickRestart: this.onRestart, onClickCloseAndRestart: this.onCloseAndRestart }))));\n    }\n    /**\n     * Renders a custom panel that can host Deb content.\n     */\n    renderCustomPanel() {\n        return (React.createElement(CustomPanelExport, { useAITheme: this.props.theme.useAITheme, onClose: this.onClose, onClickRestart: this.onRestart, onCloseAndRestart: this.onCloseAndRestart, onPanelOpenStart: () => this.onPanelOpenStart(true), onPanelOpenEnd: this.onPanelOpenEnd, onPanelCloseStart: this.onPanelCloseStart, onPanelCloseEnd: () => this.onPanelCloseEnd(true) }));\n    }\n    /**\n     * Renders a panel that is surfaced by an authored response type that supports opening a panel either through user\n     * interaction or automatically.\n     */\n    renderResponsePanel() {\n        if (!this.props.responsePanelState.localMessageItem) {\n            return null;\n        }\n        const { isOpen, localMessageItem, isMessageForInput } = this.props.responsePanelState;\n        const panelOptions = (localMessageItem?.item).panel;\n        const eventName = `\"Show panel\" opened`;\n        const eventDescription = \"Panel opened through panel response type\";\n        const overlayPanelName = OverlayPanelName.PANEL_RESPONSE;\n        return (React.createElement(Suspense, { fallback: null },\n            React.createElement(BodyAndFooterPanelComponent, { eventName: eventName, eventDescription: eventDescription, overlayPanelName: overlayPanelName, isOpen: isOpen, isMessageForInput: isMessageForInput, localMessageItem: localMessageItem, title: panelOptions?.title, showAnimations: panelOptions?.show_animations, useAITheme: this.props.theme.useAITheme, requestFocus: this.requestFocus, onClose: this.onClose, onClickRestart: this.onRestart, onCloseAndRestart: this.onCloseAndRestart, onClickBack: () => this.props.serviceManager.store.dispatch(actions.setResponsePanelIsOpen(false)), onPanelOpenStart: () => this.onPanelOpenStart(true), onPanelOpenEnd: this.onPanelOpenEnd, onPanelCloseStart: this.onPanelCloseStart, onPanelCloseEnd: () => {\n                    this.onPanelCloseEnd(true);\n                    this.props.serviceManager.store.dispatch(actions.setResponsePanelContent(null, false));\n                } })));\n    }\n    renderWidget() {\n        const { serviceManager, useCustomHostElement, locale, catastrophicErrorType, config, isHydrated, theme, chatWidthBreakpoint, layout, languagePack, } = this.props;\n        const { closing, open, extraClassNames } = this.state;\n        const localeClassName = `WACLocale-${locale || \"en\"}`;\n        const showGlass = config.public.enableFocusTrap &&\n            open &&\n            !config.public.hideCloseButton &&\n            !config.public.headerConfig.hideMinimizeButton;\n        const trapActive = Boolean(showGlass && isHydrated);\n        const isWideWidth = chatWidthBreakpoint === ChatWidthBreakpoint.WIDE;\n        // The empty div below is required because FocusTrap will attach a ref to it overwriting our ref which we have\n        // on the next div below that.\n        /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n        return (React.createElement(FocusTrap, { active: trapActive },\n            React.createElement(\"div\", { className: cx(\"WACMainWindow\", \"WACWidget__FocusTrapContainer\", ...extraClassNames), ref: this.mainWindowRef },\n                showGlass && React.createElement(\"div\", { className: \"WACWidget__FocusTrapGlass\" }),\n                React.createElement(\"div\", { id: `WACWidget${serviceManager.namespace.suffix}`, className: cx(`WACWidget ${localeClassName}`, {\n                        \"WACWidget--rounded\": theme.corners === CornersType.ROUND,\n                        \"WACWidget--defaultElement\": !useCustomHostElement,\n                        \"WACWidget--launched\": !closing,\n                        \"WACWidget--closing\": closing,\n                        \"WACWidget--closed\": !open,\n                        \"WACWidget--maxWidth\": isWideWidth && layout.hasContentMaxWidth,\n                        [WIDTH_BREAKPOINT_NARROW]: chatWidthBreakpoint === ChatWidthBreakpoint.NARROW,\n                        [WIDTH_BREAKPOINT_STANDARD]: chatWidthBreakpoint === ChatWidthBreakpoint.STANDARD,\n                        [WIDTH_BREAKPOINT_WIDE]: isWideWidth,\n                    }), ref: this.containerRef },\n                    React.createElement(VisuallyHidden, null,\n                        React.createElement(\"h1\", null, languagePack.window_title)),\n                    catastrophicErrorType && this.renderCatastrophicPanel(),\n                    !catastrophicErrorType && (React.createElement(\"div\", { ref: this.animationContainerRef, className: \"WACWidget__animationContainer\", onScroll: () => {\n                            // When Carbon AI chat initially opens, it's possible for focusable elements inside a custom panel to\n                            // cause the element to scroll during the opening animations. The listener to reset any\n                            // scrolling that is happening.\n                            if (this.animationContainerRef.current.scrollTop !== 0) {\n                                this.animationContainerRef.current.scrollTop = 0;\n                            }\n                        } }, this.renderChat())),\n                    React.createElement(\"div\", { className: \"WACMainWindowModalHost\", ref: this.setModalPortalHostElement })))));\n    }\n    render() {\n        return (React.createElement(ModalPortalRootContext.Provider, { value: this.state.modalPortalHostElement }, this.renderWidget()));\n    }\n}\nvar MainWindow$1 = connect((state) => state, null, null, {\n    forwardRef: true,\n})(MainWindow);\n\nexport { MainWindow$1 as default };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Returns a function that can be used to modify a state object to add a class name.\n */\nfunction addClassNameToState(name) {\n    return (previousState) => {\n        const currentIndex = previousState.extraClassNames.indexOf(name);\n        if (currentIndex === -1) {\n            return {\n                extraClassNames: [...previousState.extraClassNames, name],\n            };\n        }\n        return null;\n    };\n}\n/**\n * Returns a function that can be used to modify a state object to remove a class name.\n */\nfunction removeClassNameFromState(name) {\n    return (previousState) => {\n        return {\n            extraClassNames: previousState.extraClassNames.filter((value) => value !== name),\n        };\n    };\n}\n\nexport { addClassNameToState, removeClassNameFromState };\n","import 'intl-pluralrules';\nimport cx from 'classnames';\nimport React, { useState, useMemo, useRef, Suspense } from 'react';\nimport { RawIntlProvider, useIntl } from 'react-intl';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { AriaAnnouncerProvider } from '../components/aria/AriaAnnouncerProvider.js';\nimport { LauncherContainer } from '../components/launcher/LauncherContainer.js';\nimport { LanguagePackContext } from '../contexts/LanguagePackContext.js';\nimport { WindowSizeContext } from '../contexts/WindowSizeContext.js';\nimport { ServiceManagerContext } from '../contexts/ServiceManagerContext.js';\nimport { useOnMount } from '../hooks/useOnMount.js';\nimport actions from '../store/actions.js';\nimport { IS_PHONE_IN_PORTRAIT_MODE, IS_PHONE } from '../utils/browserUtils.js';\nimport { consoleDebug, consoleError } from '../utils/miscUtils.js';\nimport { convertCSSVariablesToString, getThemeClassNames } from '../utils/styleUtils.js';\nimport MainWindow from './main/MainWindow.js';\nimport { lazyTourComponent } from '../../dynamic-imports/dynamic-imports.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst TourContainerLazy = lazyTourComponent();\nfunction App({ serviceManager, hostElement, applicationStyles, fontStyles, }) {\n    const { store } = serviceManager;\n    const { config } = store.getState();\n    if (config.public.debug) {\n        consoleDebug(\"[render] Called render\");\n    }\n    const combinedStyles = `${fontStyles ? `${fontStyles} ` : \"\"}${applicationStyles}`;\n    return (React.createElement(Provider, { store: store },\n        React.createElement(AppContainer, { serviceManager: serviceManager, hostElement: hostElement, applicationStyles: combinedStyles })));\n}\nfunction AppContainer({ serviceManager, hostElement, applicationStyles, }) {\n    const languagePack = useSelector((state) => state.languagePack);\n    const cssVariableOverrides = useSelector((state) => state.cssVariableOverrides);\n    const theme = useSelector((state) => state.theme);\n    const config = useSelector((state) => state.config);\n    const layout = useSelector((state) => state.layout);\n    const { namespace } = serviceManager;\n    const { originalName } = namespace;\n    const dispatch = useDispatch();\n    const [windowSize, setWindowSize] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n    });\n    const cssVariableOverrideString = useMemo(() => {\n        return convertCSSVariablesToString(cssVariableOverrides);\n    }, [cssVariableOverrides]);\n    // If direction is \"rtl\" then the Carbon AI chat will render with the right-to-left styles.\n    // If direction is anything else, the Carbon AI chat uses left-to-right styles by default.\n    // If document.dir cannot be determined, using auto will inherit directionality from the page.\n    const dir = document.dir || \"auto\";\n    useOnMount(() => {\n        // Add the listener for updating the window size.\n        const windowListener = () => {\n            setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n        };\n        window.addEventListener(\"resize\", windowListener);\n        // Add the listener for detecting page visibilities changes.\n        const visibilityListener = () => {\n            dispatch(actions.setIsBrowserPageVisible(document.visibilityState === \"visible\"));\n        };\n        document.addEventListener(\"visibilitychange\", visibilityListener);\n        return () => {\n            window.removeEventListener(\"resize\", windowListener);\n            document.removeEventListener(\"visibilitychange\", visibilityListener);\n        };\n    });\n    return (React.createElement(\"div\", { className: \"WACContainer\", \"data-namespace\": originalName, ref: (node) => {\n            if (node && hostElement) {\n                // React doesn't let us set \"!important\" in a style value inline.\n                node.style.setProperty(\"height\", \"100%\", \"important\");\n                node.style.setProperty(\"width\", \"100%\", \"important\");\n            }\n        } },\n        React.createElement(\"div\", { className: \"WACContainer--styles\" },\n            React.createElement(\"style\", { \"data-base-styles\": \"true\", nonce: config.public.cspNonce }, applicationStyles || `.WACContainer { visibility: hidden; }`),\n            React.createElement(\"style\", { \"data-variables-custom\": \"true\", nonce: config.public.cspNonce }, cssVariableOverrideString)),\n        React.createElement(\"div\", { className: cx(`WACContainer--render`, getThemeClassNames(theme), {\n                \"WACContainer-disableMobileEnhancements\": hostElement && config.public.disableCustomElementMobileEnhancements,\n                \"WAC-isPhone\": IS_PHONE && !config.public.disableCustomElementMobileEnhancements,\n                \"WAC-isPhonePortraitMode\": IS_PHONE_IN_PORTRAIT_MODE &&\n                    !config.public.disableCustomElementMobileEnhancements,\n                \"WAC--frameless\": !layout?.showFrame,\n            }), dir: dir },\n            React.createElement(WindowSizeContext.Provider, { value: windowSize },\n                React.createElement(ServiceManagerContext.Provider, { value: serviceManager },\n                    React.createElement(RawIntlProvider, { value: serviceManager.intl },\n                        React.createElement(LanguagePackContext.Provider, { value: languagePack },\n                            React.createElement(AriaAnnouncerProvider, null,\n                                React.createElement(MainContainer, { serviceManager: serviceManager, hostElement: hostElement })))))))));\n}\nfunction MainContainer(props) {\n    const { hostElement, serviceManager } = props;\n    // We always render the launcher (unless state.launcher.config.is_on is set to false), but we hide it with CSS\n    // if the tour or main Carbon AI chat window are open.\n    const showLauncher = useSelector((state) => state.launcher.config.is_on);\n    const { viewState } = useSelector((state) => state.persistedToBrowserStorage.launcherState);\n    const tourContainerRef = useRef();\n    const mainWindowRef = useRef();\n    const showTour = viewState.tour;\n    // This indicates if the tour has been opened at least once. The tour isn't rendered until it's been opened the first\n    // time. Rendering of the tour is delayed to prevent the tour buttons being clicked by pen testing tools. After the\n    // tour has been opened once it's simply shown and hidden using CSS, instead of unmounting it. CSS is used to show\n    // and hide the tour so that the scroll position and video playback positions can be preserved within steps when\n    // the tour is hidden.\n    const showedTourOnce = useRef(showTour);\n    showedTourOnce.current = showTour || showedTourOnce.current;\n    const intl = useIntl();\n    const namespace = serviceManager.namespace.originalName;\n    const languageKey = namespace\n        ? \"window_ariaChatRegionNamespace\"\n        : \"window_ariaChatRegion\";\n    const regionLabel = intl.formatMessage({ id: languageKey }, { namespace });\n    useOnMount(() => {\n        /**\n         * Puts focus on the default element for the currently open window in the application.\n         */\n        function requestFocus() {\n            try {\n                const { persistedToBrowserStorage } = serviceManager.store.getState();\n                const { viewState } = persistedToBrowserStorage.launcherState;\n                if (viewState.tour) {\n                    // If there is a tour visible prioritize focusing on that over the main window.\n                    tourContainerRef.current?.requestFocus();\n                }\n                else if (viewState.mainWindow) {\n                    // If there is no tour visible then focus on the main window.\n                    mainWindowRef.current?.requestFocus();\n                }\n            }\n            catch (error) {\n                consoleError(\"An error occurred in App.requestFocus\", error);\n            }\n        }\n        serviceManager.appWindow = { requestFocus };\n    });\n    // Always render the main window and let it control whether it should be visible with css. Only render the tour\n    // once it's been opened once.\n    return (React.createElement(\"div\", { className: \"WACWidget__regionContainer\", role: \"region\", \"aria-label\": regionLabel },\n        React.createElement(MainWindow, { mainWindowRef: mainWindowRef, useCustomHostElement: Boolean(hostElement), serviceManager: serviceManager }),\n        showedTourOnce.current && (React.createElement(Suspense, { fallback: null },\n            React.createElement(TourContainerLazy, { ref: tourContainerRef }))),\n        showLauncher && React.createElement(LauncherContainer, null)));\n}\n\nexport { App as default };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a utility component that is used to manage all the user defined responses that are rendered by Carbon AI chat.\n * When a user defined response message is received by Carbon AI chat, it will fire a \"userDefinedResponse\" event that\n * provides an HTML element to which your application can attach user defined content. React portals are a mechanism\n * that allows you to render a component in your React application but attach that component to the HTML element\n * that was provided by Carbon AI chat.\n *\n * This component will render a portal for each user defined response. The contents of that portal will be\n * determined by calling the provided \"renderResponse\" render prop.\n */\nfunction UserDefinedResponsePortalsContainer({ chatInstance, renderUserDefinedResponse, userDefinedResponseEventsBySlot, }) {\n    // All we need to do to enable the React portals is to render each portal somewhere in your application (it\n    // doesn't really matter where).\n    return renderUserDefinedResponse\n        ? Object.entries(userDefinedResponseEventsBySlot).map(([slot, slotState]) => {\n            const { element } = slotState;\n            if (!element) {\n                return null;\n            }\n            return (React.createElement(UserDefinedResponseComponentPortal, { key: slot, hostElement: element }, renderUserDefinedResponse(slotState, chatInstance)));\n        })\n        : null;\n}\n/**\n * This is the component that will attach a React portal to the given host element. The host element is the element\n * provided by Carbon AI chat where your user defined response will be displayed in the DOM. This portal will attach any React\n * children passed to it under this component so you can render the response using your own React application. Those\n * children will be rendered under the given element where it lives in the DOM.\n */\nfunction UserDefinedResponseComponentPortal({ hostElement, children, }) {\n    return ReactDOM.createPortal(children, hostElement);\n}\nconst UserDefinedResponsePortalsContainerExport = React.memo(UserDefinedResponsePortalsContainer);\n\nexport { UserDefinedResponsePortalsContainerExport as UserDefinedResponsePortalsContainer };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a utility component that is used to manage all the writeable elements that are rendered by Carbon AI chat.\n * React portals are a mechanism that allows you to render a component in your React application but attach that\n * component to the HTML element that was provided by Carbon AI chat.\n *\n * This component will render a portal for each user defined response. The contents of that portal will be\n * determined by calling the provided \"renderResponse\" render prop.\n */\nfunction WriteableElementsPortalsContainer({ chatInstance, renderResponseMap, }) {\n    // All we need to do to enable the React portals is to render each portal somewhere in your application (it\n    // doesn't really matter where).\n    return (React.createElement(React.Fragment, null, Object.keys(chatInstance.writeableElements).map((key) => {\n        const responseItem = renderResponseMap[key];\n        return responseItem ? (React.createElement(WriteableElementsComponentPortal, { key: key, hostElement: chatInstance.writeableElements[key] }, responseItem)) : null;\n    })));\n}\n/**\n * This is the component that will attach a React portal to the given host element. The host element is the element\n * provided by Carbon AI chat where your user defined response will be displayed in the DOM. This portal will attach any React\n * children passed to it under this component so you can render the response using your own React application. Those\n * children will be rendered under the given element where it lives in the DOM.\n */\nfunction WriteableElementsComponentPortal({ hostElement, children, }) {\n    return ReactDOM.createPortal(children, hostElement);\n}\nconst WriteableElementsPortalsContainerExport = React.memo(WriteableElementsPortalsContainer);\n\nexport { WriteableElementsPortalsContainerExport as WriteableElementsPortalsContainer };\n","import isEqual from 'lodash-es/isEqual.js';\nimport React, { useState, useRef, useEffect } from 'react';\nimport Chat from '../../shared/Chat.js';\nimport { instantiateWidget } from '../../shared/chatEntryFunctions.js';\nimport App from '../../shared/containers/App.js';\nimport { sleep } from '../../shared/utils/lang/promiseUtils.js';\nimport { UserDefinedResponsePortalsContainer as UserDefinedResponsePortalsContainerExport } from './UserDefinedResponsePortalsContainer.js';\nimport { WriteableElementsPortalsContainer as WriteableElementsPortalsContainerExport } from './WriteableElementsPortalsContainer.js';\nimport { BusEventType } from '../../../types/events/eventBusTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component actually loads the Chat class and renders the Chat.\n *\n * It handles writing Portals for user_defined response types as well and teardown and build activities.\n */\nfunction AppContainer({ config, onBeforeRender, onAfterRender, renderUserDefinedResponse, renderWriteableElements, container, setParentInstance, element, }) {\n    // A state value that contains the current instance of Carbon AI chat.\n    const [instance, setInstance] = useState(null);\n    const [renderProps, setRenderProps] = useState(null);\n    const [applicationStyles, setApplicationStyles] = useState(null);\n    /**\n     * In the ChatContainer React application, we need to know if instance has been nulled out because the chat\n     * was destroyed to be able to re-create the container element that was destroyed.\n     */\n    const setInstances = (instance) => {\n        setInstance(instance);\n        setParentInstance?.(instance);\n    };\n    // This state will be used to record all the user defined response events that are fired from the widget. These\n    // events contain the HTML elements that we will attach our portals to as well as the messages that we wish to\n    // render in the message.\n    const [userDefinedResponseEventsBySlot, setUserDefinedResponseEventsBySlot] = useState({});\n    // The most recent Carbon AI chat that was load by this component.\n    const managedWebChatRef = useRef(null);\n    // The previous Carbon AI chat config.\n    const previousConfigRef = useRef(null);\n    useEffect(() => {\n        const previousConfig = previousConfigRef.current;\n        previousConfigRef.current = config;\n        async function render({ serviceManager }) {\n            // For the npm package, we currently assume Carbon fonts are loaded on the page already.\n            // This might have to change if we allow white labeling some day.\n            const applicationStyles = await loadStyles();\n            serviceManager.container = container;\n            if (serviceManager.customHostElement) {\n                // Set container to grow to size of provided element. We don't do this sooner because \"body\" might be set to\n                // display: flex;\n                container.style.setProperty(\"width\", \"100%\", \"important\");\n                container.style.setProperty(\"height\", \"100%\", \"important\");\n            }\n            else {\n                // We want to make sure it doesn't interfere with the body by covering anything up so we'll set it to a 0 size.\n                // The child elements use position: fixed along with a size that break out of the container.\n                container.style.setProperty(\"width\", \"0\", \"important\");\n                container.style.setProperty(\"height\", \"0\", \"important\");\n            }\n            // Make sure that the renderProps are set before we resolve the render function to make sure the component is\n            // actually rendered on time.\n            setApplicationStyles(applicationStyles);\n            setRenderProps({\n                serviceManager,\n            });\n            await sleep(0);\n        }\n        // isEqual performs a deep check, but for elements only checks the reference.\n        if (!isEqual(previousConfig, config)) {\n            // We'll use this managed object to keep track of the Carbon AI chat instance we are creating for this effect.\n            const managedWebChat = {\n                instance: null,\n                shouldDestroy: false,\n                config,\n            };\n            if (config) {\n                loadChat({\n                    managedWebChatRef,\n                    managedWebChat,\n                    render,\n                    setInstance: setInstances,\n                    onBeforeRender,\n                    onAfterRender,\n                    setUserDefinedResponseEventsBySlot,\n                    element,\n                });\n            }\n            return () => {\n                destroyWebChat(managedWebChat, setInstances);\n                previousConfigRef.current = null;\n            };\n        }\n        return undefined;\n        // We purposely exclude onBeforeRender and onAfterRender here to prevent unneeded tear downs.\n        // We will only actually re-render if the config changes, so those two functions changing doesn't bother us.\n        // If there is a new config, we will pick up the new onBeforeRender and onAfterRender anyway.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [config, container]);\n    if (renderProps && instance) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(App, { serviceManager: renderProps.serviceManager, hostElement: renderProps.serviceManager.customHostElement, applicationStyles: applicationStyles }),\n            renderUserDefinedResponse && (React.createElement(UserDefinedResponsePortalsContainerExport, { chatInstance: instance, renderUserDefinedResponse: renderUserDefinedResponse, userDefinedResponseEventsBySlot: userDefinedResponseEventsBySlot })),\n            renderWriteableElements && (React.createElement(WriteableElementsPortalsContainerExport, { chatInstance: instance, renderResponseMap: renderWriteableElements }))));\n    }\n    return null;\n}\n/**\n * Destroys an instance of Carbon AI chat and marks it destroyed.\n */\nasync function destroyWebChat(managedWebChat, setInstance) {\n    if (managedWebChat) {\n        if (managedWebChat.instance) {\n            managedWebChat.instance.destroy();\n            await sleep(0);\n        }\n        managedWebChat.shouldDestroy = true;\n        managedWebChat.instance = null;\n    }\n    // Some cloak and daggers because setInstance isn't an async function and we want to make sure that in the case of\n    // the React Chat Container that the clearing of the instance has been registered and a new container element\n    // created to be used.\n    setInstance(null);\n    await sleep(0);\n}\n/**\n * Adds a \"userDefinedResponse\" event listener to the given Carbon AI chat instance that will use the given set function\n * to add new events to the list.\n */\nfunction addUserDefinedResponseHandler(webChatInstance, setUserDefinedResponseEventsBySlot) {\n    console.log({ webChatInstance });\n    /**\n     * This handler will fire each time a user defined response occurs and we will update our state by appending the\n     * event to the end of our events list. We have to make sure to create a new array in order to trigger a re-render.\n     */\n    function userDefinedResponseHandler(event) {\n        setUserDefinedResponseEventsBySlot((userDefinedEventsBySlot) => {\n            return {\n                ...userDefinedEventsBySlot,\n                [event.data.slot]: {\n                    fullMessage: event.data.fullMessage,\n                    messageItem: event.data.message,\n                    element: event.data.element,\n                },\n            };\n        });\n    }\n    /**\n     * This handler will fire each time a user defined response occurs and we will update our state by appending the event to the end of our events list.\n     * We have to make sure to create a new array in order to trigger a re-render.\n     * We use a map here to make sure there is only one event per slot name (taking the latest).\n     */\n    function userDefinedChunkHandler(event) {\n        if (\"complete_item\" in event.data.chunk) {\n            const messageItem = event.data.chunk.complete_item;\n            setUserDefinedResponseEventsBySlot((userDefinedEventsBySlot) => {\n                return {\n                    ...userDefinedEventsBySlot,\n                    [event.data.slot]: {\n                        messageItem,\n                        element: event.data.element,\n                        // We blow away partial items here so we don't have to track them forever for no reason.\n                    },\n                };\n            });\n        }\n        else if (\"partial_item\" in event.data.chunk) {\n            const itemChunk = event.data.chunk.partial_item;\n            setUserDefinedResponseEventsBySlot((userDefinedEventsBySlot) => {\n                return {\n                    ...userDefinedEventsBySlot,\n                    [event.data.slot]: {\n                        partialItems: [\n                            ...(userDefinedEventsBySlot[event.data.slot]?.partialItems || []),\n                            itemChunk,\n                        ],\n                        element: event.data.element,\n                    },\n                };\n            });\n        }\n    }\n    // Also make sure to clear the list if a restart occurs.\n    function restartHandler() {\n        setUserDefinedResponseEventsBySlot({});\n    }\n    webChatInstance.on({\n        type: BusEventType.CHUNK_USER_DEFINED_RESPONSE,\n        handler: userDefinedChunkHandler,\n    });\n    webChatInstance.on({\n        type: BusEventType.USER_DEFINED_RESPONSE,\n        handler: userDefinedResponseHandler,\n    });\n    webChatInstance.on({\n        type: BusEventType.RESTART_CONVERSATION,\n        handler: restartHandler,\n    });\n}\nasync function loadChat({ managedWebChatRef, managedWebChat, render, setInstance, onBeforeRender, onAfterRender, setUserDefinedResponseEventsBySlot, element, }) {\n    // Each time the Carbon AI chat config settings change (or this component is mounted), we need to destroy any previous\n    // Carbon AI chat and create a new Carbon AI chat.\n    // First look at the old ref and destroy it if its supposed to be destroyed.\n    await destroyWebChat(managedWebChatRef.current, setInstance);\n    // Update the ref to the new managedWebChat.\n    managedWebChatRef.current = managedWebChat;\n    // Just double check that the new one also isn't supposed to be destroyed.\n    if (managedWebChat.shouldDestroy) {\n        await destroyWebChat(managedWebChat, setInstance);\n        return;\n    }\n    // Create Carbon AI chat here.\n    const widget = await instantiateWidget(managedWebChat.config, () => Promise.resolve(Chat), Promise.resolve(render), element);\n    const instance = await widget.start();\n    addUserDefinedResponseHandler(instance, setUserDefinedResponseEventsBySlot);\n    onBeforeRender?.(instance);\n    await instance.render();\n    onAfterRender?.(instance);\n    setInstance(instance);\n    managedWebChat.instance = instance;\n    if (managedWebChat.shouldDestroy) {\n        await destroyWebChat(managedWebChat, setInstance);\n    }\n}\nconst AppContainerExport = React.memo(AppContainer);\nconst loadBaseStyles = async () => {\n    const { default: styles } = await import('../../shared/styles/export.scss.js');\n    return styles;\n};\nconst loadCarbon = async () => {\n    const { default: carbon } = await import('../../shared/styles/export.carbon.scss.js');\n    return carbon;\n};\nasync function loadStyles() {\n    const [styles, carbonStyles] = await Promise.all([\n        loadBaseStyles(),\n        loadCarbon(),\n    ]);\n    return carbonStyles + styles;\n}\n\nexport { AppContainerExport as AppContainer };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport '@carbon/web-components/es-custom/components/loading/loading-icon.js';\nimport CarbonLoadingElement from '@carbon/web-components/es-custom/components/loading/loading.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst Loading = createComponent({\n    tagName: 'cds-custom-loading',\n    elementClass: CarbonLoadingElement,\n    react: React,\n});\n\nexport { Loading as default };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst AriaAnnouncerContext = React.createContext(null);\n\nexport { AriaAnnouncerContext };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst CSS_CLASS_PREFIX = \"cds--aichat\";\nconst WEB_COMPONENT_PREFIX = \"cds-aichat\";\n\nexport { CSS_CLASS_PREFIX, WEB_COMPONENT_PREFIX };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The different types of things we can generate UUIDs for. Our test cases generate sequential IDs instead of random\n * UUIDs to produce deterministic IDs that can be hardcoded in tests and snapshots. To minimize the disruption that\n * changes in these IDs can cause (like if a new ID gets inserted), we divide IDs by type where each type gets its own\n * sequence. The type is set in the highest segment of the sequential IDs that are generated. This enum is only used\n * for testing purposes and has no impact on production code. If you change the values of any of these items, it\n * might break test cases that have IDs hardcoded in them.\n */\nvar UUIDType;\n(function (UUIDType) {\n    UUIDType[UUIDType[\"MISCELLANEOUS\"] = 1] = \"MISCELLANEOUS\";\n    UUIDType[UUIDType[\"LOCAL_MESSAGE\"] = 2] = \"LOCAL_MESSAGE\";\n    UUIDType[UUIDType[\"MESSAGE\"] = 3] = \"MESSAGE\";\n    UUIDType[UUIDType[\"COMPONENT\"] = 4] = \"COMPONENT\";\n    UUIDType[UUIDType[\"USER\"] = 6] = \"USER\";\n    UUIDType[UUIDType[\"DEVICE_ID\"] = 8] = \"DEVICE_ID\";\n    UUIDType[UUIDType[\"FILE\"] = 9] = \"FILE\";\n})(UUIDType || (UUIDType = {}));\n\nexport { UUIDType };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Coerces the given value into an array. If the value is already an array, it is returned as-is. Otherwise it is\n * returned as a new array that contains the value as a single entry.\n *\n * @param value The value that's either an array or should be put into an array.\n */\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n/**\n * Executes an asynchronous \"forEach\" over the given array with the given callback function. The values are executed\n * in series (as opposed to in parallel). The array may not be modified during the loop.\n *\n * @param array The array to execute the loop over.\n * @param callbackFunction The function to call for each value in the array. The return value from the function will\n * be awaited which means if the value is a Promise, the loop will block until the Promise is resolved. The function\n * does not have to return a Promise in which case no waiting will occur.\n */\nasync function asyncForEach(array, callbackFunction) {\n    for (let index = 0; index < array.length; index++) {\n        const value = array[index];\n        // eslint-disable-next-line no-await-in-loop\n        await callbackFunction(value, index, array);\n    }\n}\n/**\n * Finds the last value in the given array that matches according to the provided predicate. The search will\n * begin from the end of the array and continue backwards until a match is found.\n *\n * @param array The array to search through.\n * @param predicate The function used to determine if each value matches.\n * @param startAt The index to start at in the array. Defaults to length -1.\n * @returns Returns the array value that was found to match or undefined if no match was found.\n */\nfunction findLast(array, predicate, startAt) {\n    const lastIndex = findLastIndex(array, predicate);\n    return lastIndex === -1 ? undefined : array[lastIndex];\n}\n/**\n * Finds the last value in the given array that matches according to the provided predicate. The search will\n * begin from the end of the array and continue backwards until a match is found.\n *\n * @param array The array to search through.\n * @param predicate The function used to determine if each value matches.\n * @param startAt The index to start at in the array. Defaults to length -1.\n * @returns Returns the array index that was found to match or -1 if no match was found.\n */\nfunction findLastIndex(array, predicate, startAt) {\n    if (array) {\n        const startingIndex = array.length - 1 ;\n        for (let index = startingIndex; index >= 0; index--) {\n            const value = array[index];\n            if (predicate(value, index, array)) {\n                return index;\n            }\n        }\n    }\n    return -1;\n}\n/**\n * Finds the last value in the given array whose matching object from the given map matches according to the\n * provided predicate. The search will begin from the end of the array and continue backwards until a match is\n * found. This functionality basically works the same as {@link findLast} except that it will retrieve the object\n * from the map for the given id and use the predicate on that object.\n *\n * @param keys The array to search through.\n * @param map The map that contains the objects to look for. The object will be looked up using the key from the\n * provided array.\n * @param predicate The function used to determine if each value matches.\n * @returns Returns the array value that was found to match or undefined if no match was found.\n */\nfunction findLastWithMap(keys, map, predicate) {\n    for (let index = keys.length - 1; index >= 0; index--) {\n        const key = keys[index];\n        const value = map[key];\n        if (predicate(value, index, keys)) {\n            return value;\n        }\n    }\n    return undefined;\n}\n/**\n * Returns the last value of the given array.\n */\nfunction arrayLastValue(array) {\n    return array && array.length ? array[array.length - 1] : null;\n}\n\nexport { arrayLastValue, asArray, asyncForEach, findLast, findLastWithMap };\n","import { MessageResponseTypes, ButtonItemType } from '../../../types/messaging/Messages.js';\nimport { uuid } from '../utils/lang/uuid.js';\nimport { streamItemID, isGridResponseType, isCarouselResponseType, isShowPanelButtonType, isResponseWithNestedItems, isItemSupportedInResponseBody, isCardResponseType, isButtonResponseType, createMessageResponseForItem } from '../utils/messageUtils.js';\nimport { consoleError } from '../utils/miscUtils.js';\nimport { UUIDType } from '../utils/lang/UUIDType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Takes data from the v2 message API ({@link MessageResponse}) and transforms into something usable by WAC\n * ({@link LocalMessageItem}).\n *\n * @param messageItem The individual item from the message to convert.\n * @param fullMessage The message object that came from the server.\n * instance.\n * @param isLatestWelcomeNode Indicates if this message is a new welcome message that has just been shown to the user\n * and isn't a historical welcome message.\n * ID as the message.\n * @param disableFadeAnimation Indicates if the entrance fade animation for the message should be disabled.\n */\nfunction outputItemToLocalItem(messageItem, fullMessage, isLatestWelcomeNode = false, disableFadeAnimation = false) {\n    // If the item comes with a streaming id, use that. Otherwise assign a new id.\n    const id = streamItemID(fullMessage.id, messageItem) || uuid(UUIDType.LOCAL_MESSAGE);\n    // Create the LocalMessage. It will temporarily have the extra \"output\" property it gets from the original\n    // MessageResponse object.\n    const localMessage = {\n        ui_state: {\n            id,\n            needsAnnouncement: !fullMessage.history.from_history,\n            disableFadeAnimation,\n        },\n        item: messageItem,\n        fullMessageID: fullMessage.id,\n    };\n    if (isLatestWelcomeNode) {\n        localMessage.ui_state.isWelcomeResponse = true;\n    }\n    return localMessage;\n}\n/**\n * Creates an empty skeleton of a {@link LocalMessageItem} with the inline_error response type.\n */\nfunction createLocalMessageForInlineError(text) {\n    const messageItem = {\n        response_type: MessageResponseTypes.INLINE_ERROR,\n        text,\n    };\n    return createLocalMessageForItem(messageItem);\n}\n/**\n * Creates an empty skeleton of a {@link LocalMessageItem} with the given item.\n */\nfunction createLocalMessageForItem(messageItem) {\n    const originalMessage = createMessageResponseForItem(messageItem);\n    const localMessage = outputItemToLocalItem(messageItem, originalMessage);\n    return { originalMessage, localMessage };\n}\n/**\n * Loops through the give list of message items to create local message items for each of them. This allows us to reuse\n * the existing ui_state functionality to update nested messages like we currently do with normal messages.\n *\n * @param localMessageItem The local message item to store nested local message items in.\n * @param originalMessage The original message response these nested messages came from.\n * @param fromHistory Indicates if the message was fetched from session history.\n * @param nestedLocalMessageItems A list to add local message items to as they're created.\n * @param allowFooter Determines whether buttons in the footer should render. This allows us to prevent deeply\n * nested buttons from rendering, such as a card with a footer nested in a panel.\n */\nfunction createLocalMessageItemsForNestedMessageItems(localMessageItem, originalMessage, fromHistory, nestedLocalMessageItems, allowFooter) {\n    const { item } = localMessageItem;\n    if (isGridResponseType(item)) {\n        localMessageItem.ui_state.gridLocalMessageItemIDs = item.rows.map((row) => {\n            return row.cells.map((cell) => {\n                const cellLocalMessageItemIDs = [];\n                createLocalMessageItemsForNestedType(\"items\", localMessageItem, cell.items, cellLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, (nestedMessageItem) => isSupportedMessageItemInBody(localMessageItem.item, nestedMessageItem), false // Grids shouldn't allow buttons.\n                );\n                return cellLocalMessageItemIDs;\n            });\n        });\n    }\n    else if (isCarouselResponseType(item)) {\n        localMessageItem.ui_state.itemsLocalMessageItemIDs = [];\n        createLocalMessageItemsForNestedType(\"items\", localMessageItem, item.items, localMessageItem.ui_state.itemsLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, (nestedMessageItem) => isSupportedMessageItemInBody(item, nestedMessageItem), \n        // A carousel as standalone response type should allow buttons. If a carousel is allowed to be nested in the\n        // future, this would be helpful to prevent buttons in it.\n        allowFooter);\n    }\n    else {\n        const bodyItems = item.body || item.panel?.body;\n        if (bodyItems) {\n            localMessageItem.ui_state.bodyLocalMessageItemIDs = [];\n            createLocalMessageItemsForNestedType(\"body\", localMessageItem, bodyItems, localMessageItem.ui_state.bodyLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, (nestedMessageItem) => isSupportedMessageItemInBody(item, nestedMessageItem), \n            // If nested items are being rendered in a panel, the footer should not be allowed.\n            !isShowPanelButtonType(item));\n        }\n        if (!allowFooter) {\n            return;\n        }\n        const footerItems = item.footer || item.panel?.footer;\n        if (footerItems) {\n            localMessageItem.ui_state.footerLocalMessageItemIDs = [];\n            createLocalMessageItemsForNestedType(\"footer\", localMessageItem, footerItems, localMessageItem.ui_state.footerLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, (nestedMessageItem) => isSupportedMessageItemInFooter(item, nestedMessageItem), \n            // A show panel button in a footer may open a panel that itself also has a footer. Nothing else in a footer can\n            // have nested items with footers.\n            !isShowPanelButtonType(item));\n        }\n    }\n}\nfunction createLocalMessageItemsForNestedType(type, localMessageItem, items, nestedMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, isSupported, allowFooter) {\n    items.forEach((nestedMessageItem) => {\n        if (isSupported(nestedMessageItem)) {\n            const nestedLocalMessageItem = outputItemToLocalItem(nestedMessageItem, originalMessage, false, true);\n            nestedMessageItemIDs.push(nestedLocalMessageItem.ui_state.id);\n            nestedLocalMessageItems.push(nestedLocalMessageItem);\n            if (isResponseWithNestedItems(nestedLocalMessageItem.item)) {\n                createLocalMessageItemsForNestedMessageItems(nestedLocalMessageItem, originalMessage, fromHistory, nestedLocalMessageItems, allowFooter);\n            }\n        }\n        else {\n            consoleError(`The \"${localMessageItem.item.response_type}\" response type does not support \"${nestedMessageItem.response_type}\" in \"${type}\" array.`);\n        }\n    });\n}\n/**\n * Determines if the given nested item is allowed to be displayed inside the given root message item body.\n */\nfunction isSupportedMessageItemInBody(rootMessageItem, nestedMessageItem) {\n    switch (rootMessageItem.response_type) {\n        case MessageResponseTypes.CARD:\n            return (!isCardResponseType(nestedMessageItem) &&\n                isItemSupportedInResponseBody(nestedMessageItem));\n        case MessageResponseTypes.CAROUSEL:\n            return isCardResponseType(nestedMessageItem);\n        case MessageResponseTypes.BUTTON:\n            return (rootMessageItem.button_type ===\n                ButtonItemType.SHOW_PANEL &&\n                isItemSupportedInResponseBody(nestedMessageItem));\n        case MessageResponseTypes.GRID:\n            return (!isCardResponseType(nestedMessageItem) &&\n                isItemSupportedInResponseBody(nestedMessageItem));\n        default:\n            return false;\n    }\n}\n/**\n * Determines if the given nested item is allowed to be displayed inside the given root message item footer. Only\n * the button response type should be allowed in the footer. Depending on the root message item, the show_panel\n * button type won't be allowed to render.\n */\nfunction isSupportedMessageItemInFooter(rootMessageItem, nestedMessageItem) {\n    if (isButtonResponseType(nestedMessageItem)) {\n        // The panel response type and show_panel button type should not support the button type \"show_panel\" in the\n        // footer. This is to prevent the user from opening a panel when a panel is already open.\n        if (isShowPanelButtonType(rootMessageItem)) {\n            return !isShowPanelButtonType(nestedMessageItem);\n        }\n        return true;\n    }\n    return false;\n}\n\nexport { createLocalMessageForInlineError, createLocalMessageItemsForNestedMessageItems, outputItemToLocalItem };\n","import FocusTrap from 'focus-trap-react';\nimport React, { useRef, useImperativeHandle } from 'react';\nimport { useSelector } from 'react-redux';\nimport { IS_MOBILE } from '../utils/browserUtils.js';\nimport { Header as HeaderExport } from './header/Header.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is a custom panel that renders external content similar to custom response types.\n */\nfunction BasePanelComponent({ className, children, isOpen, hidePanelHeader, labelBackButton, title, hideBackButton, useAITheme, onClickCloseAndRestart, onClickRestart, ...headerProps }, ref) {\n    const showRestartButton = useSelector((state) => state.config.public.headerConfig?.showRestartButton);\n    const headerRef = useRef();\n    // Reuse the imperative handles from the header.\n    useImperativeHandle(ref, () => headerRef.current);\n    return (React.createElement(FocusTrap, { active: isOpen, focusTrapOptions: {\n            clickOutsideDeactivates: true,\n            returnFocusOnDeactivate: !IS_MOBILE,\n            preventScroll: true,\n        } },\n        React.createElement(\"div\", { className: className },\n            !hidePanelHeader && (React.createElement(HeaderExport, { ...headerProps, ref: headerRef, showRestartButton: showRestartButton, onClickRestart: onClickRestart, onCloseAndRestart: onClickCloseAndRestart, showBackButton: !hideBackButton, labelBackButton: labelBackButton, displayName: title, useAITheme: useAITheme, showCenter: true })),\n            React.createElement(\"div\", { className: \"WACPanelContent\" }, children))));\n}\nconst BasePanelComponentExport = React.memo(React.forwardRef(BasePanelComponent));\n\nexport { BasePanelComponentExport as BasePanelComponent };\n","import { uuid } from '../utils/lang/uuid.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst CHANGE_STATE = \"CHANGE_STATE\";\nconst UPDATE_BOT_NAME = \"UPDATE_BOT_NAME\";\nconst UPDATE_BOT_AVATAR_URL = \"UPDATE_BOT_AVATAR_URL\";\nconst UPDATE_LAUNCHER_AVATAR_URL = \"UPDATE_LAUNCHER_AVATAR_URL\";\nconst UPDATE_MAIN_HEADER_TITLE = \"UPDATE_MAIN_HEADER_TITLE\";\nconst HYDRATE_CHAT = \"HYDRATE_CHAT\";\nconst HYDRATE_MESSAGE_HISTORY = \"HYDRATE_MESSAGE_HISTORY\";\nconst ADD_LOCAL_MESSAGE_ITEM = \"ADD_LOCAL_MESSAGE_ITEM\";\nconst REMOVE_MESSAGES = \"REMOVE_MESSAGES\";\nconst UPDATE_LOCAL_MESSAGE_ITEM = \"UPDATE_LOCAL_MESSAGE_ITEM\";\nconst SET_APP_STATE_VALUE = \"SET_APP_STATE_VALUE\";\nconst ADD_IS_TYPING_COUNTER = \"ADD_IS_TYPING_COUNTER\";\nconst ADD_IS_LOADING_COUNTER = \"ADD_IS_LOADING_COUNTER\";\nconst ADD_IS_HYDRATING_COUNTER = \"ADD_IS_HYDRATING_COUNTER\";\nconst SET_VIEW_STATE = \"SET_VIEW_STATE\";\nconst SET_VIEW_CHANGING = \"SET_VIEW_CHANGING\";\nconst SET_INITIAL_VIEW_CHANGE_COMPLETE = \"SET_INITIAL_VIEW_CHANGE_COMPLETE\";\nconst UPDATE_CSS_VARIABLES = \"UPDATE_CSS_VARIABLES\";\nconst MESSAGE_SET_OPTION_SELECTED = \"MESSAGE_SET_OPTION_SELECTED\";\nconst SET_MESSAGE_UI_PROPERTY = \"SET_MESSAGE_UI_PROPERTY\";\nconst SET_MESSAGE_HISTORY_PROPERTY = \"SET_MESSAGE_HISTORY_PROPERTY\";\nconst MERGE_HISTORY = \"MERGE_HISTORY\";\nconst SET_LAUNCHER_PROPERTY = \"SET_LAUNCHER_PROPERTY\";\nconst SET_LAUNCHER_CONFIG_PROPERTY = \"SET_LAUNCHER_CONFIG_PROPERTY\";\nconst ANNOUNCE_MESSAGE = \"ANNOUNCE_MESSAGE\";\nconst SET_CHAT_MESSAGES_PROPERTY = \"SET_CHAT_MESSAGES_PROPERTY\";\nconst RESTART_CONVERSATION = \"RESTART_CONVERSATION\";\nconst ACCEPTED_DISCLAIMER = \"ACCEPTED_DISCLAIMER\";\nconst ADD_MESSAGE = \"ADD_MESSAGE\";\nconst UPDATE_HOME_SCREEN_CONFIG = \"UPDATE_HOME_SCREEN_CONFIG\";\nconst UPDATE_HAS_SENT_NON_WELCOME_MESSAGE = \"UPDATE_HAS_SENT_NON_WELCOME_MESSAGE\";\nconst UPDATE_PERSISTED_CHAT_STATE = \"UPDATE_PERSISTED_CHAT_STATE\";\nconst SET_TOUR_DATA = \"SET_TOUR_DATA\";\nconst CLEAR_TOUR_DATA = \"CLEAR_TOUR_DATA\";\nconst CHANGE_STEP_IN_TOUR = \"CHANGE_STEP_IN_TOUR\";\nconst SET_HOME_SCREEN_IS_OPEN = \"SET_HOME_SCREEN_IS_OPEN\";\nconst UPDATE_LAUNCHER_CONFIG = \"UPDATE_LAUNCHER_CONFIG\";\nconst UPDATE_MESSAGE = \"UPDATE_MESSAGE\";\nconst SET_LAUNCHER_MINIMIZED = \"SET_LAUNCHER_MINIMIZED\";\nconst CLOSE_IFRAME_PANEL = \"CLOSE_IFRAME_PANEL\";\nconst OPEN_IFRAME_CONTENT = \"OPEN_IFRAME_CONTENT\";\nconst SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN = \"SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN\";\nconst SET_CUSTOM_PANEL_OPTIONS = \"SET_CUSTOM_PANEL_OPTIONS\";\nconst SET_CUSTOM_PANEL_OPEN = \"SET_CUSTOM_PANEL_OPEN\";\nconst TOGGLE_HOME_SCREEN = \"GO_BACK_TO_HOME\";\nconst UPDATE_INPUT_STATE = \"UPDATE_INPUT_STATE\";\nconst SET_IS_BROWSER_PAGE_VISIBLE = \"SET_IS_PAGE_VISIBLE\";\nconst ADD_INPUT_FILE = \"ADD_INPUT_FILE\";\nconst CLEAR_INPUT_FILES = \"CLEAR_INPUT_FILES\";\nconst REMOVE_INPUT_FILE = \"REMOVE_INPUT_FILE\";\nconst REMOVE_LOCAL_MESSAGE_ITEM = \"REMOVE_LOCAL_MESSAGE_ITEM\";\nconst FILE_UPLOAD_INPUT_ERROR = \"FILE_UPLOAD_INPUT_ERROR\";\nconst ADD_NESTED_MESSAGES = \"ADD_NESTED_MESSAGES\";\nconst SET_RESPONSE_PANEL_IS_OPEN = \"SET_RESPONSE_PANEL_IS_OPEN\";\nconst SET_RESPONSE_PANEL_CONTENT = \"SET_PANEL_RESPONSE_CONTENT\";\nconst STREAMING_ADD_CHUNK = \"STREAMING_ADD_CHUNK\";\nconst STREAMING_START = \"STREAMING_START\";\nconst STREAMING_MERGE_HISTORY = \"STREAMING_MERGE_HISTORY\";\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_ALL_NOTIFICATIONS = \"REMOVE_ALL_NOTIFICATIONS\";\nconst REMOVE_NOTIFICATIONS = \"REMOVE_NOTIFICATIONS\";\nconst UPDATE_CHAT_HEADER_CONFIG = \"UPDATE_CHAT_HEADER_CONFIG\";\nconst UPDATE_MAX_VISIBLE_HEADER_OBJECTS = \"UPDATE_MAX_VISIBLE_HEADER_OBJECTS\";\nconst SET_STOP_STREAMING_BUTTON_VISIBLE = \"SET_STOP_STREAMING_BUTTON_VISIBLE\";\nconst SET_STOP_STREAMING_BUTTON_DISABLED = \"SET_STOP_STREAMING_BUTTON_DISABLED\";\nconst SET_STREAM_ID = \"SET_STREAM_ID\";\nconst UPDATE_MAIN_HEADER_AVATAR = \"UPDATE_MAIN_HEADER_AVATAR\";\nconst actions = {\n    /**\n     * Allows you to change any portion of the app state.\n     */\n    changeState(partialState) {\n        // Using \"UnknownAction\" here seems to be required or our dts bundler blows up on this with a \"this node exceeds the\n        // maximum length\" error.\n        return { type: CHANGE_STATE, partialState };\n    },\n    chatWasHydrated() {\n        return { type: HYDRATE_CHAT };\n    },\n    hydrateMessageHistory(messageHistory) {\n        return { type: HYDRATE_MESSAGE_HISTORY, messageHistory };\n    },\n    removeMessages(messageIDs) {\n        return { type: REMOVE_MESSAGES, messageIDs };\n    },\n    restartConversation() {\n        return {\n            type: RESTART_CONVERSATION,\n        };\n    },\n    /**\n     * Adds the given message item to the message list. If the message item is already in the list, it will not be\n     * added again and will be left at its current position (unless addAfterID is provided) but the contents of the\n     * message will be replaced with the new item.\n     *\n     * @param messageItem The message item to add or replaced.\n     * @param message The full message the item belongs to.\n     * @param addMessage Indicates if the full message should also be added to the store along with the item.\n     * @param addAfterID Indicates if the message item should be inserted immediately after another item that may\n     * already be in the list. If this value is not provided, the item will be inserted at the end of the list (if it\n     * does not already exist in the list).\n     */\n    addLocalMessageItem(messageItem, message, addMessage, addAfterID) {\n        return {\n            type: ADD_LOCAL_MESSAGE_ITEM,\n            messageItem,\n            message,\n            addMessage,\n            addAfterID,\n        };\n    },\n    /**\n     * Adds the given message to the message list. This may also re-order any existing message items that are already\n     * visible due to being received from previous streaming chunks.\n     */\n    addMessage(message) {\n        return { type: ADD_MESSAGE, message };\n    },\n    updateLocalMessageItem(messageItem) {\n        return { type: UPDATE_LOCAL_MESSAGE_ITEM, messageItem };\n    },\n    updateMessage(message) {\n        return { type: UPDATE_MESSAGE, message };\n    },\n    messageSetOptionSelected(messageID, sentMessage) {\n        return {\n            type: MESSAGE_SET_OPTION_SELECTED,\n            messageID,\n            sentMessage,\n        };\n    },\n    updatePersistedChatState(chatState) {\n        return {\n            type: UPDATE_PERSISTED_CHAT_STATE,\n            chatState,\n        };\n    },\n    setTourData(newActiveTourMessageID) {\n        return {\n            type: SET_TOUR_DATA,\n            newActiveTourMessageID,\n        };\n    },\n    clearTourData() {\n        return {\n            type: CLEAR_TOUR_DATA,\n        };\n    },\n    changeStepInTour(newStepNumber) {\n        return {\n            type: CHANGE_STEP_IN_TOUR,\n            newStepNumber,\n        };\n    },\n    updateHasSentNonWelcomeMessage(hasSentNonWelcomeMessage) {\n        return {\n            type: UPDATE_HAS_SENT_NON_WELCOME_MESSAGE,\n            hasSentNonWelcomeMessage,\n        };\n    },\n    setAppStateValue(key, value) {\n        return {\n            type: SET_APP_STATE_VALUE,\n            key,\n            value,\n        };\n    },\n    addIsTypingCounter(addToIsTyping) {\n        return {\n            type: ADD_IS_TYPING_COUNTER,\n            addToIsTyping,\n        };\n    },\n    addIsLoadingCounter(addToIsLoading) {\n        return {\n            type: ADD_IS_LOADING_COUNTER,\n            addToIsLoading,\n        };\n    },\n    addIsHydratingCounter(addToIsHydrating) {\n        return {\n            type: ADD_IS_HYDRATING_COUNTER,\n            addToIsHydrating,\n        };\n    },\n    updateBotName(name) {\n        return { type: UPDATE_BOT_NAME, name };\n    },\n    updateMainHeaderTitle(title) {\n        return { type: UPDATE_MAIN_HEADER_TITLE, title };\n    },\n    updateBotAvatarURL(url) {\n        return { type: UPDATE_BOT_AVATAR_URL, url };\n    },\n    updateCSSVariables(variables, publicVars, whiteLabelVariables) {\n        return {\n            type: UPDATE_CSS_VARIABLES,\n            variables,\n            publicVars,\n            whiteLabelVariables,\n        };\n    },\n    updateHomeScreenConfig(homeScreenConfig) {\n        return { type: UPDATE_HOME_SCREEN_CONFIG, homeScreenConfig };\n    },\n    setViewState(viewState) {\n        return { type: SET_VIEW_STATE, viewState };\n    },\n    setViewChanging(viewChanging) {\n        return { type: SET_VIEW_CHANGING, viewChanging };\n    },\n    setInitialViewChangeComplete(changeComplete) {\n        return { type: SET_INITIAL_VIEW_CHANGE_COMPLETE, changeComplete };\n    },\n    /**\n     * Sets the give property of the {@link LocalMessageUIState} associated with the message of the given ID to the\n     * given value.\n     *\n     * @param localMessageID The ID of the message to update.\n     * @param propertyName The name of the property to update.\n     * @param propertyValue The value to set on the property.\n     */\n    setMessageUIProperty(localMessageID, propertyName, propertyValue) {\n        return {\n            type: SET_MESSAGE_UI_PROPERTY,\n            localMessageID,\n            propertyName,\n            propertyValue,\n        };\n    },\n    /**\n     * Sets the value of one of the properties of {@link PersistedLauncherState}.\n     */\n    setLauncherProperty(propertyName, propertyValue) {\n        return { type: SET_LAUNCHER_PROPERTY, propertyName, propertyValue };\n    },\n    setLauncherConfigProperty(propertyName, propertyValue, launcherType) {\n        return {\n            type: SET_LAUNCHER_CONFIG_PROPERTY,\n            propertyName,\n            propertyValue,\n            launcherType,\n        };\n    },\n    /**\n     * Sets the give property of the {@link MessageHistory} associated with the message of the given ID to the given\n     * value.\n     *\n     * @param messageID The ID of the message to update.\n     * @param propertyName The name of the property to update.\n     * @param propertyValue The value to set on the property.\n     */\n    setMessageHistoryProperty(messageID, propertyName, propertyValue) {\n        return {\n            type: SET_MESSAGE_HISTORY_PROPERTY,\n            messageID,\n            propertyName,\n            propertyValue,\n        };\n    },\n    /**\n     * Merges the given object into the history for the given message.\n     */\n    mergeMessageHistory(messageID, history) {\n        return { type: MERGE_HISTORY, messageID, history };\n    },\n    setMessageErrorState(messageID, errorState) {\n        return actions.setMessageHistoryProperty(messageID, \"error_state\", errorState);\n    },\n    /**\n     * Marks the given message to indicate that it has been announced and doesn't need to be announced again.\n     */\n    setMessageWasAnnounced(messageID) {\n        return actions.setMessageUIProperty(messageID, \"needsAnnouncement\", false);\n    },\n    /**\n     * Sets the given message as the current accessibility announcement so that it will immediately be read by a\n     * screen reader.\n     */\n    announceMessage(message) {\n        return { type: ANNOUNCE_MESSAGE, message };\n    },\n    /**\n     * Sets the property on one of the {@link ChatMessagesState} values.\n     */\n    setChatMessagesStateProperty(propertyName, propertyValue) {\n        return { type: SET_CHAT_MESSAGES_PROPERTY, propertyName, propertyValue };\n    },\n    /**\n     * Add a notification to the state.\n     */\n    addNotification(notification) {\n        const notificationID = uuid();\n        return { type: ADD_NOTIFICATION, notificationID, notification };\n    },\n    /**\n     * Remove notifications using the given ids.\n     */\n    removeNotifications({ groupID, notificationID, }) {\n        return { type: REMOVE_NOTIFICATIONS, groupID, notificationID };\n    },\n    /**\n     * Remove all notifications from the state.\n     */\n    removeAllNotifications() {\n        return { type: REMOVE_ALL_NOTIFICATIONS };\n    },\n    /**\n     * Sets the disclaimer state for the current domain to true.\n     */\n    acceptDisclaimer() {\n        return { type: ACCEPTED_DISCLAIMER };\n    },\n    /**\n     * For toggling Home Screen open state.\n     */\n    setHomeScreenIsOpen(isOpen) {\n        return { type: SET_HOME_SCREEN_IS_OPEN, isOpen };\n    },\n    updateLauncherConfig(launcherConfig) {\n        return { type: UPDATE_LAUNCHER_CONFIG, launcherConfig };\n    },\n    setLauncherMinimized() {\n        return { type: SET_LAUNCHER_MINIMIZED };\n    },\n    closeIFramePanel() {\n        return { type: CLOSE_IFRAME_PANEL };\n    },\n    setIFrameContent(messageItem) {\n        return { type: OPEN_IFRAME_CONTENT, messageItem };\n    },\n    setViewSourcePanelIsOpen(isOpen, citationItem, relatedSearchResult) {\n        return {\n            type: SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN,\n            isOpen,\n            citationItem,\n            relatedSearchResult,\n        };\n    },\n    setCustomPanelConfigOptions(options) {\n        return { type: SET_CUSTOM_PANEL_OPTIONS, options };\n    },\n    setCustomPanelOpen(isOpen) {\n        return { type: SET_CUSTOM_PANEL_OPEN, isOpen };\n    },\n    /**\n     * Switches between the bot and home screen views.\n     */\n    toggleHomeScreen() {\n        return { type: TOGGLE_HOME_SCREEN };\n    },\n    /**\n     * Updates the state of the input field.\n     */\n    updateInputState(newState, isInputToAgent) {\n        return { type: UPDATE_INPUT_STATE, newState, isInputToAgent };\n    },\n    /**\n     * Changes the values that indicates whether the browser page is visible.\n     */\n    setIsBrowserPageVisible(isVisible) {\n        return { type: SET_IS_BROWSER_PAGE_VISIBLE, isVisible };\n    },\n    /**\n     * Adds a new file to the input area for uploaded.\n     */\n    addInputFile(file, isInputToAgent) {\n        return { type: ADD_INPUT_FILE, file, isInputToAgent };\n    },\n    /**\n     * Removes a file attachment from the upload attachments area.\n     */\n    removeFileUpload(fileID, isInputToAgent) {\n        return { type: REMOVE_INPUT_FILE, fileID, isInputToAgent };\n    },\n    /**\n     * Removes the local message item with the given ID from the message list.\n     */\n    removeLocalMessageItem(localMessageItemID) {\n        return { type: REMOVE_LOCAL_MESSAGE_ITEM, localMessageItemID };\n    },\n    /**\n     * Updates the input area to indicate that a file upload is in error.\n     */\n    fileUploadInputError(fileID, errorMessage, isInputToAgent) {\n        return {\n            type: FILE_UPLOAD_INPUT_ERROR,\n            fileID,\n            errorMessage,\n            isInputToAgent,\n        };\n    },\n    /**\n     * Removes all the files from the input area.\n     */\n    clearInputFiles(isInputToAgent) {\n        return { type: CLEAR_INPUT_FILES, isInputToAgent };\n    },\n    addNestedMessages(localMessageItems) {\n        return { type: ADD_NESTED_MESSAGES, localMessageItems };\n    },\n    setResponsePanelIsOpen(isOpen) {\n        return { type: SET_RESPONSE_PANEL_IS_OPEN, isOpen };\n    },\n    setResponsePanelContent(localMessageItem, isMessageForInput = false) {\n        return {\n            type: SET_RESPONSE_PANEL_CONTENT,\n            localMessageItem,\n            isMessageForInput,\n        };\n    },\n    /**\n     * Adds a message to the store to begin the streaming process.\n     */\n    streamingStart(messageID) {\n        return { type: STREAMING_START, messageID };\n    },\n    /**\n     * Merges the given message history object into an existing message object.\n     */\n    streamingMergeHistory(messageID, history) {\n        return { type: STREAMING_MERGE_HISTORY, messageID, history };\n    },\n    /**\n     * Adds a new chunk of a streaming response to an existing message.\n     */\n    streamingAddChunk(fullMessageID, chunkItem, isCompleteItem, disableFadeAnimation) {\n        return {\n            type: STREAMING_ADD_CHUNK,\n            fullMessageID,\n            chunkItem,\n            isCompleteItem,\n            disableFadeAnimation,\n        };\n    },\n    updateChatHeaderConfig(chatHeaderConfig) {\n        return { type: UPDATE_CHAT_HEADER_CONFIG, chatHeaderConfig };\n    },\n    setMaxVisibleHeaderObjects(maxTotal) {\n        return { type: UPDATE_MAX_VISIBLE_HEADER_OBJECTS, maxTotal };\n    },\n    setStopStreamingButtonVisible(isVisible) {\n        return { type: SET_STOP_STREAMING_BUTTON_VISIBLE, isVisible };\n    },\n    setStopStreamingButtonDisabled(isDisabled) {\n        return { type: SET_STOP_STREAMING_BUTTON_DISABLED, isDisabled };\n    },\n    setStreamID(currentStreamID) {\n        return { type: SET_STREAM_ID, currentStreamID };\n    },\n    updateMainHeaderAvatar(config) {\n        return { type: UPDATE_MAIN_HEADER_AVATAR, config };\n    },\n};\n\nexport { ACCEPTED_DISCLAIMER, ADD_INPUT_FILE, ADD_IS_HYDRATING_COUNTER, ADD_IS_LOADING_COUNTER, ADD_IS_TYPING_COUNTER, ADD_LOCAL_MESSAGE_ITEM, ADD_MESSAGE, ADD_NESTED_MESSAGES, ADD_NOTIFICATION, ANNOUNCE_MESSAGE, CHANGE_STATE, CHANGE_STEP_IN_TOUR, CLEAR_INPUT_FILES, CLEAR_TOUR_DATA, CLOSE_IFRAME_PANEL, FILE_UPLOAD_INPUT_ERROR, HYDRATE_CHAT, HYDRATE_MESSAGE_HISTORY, MERGE_HISTORY, MESSAGE_SET_OPTION_SELECTED, OPEN_IFRAME_CONTENT, REMOVE_ALL_NOTIFICATIONS, REMOVE_INPUT_FILE, REMOVE_LOCAL_MESSAGE_ITEM, REMOVE_MESSAGES, REMOVE_NOTIFICATIONS, RESTART_CONVERSATION, SET_APP_STATE_VALUE, SET_CHAT_MESSAGES_PROPERTY, SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN, SET_CUSTOM_PANEL_OPEN, SET_CUSTOM_PANEL_OPTIONS, SET_HOME_SCREEN_IS_OPEN, SET_INITIAL_VIEW_CHANGE_COMPLETE, SET_IS_BROWSER_PAGE_VISIBLE, SET_LAUNCHER_CONFIG_PROPERTY, SET_LAUNCHER_MINIMIZED, SET_LAUNCHER_PROPERTY, SET_MESSAGE_HISTORY_PROPERTY, SET_MESSAGE_UI_PROPERTY, SET_RESPONSE_PANEL_CONTENT, SET_RESPONSE_PANEL_IS_OPEN, SET_STOP_STREAMING_BUTTON_DISABLED, SET_STOP_STREAMING_BUTTON_VISIBLE, SET_STREAM_ID, SET_TOUR_DATA, SET_VIEW_CHANGING, SET_VIEW_STATE, STREAMING_ADD_CHUNK, STREAMING_MERGE_HISTORY, STREAMING_START, TOGGLE_HOME_SCREEN, UPDATE_BOT_AVATAR_URL, UPDATE_BOT_NAME, UPDATE_CHAT_HEADER_CONFIG, UPDATE_CSS_VARIABLES, UPDATE_HAS_SENT_NON_WELCOME_MESSAGE, UPDATE_HOME_SCREEN_CONFIG, UPDATE_INPUT_STATE, UPDATE_LAUNCHER_AVATAR_URL, UPDATE_LAUNCHER_CONFIG, UPDATE_LOCAL_MESSAGE_ITEM, UPDATE_MAIN_HEADER_AVATAR, UPDATE_MAIN_HEADER_TITLE, UPDATE_MAX_VISIBLE_HEADER_OBJECTS, UPDATE_MESSAGE, UPDATE_PERSISTED_CHAT_STATE, actions as default };\n","import React, { useContext } from 'react';\nimport { AriaAnnouncerContext } from '../contexts/AriaAnnouncerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a high order component that will inject a {@link AriaAnnouncerFunctionType} in to a component.\n */\nfunction withAriaAnnouncer(Component) {\n    // Tell forwardRef: “I forward a ref of type unknown,\n    // and I expect props = OuterProps”\n    const Wrapped = React.forwardRef((props, ref) => {\n        const ariaAnnouncer = useContext(AriaAnnouncerContext);\n        return (React.createElement(Component, { ...props, ref: ref, ariaAnnouncer: ariaAnnouncer }));\n    });\n    // for better DevTools names:\n    Wrapped.displayName = `withAriaAnnouncer(${Component.displayName || Component.name || \"Component\"})`;\n    return Wrapped;\n}\n\nexport { withAriaAnnouncer };\n","import { WA_CONSOLE_PREFIX } from './constants.js';\nimport { resolveOrTimeout } from './lang/promiseUtils.js';\nimport { OnErrorType } from '../../../types/config/PublicConfig.js';\nimport { FileStatusValue } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A global flag to indicate if we want to show debug messages in the browser console. This is generally set from\n * {@link PublicConfig.debug}.\n */\nlet enableDebugLog = false;\n/**\n * A global flag to indicate if we want to show stack trace debug messages in the browser console. This is generally set\n * from {@link PublicConfig.debugStackTraces}.\n */\nlet enableDebugStackTracesLog = false;\n/**\n * A simple utility to send a message to the console log but only id debug logging is enabled.\n */\nfunction debugLog(message, ...args) {\n    if (enableDebugLog) {\n        console.log(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n    }\n}\n/**\n * A simple utility to send a message to the console log but only if debug stack traces logging is enabled.\n */\nfunction debugStackTrace(message, ...args) {\n    if (enableDebugStackTracesLog) {\n        const stack = new Error('This is not an error; it is a stack trace used for debugging purposes. It is enabled by the \"debugStackTraces: true\" configuration option.');\n        debugLog(message, stack, ...args);\n    }\n    else {\n        debugLog(message, ...args);\n    }\n}\n/**\n * A simple utility to send an error message to the console log.\n */\nfunction consoleError(message, ...args) {\n    console.error(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n}\n/**\n * A simple utility to send an error message to the console log.\n */\nfunction consoleLog(message, ...args) {\n    console.log(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n}\n/**\n * A simple utility to send a message to the console log.\n */\nfunction consoleDebug(message, ...args) {\n    console.debug(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n}\n/**\n * A simple utility to send an warning message to the console log.\n */\nfunction consoleWarn(message, ...args) {\n    console.warn(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n}\n/**\n * Sets a global flag to indicate if we want to show debug messages in the browser console. This is generally set from\n * {@link PublicConfig.debug}.\n */\nfunction setEnableDebugLog(debug) {\n    enableDebugLog = debug;\n}\n/**\n * Sets a global flag to indicate if we want to show debug stack trace messages in the browser console. This is\n * generally set from {@link PublicConfig.debugStackTraces}.\n */\nfunction setEnableDebugStackTracesLog(debug) {\n    enableDebugStackTracesLog = debug;\n}\n/**\n * Indicates if the global flag to indicate if we want to show debug messages in the browser console is enabled.\n */\nfunction isEnableDebugLog() {\n    return enableDebugLog;\n}\n/**\n * Safely returns the text from the given fetch response or undefined if there is an error. This will also impose a\n * timeout on getting the text\n */\nasync function safeFetchTextWithTimeout(response) {\n    try {\n        if (response) {\n            return resolveOrTimeout(response.text(), 2000, \"Getting response text\");\n        }\n    }\n    catch (error) {\n        consoleError(\"Error getting fetch text\", error);\n    }\n    return undefined;\n}\n/**\n * Returns a {@link OnErrorData} that represents an error that occurred while rendering a component.\n */\nfunction createDidCatchErrorData(component, error, errorInfo, isCatastrophicError) {\n    return {\n        errorType: OnErrorType.RENDER,\n        message: `${component}.componentDidCatch`,\n        otherData: {\n            error,\n            errorInfo,\n        },\n        catastrophicErrorType: isCatastrophicError,\n    };\n}\n/**\n * This function will calculate and return the necessary top padding percentage value that will help render a media\n * player with a responsive aspect ratio.\n */\nfunction getResponsiveElementPaddingValue(baseHeight = 180) {\n    return `${100 / (320 / baseHeight)}%`;\n}\n/**\n * Indicates if the given file is valid for uploading. The file must still be in the edit step and it must not\n * contain an error.\n */\nfunction isValidForUpload(upload) {\n    return upload.status === FileStatusValue.EDIT && !upload.isError;\n}\n/**\n * Calls the given onError function.\n */\nfunction callOnError(onError, data) {\n    if (onError) {\n        try {\n            onError(data);\n        }\n        catch (error) {\n            consoleError(\"Error calling onError\", error);\n        }\n    }\n}\nfunction getBotName(useAITheme, config) {\n    let botName;\n    if (useAITheme) {\n        botName = \"AI\";\n    }\n    else {\n        botName = config.public.botName || \"watsonx\";\n    }\n    return botName;\n}\n\nexport { callOnError, consoleDebug, consoleError, consoleLog, consoleWarn, createDidCatchErrorData, debugLog, debugStackTrace, getBotName, getResponsiveElementPaddingValue, isEnableDebugLog, isValidForUpload, safeFetchTextWithTimeout, setEnableDebugLog, setEnableDebugStackTracesLog };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The different type of error states a given message can be in.\n *\n * @category Messaging\n */\nvar MessageErrorState;\n(function (MessageErrorState) {\n    /**\n     * No errors.\n     */\n    MessageErrorState[MessageErrorState[\"NONE\"] = 1] = \"NONE\";\n    /**\n     * The message failed to be sent and no more attempts will be made.\n     */\n    MessageErrorState[MessageErrorState[\"FAILED\"] = 2] = \"FAILED\";\n    /**\n     * There was an error sending the message but the system is retrying the message.\n     */\n    MessageErrorState[MessageErrorState[\"RETRYING\"] = 3] = \"RETRYING\";\n    /**\n     * Indicates that the previous message has entered the retrying state and that this message is waiting for it to\n     * finish or fail. This message will remain in the waiting state until it finishes successfully or it enters a\n     * retrying state itself.\n     */\n    MessageErrorState[MessageErrorState[\"WAITING\"] = 4] = \"WAITING\";\n})(MessageErrorState || (MessageErrorState = {}));\n\nexport { MessageErrorState };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The set of possible animations for OverlayPanel animation into view.\n */\nvar AnimationInType;\n(function (AnimationInType) {\n    /**\n     * The panel does not animate.\n     */\n    AnimationInType[\"NONE\"] = \"none\";\n    /**\n     * The panel fades in from 0 opacity.\n     */\n    AnimationInType[\"FADE_IN\"] = \"fadeIn\";\n    /**\n     * The panel slides in from the left over previous content.\n     */\n    AnimationInType[\"SLIDE_IN_FROM_LEFT\"] = \"slideInFromLeft\";\n    /**\n     * The panel slides in from the right over previous content.\n     */\n    AnimationInType[\"SLIDE_IN_FROM_RIGHT\"] = \"slideInFromRight\";\n    /**\n     * The panel slides in from the bottom over the previous context.\n     */\n    AnimationInType[\"SLIDE_IN_FROM_BOTTOM\"] = \"slideInFromBottom\";\n    /**\n     * The panel slides in from the bottom over the previous context fast for branding.\n     */\n    AnimationInType[\"BRANDING_SLIDE_IN_FROM_BOTTOM\"] = \"brandingSlideInFromBottom\";\n    /**\n     * The custom animation for the home screen.\n     */\n    // HOME_SCREEN = 'homeScreen',\n})(AnimationInType || (AnimationInType = {}));\n/**\n * The set of possible animations for OverlayPanel animation out of view.\n */\nvar AnimationOutType;\n(function (AnimationOutType) {\n    /**\n     * The panel does not animate.\n     */\n    AnimationOutType[\"NONE\"] = \"none\";\n    /**\n     * The panel fades to 0 opacity.\n     */\n    AnimationOutType[\"FADE_OUT\"] = \"fadeOut\";\n    /**\n     * The panel slides out to left.\n     */\n    AnimationOutType[\"SLIDE_OUT_TO_LEFT\"] = \"slideOutToLeft\";\n    /**\n     * The panel slides out to right.\n     */\n    AnimationOutType[\"SLIDE_OUT_TO_RIGHT\"] = \"slideOutToRight\";\n    /**\n     * The panel slides out to top.\n     */\n    AnimationOutType[\"SLIDE_OUT_TO_TOP\"] = \"slideOutToTop\";\n    /**\n     * The panel slides out to bottom.\n     */\n    AnimationOutType[\"SLIDE_OUT_TO_BOTTOM\"] = \"slideOutToBottom\";\n    /**\n     * The custom animation for the home screen.\n     */\n    // HOME_SCREEN = 'homeScreen',\n})(AnimationOutType || (AnimationOutType = {}));\n\nexport { AnimationInType, AnimationOutType };\n","import cx from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { AnimationInType, AnimationOutType } from '../../../types/utilities/Animation.js';\nimport { conditionalSetTimeout } from '../utils/browserUtils.js';\nimport { HideComponent } from './util/HideComponent.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A generic panel that can fade in, fade out, slide in, slide out, etc. with children inside it.\n */\n/**\n * The possible overlay panels.\n */\nvar OverlayPanelName;\n(function (OverlayPanelName) {\n    OverlayPanelName[\"DISCLAIMER\"] = \"disclaimer\";\n    OverlayPanelName[\"HOME_SCREEN\"] = \"home_screen\";\n    OverlayPanelName[\"AGENT\"] = \"agent\";\n    OverlayPanelName[\"HYDRATING\"] = \"hydrating\";\n    OverlayPanelName[\"CATASTROPHIC\"] = \"catastrophic\";\n    OverlayPanelName[\"BRANDING\"] = \"branding\";\n    OverlayPanelName[\"IFRAME\"] = \"iframe\";\n    OverlayPanelName[\"CONVERSATIONAL_SEARCH_CITATION\"] = \"conversational_search_citation\";\n    OverlayPanelName[\"CUSTOM\"] = \"custom\";\n    OverlayPanelName[\"SHOW_PANEL\"] = \"show_panel\";\n    OverlayPanelName[\"PANEL_RESPONSE\"] = \"panel_response\";\n})(OverlayPanelName || (OverlayPanelName = {}));\nconst ANIMATION_DURATION_IN_MS = 240;\nclass OverlayPanel extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isClosing: false,\n            isOpening: false,\n        };\n        this.openPanelTimeout = null;\n        this.closePanelTimeout = null;\n        this.openPanel = () => {\n            const { onOpenEnd, onOpenStart, animationOnOpen, animationDurationOpen } = this.props;\n            onOpenStart?.();\n            this.setState({\n                isClosing: false,\n                isOpening: true,\n            });\n            // Use a conditional setTimeout to avoid unnecessary flickering if there is no animation.\n            const durationInMS = animationOnOpen === AnimationInType.NONE\n                ? 0\n                : animationDurationOpen || ANIMATION_DURATION_IN_MS;\n            this.openPanelTimeout = conditionalSetTimeout(() => {\n                this.setState({\n                    isClosing: false,\n                    isOpening: false,\n                });\n                onOpenEnd?.();\n            }, durationInMS);\n        };\n        this.closePanel = () => {\n            const { onCloseEnd, onCloseStart, animationOnClose, animationDurationClose, } = this.props;\n            onCloseStart?.();\n            this.setState({\n                isClosing: true,\n                isOpening: false,\n            });\n            // Use a conditional setTimeout to avoid unnecessary flickering if there is no animation.\n            const durationInMS = animationOnClose === AnimationOutType.NONE\n                ? 0\n                : animationDurationClose || ANIMATION_DURATION_IN_MS;\n            this.closePanelTimeout = conditionalSetTimeout(() => {\n                this.setState({\n                    isClosing: false,\n                    isOpening: false,\n                });\n                onCloseEnd?.();\n            }, durationInMS);\n        };\n    }\n    componentDidMount() {\n        const { shouldOpen } = this.props;\n        // If the panel is open by default, we should open it.\n        if (shouldOpen) {\n            this.openPanel();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { shouldOpen } = this.props;\n        // If the value of shouldOpen changes we kick off the animations to open/close the panel.\n        if (shouldOpen !== prevProps.shouldOpen) {\n            if (shouldOpen) {\n                this.openPanel();\n            }\n            else {\n                this.closePanel();\n            }\n        }\n    }\n    componentWillUnmount() {\n        if (this.openPanelTimeout) {\n            clearTimeout(this.openPanelTimeout);\n        }\n        if (this.closePanelTimeout) {\n            clearTimeout(this.closePanelTimeout);\n        }\n        if (this.props.shouldOpen) {\n            if (this.props.onCloseStart) {\n                this.props.onCloseStart();\n            }\n            if (this.props.onCloseEnd) {\n                this.props.onCloseEnd();\n            }\n        }\n    }\n    render() {\n        const { children, className, shouldOpen, animationOnClose, animationOnOpen, overlayPanelName, } = this.props;\n        const { isClosing, isOpening } = this.state;\n        console.log({ isClosing, shouldOpen });\n        return (React.createElement(HideComponent, { hidden: !isClosing && !shouldOpen, className: cx(\"WAC__overlay-panelContainer\", `WAC__overlay--${overlayPanelName}`, className, {\n                \"WAC__overlay-panelContainer--animating\": isOpening || isClosing,\n            }) },\n            React.createElement(\"div\", { className: cx(\"WAC__overlay-panel\", `WAC__overlay-panel--${overlayPanelName}`, {\n                    [`WAC__overlay-panel--closing--${animationOnClose}`]: isClosing,\n                    \"WAC__overlay-panel--closed\": !isClosing && !shouldOpen,\n                    [`WAC__overlay-panel--opening--${animationOnOpen}`]: isOpening,\n                    \"WAC__overlay-panel--open\": !isOpening && shouldOpen,\n                }) }, children)));\n    }\n}\n\nexport { OverlayPanel, OverlayPanelName };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains the context used by the {@link HideComponent} which is used to indicate if the component is\n * hidden or not. The value in the context is a boolean that is true if the component is hidden.\n */\nconst HideComponentContext = React.createContext(false);\n\nexport { HideComponentContext };\n","var ai_slug_title = \"Powered by IBM watsonx\";\nvar ai_slug_description = \"IBM watsonx is powered by the latest AI models to intelligently process conversations and provide help whenever and wherever you may need it.\";\nvar components_overflow_ariaLabel = \"Open and close list of options\";\nvar components_swiper_currentLabel = \"{currentSlideNumber}/{totalSlideCount}\";\nvar errors_communicating = \"{botName} isn't available right now. Problems with a related system are preventing the data from being supplied.\";\nvar errors_imageSource = \"Image is not available.\";\nvar errors_videoSource = \"Video is not available.\";\nvar errors_audioSource = \"Audio is not available.\";\nvar errors_iframeSource = \"The web page is not available.\";\nvar errors_singleMessage = \"There is an error with the message you just sent, but feel free to ask me something else.\";\nvar errors_ariaMessageRetrying = \"We are having some trouble sending your message but are still trying\";\nvar errors_ariaMessageFailed = \"Your message failed to be sent\";\nvar errors_noAgentsAvailable = \"No agents are available.\";\nvar errors_noAgentsJoined = \"No agents accepted the chat\";\nvar errors_connectingToAgent = \"I'm sorry. Something went wrong and I cannot connect you to an agent right now.\";\nvar errors_busy = \"I'm sorry, but I can't help you right now. I'm answering questions from lots of people at the moment. Please try again later.\";\nvar errors_agentAppSessionExpired = \"I'm sorry, but access to the chat history has expired.\";\nvar errors_generalContent = \"There was an error displaying this content\";\nvar errors_somethingWrong = \"Something went wrong\";\nvar input_ariaLabel = \"Message to send\";\nvar input_placeholder = \"Type something...\";\nvar input_buttonLabel = \"Click to send message\";\nvar input_uploadButtonLabel = \"Add files to upload\";\nvar window_title = \"Chat window\";\nvar window_ariaTourRegion = \"Tour\";\nvar window_ariaTourRegionNamespace = \"Tour {namespace}\";\nvar window_ariaChatRegion = \"Chat\";\nvar window_ariaChatRegionNamespace = \"Chat {namespace}\";\nvar window_ariaWindowOpened = \"The chat window has been opened\";\nvar window_ariaWindowClosed = \"The chat window has been closed\";\nvar window_ariaWindowLoading = \"The chat is loading.\";\nvar launcher_isOpen = \"Close the chat window\";\nvar launcher_isClosed = \"Open the chat window\";\nvar launcher_isTourOpen = \"Close the tour window\";\nvar launcher_isTourClosed = \"Open the tour window\";\nvar launcher_desktopGreeting = \"Hi! I’m a virtual assistant. How can I help you today?\";\nvar launcher_mobileGreeting = \"Hi! How can I help you today?\";\nvar launcher_ariaIsExpanded = \"Close the chat launcher\";\nvar launcher_closeButton = \"Close\";\nvar messages_youSaid = \"You said\";\nvar messages_botSaid = \"{botName} said\";\nvar messages_agentSaid = \"The live agent said\";\nvar messages_searchResults = \"Search results\";\nvar messages_searchResultsLink = \"Open this search result in a new window\";\nvar messages_searchResultsOpenDocument = \"Open document\";\nvar messages_searchResultsOpenDocumentWithLabel = \"Open document \\\"{documentName}\\\"\";\nvar messages_searchResultsExpand = \"Expand\";\nvar messages_searchResultsCollapse = \"Collapse\";\nvar messages_botIsLoading = \"{botName} is loading\";\nvar messages_botIsTyping = \"{botName} is typing\";\nvar messages_agentIsTyping = \"The live agent is typing\";\nvar messages_scrollHandle = \"Chat history begin\";\nvar messages_scrollHandleDetailed = \"Chat history begin. Activate to focus the first message then use the arrow, home, and end keys to move between messages. Press escape to exit.\";\nvar messages_scrollHandleEnd = \"Chat history end\";\nvar messages_scrollHandleEndDetailed = \"Chat history end. Activate to focus the last message then use the arrow, home, and end keys to move between messages. Press escape to exit.\";\nvar message_labelBot = \"{actorName} {timestamp}\";\nvar message_labelYou = \"You {timestamp}\";\nvar notifications_toastClose = \"Close notification\";\nvar buttons_restart = \"Restart conversation\";\nvar buttons_cancel = \"Cancel\";\nvar buttons_retry = \"Retry\";\nvar options_select = \"Select an option\";\nvar options_ariaOptionsDisabled = \"These options are disabled and cannot be selected\";\nvar header_previewLinkTitle = \"Assistant preview\";\nvar header_ariaCloseRestart = \"End chat and close the window\";\nvar header_ariaBotAvatar = \"{botName} avatar image\";\nvar header_overflowMenu_options = \"Options\";\nvar homeScreen_returnToAssistant = \"Return to assistant\";\nvar homeScreen_returnToHome = \"Return to the home screen\";\nvar homeScreen_overflowMenuHomeScreen = \"Home screen\";\nvar homeScreen_ariaQuickStartListButton = \"Quick start menu\";\nvar homeScreen_ariaQuickStartListOpened = \"The quick start menu has been opened.\";\nvar homeScreen_ariaQuickStartListClosed = \"The quick start menu has been closed.\";\nvar default_agent_availableMessage = \"Request an agent, and I'll notify you when they're ready. Your wait time may vary based on availability.\";\nvar default_agent_unavailableMessage = \"Sorry, no agents are available right now.\";\nvar agent_reason_error = \"Hmmm... I'm experiencing some difficulties. I need a human agent to manually continue the chat.\";\nvar agent_sdMissingWarning = \"No service desk is configured. Unless you have a custom service desk implemented, users will see an error instead of the message below. See the <a href=\\\"https://cloud.ibm.com/docs/watson-assistant?topic=watson-assistant-deploy-web-chat-haa\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">documentation</a> for more information.\";\nvar agent_noName = \"Live agent\";\nvar agent_chatTitle = \"Live agent support\";\nvar agent_startChat = \"Connect to agent\";\nvar agent_connecting = \"Request for agent sent...\";\nvar agent_agentNoNameTitle = \"Agent\";\nvar agent_agentJoinedName = \"{personName} connected.\";\nvar agent_agentJoinedNoName = \"A live agent connected.\";\nvar agent_youConnectedWarning = \"If you refresh or leave the current page, you'll have to request a new agent.\";\nvar agent_connectingMinutes = \"Current wait time is <b>{time, number} {time, plural, one {minute} other {minutes}}</b>.\";\nvar agent_connectingQueue = \"You're number <b>{position, number}</b> in line.\";\nvar agent_ariaAgentAvatar = \"Live agent avatar image\";\nvar agent_ariaGenericAvatar = \"Avatar image\";\nvar agent_ariaGenericBotAvatar = \"Avatar image\";\nvar agent_youEndedChat = \"You disconnected from the live agent.\";\nvar agent_conversationWasEnded = \"You disconnected from the live agent.\";\nvar agent_disconnected = \"Something went wrong and your connection to the live agent was lost. Check your internet connection and then try again to connect to an agent.\";\nvar agent_reconnected = \"The agent reconnected.\";\nvar agent_agentLeftChat = \"{personName} disconnected.\";\nvar agent_agentLeftChatNoName = \"The live agent disconnected.\";\nvar agent_agentEndedChat = \"{personName} ended the chat.\";\nvar agent_agentEndedChatNoName = \"The live agent ended the chat.\";\nvar agent_transferring = \"You're being transferred.\";\nvar agent_transferringNoName = \"You're being transferred.\";\nvar agent_endChat = \"Disconnect from live agent?\";\nvar agent_confirmSuspendedEndChatTitle = \"Disconnect from previous agent?\";\nvar agent_confirmSuspendedEndChatMessage = \"You are currently connected to an agent. Continuing will disconnect you from the agent and connect you to a new one. Do you want to continue?\";\nvar agent_confirmCancelRequestTitle = \"Cancel request?\";\nvar agent_confirmCancelRequestMessage = \"If you continue, you'll cancel your request for an agent.\";\nvar agent_confirmCancelRequestNo = \"Go back\";\nvar agent_confirmCancelRequestYes = \"Cancel request\";\nvar agent_confirmEndChat = \"If you disconnect, you'll have to request a new live agent.\";\nvar agent_confirmEndChatNo = \"Go back\";\nvar agent_confirmEndChatYes = \"Disconnect\";\nvar agent_confirmEndSuspendedYes = \"Continue\";\nvar agent_botReturned = \"Can I help you with anything else?\";\nvar agent_newMessage = \"New message\";\nvar agent_cardButtonChatRequested = \"Connecting...\";\nvar agent_cardButtonConnected = \"Connected\";\nvar agent_cardButtonChatEnded = \"Disconnected\";\nvar agent_cardMessageChatEnded = \"You disconnected from the live agent.\";\nvar agent_cardMessageConnected = \"You're now connected.\";\nvar agent_connectButtonCancel = \"Cancel\";\nvar agent_connectedButtonEndChat = \"Disconnect\";\nvar agent_connectWaiting = \"Waiting...\";\nvar agent_defaultMessageToAgent = \"Begin conversation\";\nvar agent_inputPlaceholderConnecting = \"Waiting for agent...\";\nvar agent_inputPlaceholderReconnecting = \"Reconnecting to agent...\";\nvar agent_sharingStopSharingButton = \"Stop sharing screen\";\nvar agent_sharingRequestTitle = \"Screen sharing\";\nvar agent_sharingRequestMessage = \"The agent has requested you share your screen. You can stop sharing at any time.\";\nvar agent_sharingAcceptButton = \"Share screen\";\nvar agent_sharingDeclineButton = \"Decline\";\nvar agent_sharingRequested = \"You were requested to share your screen.\";\nvar agent_sharingAccepted = \"You shared your screen.\";\nvar agent_sharingDeclined = \"You declined to share your screen.\";\nvar agent_sharingCancelled = \"The screen sharing request was cancelled.\";\nvar agent_sharingEnded = \"You stopped sharing your screen.\";\nvar agent_suspendedWarning = \"You are currently connected to an agent.\";\nvar icon_ariaUnreadMessages = \"There {count, plural, one {is} other {are}} {count, number} unread {count, plural, one {message} other {messages}}\";\nvar showMore = \"See more\";\nvar showMoreResults = \"See more\";\nvar disclaimer_title = \"Disclaimer\";\nvar disclaimer_accept = \"I accept\";\nvar general_ariaCloseInformationOverlay = \"Close information panel.\";\nvar general_ariaAnnounceOpenedInformationOverlay = \"An information panel has been opened.\";\nvar general_ariaAnnounceClosedInformationOverlay = \"An information panel has been closed.\";\nvar general_ariaAnnounceEscapeOverlay = \"Press escape or click the close button to close.\";\nvar general_returnToAssistant = \"Return to assistant\";\nvar conversationalSearch_streamingIncomplete = \"This message was not completed. Please try again.\";\nvar conversationalSearch_viewSourceDocument = \"View source\";\nvar conversationalSearch_citationsLabel = \"Sources\";\nvar conversationalSearch_toggleCitations = \"Open or close the list of sources\";\nvar conversationalSearch_responseStopped = \"Response stopped\";\nvar launcher_chatNow = \"Chat now\";\nvar iframe_ariaSourceLoaded = \"The web page has loaded.\";\nvar iframe_ariaImageAltText = \"Preview image for the web page panel.\";\nvar iframe_ariaClosePanel = \"Close the web page panel.\";\nvar iframe_ariaOpenedPanel = \"Web page panel has opened.\";\nvar iframe_ariaClosedPanel = \"Web page panel has closed.\";\nvar iframe_ariaClickPreviewCard = \"Click to open the web page panel and visit {source}.\";\nvar closeAndRestartModal_title = \"End chat\";\nvar closeAndRestartModal_message = \"Are you sure you want to end your chat?\";\nvar closeAndRestartModal_confirm = \"Yes\";\nvar closeAndRestartModal_cancel = \"No\";\nvar datePicker_chooseDate = \"Choose a date ({format})\";\nvar datePicker_confirmDate = \"Confirm date\";\nvar tour_resumeButton = \"Resume\";\nvar tour_restartButton = \"Restart\";\nvar tour_startButton = \"Get started\";\nvar tour_doneButton = \"Done\";\nvar tour_ariaMinimizeButton = \"Hide tour window\";\nvar tour_ariaCloseButton = \"Close tour window\";\nvar tour_ariaChatButton = \"Open the chat window\";\nvar tour_ariaPreviousButton = \"Go to previous step\";\nvar tour_ariaNextButton = \"Go to next step\";\nvar tour_instructions = \"Use the previous and next buttons to navigate between steps of the tour. Use the {chatButtonText} button to open that chat window.\";\nvar tour_errorFetchingStep = \"There was a problem fetching the next step.\";\nvar tour_errorTitle = \"Unable to continue\";\nvar tour_errorBody = \"The content failed to load. Please try again.\";\nvar fileSharing_fileTooLarge = \"The maximum file size allowed is {maxSize}.\";\nvar fileSharing_ariaAnnounceSuccess = \"The file was uploaded successfully.\";\nvar fileSharing_fileIcon = \"File icon\";\nvar fileSharing_removeButtonTitle = \"Remove file\";\nvar fileSharing_statusUploading = \"Uploading file\";\nvar fileSharing_uploadFailed = \"There was an error uploading the file.\";\nvar fileSharing_agentMessageText = \"File upload\";\nvar fileSharing_request = \"The agent has requested you upload a file.\";\nvar carousel_prevNavButton = \"Go to previous slide.\";\nvar carousel_nextNavButton = \"Go to next slide.\";\nvar input_completionsTagApp = \"App\";\nvar input_completionsTagAssistant = \"Assistant\";\nvar table_filterPlaceholder = \"Filter table\";\nvar table_previousPage = \"Previous page\";\nvar table_nextPage = \"Next page\";\nvar table_itemsPerPage = \"Items per page:\";\nvar table_paginationSupplementalText = \"of {pagesCount, number} {pagesCount, plural, one {page} other {pages}}\";\nvar table_paginationStatus = \"{start, number}–{end, number} of {count, number} {count, plural, one {item} other {items}}\";\nvar feedback_positiveLabel = \"Good response\";\nvar feedback_negativeLabel = \"Bad response\";\nvar feedback_defaultTitle = \"Additional feedback\";\nvar feedback_defaultPrompt = \"Why did you choose this rating?\";\nvar feedback_defaultPlaceholder = \"Add a comment\";\nvar feedback_submitLabel = \"Submit\";\nvar feedback_cancelLabel = \"Cancel\";\nvar input_stopResponse = \"Stop response\";\nvar messages_responseStopped = \"Response stopped\";\nvar chainOfThought_stepTitle = \"{stepNumber, number}: {stepTitle}\";\nvar chainOfThought_inputLabel = \"Input\";\nvar chainOfThought_outputLabel = \"Output\";\nvar chainOfThought_toolLabel = \"Tool\";\nvar chainOfThought_statusSucceededLabel = \"Succeeded\";\nvar chainOfThought_statusFailedLabel = \"Failed\";\nvar chainOfThought_statusProcessingLabel = \"Processing\";\nvar chainOfThought_explainabilityLabel = \"How did I get this answer?\";\nvar enLanguagePack = {\n\tai_slug_title: ai_slug_title,\n\tai_slug_description: ai_slug_description,\n\tcomponents_overflow_ariaLabel: components_overflow_ariaLabel,\n\tcomponents_swiper_currentLabel: components_swiper_currentLabel,\n\terrors_communicating: errors_communicating,\n\terrors_imageSource: errors_imageSource,\n\terrors_videoSource: errors_videoSource,\n\terrors_audioSource: errors_audioSource,\n\terrors_iframeSource: errors_iframeSource,\n\terrors_singleMessage: errors_singleMessage,\n\terrors_ariaMessageRetrying: errors_ariaMessageRetrying,\n\terrors_ariaMessageFailed: errors_ariaMessageFailed,\n\terrors_noAgentsAvailable: errors_noAgentsAvailable,\n\terrors_noAgentsJoined: errors_noAgentsJoined,\n\terrors_connectingToAgent: errors_connectingToAgent,\n\terrors_busy: errors_busy,\n\terrors_agentAppSessionExpired: errors_agentAppSessionExpired,\n\terrors_generalContent: errors_generalContent,\n\terrors_somethingWrong: errors_somethingWrong,\n\tinput_ariaLabel: input_ariaLabel,\n\tinput_placeholder: input_placeholder,\n\tinput_buttonLabel: input_buttonLabel,\n\tinput_uploadButtonLabel: input_uploadButtonLabel,\n\twindow_title: window_title,\n\twindow_ariaTourRegion: window_ariaTourRegion,\n\twindow_ariaTourRegionNamespace: window_ariaTourRegionNamespace,\n\twindow_ariaChatRegion: window_ariaChatRegion,\n\twindow_ariaChatRegionNamespace: window_ariaChatRegionNamespace,\n\twindow_ariaWindowOpened: window_ariaWindowOpened,\n\twindow_ariaWindowClosed: window_ariaWindowClosed,\n\twindow_ariaWindowLoading: window_ariaWindowLoading,\n\tlauncher_isOpen: launcher_isOpen,\n\tlauncher_isClosed: launcher_isClosed,\n\tlauncher_isTourOpen: launcher_isTourOpen,\n\tlauncher_isTourClosed: launcher_isTourClosed,\n\tlauncher_desktopGreeting: launcher_desktopGreeting,\n\tlauncher_mobileGreeting: launcher_mobileGreeting,\n\tlauncher_ariaIsExpanded: launcher_ariaIsExpanded,\n\tlauncher_closeButton: launcher_closeButton,\n\tmessages_youSaid: messages_youSaid,\n\tmessages_botSaid: messages_botSaid,\n\tmessages_agentSaid: messages_agentSaid,\n\tmessages_searchResults: messages_searchResults,\n\tmessages_searchResultsLink: messages_searchResultsLink,\n\tmessages_searchResultsOpenDocument: messages_searchResultsOpenDocument,\n\tmessages_searchResultsOpenDocumentWithLabel: messages_searchResultsOpenDocumentWithLabel,\n\tmessages_searchResultsExpand: messages_searchResultsExpand,\n\tmessages_searchResultsCollapse: messages_searchResultsCollapse,\n\tmessages_botIsLoading: messages_botIsLoading,\n\tmessages_botIsTyping: messages_botIsTyping,\n\tmessages_agentIsTyping: messages_agentIsTyping,\n\tmessages_scrollHandle: messages_scrollHandle,\n\tmessages_scrollHandleDetailed: messages_scrollHandleDetailed,\n\tmessages_scrollHandleEnd: messages_scrollHandleEnd,\n\tmessages_scrollHandleEndDetailed: messages_scrollHandleEndDetailed,\n\tmessage_labelBot: message_labelBot,\n\tmessage_labelYou: message_labelYou,\n\tnotifications_toastClose: notifications_toastClose,\n\tbuttons_restart: buttons_restart,\n\tbuttons_cancel: buttons_cancel,\n\tbuttons_retry: buttons_retry,\n\toptions_select: options_select,\n\toptions_ariaOptionsDisabled: options_ariaOptionsDisabled,\n\theader_previewLinkTitle: header_previewLinkTitle,\n\theader_ariaCloseRestart: header_ariaCloseRestart,\n\theader_ariaBotAvatar: header_ariaBotAvatar,\n\theader_overflowMenu_options: header_overflowMenu_options,\n\thomeScreen_returnToAssistant: homeScreen_returnToAssistant,\n\thomeScreen_returnToHome: homeScreen_returnToHome,\n\thomeScreen_overflowMenuHomeScreen: homeScreen_overflowMenuHomeScreen,\n\thomeScreen_ariaQuickStartListButton: homeScreen_ariaQuickStartListButton,\n\thomeScreen_ariaQuickStartListOpened: homeScreen_ariaQuickStartListOpened,\n\thomeScreen_ariaQuickStartListClosed: homeScreen_ariaQuickStartListClosed,\n\tdefault_agent_availableMessage: default_agent_availableMessage,\n\tdefault_agent_unavailableMessage: default_agent_unavailableMessage,\n\tagent_reason_error: agent_reason_error,\n\tagent_sdMissingWarning: agent_sdMissingWarning,\n\tagent_noName: agent_noName,\n\tagent_chatTitle: agent_chatTitle,\n\tagent_startChat: agent_startChat,\n\tagent_connecting: agent_connecting,\n\tagent_agentNoNameTitle: agent_agentNoNameTitle,\n\tagent_agentJoinedName: agent_agentJoinedName,\n\tagent_agentJoinedNoName: agent_agentJoinedNoName,\n\tagent_youConnectedWarning: agent_youConnectedWarning,\n\tagent_connectingMinutes: agent_connectingMinutes,\n\tagent_connectingQueue: agent_connectingQueue,\n\tagent_ariaAgentAvatar: agent_ariaAgentAvatar,\n\tagent_ariaGenericAvatar: agent_ariaGenericAvatar,\n\tagent_ariaGenericBotAvatar: agent_ariaGenericBotAvatar,\n\tagent_youEndedChat: agent_youEndedChat,\n\tagent_conversationWasEnded: agent_conversationWasEnded,\n\tagent_disconnected: agent_disconnected,\n\tagent_reconnected: agent_reconnected,\n\tagent_agentLeftChat: agent_agentLeftChat,\n\tagent_agentLeftChatNoName: agent_agentLeftChatNoName,\n\tagent_agentEndedChat: agent_agentEndedChat,\n\tagent_agentEndedChatNoName: agent_agentEndedChatNoName,\n\tagent_transferring: agent_transferring,\n\tagent_transferringNoName: agent_transferringNoName,\n\tagent_endChat: agent_endChat,\n\tagent_confirmSuspendedEndChatTitle: agent_confirmSuspendedEndChatTitle,\n\tagent_confirmSuspendedEndChatMessage: agent_confirmSuspendedEndChatMessage,\n\tagent_confirmCancelRequestTitle: agent_confirmCancelRequestTitle,\n\tagent_confirmCancelRequestMessage: agent_confirmCancelRequestMessage,\n\tagent_confirmCancelRequestNo: agent_confirmCancelRequestNo,\n\tagent_confirmCancelRequestYes: agent_confirmCancelRequestYes,\n\tagent_confirmEndChat: agent_confirmEndChat,\n\tagent_confirmEndChatNo: agent_confirmEndChatNo,\n\tagent_confirmEndChatYes: agent_confirmEndChatYes,\n\tagent_confirmEndSuspendedYes: agent_confirmEndSuspendedYes,\n\tagent_botReturned: agent_botReturned,\n\tagent_newMessage: agent_newMessage,\n\tagent_cardButtonChatRequested: agent_cardButtonChatRequested,\n\tagent_cardButtonConnected: agent_cardButtonConnected,\n\tagent_cardButtonChatEnded: agent_cardButtonChatEnded,\n\tagent_cardMessageChatEnded: agent_cardMessageChatEnded,\n\tagent_cardMessageConnected: agent_cardMessageConnected,\n\tagent_connectButtonCancel: agent_connectButtonCancel,\n\tagent_connectedButtonEndChat: agent_connectedButtonEndChat,\n\tagent_connectWaiting: agent_connectWaiting,\n\tagent_defaultMessageToAgent: agent_defaultMessageToAgent,\n\tagent_inputPlaceholderConnecting: agent_inputPlaceholderConnecting,\n\tagent_inputPlaceholderReconnecting: agent_inputPlaceholderReconnecting,\n\tagent_sharingStopSharingButton: agent_sharingStopSharingButton,\n\tagent_sharingRequestTitle: agent_sharingRequestTitle,\n\tagent_sharingRequestMessage: agent_sharingRequestMessage,\n\tagent_sharingAcceptButton: agent_sharingAcceptButton,\n\tagent_sharingDeclineButton: agent_sharingDeclineButton,\n\tagent_sharingRequested: agent_sharingRequested,\n\tagent_sharingAccepted: agent_sharingAccepted,\n\tagent_sharingDeclined: agent_sharingDeclined,\n\tagent_sharingCancelled: agent_sharingCancelled,\n\tagent_sharingEnded: agent_sharingEnded,\n\tagent_suspendedWarning: agent_suspendedWarning,\n\ticon_ariaUnreadMessages: icon_ariaUnreadMessages,\n\tshowMore: showMore,\n\tshowMoreResults: showMoreResults,\n\tdisclaimer_title: disclaimer_title,\n\tdisclaimer_accept: disclaimer_accept,\n\tgeneral_ariaCloseInformationOverlay: general_ariaCloseInformationOverlay,\n\tgeneral_ariaAnnounceOpenedInformationOverlay: general_ariaAnnounceOpenedInformationOverlay,\n\tgeneral_ariaAnnounceClosedInformationOverlay: general_ariaAnnounceClosedInformationOverlay,\n\tgeneral_ariaAnnounceEscapeOverlay: general_ariaAnnounceEscapeOverlay,\n\tgeneral_returnToAssistant: general_returnToAssistant,\n\tconversationalSearch_streamingIncomplete: conversationalSearch_streamingIncomplete,\n\tconversationalSearch_viewSourceDocument: conversationalSearch_viewSourceDocument,\n\tconversationalSearch_citationsLabel: conversationalSearch_citationsLabel,\n\tconversationalSearch_toggleCitations: conversationalSearch_toggleCitations,\n\tconversationalSearch_responseStopped: conversationalSearch_responseStopped,\n\tlauncher_chatNow: launcher_chatNow,\n\tiframe_ariaSourceLoaded: iframe_ariaSourceLoaded,\n\tiframe_ariaImageAltText: iframe_ariaImageAltText,\n\tiframe_ariaClosePanel: iframe_ariaClosePanel,\n\tiframe_ariaOpenedPanel: iframe_ariaOpenedPanel,\n\tiframe_ariaClosedPanel: iframe_ariaClosedPanel,\n\tiframe_ariaClickPreviewCard: iframe_ariaClickPreviewCard,\n\tcloseAndRestartModal_title: closeAndRestartModal_title,\n\tcloseAndRestartModal_message: closeAndRestartModal_message,\n\tcloseAndRestartModal_confirm: closeAndRestartModal_confirm,\n\tcloseAndRestartModal_cancel: closeAndRestartModal_cancel,\n\tdatePicker_chooseDate: datePicker_chooseDate,\n\tdatePicker_confirmDate: datePicker_confirmDate,\n\ttour_resumeButton: tour_resumeButton,\n\ttour_restartButton: tour_restartButton,\n\ttour_startButton: tour_startButton,\n\ttour_doneButton: tour_doneButton,\n\ttour_ariaMinimizeButton: tour_ariaMinimizeButton,\n\ttour_ariaCloseButton: tour_ariaCloseButton,\n\ttour_ariaChatButton: tour_ariaChatButton,\n\ttour_ariaPreviousButton: tour_ariaPreviousButton,\n\ttour_ariaNextButton: tour_ariaNextButton,\n\ttour_instructions: tour_instructions,\n\ttour_errorFetchingStep: tour_errorFetchingStep,\n\ttour_errorTitle: tour_errorTitle,\n\ttour_errorBody: tour_errorBody,\n\tfileSharing_fileTooLarge: fileSharing_fileTooLarge,\n\tfileSharing_ariaAnnounceSuccess: fileSharing_ariaAnnounceSuccess,\n\tfileSharing_fileIcon: fileSharing_fileIcon,\n\tfileSharing_removeButtonTitle: fileSharing_removeButtonTitle,\n\tfileSharing_statusUploading: fileSharing_statusUploading,\n\tfileSharing_uploadFailed: fileSharing_uploadFailed,\n\tfileSharing_agentMessageText: fileSharing_agentMessageText,\n\tfileSharing_request: fileSharing_request,\n\tcarousel_prevNavButton: carousel_prevNavButton,\n\tcarousel_nextNavButton: carousel_nextNavButton,\n\tinput_completionsTagApp: input_completionsTagApp,\n\tinput_completionsTagAssistant: input_completionsTagAssistant,\n\ttable_filterPlaceholder: table_filterPlaceholder,\n\ttable_previousPage: table_previousPage,\n\ttable_nextPage: table_nextPage,\n\ttable_itemsPerPage: table_itemsPerPage,\n\ttable_paginationSupplementalText: table_paginationSupplementalText,\n\ttable_paginationStatus: table_paginationStatus,\n\tfeedback_positiveLabel: feedback_positiveLabel,\n\tfeedback_negativeLabel: feedback_negativeLabel,\n\tfeedback_defaultTitle: feedback_defaultTitle,\n\tfeedback_defaultPrompt: feedback_defaultPrompt,\n\tfeedback_defaultPlaceholder: feedback_defaultPlaceholder,\n\tfeedback_submitLabel: feedback_submitLabel,\n\tfeedback_cancelLabel: feedback_cancelLabel,\n\tinput_stopResponse: input_stopResponse,\n\tmessages_responseStopped: messages_responseStopped,\n\tchainOfThought_stepTitle: chainOfThought_stepTitle,\n\tchainOfThought_inputLabel: chainOfThought_inputLabel,\n\tchainOfThought_outputLabel: chainOfThought_outputLabel,\n\tchainOfThought_toolLabel: chainOfThought_toolLabel,\n\tchainOfThought_statusSucceededLabel: chainOfThought_statusSucceededLabel,\n\tchainOfThought_statusFailedLabel: chainOfThought_statusFailedLabel,\n\tchainOfThought_statusProcessingLabel: chainOfThought_statusProcessingLabel,\n\tchainOfThought_explainabilityLabel: chainOfThought_explainabilityLabel\n};\n\nexport { agent_agentEndedChat, agent_agentEndedChatNoName, agent_agentJoinedName, agent_agentJoinedNoName, agent_agentLeftChat, agent_agentLeftChatNoName, agent_agentNoNameTitle, agent_ariaAgentAvatar, agent_ariaGenericAvatar, agent_ariaGenericBotAvatar, agent_botReturned, agent_cardButtonChatEnded, agent_cardButtonChatRequested, agent_cardButtonConnected, agent_cardMessageChatEnded, agent_cardMessageConnected, agent_chatTitle, agent_confirmCancelRequestMessage, agent_confirmCancelRequestNo, agent_confirmCancelRequestTitle, agent_confirmCancelRequestYes, agent_confirmEndChat, agent_confirmEndChatNo, agent_confirmEndChatYes, agent_confirmEndSuspendedYes, agent_confirmSuspendedEndChatMessage, agent_confirmSuspendedEndChatTitle, agent_connectButtonCancel, agent_connectWaiting, agent_connectedButtonEndChat, agent_connecting, agent_connectingMinutes, agent_connectingQueue, agent_conversationWasEnded, agent_defaultMessageToAgent, agent_disconnected, agent_endChat, agent_inputPlaceholderConnecting, agent_inputPlaceholderReconnecting, agent_newMessage, agent_noName, agent_reason_error, agent_reconnected, agent_sdMissingWarning, agent_sharingAcceptButton, agent_sharingAccepted, agent_sharingCancelled, agent_sharingDeclineButton, agent_sharingDeclined, agent_sharingEnded, agent_sharingRequestMessage, agent_sharingRequestTitle, agent_sharingRequested, agent_sharingStopSharingButton, agent_startChat, agent_suspendedWarning, agent_transferring, agent_transferringNoName, agent_youConnectedWarning, agent_youEndedChat, ai_slug_description, ai_slug_title, buttons_cancel, buttons_restart, buttons_retry, carousel_nextNavButton, carousel_prevNavButton, chainOfThought_explainabilityLabel, chainOfThought_inputLabel, chainOfThought_outputLabel, chainOfThought_statusFailedLabel, chainOfThought_statusProcessingLabel, chainOfThought_statusSucceededLabel, chainOfThought_stepTitle, chainOfThought_toolLabel, closeAndRestartModal_cancel, closeAndRestartModal_confirm, closeAndRestartModal_message, closeAndRestartModal_title, components_overflow_ariaLabel, components_swiper_currentLabel, conversationalSearch_citationsLabel, conversationalSearch_responseStopped, conversationalSearch_streamingIncomplete, conversationalSearch_toggleCitations, conversationalSearch_viewSourceDocument, datePicker_chooseDate, datePicker_confirmDate, enLanguagePack as default, default_agent_availableMessage, default_agent_unavailableMessage, disclaimer_accept, disclaimer_title, errors_agentAppSessionExpired, errors_ariaMessageFailed, errors_ariaMessageRetrying, errors_audioSource, errors_busy, errors_communicating, errors_connectingToAgent, errors_generalContent, errors_iframeSource, errors_imageSource, errors_noAgentsAvailable, errors_noAgentsJoined, errors_singleMessage, errors_somethingWrong, errors_videoSource, feedback_cancelLabel, feedback_defaultPlaceholder, feedback_defaultPrompt, feedback_defaultTitle, feedback_negativeLabel, feedback_positiveLabel, feedback_submitLabel, fileSharing_agentMessageText, fileSharing_ariaAnnounceSuccess, fileSharing_fileIcon, fileSharing_fileTooLarge, fileSharing_removeButtonTitle, fileSharing_request, fileSharing_statusUploading, fileSharing_uploadFailed, general_ariaAnnounceClosedInformationOverlay, general_ariaAnnounceEscapeOverlay, general_ariaAnnounceOpenedInformationOverlay, general_ariaCloseInformationOverlay, general_returnToAssistant, header_ariaBotAvatar, header_ariaCloseRestart, header_overflowMenu_options, header_previewLinkTitle, homeScreen_ariaQuickStartListButton, homeScreen_ariaQuickStartListClosed, homeScreen_ariaQuickStartListOpened, homeScreen_overflowMenuHomeScreen, homeScreen_returnToAssistant, homeScreen_returnToHome, icon_ariaUnreadMessages, iframe_ariaClickPreviewCard, iframe_ariaClosePanel, iframe_ariaClosedPanel, iframe_ariaImageAltText, iframe_ariaOpenedPanel, iframe_ariaSourceLoaded, input_ariaLabel, input_buttonLabel, input_completionsTagApp, input_completionsTagAssistant, input_placeholder, input_stopResponse, input_uploadButtonLabel, launcher_ariaIsExpanded, launcher_chatNow, launcher_closeButton, launcher_desktopGreeting, launcher_isClosed, launcher_isOpen, launcher_isTourClosed, launcher_isTourOpen, launcher_mobileGreeting, message_labelBot, message_labelYou, messages_agentIsTyping, messages_agentSaid, messages_botIsLoading, messages_botIsTyping, messages_botSaid, messages_responseStopped, messages_scrollHandle, messages_scrollHandleDetailed, messages_scrollHandleEnd, messages_scrollHandleEndDetailed, messages_searchResults, messages_searchResultsCollapse, messages_searchResultsExpand, messages_searchResultsLink, messages_searchResultsOpenDocument, messages_searchResultsOpenDocumentWithLabel, messages_youSaid, notifications_toastClose, options_ariaOptionsDisabled, options_select, showMore, showMoreResults, table_filterPlaceholder, table_itemsPerPage, table_nextPage, table_paginationStatus, table_paginationSupplementalText, table_previousPage, tour_ariaChatButton, tour_ariaCloseButton, tour_ariaMinimizeButton, tour_ariaNextButton, tour_ariaPreviousButton, tour_doneButton, tour_errorBody, tour_errorFetchingStep, tour_errorTitle, tour_instructions, tour_restartButton, tour_resumeButton, tour_startButton, window_ariaChatRegion, window_ariaChatRegionNamespace, window_ariaTourRegion, window_ariaTourRegionNamespace, window_ariaWindowClosed, window_ariaWindowLoading, window_ariaWindowOpened, window_title };\n","import { PureComponent } from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component will only mount its children after a certain amount of time has passed.\n */\nclass MountChildrenOnDelay extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            showChildren: false,\n        };\n    }\n    componentDidMount() {\n        // Once the component is mounted, start the countdown.\n        this.onComponentDidMount = setTimeout(() => {\n            this.setState({ showChildren: true });\n        }, this.props.delay);\n    }\n    // If we unmount before the delay runs out, we can get browser errors if we don't clear.\n    componentWillUnmount() {\n        clearTimeout(this.onComponentDidMount);\n        this.onComponentDidMount = undefined;\n    }\n    render() {\n        if (!this.state.showChildren) {\n            return false;\n        }\n        return this.props.children;\n    }\n}\nMountChildrenOnDelay.defaultProps = { delay: 500 };\n\nexport { MountChildrenOnDelay };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This function will return a new promise that keeps a reference to its own resolve and reject functions so that they\n * can be called on demand by the code using the promise.\n */\nfunction resolvablePromise() {\n    let resolveFunction;\n    let rejectFunction;\n    const promise = new Promise((resolve, reject) => {\n        resolveFunction = resolve;\n        rejectFunction = reject;\n    });\n    promise.doResolve = (resolveValue) => {\n        promise.isResolved = true;\n        promise.isComplete = true;\n        resolveFunction(resolveValue);\n    };\n    promise.doReject = (rejectValue) => {\n        promise.isRejected = true;\n        promise.isComplete = true;\n        rejectFunction(rejectValue);\n    };\n    promise.isResolved = false;\n    promise.isRejected = false;\n    promise.isComplete = false;\n    return promise;\n}\n\nexport { resolvablePromise };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * In this file we manage our dynamic imports for the entry of Carbon AI chat. See https://webpack.js.org/guides/code-splitting/#dynamic-imports.\n */\nasync function loadHAA() {\n    const { createService } = await import('../shared/services/haa/HumanAgentServiceImpl.js');\n    return createService;\n}\n/**\n * Wrap React.lazy to give you a `.preload()` method\n * that returns the same promise React.lazy will use.\n */\nfunction lazyWithPreload(factory) {\n    // Create the lazy component…\n    const Component = React.lazy(factory);\n    // …then attach the preload method\n    Component.preload = factory;\n    return Component;\n}\nfunction lazyChat() {\n    return lazyWithPreload(() => import('../shared/components/Chat.js'));\n}\nfunction lazyCatastrophicError() {\n    return lazyWithPreload(() => import('../shared/components/CatastrophicError.js').then((mod) => ({\n        default: mod.CatastrophicError,\n    })));\n}\nfunction lazyDisclaimer() {\n    return lazyWithPreload(() => import('../shared/components/Disclaimer.js').then((mod) => ({\n        default: mod.Disclaimer,\n    })));\n}\nfunction lazyHomeScreenContainer() {\n    return lazyWithPreload(() => import('../shared/components/homeScreen/HomeScreenContainer.js').then((mod) => ({\n        default: mod.HomeScreenContainer,\n    })));\n}\nfunction lazyIFramePanel() {\n    return lazyWithPreload(() => import('../shared/components/responseTypes/iframe/IFramePanel.js').then((mod) => ({\n        default: mod.IFramePanel,\n    })));\n}\nfunction lazyViewSourcePanel() {\n    return lazyWithPreload(() => import('../shared/components/responseTypes/util/citations/ViewSourcePanel.js').then((mod) => ({\n        default: mod.ViewSourcePanel,\n    })));\n}\nfunction lazyBodyAndFooterPanelComponent() {\n    return lazyWithPreload(() => import('../shared/components/panels/BodyAndFooterPanelComponent.js').then((mod) => ({\n        default: mod.BodyAndFooterPanelComponent,\n    })));\n}\nfunction lazyTourComponent() {\n    return React.lazy(() => import('../shared/components/tour/TourContainer.js'));\n}\nfunction lazyMediaPlayer() {\n    return React.lazy(() => import('../shared/components/responseTypes/util/ReactPlayer.js'));\n}\nfunction lazyCarousel() {\n    return React.lazy(() => import('../shared/components/responseTypes/carousel/Carousel.js'));\n}\n\nexport { lazyBodyAndFooterPanelComponent, lazyCarousel, lazyCatastrophicError, lazyChat, lazyDisclaimer, lazyHomeScreenContainer, lazyIFramePanel, lazyMediaPlayer, lazyTourComponent, lazyViewSourcePanel, loadHAA };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a very simple component which simply renders an element that is visually hidden in the UI. This means\n * that the item is present in the DOM and is visible to screen readers but it is not visible to sighted users.\n */\nconst VisuallyHidden = React.forwardRef((props, ref) => {\n    return (React.createElement(\"div\", { ref: ref, ...props, className: `WACVisuallyHidden ${props.className || \"\"}` }, props.children));\n});\nVisuallyHidden.displayName = \"VisuallyHidden\";\n\nexport { VisuallyHidden as default };\n","import { detect } from 'detect-browser';\nimport memoizeOne from 'memoize-one';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Miscellaneous utilities for dealing with the browser.\n */\nconst browser = detect();\n// The user agent string in version 13 of the operating system no longer distinguishes between macOS and iPads so\n// need add an extra check that may not be reliable in the future.\nconst IS_IPAD = /iPad/.test(window.navigator.platform) ||\n    (window.navigator.platform === \"MacIntel\" &&\n        window.navigator.maxTouchPoints > 1);\nconst IS_IOS = browser?.os === \"iOS\";\nconst IS_ANDROID = browser?.os === \"Android OS\";\nconst IS_MOBILE = IS_IOS || IS_ANDROID || IS_IPAD;\n// The width and height checks here are how we differentiate between mobile android devices and tablets. Eventually new\n// phones may get wide enough that the width check needs to be increased.\nconst IS_PHONE = IS_MOBILE && (window.screen.width < 500 || window.screen.height < 500);\n// Assume the phone is in portrait mode if the width is small.\nconst IS_PHONE_IN_PORTRAIT_MODE = IS_PHONE && window.screen.width < 500;\n// For reference here is a list of screen dimensions observed for some of the iPhone devices in browser stack.\n//\n// 414x896 XS Max\n// 414x896 XR\n//\n// 375x812 XS\n// 375x812 X\n//\n// 414x736 8 Plus\n// 414x736 6S Plus\n// 414x736 6 Plus\n//\n// 375x667 8\n// 375x667 7\n// 375x667 6s\n// 375x667 6\n//\n// 320x568 SE\n// This array maps from a screen height on iOS device to a height offset to apply to the widget for devices of that\n// height.\nconst IOS_HEIGHT_MAP = [\n    [896, 114],\n    [812, 114],\n    [736, 75],\n    [667, 75],\n];\n/**\n * This function is responsible for returning a height offset to apply to older iOS devices. On these devices the\n * navigation bars at the top and bottom of the screen consume a portion of the 100vh viewport height which causes\n * the text field to be cut off at the bottom. By applying this offset we make it visible. Unfortunately this offset\n * is different on different devices so we make a guess based on the screen height. Another drawback is that this\n * offset causes a gap to appear below the text field when the navigation bars are hiding.\n */\nfunction getIPhoneHeightOffset() {\n    // eslint-disable-next-line no-restricted-globals\n    const screenHeight = Math.max(screen.height, screen.width);\n    for (let index = 0; index < IOS_HEIGHT_MAP.length; index++) {\n        const [height, offset] = IOS_HEIGHT_MAP[index];\n        if (screenHeight >= height) {\n            return offset;\n        }\n    }\n    return 75;\n}\n/**\n * In some conditions (iFrames) window.sessionStorage is DEFINED, but not accessible.\n * Rather than doing window.sessionStorage || alternate checks, this actually checks if sessionStorage\n * can be used.\n *\n * @returns If window.sessionStorage is read and writeable.\n */\nfunction isSessionStorageAvailable() {\n    let isAvailable = false;\n    try {\n        window.sessionStorage.setItem(\"web-chat-test-item\", \"true\");\n        window.sessionStorage.getItem(\"web-chat-test-item\");\n        window.sessionStorage.removeItem(\"web-chat-test-item\");\n        isAvailable = true;\n    }\n    catch {\n        // Ignore.\n    }\n    return isAvailable;\n}\nconst IS_SESSION_STORAGE = memoizeOne(isSessionStorageAvailable);\n/**\n * Attempts to return the hostname of the provided URL. If an invalid url is returned, we just return the provided url\n * value.\n */\nfunction getURLHostName(url) {\n    try {\n        return new URL(url).hostname;\n    }\n    catch {\n        return url;\n    }\n}\n/**\n * Executes the given operation in a setTimeout if the timeout value is specified. If not, then the operation is\n * executed immediately without using a setTimeout.\n */\nfunction conditionalSetTimeout(operation, timeout) {\n    if (timeout) {\n        return setTimeout(operation, timeout);\n    }\n    // Execute the operation immediately.\n    operation();\n    return null;\n}\n\nexport { IS_IOS, IS_MOBILE, IS_PHONE, IS_PHONE_IN_PORTRAIT_MODE, IS_SESSION_STORAGE, conditionalSetTimeout, getIPhoneHeightOffset, getURLHostName };\n","import { useRef, useEffect } from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A custom react hook to be able to set and access previous prop/state values:\n * see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nexport { usePrevious };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The types of elements that can be added to the chat header element.\n *\n * @category Config\n */\nvar ChatHeaderObjectType;\n(function (ChatHeaderObjectType) {\n    ChatHeaderObjectType[\"LINK\"] = \"link\";\n    ChatHeaderObjectType[\"MENU\"] = \"menu\";\n    ChatHeaderObjectType[\"BUTTON\"] = \"button\";\n    ChatHeaderObjectType[\"RADIO_GROUP\"] = \"radio-group\";\n})(ChatHeaderObjectType || (ChatHeaderObjectType = {}));\n\nexport { ChatHeaderObjectType };\n","import { __decorate } from 'tslib';\nimport { bind } from 'bind-decorator';\nimport { LitElement, unsafeCSS, css } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport css_248z from './chatHeaderAvatarElement.scss.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nclass ChatHeaderAvatarElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.isLoaded = false;\n    }\n    /**\n     * Called when the onError callback function is fired.\n     */\n    _handleOnError() {\n        this.onError?.();\n    }\n}\nChatHeaderAvatarElement.styles = css `\n    ${unsafeCSS(css_248z)}\n  `;\n__decorate([\n    property({ type: String })\n], ChatHeaderAvatarElement.prototype, \"url\", void 0);\n__decorate([\n    property({ type: String })\n], ChatHeaderAvatarElement.prototype, \"corners\", void 0);\n__decorate([\n    property({ type: String })\n], ChatHeaderAvatarElement.prototype, \"alt\", void 0);\n__decorate([\n    property({ type: Object })\n], ChatHeaderAvatarElement.prototype, \"onError\", void 0);\n__decorate([\n    state()\n], ChatHeaderAvatarElement.prototype, \"isLoaded\", void 0);\n__decorate([\n    bind\n], ChatHeaderAvatarElement.prototype, \"_handleOnError\", null);\n\nexport { ChatHeaderAvatarElement };\n","var css_248z = \".cds--aichat-chat-header-avatar{\\n  display:block;\\n  block-size:20px;\\n  max-block-size:20px;\\n}\\n\\n.cds--aichat-chat-header-avatar--round{\\n  border-radius:10px;\\n}\";\n\nexport { css_248z as default };\n","import { __decorate } from 'tslib';\nimport { carbonElement } from '../../../decorators/customElement.js';\nimport { chatHeaderAvatarTemplate } from './src/chatHeaderAvatar.template.js';\nimport { ChatHeaderAvatarElement } from './src/chatHeaderAvatarElement.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst CHAT_HEADER_AVATAR_TAG_NAME = \"cds-aichat-chat-header-avatar\";\n/**\n * Constructed class functionality for the chat header avatar.\n */\nlet CDSChatHeaderAvatarElement = class CDSChatHeaderAvatarElement extends ChatHeaderAvatarElement {\n    render() {\n        return chatHeaderAvatarTemplate(this);\n    }\n};\nCDSChatHeaderAvatarElement = __decorate([\n    carbonElement(CHAT_HEADER_AVATAR_TAG_NAME)\n], CDSChatHeaderAvatarElement);\n\nexport { CHAT_HEADER_AVATAR_TAG_NAME, CDSChatHeaderAvatarElement as default };\n","import '@carbon/web-components/es-custom/components/skeleton-icon/index.js';\nimport cx from 'classnames';\nimport { html } from 'lit';\nimport { CSS_CLASS_PREFIX } from '../../../../settings.js';\nimport { CornersType } from '../../../../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction chatHeaderAvatarTemplate(classElement) {\n    const { url, corners, alt, onError } = classElement;\n    return html `\n    <img\n      class=\"${cx(`${CSS_CLASS_PREFIX}-chat-header-avatar`, {\n        [`${CSS_CLASS_PREFIX}-chat-header-avatar--round`]: corners === CornersType.ROUND,\n    })}\"\n      src=\"${url}\"\n      alt=\"${alt}\"\n      @error=\"${onError}\"\n    />\n  `;\n}\n\nexport { chatHeaderAvatarTemplate };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport CDSChatHeaderAvatarElement, { CHAT_HEADER_AVATAR_TAG_NAME } from '../../../web-components/components/chatHeader/chatHeaderAvatar/cds-aichat-chat-header-avatar.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst ChatHeaderAvatar = createComponent({\n    tagName: CHAT_HEADER_AVATAR_TAG_NAME,\n    elementClass: CDSChatHeaderAvatarElement,\n    react: React,\n});\n\nexport { ChatHeaderAvatar };\n","import { __decorate } from 'tslib';\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { carbonElement } from '../../../decorators/customElement.js';\nimport { WEB_COMPONENT_PREFIX } from '../../../settings.js';\nimport { chatHeaderLinkTemplate } from './src/chatHeaderLinkElement.template.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nlet ChatHeaderLinkElement = class ChatHeaderLinkElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.isNewTab = true;\n    }\n    render() {\n        return chatHeaderLinkTemplate(this);\n    }\n};\n__decorate([\n    property({ type: String })\n], ChatHeaderLinkElement.prototype, \"url\", void 0);\n__decorate([\n    property({ type: String })\n], ChatHeaderLinkElement.prototype, \"label\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ChatHeaderLinkElement.prototype, \"isNewTab\", void 0);\nChatHeaderLinkElement = __decorate([\n    carbonElement(`${WEB_COMPONENT_PREFIX}-chat-header-link`)\n], ChatHeaderLinkElement);\n\nexport { ChatHeaderLinkElement };\n","import '@carbon/web-components/es-custom/components/button/index.js';\nimport '@carbon/web-components/es-custom/components/overflow-menu/index.js';\nimport { html } from 'lit';\nimport { ButtonKindEnum } from '../../../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * ChatHeaderLinkElement view logic.\n */\nfunction chatHeaderLinkTemplate(customElementClass) {\n    const { label, url, isNewTab } = customElementClass;\n    return html `<cds-custom-button\n    class=\"WACChatHeaderLink\"\n    href=\"${url}\"\n    target=\"${isNewTab ? \"_blank\" : \"_self\"}\"\n    kind=\"${ButtonKindEnum.GHOST}\"\n    size=\"md\"\n    >${label}</cds-custom-button\n  >`;\n}\n\nexport { chatHeaderLinkTemplate };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport { ChatHeaderLinkElement } from '../../../web-components/components/chatHeader/chatHeaderLink/cds-aichat-chat-header-link.js';\nimport { WEB_COMPONENT_PREFIX } from '../../../web-components/settings.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst ChatHeaderLink = createComponent({\n    tagName: `${WEB_COMPONENT_PREFIX}-chat-header-link`,\n    elementClass: ChatHeaderLinkElement,\n    react: React,\n});\n\nexport { ChatHeaderLink };\n","import { Menu } from '@carbon/react';\nimport React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This renders a Carbon Menu component for the purposes of rendering in the chat header.\n */\nfunction ChatHeaderMenu({ id, className, label, isOpen, target, children, menuAlignment, containerRef, }) {\n    return (React.createElement(Menu, { id: id, className: className, open: isOpen, target: target, label: label, size: \"md\", menuAlignment: menuAlignment, mode: \"full\", legacyAutoalign: false, containerRef: containerRef }, children));\n}\n\nexport { ChatHeaderMenu };\n","import ChevronDown from '@carbon/icons-react/es/ChevronDown.js';\nimport ChevronUp from '@carbon/icons-react/es/ChevronUp.js';\nimport { Button } from '@carbon/react';\nimport { useFloating, useInteractions, useClick, useDismiss } from '@floating-ui/react';\nimport React, { useState } from 'react';\nimport { useUUID } from '../../../shared/hooks/useUUID.js';\nimport { ChatHeaderMenu } from './ChatHeaderMenu.js';\nimport { ButtonKindEnum, ButtonSizeEnum } from '../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component renders a button that opens a menu when clicked. This button is specifically used in the chat header.\n */\n/**\n * This component renders a button that opens a menu when clicked. This button is specifically used in the chat header.\n */\nfunction ChatHeaderMenuButton(props) {\n    const [isOpen, setIsOpen] = useState(false);\n    // These hooks handle closing the menu when the user clicks outside of the menu. The native Carbon button menu\n    // component uses the same library.\n    const { refs: menuRefs, context: menuContext } = useFloating({\n        open: isOpen,\n        onOpenChange: setIsOpen,\n    });\n    const { getReferenceProps: getMenuReferenceProps, getFloatingProps: getMenuFloatingProps, } = useInteractions([useClick(menuContext), useDismiss(menuContext)]);\n    const id = useUUID();\n    return (React.createElement(\"div\", { ref: menuRefs.setReference, \"aria-owns\": id, ...getMenuReferenceProps() },\n        React.createElement(Button, { size: ButtonSizeEnum.MEDIUM, kind: ButtonKindEnum.GHOST, onClick: () => setIsOpen(!isOpen), renderIcon: isOpen ? ChevronUp : ChevronDown, onMouseDown: (event) => event.preventDefault(), \"aria-label\": props.ariaLabel, \"aria-haspopup\": true, \"aria-expanded\": isOpen, \"aria-controls\": id }, props.label),\n        React.createElement(ChatHeaderMenu, { id: id, isOpen: isOpen, target: menuRefs.floating.current, label: props.label, containerRef: props.containerRef, menuAlignment: props.menuAlignment }, props.children),\n        React.createElement(\"div\", { ref: menuRefs.setFloating, className: \"WAChatHeaderMenuButton_HostElement\", ...getMenuFloatingProps() })));\n}\n\nexport { ChatHeaderMenuButton };\n","import { MenuItem } from '@carbon/react';\nimport React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component renders a menu item for the purposes of being rendered in the menu in the chat header.\n * See {@link ChatHeaderMenuButton}. The Carbon MenuItem component doesn't support anchor element attributes that\n * allow the item be a link, so the this behavior is handled by manually opening the provided url.\n */\nfunction ChatHeaderMenuItem({ label, url, isNewTab = true, onClick, children, }) {\n    return (React.createElement(MenuItem, { label: label, onClick: () => {\n            onClick?.();\n            if (url) {\n                window.open(url, isNewTab ? \"_blank\" : \"_self\");\n            }\n        } }, children));\n}\n\nexport { ChatHeaderMenuItem };\n","import { MenuItemRadioGroup } from '@carbon/react';\nimport React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component renders the Carbon MenuItemRadioGroup component specifically in the {@link ChatHeaderMenu} component.\n */\nfunction ChatHeaderMenuItemRadioGroup(props) {\n    const { label, items, defaultSelectedItem, selectedItem, onChange } = props;\n    return (React.createElement(MenuItemRadioGroup, { label: label, items: items, defaultSelectedItem: defaultSelectedItem, selectedItem: selectedItem, onChange: (selectedItem) => {\n            // The onChange callback gets fired twice. Check if the object returned does not contain an onFocus event\n            // object method.\n            if (!selectedItem.preventDefault) {\n                onChange(selectedItem);\n            }\n        }, itemToString: (menuItem) => typeof menuItem === \"string\"\n            ? menuItem\n            : menuItem.label || menuItem.value }));\n}\n\nexport { ChatHeaderMenuItemRadioGroup };\n","import { Button } from '@carbon/react';\nimport { useFloating, useInteractions, useClick, useDismiss } from '@floating-ui/react';\nimport cx from 'classnames';\nimport React, { useState } from 'react';\nimport { useUUID } from '../../../shared/hooks/useUUID.js';\nimport { ChatHeaderMenu } from './ChatHeaderMenu.js';\nimport { ButtonKindEnum, ButtonSizeEnum } from '../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction ChatHeaderOverflowMenu(props) {\n    const [isOpen, setIsOpen] = useState(false);\n    // These hooks handle closing the menu when the user clicks outside of the menu. The native Carbon overflow menu\n    // component uses the same library.\n    const { refs: menuRefs, context: menuContext } = useFloating({\n        open: isOpen,\n        onOpenChange: (isOpen) => {\n            setIsOpen(isOpen);\n            if (isOpen) {\n                props.onOpen?.();\n            }\n            else {\n                props.onClose?.();\n            }\n        },\n    });\n    const { getReferenceProps: getMenuReferenceProps, getFloatingProps: getMenuFloatingProps, } = useInteractions([useClick(menuContext), useDismiss(menuContext)]);\n    const id = useUUID();\n    return (React.createElement(\"div\", { ref: menuRefs.setReference, \"aria-owns\": id, ...getMenuReferenceProps() },\n        React.createElement(Button, { className: cx(\"WACChatHeaderOverflowMenu__Button\", props.className), size: ButtonSizeEnum.MEDIUM, kind: ButtonKindEnum.GHOST, onClick: () => setIsOpen(!isOpen), tooltipPosition: props.tooltipPosition, renderIcon: props.renderIcon, onMouseDown: (event) => event.preventDefault(), iconDescription: props.iconDescription, hasIconOnly: true, \"aria-label\": props.ariaLabel, \"aria-haspopup\": true, \"aria-expanded\": isOpen, \"aria-controls\": id }),\n        React.createElement(ChatHeaderMenu, { id: id, label: props.ariaLabel, isOpen: isOpen, target: menuRefs.floating.current, containerRef: props.containerRef, menuAlignment: props.menuAlignment }, props.children),\n        React.createElement(\"div\", { ref: menuRefs.setFloating, className: \"WACChatHeaderOverflowMenu__HostElement\", ...getMenuFloatingProps() })));\n}\n\nexport { ChatHeaderOverflowMenu };\n","import { __decorate } from 'tslib';\nimport { LitElement, unsafeCSS, css } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { carbonElement } from '../../../decorators/customElement.js';\nimport { WEB_COMPONENT_PREFIX } from '../../../settings.js';\nimport css_248z from './src/chatHeaderTitle.scss.js';\nimport { chatHeaderTitleTemplate } from './src/chatHeaderTitle.template.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nlet ChatHeaderTitleElement = class ChatHeaderTitleElement extends LitElement {\n    render() {\n        return chatHeaderTitleTemplate(this);\n    }\n};\nChatHeaderTitleElement.styles = css `\n    ${unsafeCSS(css_248z)}\n  `;\n__decorate([\n    property({ type: String })\n], ChatHeaderTitleElement.prototype, \"title\", void 0);\n__decorate([\n    property({ type: String })\n], ChatHeaderTitleElement.prototype, \"name\", void 0);\nChatHeaderTitleElement = __decorate([\n    carbonElement(`${WEB_COMPONENT_PREFIX}-chat-header-title`)\n], ChatHeaderTitleElement);\n\nexport { ChatHeaderTitleElement };\n","import { html } from 'lit';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * ChatHeaderTitleElement view logic.\n */\nfunction chatHeaderTitleTemplate(customElementClass) {\n    const { title, name } = customElementClass;\n    return html `<div class=\"WACChatHeaderTitle\">\n    <span className=\"WACChatHeaderTitle__Title\" ?hidden=\"${!title}\"\n      >${title}</span\n    >\n    <span class=\"WACChatHeaderTitle__Name\">${name}</span>\n  </div>`;\n}\n\nexport { chatHeaderTitleTemplate };\n","var css_248z = \"cds-chat-header-title{\\n  text-align:center;\\n}\\n\\n.WACChatHeaderTitle{\\n  overflow:hidden;\\n  font-size:var(--cds-chat-BASE-font-size-med);\\n  font-weight:400;\\n  line-height:var(--cds-chat-BASE-line-height-med);\\n  overflow-wrap:break-word;\\n  text-overflow:ellipsis;\\n  white-space:nowrap;\\n  word-wrap:break-word;\\n}\\n\\n.WACChatHeaderTitle .WACChatHeaderTitle__Title:only-child{\\n  padding-inline-end:0.25rem;\\n}\\n\\n.WACChatHeaderTitle__Name{\\n  font-weight:var(--cds-chat-BASE-weight-semibold);\\n}\";\n\nexport { css_248z as default };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport { ChatHeaderTitleElement } from '../../../web-components/components/chatHeader/chatHeaderTitle/cds-aichat-chat-header-title.js';\nimport { WEB_COMPONENT_PREFIX } from '../../../web-components/settings.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst ChatHeaderTitle = createComponent({\n    tagName: `${WEB_COMPONENT_PREFIX}-chat-header-title`,\n    elementClass: ChatHeaderTitleElement,\n    react: React,\n});\n\nexport { ChatHeaderTitle };\n","import '@carbon/web-components/es-custom/components/ai-label/ai-label-action-button.js';\nimport CDSAILabel from '@carbon/web-components/es-custom/components/ai-label/ai-label.js';\nimport { createComponent } from '@lit/react';\nimport React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst AISlug = createComponent({\n    tagName: \"cds-custom-ai-label\",\n    elementClass: CDSAILabel,\n    react: React,\n});\n\nexport { AISlug };\n","import '@carbon/web-components/es-custom/components/slug/index.js';\nimport Close from '@carbon/icons-react/es/Close.js';\nimport CloseLarge from '@carbon/icons-react/es/CloseLarge.js';\nimport DownToBottom from '@carbon/icons-react/es/DownToBottom.js';\nimport Menu from '@carbon/icons-react/es/Menu.js';\nimport Restart from '@carbon/icons-react/es/Restart.js';\nimport SidePanelClose from '@carbon/icons-react/es/SidePanelClose.js';\nimport SubtractLarge from '@carbon/icons-react/es/SubtractLarge.js';\nimport { MenuItem, Button, MenuItemDivider } from '@carbon/react';\nimport { AI_LABEL_SIZE } from '@carbon/web-components/es-custom/components/ai-label/defs.js';\nimport { POPOVER_ALIGNMENT } from '@carbon/web-components/es-custom/components/popover/defs.js';\nimport cx from 'classnames';\nimport React, { forwardRef, useRef, useState, useContext, useCallback, useImperativeHandle, useEffect, Fragment } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ChatHeaderObjectType } from '../../../../types/config/ChatHeaderConfig.js';\nimport { ChatHeaderAvatar } from '../../../react/components/chatHeader/ChatHeaderAvatar.js';\nimport { ChatHeaderLink } from '../../../react/components/chatHeader/ChatHeaderLink.js';\nimport { ChatHeaderMenuButton } from '../../../react/components/chatHeader/ChatHeaderMenuButton.js';\nimport { ChatHeaderMenuItem } from '../../../react/components/chatHeader/ChatHeaderMenuItem.js';\nimport { ChatHeaderMenuItemRadioGroup } from '../../../react/components/chatHeader/ChatHeaderMenuItemRadioGroup.js';\nimport { ChatHeaderOverflowMenu } from '../../../react/components/chatHeader/ChatHeaderOverflowMenu.js';\nimport { ChatHeaderTitle } from '../../../react/components/chatHeader/ChatHeaderTitle.js';\nimport { HideComponentContext } from '../../contexts/HideComponentContext.js';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport actions from '../../store/actions.js';\nimport { ChatWidthBreakpoint } from '../../../../types/state/AppState.js';\nimport '../../utils/constants.js';\nimport { doFocusRef } from '../../utils/domUtils.js';\nimport { ConfirmModal } from '../modals/ConfirmModal.js';\nimport WriteableElement from '../WriteableElement.js';\nimport { AISlug } from './AISlug.js';\nimport { ButtonSizeEnum, ButtonKindEnum } from '../../../../types/utilities/carbonTypes.js';\nimport { MinimizeButtonIconType } from '../../../../types/config/PublicConfig.js';\nimport { WriteableElementName } from '../../../../types/instance/ChatInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The minimum width in pixels of the center gap, that separates the left and right header objects, until the number\n// of objects that are allowed to be visible in the header is re-calculated.\nconst HEADER_OBJECTS_GAP_MIN_SIZE = 100;\n/**\n * This displays the main header.\n */\nfunction Header(props, ref) {\n    const { displayName, backContent, showRestartButton, showBackButton, useAITheme, labelBackButton, onClickClose, onClickRestart, onCloseAndRestart, onClickBack, overflowItems, overflowClicked, backButtonType, showCenter, hideCloseButton, hideCloseAndRestartButton, brandColor = \"primary\", enableChatHeaderConfig, headerAvatarConfig, } = props;\n    const backButtonRef = useRef();\n    const restartButtonRef = useRef();\n    const closeAndRestartButtonRef = useRef();\n    const closeButtonRef = useRef();\n    const centerObjectsRef = useRef();\n    const centerGapRef = useRef();\n    const overflowRef = useRef();\n    const serviceManager = useServiceManager();\n    const languagePack = useLanguagePack();\n    const publicConfig = useSelector((state) => state.config.public);\n    const chatHeaderConfig = useSelector((state) => state.chatHeaderState.config);\n    const chatWidthBreakpoint = useSelector((state) => state.chatWidthBreakpoint);\n    const maxVisibleHeaderObjects = useSelector((state) => state.chatHeaderState.maxVisibleHeaderObjects);\n    const [overflowIsOpen, setOverflowIsOpen] = useState(false);\n    const [confirmModelOpen, setConfirmModelOpen] = useState(false);\n    // The object map state that keeps track of the values selected in a radio group menus in the chat header.\n    const [selectedGroupMenuitems, setSelectedGroupMenuItems] = useState({});\n    const [isImageError, setIsImageError] = useState(false);\n    const hasHeaderAvatar = Boolean(headerAvatarConfig) && !isImageError;\n    const isHidden = useContext(HideComponentContext);\n    const prevChatHeaderAvatarURL = usePrevious(headerAvatarConfig?.url);\n    const { headerConfig } = publicConfig;\n    const isWideWidth = chatWidthBreakpoint === ChatWidthBreakpoint.WIDE;\n    // The title and name to display in the header from the chat header config.\n    const chatHeaderTitle = enableChatHeaderConfig\n        ? chatHeaderConfig?.headerTitle?.title\n        : undefined;\n    const chatHeaderName = enableChatHeaderConfig\n        ? chatHeaderConfig?.headerTitle?.name\n        : undefined;\n    // The chat name to display in the chat header, the configured chat header name should take priority.\n    const chatHeaderDisplayName = chatHeaderName || displayName;\n    const closeConfirmModel = useCallback(() => {\n        setConfirmModelOpen(false);\n    }, []);\n    const showCloseAndRestartButton = headerConfig?.showCloseAndRestartButton &&\n        !hideCloseAndRestartButton &&\n        onCloseAndRestart;\n    const useHideCloseButton = headerConfig?.hideMinimizeButton || hideCloseButton;\n    // The icon to use for the close button.\n    let closeIcon;\n    let closeReverseIcon = false;\n    let closeIsReversible = true;\n    const minimizeButtonIconType = headerConfig?.minimizeButtonIconType;\n    switch (minimizeButtonIconType) {\n        case MinimizeButtonIconType.CLOSE:\n            closeIcon = React.createElement(CloseLarge, { className: \"WACIcon__Close\", size: 16 });\n            break;\n        case MinimizeButtonIconType.MINIMIZE:\n            closeIcon = React.createElement(SubtractLarge, { className: \"WACIcon__Subtract\", size: 16 });\n            break;\n        case MinimizeButtonIconType.SIDE_PANEL_LEFT:\n            closeIsReversible = false;\n            closeIcon = React.createElement(SidePanelClose, { className: \"WACIcon__SidePanelClose\" });\n            break;\n        case MinimizeButtonIconType.SIDE_PANEL_RIGHT:\n            closeIsReversible = false;\n            closeReverseIcon = true;\n            closeIcon = React.createElement(SidePanelClose, { className: \"WACIcon__SidePanelClose\" });\n            break;\n        default: {\n            closeIcon = React.createElement(SubtractLarge, { className: \"WACIcon__Subtract\", size: 16 });\n            break;\n        }\n    }\n    if (showCloseAndRestartButton && showRestartButton) {\n        throw new Error(\"You cannot enable both the restart button and the close-and-restart buttons.\");\n    }\n    const onConfirm = useCallback(() => {\n        setConfirmModelOpen(false);\n        onCloseAndRestart();\n    }, [onCloseAndRestart]);\n    // Add a \"requestFocus\" imperative function to the ref so other components can trigger focus here.\n    useImperativeHandle(ref, () => ({\n        requestFocus: () => {\n            if (closeButtonRef.current) {\n                doFocusRef(closeButtonRef, false, true);\n                return true;\n            }\n            if (backButtonRef.current) {\n                doFocusRef(backButtonRef, false, true);\n                return true;\n            }\n            if (restartButtonRef.current) {\n                doFocusRef(restartButtonRef, false, true);\n                return true;\n            }\n            return false;\n        },\n    }));\n    /**\n     * A function that takes the given menu item type and returns it's associated chat header menu item component.\n     */\n    function getComponentInMenu(item, index, list) {\n        switch (item.type) {\n            case ChatHeaderObjectType.LINK:\n                return (React.createElement(ChatHeaderMenuItem\n                // eslint-disable-next-line react/no-array-index-key\n                , { \n                    // eslint-disable-next-line react/no-array-index-key\n                    key: index, label: item.label, url: item.url, isNewTab: item.isNewTab, onClick: () => {\n                        // Move focus back to the overflow menu button.\n                        doFocusRef(overflowRef);\n                    } }));\n            case ChatHeaderObjectType.BUTTON:\n                // eslint-disable-next-line react/no-array-index-key\n                return (React.createElement(ChatHeaderMenuItem, { key: index, label: item.label, onClick: () => {\n                        item.onClick?.();\n                        // Move focus back to the overflow menu button.\n                        doFocusRef(overflowRef);\n                    } }));\n            case ChatHeaderObjectType.RADIO_GROUP: {\n                const nextObject = list[index + 1];\n                return (\n                // eslint-disable-next-line react/no-array-index-key\n                React.createElement(Fragment, { key: index },\n                    index !== 0 && React.createElement(MenuItemDivider, null),\n                    React.createElement(ChatHeaderMenuItemRadioGroup, { label: item.label, items: item.items, defaultSelectedItem: item.defaultSelectedItem, selectedItem: selectedGroupMenuitems[item.label], onChange: (selectedItem) => {\n                            setSelectedGroupMenuItems((prevState) => ({\n                                ...prevState,\n                                [item.label]: selectedItem,\n                            }));\n                            item.onChange?.(selectedItem);\n                        } }),\n                    Boolean(nextObject) &&\n                        nextObject.type !== ChatHeaderObjectType.RADIO_GROUP && (React.createElement(MenuItemDivider, null))));\n            }\n            case ChatHeaderObjectType.MENU:\n                return (React.createElement(ChatHeaderMenuItem\n                // eslint-disable-next-line react/no-array-index-key\n                , { \n                    // eslint-disable-next-line react/no-array-index-key\n                    key: index, label: item.label }, item.items\n                    // Filter out menu objects from submenus to prevent having more than 1 level of submenus.\n                    .filter((menuItem) => menuItem.type !== ChatHeaderObjectType.MENU)\n                    .map(getComponentInMenu)));\n            default:\n                return null;\n        }\n    }\n    /**\n     * A function that takes the given chat header object and returns the associated component.\n     */\n    function getComponentInChatHeader(headerObject, index) {\n        switch (headerObject.type) {\n            case ChatHeaderObjectType.LINK:\n                // eslint-disable-next-line react/no-array-index-key\n                return (React.createElement(ChatHeaderLink, { key: index, label: headerObject.label, url: headerObject.url, isNewTab: headerObject.isNewTab }));\n            case ChatHeaderObjectType.MENU:\n                return (\n                // eslint-disable-next-line react/no-array-index-key\n                React.createElement(ChatHeaderMenuButton, { key: index, label: headerObject.label, menuAlignment: \"bottom-start\" }, headerObject.items.map(getComponentInMenu)));\n            case ChatHeaderObjectType.BUTTON:\n                return (React.createElement(Button\n                // eslint-disable-next-line react/no-array-index-key\n                , { \n                    // eslint-disable-next-line react/no-array-index-key\n                    key: index, kind: ButtonKindEnum.GHOST, size: ButtonSizeEnum.MEDIUM, onClick: headerObject.onClick }, headerObject.label));\n            default:\n                return null;\n        }\n    }\n    // Determine if there are chat header object that need to be displayed in the overflow menu.\n    let leftObjectsLength = 0;\n    let rightObjectsLength = 0;\n    if (enableChatHeaderConfig) {\n        leftObjectsLength = chatHeaderConfig?.left?.length ?? 0;\n        rightObjectsLength = chatHeaderConfig?.right?.length ?? 0;\n    }\n    const isLeftObjectsInOverflow = leftObjectsLength > maxVisibleHeaderObjects;\n    const isRightObjectsInOverflow = rightObjectsLength > maxVisibleHeaderObjects;\n    const hasChatHeaderObjects = leftObjectsLength || rightObjectsLength;\n    const renderChatHeaderObjectsInOverflow = hasChatHeaderObjects &&\n        (!isWideWidth || isLeftObjectsInOverflow || isRightObjectsInOverflow);\n    const hasOverflow = Boolean(overflowItems?.length) || renderChatHeaderObjectsInOverflow;\n    const isRTL = document.dir === \"rtl\";\n    // The list of component to render in the left chat header container.\n    let leftChatHeaderComponents = null;\n    // The list of component to render in the right chat header container.\n    let rightChatHeaderComponents = null;\n    // The list of components that don't fit in the left chat header container to render in the overflow menu.\n    let leftChatHeaderMenuComponents = null;\n    // The list of components that don't fit in the right chat header container to render in the overflow menu.\n    let rightChatHeaderMenuComponents = null;\n    if (enableChatHeaderConfig) {\n        leftChatHeaderComponents = chatHeaderConfig?.left\n            ?.slice(0, isLeftObjectsInOverflow ? maxVisibleHeaderObjects : undefined)\n            .map(getComponentInChatHeader);\n        rightChatHeaderComponents = chatHeaderConfig?.right\n            ?.slice(0, isRightObjectsInOverflow ? maxVisibleHeaderObjects : undefined)\n            .map(getComponentInChatHeader);\n        leftChatHeaderMenuComponents =\n            isLeftObjectsInOverflow &&\n                chatHeaderConfig?.left\n                    ?.slice(maxVisibleHeaderObjects)\n                    .map(getComponentInMenu);\n        rightChatHeaderMenuComponents =\n            isRightObjectsInOverflow &&\n                chatHeaderConfig?.right\n                    ?.slice(maxVisibleHeaderObjects)\n                    .map(getComponentInMenu);\n    }\n    let leftContent;\n    if (hasOverflow) {\n        // If there are overflow items, we need to show the overflow menu. This overrides any back button that may be\n        // present.\n        leftContent = (React.createElement(ChatHeaderOverflowMenu, { className: \"WACHeader__OverflowMenu\", renderIcon: overflowIsOpen ? Close : Menu, iconDescription: languagePack.header_overflowMenu_options, ariaLabel: languagePack.components_overflow_ariaLabel, containerRef: overflowRef, tooltipPosition: isRTL ? \"left\" : \"right\", menuAlignment: \"bottom-start\", onOpen: () => {\n                // This requires a setTimeout because of an apparent bug in the Carbon components. If the icon changes\n                // when you click on it, the component swaps in a new icon meaning the old icon is no longer part of the\n                // DOM and the component detects this as a \"clicked outside\" which triggers the component to close. This will\n                // delay the swapping of the icon until after component is open.\n                setTimeout(() => {\n                    setOverflowIsOpen(true);\n                });\n            }, onClose: () => {\n                setOverflowIsOpen(false);\n            } },\n            overflowItems?.map((item, index) => (React.createElement(MenuItem, { key: item, label: item, onClick: () => {\n                    // Move focus back to the overflow menu button.\n                    doFocusRef(overflowRef);\n                    overflowClicked(index);\n                } }))),\n            leftChatHeaderMenuComponents,\n            rightChatHeaderMenuComponents));\n    }\n    else if (showBackButton) {\n        // With no overflow items, just show the back button.\n        leftContent = (React.createElement(HeaderButton, { className: \"WACHeader__BackButton\", label: labelBackButton, onClick: onClickBack, buttonRef: backButtonRef, buttonKind: backButtonType, tooltipPosition: isRTL ? \"left\" : \"right\" }, backContent || React.createElement(DownToBottom, null)));\n    }\n    // This effect sets a resize observer for the center objects container to set the max number of visible objects in\n    // This helps determine how many elements can be in the chat header and in the overflow menu.\n    useEffect(() => {\n        if (!isWideWidth) {\n            serviceManager.store.dispatch(actions.setMaxVisibleHeaderObjects(0));\n            return undefined;\n        }\n        if (!enableChatHeaderConfig) {\n            return undefined;\n        }\n        const centerResizeObserver = new ResizeObserver(() => {\n            const centerGapElement = centerGapRef.current;\n            if (centerGapElement) {\n                if (centerGapElement.offsetWidth > HEADER_OBJECTS_GAP_MIN_SIZE ||\n                    centerGapElement.offsetWidth === 0) {\n                    // Determine the new max number of visible header objects by:\n                    // * Subtracting minimum gap size from current center content width\n                    //   - We subtract the gap size from the center content width so it's accounted for when determining max\n                    //     number of visible header objects. There will always be a gap between the left and right objects.\n                    // * Divide the minimum gap size, multiply by 2\n                    //   - The number of header objects on both the left and right side should be even so we mutiply the\n                    //     the assumed size of a chat header object (which can be arbitrary) by 2.\n                    //\n                    // Example: (500 - 100) / (200) = 2 objects on both the left and right side with 100px of space for the\n                    //          center gap.\n                    let newTotal = Math.floor((centerObjectsRef.current.offsetWidth -\n                        HEADER_OBJECTS_GAP_MIN_SIZE) /\n                        (HEADER_OBJECTS_GAP_MIN_SIZE * 2));\n                    if (newTotal < 0) {\n                        newTotal = 0;\n                    }\n                    setTimeout(() => {\n                        serviceManager.store.dispatch(actions.setMaxVisibleHeaderObjects(newTotal));\n                    });\n                }\n            }\n        });\n        centerResizeObserver.observe(centerObjectsRef.current);\n        return () => {\n            centerResizeObserver.disconnect();\n        };\n    }, [isWideWidth, enableChatHeaderConfig, serviceManager]);\n    useEffect(() => {\n        if (isImageError && prevChatHeaderAvatarURL !== headerAvatarConfig?.url) {\n            setIsImageError(false);\n        }\n    }, [prevChatHeaderAvatarURL, headerAvatarConfig?.url, isImageError]);\n    return (React.createElement(\"div\", { className: cx(\"WACHeader\", `WAC--${brandColor}Color`, {\n            \"WACHeader--withAvatar\": hasHeaderAvatar,\n        }) },\n        React.createElement(\"div\", { className: cx(\"WACHeader--content\", `WAC--${brandColor}Color`), \"data-floating-menu-container\": true },\n            leftContent && (React.createElement(\"div\", { className: \"WACHeader__Buttons WACHeader__LeftButtons\" }, leftContent)),\n            showCenter && (React.createElement(\"div\", { className: \"WACHeader__CenterContainer\" },\n                hasHeaderAvatar && (React.createElement(ChatHeaderAvatar, { url: headerAvatarConfig.url, corners: headerAvatarConfig.corners, alt: languagePack.header_ariaBotAvatar, onError: () => setIsImageError(true) })),\n                (chatHeaderTitle || chatHeaderDisplayName) && (React.createElement(\"div\", { className: \"WACHeader__TitleContainer\" },\n                    React.createElement(ChatHeaderTitle, { title: chatHeaderTitle, name: chatHeaderDisplayName }))),\n                isWideWidth && Boolean(leftObjectsLength) && (React.createElement(\"div\", { className: \"WACHeader__Separator\" })),\n                React.createElement(\"div\", { ref: centerObjectsRef, className: \"WACHeader__HeaderObjects\" },\n                    isWideWidth && Boolean(leftObjectsLength) && (React.createElement(\"div\", { className: \"WACHeader__LeftItems\" }, leftChatHeaderComponents)),\n                    React.createElement(\"div\", { ref: centerGapRef, className: \"WACHeader__CenterGap\" }),\n                    isWideWidth && Boolean(rightObjectsLength) && (React.createElement(\"div\", { className: \"WACHeader__RightItems\" }, rightChatHeaderComponents))))),\n            React.createElement(\"div\", { className: \"WACHeader__Buttons WACHeader__RightButtons\" },\n                useAITheme && (React.createElement(AISlug, { className: \"WACHeader__Slug\", size: AI_LABEL_SIZE.EXTRA_SMALL, alignment: isRTL\n                        ? POPOVER_ALIGNMENT.BOTTOM_LEFT\n                        : POPOVER_ALIGNMENT.BOTTOM_RIGHT },\n                    React.createElement(\"div\", { slot: \"body-text\" },\n                        React.createElement(\"h4\", { className: \"WACHeader__Slug-title\" }, languagePack.ai_slug_title),\n                        React.createElement(\"div\", { className: \"WACHeader__Slug-description\" },\n                            React.createElement(\"div\", null, languagePack.ai_slug_description),\n                            !isHidden && (React.createElement(WriteableElement, { slotName: WriteableElementName.AI_TOOLTIP_AFTER_DESCRIPTION_ELEMENT, id: `aiTooltipAfterDescription${serviceManager.namespace.suffix}` })))))),\n                showRestartButton && (React.createElement(HeaderButton, { className: \"WACHeader__RestartButton\", label: languagePack.buttons_restart, onClick: onClickRestart, buttonRef: restartButtonRef, tooltipPosition: isRTL ? \"right\" : \"left\" },\n                    React.createElement(Restart, null))),\n                !useHideCloseButton && (React.createElement(HeaderButton, { className: cx(\"WACHeader__CloseButton\", {\n                        WACReverseIcon: closeReverseIcon,\n                    }), isReversible: closeIsReversible, label: languagePack.launcher_isOpen, onClick: async () => {\n                        onClickClose();\n                    }, buttonRef: closeButtonRef, tooltipPosition: isRTL ? \"right\" : \"left\" }, closeIcon)),\n                showCloseAndRestartButton && (React.createElement(HeaderButton, { className: \"WACHeader__CloseAndRestartButton\", label: languagePack.header_ariaCloseRestart, onClick: () => setConfirmModelOpen(true), buttonRef: closeAndRestartButtonRef, tooltipPosition: isRTL ? \"right\" : \"left\" },\n                    React.createElement(CloseLarge, { className: \"WACIcon__Close\" })))),\n            confirmModelOpen && (React.createElement(ConfirmModal, { title: languagePack.closeAndRestartModal_title, message: languagePack.closeAndRestartModal_message, onConfirm: onConfirm, onCancel: closeConfirmModel, cancelButtonLabel: languagePack.closeAndRestartModal_cancel, confirmButtonLabel: languagePack.closeAndRestartModal_confirm, modalAnnounceMessage: languagePack.closeAndRestartModal_message, serviceManager: serviceManager })))));\n}\n/**\n * This component is a button that appears in the header.\n */\nfunction HeaderButton({ onClick, buttonRef, label, className, children, buttonKind, isReversible = true, tooltipPosition, }) {\n    return (React.createElement(Button, { ref: buttonRef, className: cx(className, { WACDirectionHasReversibleSVG: isReversible }), onClick: onClick, hasIconOnly: true, iconDescription: label, size: ButtonSizeEnum.MEDIUM, kind: buttonKind || ButtonKindEnum.GHOST, tooltipPosition: tooltipPosition }, children));\n}\nconst HeaderExport = React.memo(forwardRef(Header));\n\nexport { HeaderExport as Header };\n","import React from 'react';\nimport { isElement, isInputNode, isTextAreaNode, isImageNode, isTextNode } from '../../utils/domUtils.js';\nimport VisuallyHidden from '../util/VisuallyHidden.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The set of types for an INPUT node that we want to announce the value of.\nconst ANNOUNCE_INPUT_TYPES = new Set([\n    \"button\",\n    \"date\",\n    \"datetime-local\",\n    \"email\",\n    \"file\",\n    \"month\",\n    \"number\",\n    \"range\",\n    \"reset\",\n    \"search\",\n    \"submit\",\n    \"tel\",\n    \"text\",\n    \"time\",\n    \"url\",\n    \"week\",\n]);\nconst ANNOUNCE_NODE_EXCLUDE_ATTRIBUTE = \"data-wac-exclude-node-read\";\n/**\n * This component holds several aria live-regions that are used to make screen reader announcements by the application.\n * This component can announce both plain text as well as the content of complex HTML elements. HTML elements will be\n * converted to a raw text format before being announced.\n *\n * The component makes use of two live-region elements that are permanently attached to the DOM. It will alternate\n * between the usage of these two elements to announce changes. This accomplishes a few things. First, in my initial\n * work, I kept finding cases where the browser would re-read the entire live region when elements are added to it even\n * with aria-relevant=\"additions\" and aria-atomic=\"false\". Clearing the previous content was the only way to stop that\n * happening. However you can't simply add the content and then immediately clear it because sometimes the SR won't read\n * the content without some sort of delay before it's cleared (even waiting a tick isn't enough). In addition, a second\n * element will make sure the SR will read a new message even if it has the same content as a previous message.\n */\nclass AriaAnnouncerComponent extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        /**\n         * The first element into which the messages will be added.\n         */\n        this.ref1 = React.createRef();\n        /**\n         * The second element into which the messages will be added.\n         */\n        this.ref2 = React.createRef();\n        /**\n         * Indicates which of the two elements should next to be used to announce a new message.\n         */\n        this.useRef1 = true;\n        /**\n         * Performs the actual announcements. A clone of the element is created that is the basis of what is announced. On\n         * the clone, all the listeners will be removed and all the elements will be made non-tabbable so the user can't\n         * actually interact with them.\n         */\n        this.doAnnouncements = () => {\n            const strings = [];\n            // Turn all of the pending elements into strings.\n            this.pendingValues.forEach((elementToAnnounce) => {\n                if (typeof elementToAnnounce === \"string\") {\n                    strings.push(elementToAnnounce);\n                }\n                else {\n                    nodeToText(elementToAnnounce, strings);\n                }\n            });\n            const useElement = this.useRef1 ? this.ref1.current : this.ref2.current;\n            if (useElement) {\n                useElement.innerText = strings.join(\" \");\n                // Clear the previous element and then swap the active one.\n                const clearElement = this.useRef1 ? this.ref2.current : this.ref1.current;\n                clearElement.innerHTML = \"\";\n            }\n            this.useRef1 = !this.useRef1;\n            this.pendingValues = null;\n        };\n    }\n    /**\n     * This is the public function that will announce the given value or element.\n     *\n     * This function makes use of a setTimeout which will allow it to announce multiple values that all occurred in the\n     * same tick of the VM. All of those messages will be appended to the same live region to be read and the previous set\n     * of values that were read will be cleared from the opposite region. If an element is provided it is not converted to\n     * text until the setTimeout runs which also allows a chance for custom elements to be populated by the event bus but\n     * only if the custom elements are created synchronously.\n     */\n    announceValue(value) {\n        if (!value) {\n            return;\n        }\n        if (!this.pendingValues) {\n            this.pendingValues = [];\n            // This delay of 250ms is here to work around a problem with NVDA. It seems that sometimes if an element gets\n            // focus, that change can interrupt the announcement in a live region even when the live region is changed\n            // after the focus change. Smaller numbers seem to be less reliable in working around this.\n            setTimeout(this.doAnnouncements, 250);\n        }\n        if (typeof value === \"string\" || hasNodeType(value)) {\n            this.pendingValues.push(value);\n        }\n        else if (value.messageID) {\n            const formattedMessage = this.props.intl.formatMessage({ id: value.messageID }, value.messageValues);\n            this.pendingValues.push(formattedMessage);\n        }\n        else {\n            this.pendingValues.push(value.messageText);\n        }\n    }\n    render() {\n        // On FF+JAWS, it reads parts of the messages twice if you don't have aria-atomic=\"true\". However, if you add this\n        // attribute then Chrome will stop announcing buttons :-(.\n        return (React.createElement(VisuallyHidden, { className: \"WACAriaAnnouncer\" },\n            React.createElement(\"div\", { ref: this.ref1, \"aria-live\": \"polite\" }),\n            React.createElement(\"div\", { ref: this.ref2, \"aria-live\": \"polite\" })));\n    }\n}\n/**\n * Converts the given node into text by extracting all of the text content from it and any children inside of it.\n * Any resulting pieces of text will be added to the given array.\n */\nfunction nodeToText(node, strings) {\n    if (isElement(node)) {\n        if (window.getComputedStyle(node).display !== \"none\" &&\n            node.getAttribute(\"aria-hidden\") !== \"true\" &&\n            !node.hasAttribute(ANNOUNCE_NODE_EXCLUDE_ATTRIBUTE)) {\n            trimAndPush(node.getAttribute(\"aria-label\"), strings);\n            if (isInputNode(node) &&\n                ANNOUNCE_INPUT_TYPES.has(node.type.toLowerCase())) {\n                // If the node has a value, announce that. Otherwise announce any placeholder text.\n                if (node.value === \"\") {\n                    trimAndPush(node.placeholder, strings);\n                }\n                else {\n                    trimAndPush(node.value, strings);\n                }\n            }\n            else if (isTextAreaNode(node)) {\n                // For text areas, the value is built from children so we don't need to add the value to the strings here.\n                // The children will get added below.\n                if (node.value === \"\") {\n                    trimAndPush(node.placeholder, strings);\n                }\n            }\n            else if (isImageNode(node)) {\n                trimAndPush(node.alt, strings);\n            }\n            // Recursively go through all of the children. Most nodes will have children either in the shadowRoot.childNodes\n            // or in childNodes. However web components that take advantage of slots will have both. With such a node\n            // the shadowRoot comes first within the DOM and can contain children with aria-label's as well as <slots /> (which don't\n            // have aria-label's). After the shadowRoot the childNodes are the next sibling. Some of those childNodes will\n            // match to the corresponding slots in the shadowRoot and should have aria-label's. Because the shadowRoot is\n            // often just a wrapper around the slots it makes sense to recursively go through those nodes first before\n            // processing the slots farther down.\n            if (node.shadowRoot) {\n                node.shadowRoot.childNodes?.forEach((childNode) => {\n                    nodeToText(childNode, strings);\n                });\n            }\n            if (node.childNodes) {\n                node.childNodes.forEach((childNode) => {\n                    nodeToText(childNode, strings);\n                });\n            }\n        }\n    }\n    else if (isTextNode(node)) {\n        trimAndPush(node.data, strings);\n    }\n}\n/**\n * Trims the given value and pushes it on to the given array assuming it has any content.\n */\nfunction trimAndPush(value, strings) {\n    if (value) {\n        value = value.trim();\n        if (value) {\n            strings.push(value.replaceAll(\"\\n\", \" \"));\n        }\n    }\n}\n/**\n * Determines if the given value is some node type.\n */\nfunction hasNodeType(value) {\n    return value.nodeType !== undefined;\n}\n\nexport { AriaAnnouncerComponent, nodeToText };\n","export { FileStatusValue } from '../../../types/instance/apiTypes.js';\nexport { WriteableElementName } from '../../../types/instance/ChatInstance.js';\nexport { CornersType } from '../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// Prefix used to distinguish console logs omitted from our code\nconst WA_CONSOLE_PREFIX = \"[Chat]\";\n// The right-to-left mark character string which mixes the direction of a string.\n// For more info on right-to-left mark: https://www.w3.org/TR/WCAG20-TECHS/H34.html\nconst RIGHT_TO_LEFT_MARK = String.fromCharCode(0x200f);\nconst ENGLISH_US_DATE_FORMAT = \"mm/dd/yyyy\";\n// The timeout, in milliseconds, to wait for a response type to load content.\nconst RESPONSE_TYPE_TIMEOUT_MS = 20000;\n// These are custom panel ids.\nconst DEFAULT_CUSTOM_PANEL_ID = \"wac-default-panel\";\n/**\n * This function serves as a placeholder in places where a functional value is required, but not expected to be\n * fired. In the event that it is, it will throw an error, letting you know it shouldn't be.\n */\nfunction THROW_ERROR() {\n    throw Error(\"Not implemented.\");\n}\n/**\n * The brand color types configurable for Carbon AI chat.\n */\nvar BrandColorKind;\n(function (BrandColorKind) {\n    BrandColorKind[\"PRIMARY\"] = \"primary\";\n    BrandColorKind[\"ACCENT\"] = \"accent\";\n})(BrandColorKind || (BrandColorKind = {}));\n// When we auto-scroll to a message, we want to scroll a bit more than necessary because messages have a lot of\n// padding on the top that we want to cut off when scrolling. This is the extra amount we scroll by. There's 28px of\n// padding above the message and we want to cut that down to just 8 so we scroll an extra 20px (28 - 8).\nconst AUTO_SCROLL_EXTRA = 28 - 8;\nconst LIGHT_THEMES = [\"white\", \"g10\"];\nlet isJest = false;\ntry {\n    // \"process\" is undefined when not in a jest environment, but I don't know how to check its value without the code\n    // throwing a \"not defined\" error.\n    if (process?.env.JEST_WORKER_ID) {\n        isJest = true;\n    }\n}\ncatch (error) {\n    // Ignore\n}\nconst IS_JEST = isJest;\n// How much to throttle auto scrolling. When we are in test mode, we set this to zero.\nconst AUTO_SCROLL_THROTTLE_TIMEOUT = IS_JEST ? 0 : 100;\n\nexport { AUTO_SCROLL_EXTRA, AUTO_SCROLL_THROTTLE_TIMEOUT, BrandColorKind, DEFAULT_CUSTOM_PANEL_ID, ENGLISH_US_DATE_FORMAT, IS_JEST, LIGHT_THEMES, RESPONSE_TYPE_TIMEOUT_MS, RIGHT_TO_LEFT_MARK, THROW_ERROR, WA_CONSOLE_PREFIX };\n","import React, { forwardRef, useRef, useImperativeHandle, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Header as HeaderExport } from '../header/Header.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction HomeScreenHeader(props, ref) {\n    const { brandColor, onClose, onRestart, onCloseAndRestart } = props;\n    const showRestartButton = useSelector((state) => state.config.public.showRestartButton ||\n        state.config.public.headerConfig?.showRestartButton);\n    const showBackButton = useSelector((state) => state.persistedToBrowserStorage.chatState.homeScreenState.showBackToBot);\n    const displayName = useSelector((state) => state.headerDisplayName);\n    const customMenuOptions = useSelector((state) => state.customMenuOptions);\n    const useAITheme = useSelector((state) => state.theme.useAITheme);\n    const headerRef = useRef();\n    // Reuse the imperative handles from the header.\n    useImperativeHandle(ref, () => headerRef.current);\n    // If there's no back button, it means this is the start of the conversation in which case there's no point in\n    // showing the close-and-restart button.\n    const hideCloseAndRestartButton = !showBackButton;\n    const overflowClicked = useCallback((index) => {\n        const { handler } = customMenuOptions[index];\n        handler();\n    }, [customMenuOptions]);\n    const overflowItems = customMenuOptions?.map((option) => option.text);\n    return (React.createElement(\"div\", { className: \"WACHomeScreenHeader\" },\n        React.createElement(HeaderExport, { ref: headerRef, displayName: displayName, showCenter: true, showRestartButton: showRestartButton, hideCloseAndRestartButton: hideCloseAndRestartButton, onClickRestart: onRestart, onClickClose: onClose, onCloseAndRestart: onCloseAndRestart, overflowClicked: overflowClicked, overflowItems: overflowItems, useAITheme: useAITheme, brandColor: brandColor })));\n}\nconst HomeScreenHeaderExport = React.memo(forwardRef(HomeScreenHeader));\n\nexport { HomeScreenHeaderExport as HomeScreenHeader };\n","import dayjs from 'dayjs';\nimport enLocaleData from 'dayjs/locale/en.js';\nimport IntlMessageFormat from 'intl-messageformat';\nimport React from 'react';\nimport { consoleError } from './miscUtils.js';\nimport '../../../types/instance/apiTypes.js';\nimport enLanguagePack from '../../languages/en.json.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Translation files are broken up into two sets: private and public. Strings in the public\n * file are published to the github docs and are able to be adjusted by Deb. Strings in the\n * private file are not meant to be changed by Deb or are strings for features in beta. When\n * the two sets are combined, public strings override private ones.\n */\nconst locales = {\n    ar: () => import('dayjs/locale/ar.js'),\n    \"ar-dz\": () => import('dayjs/locale/ar-dz.js'),\n    \"ar-kw\": () => import('dayjs/locale/ar-kw.js'),\n    \"ar-ly\": () => import('dayjs/locale/ar-ly.js'),\n    \"ar-ma\": () => import('dayjs/locale/ar-ma.js'),\n    \"ar-sa\": () => import('dayjs/locale/ar-sa.js'),\n    \"ar-tn\": () => import('dayjs/locale/ar-tn.js'),\n    cs: () => import('dayjs/locale/cs.js'),\n    de: () => import('dayjs/locale/de.js'),\n    \"de-at\": () => import('dayjs/locale/de-at.js'),\n    \"de-ch\": () => import('dayjs/locale/de-ch.js'),\n    en: () => import('dayjs/locale/en.js'),\n    \"en-au\": () => import('dayjs/locale/en-au.js'),\n    \"en-ca\": () => import('dayjs/locale/en-ca.js'),\n    \"en-gb\": () => import('dayjs/locale/en-gb.js'),\n    \"en-ie\": () => import('dayjs/locale/en-ie.js'),\n    \"en-il\": () => import('dayjs/locale/en-il.js'),\n    \"en-nz\": () => import('dayjs/locale/en-nz.js'),\n    es: () => import('dayjs/locale/es.js'),\n    \"es-do\": () => import('dayjs/locale/es-do.js'),\n    \"es-us\": () => import('dayjs/locale/es-us.js'),\n    nl: () => import('dayjs/locale/nl.js'),\n    fr: () => import('dayjs/locale/fr.js'),\n    \"fr-ca\": () => import('dayjs/locale/fr-ca.js'),\n    \"fr-ch\": () => import('dayjs/locale/fr-ch.js'),\n    it: () => import('dayjs/locale/it.js'),\n    \"it-ch\": () => import('dayjs/locale/it-ch.js'),\n    ja: () => import('dayjs/locale/ja.js'),\n    ko: () => import('dayjs/locale/ko.js'),\n    pt: () => import('dayjs/locale/pt.js'),\n    \"pt-br\": () => import('dayjs/locale/pt-br.js'),\n    zh: () => import('dayjs/locale/zh-cn.js'),\n    \"zh-cn\": () => import('dayjs/locale/zh-cn.js'),\n    \"zh-tw\": () => import('dayjs/locale/zh-tw.js'),\n    // The zh-mo and zh-hk locales fallback to zh-tw.\n    \"zh-mo\": () => import('dayjs/locale/zh-tw.js'),\n    \"zh-hk\": () => import('dayjs/locale/zh-tw.js'),\n};\n/**\n * Determines if the given object contains a key that supported the given locale. This will determine if there is an\n * exact match from the given object and if so, that key will be returned. If not, the language will be extracted\n * from the locale and that will be checked to see if it supported by the given object. If the language is\n * supported, that will be returned. If nothing is found to support the locale, this will return null.\n *\n * @param locale The locale (which may or may not include a region) to determine if we have a valid match or null if\n * there is no match.\n * @param object The object containing the values to check for support.\n */\nfunction isSupportedLocale(locale, object) {\n    if (!locale) {\n        return null;\n    }\n    // Normalize the locale to lower case and change underscores to dashes.\n    locale = locale.toLowerCase().replace(/_/g, \"-\");\n    if (object[locale]) {\n        // If there's an exact match for the requested locale, then we'll use that.\n        return locale;\n    }\n    // If not, look to see if there's a match for just the language without the region.\n    const language = locale.substring(0, 2);\n    if (object[language]) {\n        return language;\n    }\n    // No match was found.\n    return null;\n}\n/**\n * Determines if the given object contains a key that supported the given locale. This will determine if there is an\n * exact match from the given object and if so, that key will be returned. If not, the language will be extracted\n * from the locale and that will be checked to see if it supported by the given object. If the language is\n * supported, that will be returned. If nothing is found to support the locale, this will return null. If no locale\n * was requested, then the browser's languages/locales will be used instead.\n *\n * @param requestedLocale The locale (which may or may not include a region) that was provided in the public config.\n * @param object The object containing the values to check for support.\n * @param objectType A user friendly string describing the type of data in the given object. Used for outputting\n * error messages.\n */\nfunction findSupportedKey(requestedLocale, object, objectType) {\n    // Check to see if the requested locale is supported.\n    const requestedSupported = isSupportedLocale(requestedLocale, object);\n    if (requestedSupported) {\n        return requestedSupported;\n    }\n    if (requestedLocale) {\n        const keyList = JSON.stringify(Object.keys(object));\n        consoleError(`The requested locale \"${requestedLocale}\" does not contain a supported ${objectType}. We are defaulting to \"en\". The supported values are ${keyList}.`);\n    }\n    // Return English as the default.\n    return \"en\";\n}\n/**\n * Loads the appropriate {@link LanguagePack} from the corresponding module for the requested locale.\n */\nasync function loadLocale(requestedLocale) {\n    try {\n        const localeKey = findSupportedKey(requestedLocale, locales, \"locale\");\n        const localeModule = await locales[localeKey]();\n        if (localeModule) {\n            return localeModule.default;\n        }\n        consoleError(`The locale data for \"${localeKey}\" did not load. The application will default to \"en\".`);\n    }\n    catch (error) {\n        consoleError(`An error occurred loading the locale data for \"${requestedLocale}\". The application will default to \"en\".`, error);\n    }\n    return enLocaleData;\n}\n/**\n * Loads the language pack for the given locale if a language pack was not already provided. This may incur an\n * asynchronous load of the language pack files.\n *\n * @param providedLanguagePack A language pack that was provided by the configuration from the host page. If this\n * value is defined, it will always be used instead instead of loading a separate pack.\n * @returns The appropriate language pack for the given locale. Any values that are missing will be set with\n * their English values when the instance's language pack is updated.\n */\nasync function loadLanguagePack(providedLanguagePack) {\n    if (providedLanguagePack) {\n        // Use the language pack that was provided.\n        return fillWithEnglish(providedLanguagePack);\n    }\n    return enLanguagePack;\n}\n/**\n * Returns the given language pack filled with english messages for keys that are missing values.\n */\nfunction fillWithEnglish(languagePack) {\n    return {\n        ...enLanguagePack,\n        ...languagePack,\n    };\n}\n/**\n * Handles a \"b\" tag.\n */\nfunction handleBTag(chunks) {\n    return React.createElement(\"b\", null, chunks);\n}\n/**\n * Handles a \"br\" tag.\n */\nfunction handleBRTag() {\n    return React.createElement(\"br\", null);\n}\n/**\n * Adds the functions for processing HTML to the given object for use with FormattedMessage.\n */\nfunction addHTMLSupport(values) {\n    values.b = handleBTag;\n    values.br = handleBRTag;\n    return values;\n}\n/**\n * Loads a dayjs locale if it hasn't been loaded already, but doesn't replace the current globally set locale.\n *\n * @param locale The dayjs locale to load.\n * @returns returns the locale it succeeded to load.\n */\nasync function loadDayjsLocale(locale) {\n    if (!dayjs.Ls[locale]) {\n        const previousLocale = dayjs.locale();\n        const localePack = await loadLocale(locale);\n        // We need to temporarily set the new locale globally so that it's available and then return to the previously\n        // set locale.\n        dayjs.locale(localePack);\n        dayjs.locale(previousLocale);\n        // Determine if the locale we attempted to set was successful.\n        const isLoaded = Boolean(dayjs.Ls[locale]);\n        // If the locale we attempted to load was not successful, and it's 2 characters long, it's not a locale\n        // recognized by dayjs, and we should throw an error.\n        if (!isLoaded && locale.length === 2) {\n            throw Error(\"Locale is not recognized.\");\n        }\n        else if (!isLoaded) {\n            // If the locale we were provided is more than two characters, we were possibly given a region that's not\n            // supported, so let's attempt to load just the language, which is the first two characters.\n            return loadDayjsLocale(locale.substring(0, 2));\n        }\n    }\n    return locale;\n}\nfunction formatMessage(intl, id, values) {\n    return intl.formatMessage({ id }, values);\n}\nfunction createEnglishFormat(key) {\n    return new IntlMessageFormat(enLanguagePack[key], \"en-US\");\n}\n\nexport { addHTMLSupport, createEnglishFormat, formatMessage, loadDayjsLocale, loadLanguagePack, loadLocale };\n","import { useContext } from 'react';\nimport { LanguagePackContext } from '../contexts/LanguagePackContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a React hook that will provided access to the {@link LanguagePack}.\n */\nfunction useLanguagePack() {\n    return useContext(LanguagePackContext);\n}\n\nexport { useLanguagePack };\n","import cx from 'classnames';\nimport React from 'react';\nimport { HideComponentContext } from '../../contexts/HideComponentContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is used to potentially hide it's children and to make that state available through context to all\n * of the component's children. Note that this does not currently work if you nest one of these components inside of\n * another one.\n */\nfunction HideComponent(props) {\n    const { hidden, children, className, ...htmlAttributes } = props;\n    return (React.createElement(HideComponentContext.Provider, { value: hidden },\n        React.createElement(\"div\", { className: cx(className, { WAC__hidden: hidden }), ...htmlAttributes }, children)));\n}\n\nexport { HideComponent };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This context provides access to the current window size and is updated as the window size changes.\n */\nconst WindowSizeContext = React.createContext(null);\n\nexport { WindowSizeContext };\n","export { CarbonTheme } from '../config/PublicConfig.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nvar CarbonThemeClassNames;\n(function (CarbonThemeClassNames) {\n    CarbonThemeClassNames[\"WHITE\"] = \"cds--white\";\n    CarbonThemeClassNames[\"G10\"] = \"cds--g10\";\n    CarbonThemeClassNames[\"G90\"] = \"cds--g90\";\n    CarbonThemeClassNames[\"G100\"] = \"cds--g100\";\n})(CarbonThemeClassNames || (CarbonThemeClassNames = {}));\nvar ButtonKindEnum;\n(function (ButtonKindEnum) {\n    ButtonKindEnum[\"PRIMARY\"] = \"primary\";\n    ButtonKindEnum[\"SECONDARY\"] = \"secondary\";\n    ButtonKindEnum[\"DANGER\"] = \"danger\";\n    ButtonKindEnum[\"GHOST\"] = \"ghost\";\n    ButtonKindEnum[\"DANGER_PRIMARY\"] = \"danger--primary\";\n    ButtonKindEnum[\"DANGER_GHOST\"] = \"danger--ghost\";\n    ButtonKindEnum[\"DANGER_TERTIARY\"] = \"danger--tertiary\";\n    ButtonKindEnum[\"TERTIARY\"] = \"tertiary\";\n})(ButtonKindEnum || (ButtonKindEnum = {}));\nvar ButtonSizeEnum;\n(function (ButtonSizeEnum) {\n    ButtonSizeEnum[\"SMALL\"] = \"sm\";\n    ButtonSizeEnum[\"MEDIUM\"] = \"md\";\n    ButtonSizeEnum[\"LARGE\"] = \"lg\";\n    ButtonSizeEnum[\"XLARGE\"] = \"xl\";\n    ButtonSizeEnum[\"XXLARGE\"] = \"2xl\";\n})(ButtonSizeEnum || (ButtonSizeEnum = {}));\n\nexport { ButtonKindEnum, ButtonSizeEnum, CarbonThemeClassNames };\n","import { useContext } from 'react';\nimport { ServiceManagerContext } from '../contexts/ServiceManagerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a React hook that will provided access to the {@link ServiceManager}.\n */\nfunction useServiceManager() {\n    return useContext(ServiceManagerContext);\n}\n\nexport { useServiceManager };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This context provides access to the portal root element that acts as the host element for instances of\n * {@link ModalPortal}. Instances of that react component are mounted here in the DOM using React's portal\n * functionality.\n */\nconst ModalPortalRootContext = React.createContext(null);\n\nexport { ModalPortalRootContext };\n","import { v4 } from 'uuid';\nexport { UUIDType } from './UUIDType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The function generates a new v4 UUID. This function is here to provide a nicer mechanism for mocking UUIDs in\n * test cases.\n *\n * @param _type This is the \"type\" of the UUID that is being generated. This is only used by the mock UUID generator\n * for test cases. Each \"type\" will get it's own set of IDs that don't overlap with other types.\n */\nfunction uuid(_type) {\n    return v4();\n}\n\nexport { uuid };\n","import React, { useContext, useEffect } from 'react';\nimport { AriaAnnouncerContext } from '../../contexts/AriaAnnouncerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component acts as a wrapper around content that should be announced by a screen reader.\n */\nfunction AriaLiveMessage(props) {\n    const ariaAnnouncer = useContext(AriaAnnouncerContext);\n    useEffect(() => {\n        ariaAnnouncer(props.message);\n    }, [ariaAnnouncer, props.message]);\n    return React.createElement(\"div\", null);\n}\nconst AriaLiveMessageExport = React.memo(AriaLiveMessage);\n\nexport { AriaLiveMessageExport as AriaLiveMessage };\n","import { compute } from 'compute-scroll-into-view';\nimport memoizeOne from 'memoize-one';\nimport { tabbable } from 'tabbable';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The calculated size of scrollbars in the application. Note that this value can vary by browser and operating\n * system. This is memoized so it's calculated lazily after the application has loaded.\n */\nconst SCROLLBAR_WIDTH = memoizeOne(getScrollbarWidth);\n/**\n * Scrolls the given element into view if necessary.\n *\n * @param element The element to scroll.\n * @param animate Indicates if the scroll should be animated.\n * @param boundary An optional boundary element that tells the computation code where to stop when trying to find a\n * scrollable container.\n */\nfunction doScrollElementIntoView(element, animate = false, boundary) {\n    if (element) {\n        const actions = compute(element, {\n            boundary,\n            scrollMode: \"if-needed\",\n            block: \"nearest\",\n            inline: \"nearest\",\n        });\n        actions.forEach(({ el, top, left }) => {\n            // noinspection JSSuspiciousNameCombination\n            doScrollElement(el, Math.round(top), Math.round(left), animate);\n        });\n    }\n}\n/**\n * Sets the scroll position on the given scrollable element to the given top and left values.\n *\n * @param element The scrollable element to set the scroll position of.\n * @param scrollTop The scrollTop value to set.\n * @param scrollLeft The scrollLeft value to set.\n * @param animate Indicates if the scrolling should be done using animation.\n */\nfunction doScrollElement(element, scrollTop, scrollLeft, animate = false) {\n    setTimeout(() => {\n        if (element) {\n            if (animate && element.scroll) {\n                element.scroll({\n                    top: scrollTop,\n                    left: scrollLeft,\n                    behavior: \"smooth\",\n                });\n            }\n            else {\n                element.scrollTop = scrollTop;\n                element.scrollLeft = scrollLeft;\n            }\n        }\n    });\n}\n/**\n * Calculates the width of a scrollbar in the system. This will add a temporary scrollable div to the document with\n * a div inside and then measure the difference in size of the element.\n */\nfunction getScrollbarWidth() {\n    // Creating invisible container\n    const outer = document.createElement(\"div\");\n    outer.style.visibility = \"hidden\";\n    outer.style.overflow = \"scroll\";\n    document.body.appendChild(outer);\n    // Creating inner element and placing it in the container.\n    const inner = document.createElement(\"div\");\n    outer.appendChild(inner);\n    // Calculating difference between container's full width and the child width.\n    const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n    // Removing temporary elements from the DOM.\n    outer.parentNode.removeChild(outer);\n    return scrollbarWidth;\n}\n/**\n * Requests focus be moved to the given element, optionally deferring it to the next event loop.\n *\n * @param element The element to move focus to.\n * @param preventScroll Indicates if scrolling should be prevented as a result of the focus change.\n */\nfunction doFocus(element, preventScroll = false) {\n    if (element &&\n        document.activeElement !== element &&\n        tabbable(element, { getShadowRoot: true })) {\n        element.focus({ preventScroll });\n    }\n}\n/**\n * Requests focus be moved to the element referenced by the given react ref if the referenced element is defined.\n *\n * @param ref The reference to the element to move focus to.\n * @param defer Indicates if the focus should be executed now or if it should be deferred to another event loop.\n * @param preventScroll Indicates if scrolling should be prevented as a result of the focus change.\n */\nfunction doFocusRef(ref, defer = false, preventScroll = false) {\n    if (ref) {\n        if (defer) {\n            setTimeout(() => {\n                doFocusRef(ref);\n            });\n        }\n        else if (ref.current) {\n            doFocus(ref.current, preventScroll);\n        }\n    }\n}\n/**\n * Determines if the given node is an Element.\n */\nfunction isElement(node) {\n    return node?.nodeType === 1;\n}\n/**\n * Determines if the given node is a Text node.\n */\nfunction isTextNode(node) {\n    return node?.nodeType === 3;\n}\n/**\n * Determines if the given node is a INPUT html element.\n */\nfunction isInputNode(node) {\n    return node?.tagName === \"INPUT\";\n}\n/**\n * Determines if the given node is an IMG html element.\n */\nfunction isImageNode(node) {\n    return node?.tagName === \"IMG\";\n}\n/**\n * Determines if the given node is a TEXTAREA html element.\n */\nfunction isTextAreaNode(node) {\n    return node?.tagName === \"TEXTAREA\";\n}\n/**\n * Looks through an array of elements for the first child element that should receive focus.\n * If no elements should receive focus, returns false.\n *\n * @param elements An array of HTMLElements.\n *\n * @returns boolean explaining if there was a focusable element or not.\n */\nfunction focusOnFirstFocusableItemInArrayOfElements(elements) {\n    for (let index = 0; index < elements.length; index++) {\n        if (focusOnFirstFocusableElement(elements[index])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Searches through the children of an element for an element to focus on. The first child that can get focus that is\n * found will receive focus. If no elements are found, returns false.\n *\n * @param parentElement An element with potential focusable children.\n */\nfunction focusOnFirstFocusableElement(parentElement) {\n    const focusableElements = tabbable(parentElement, { getShadowRoot: true });\n    if (focusableElements?.length) {\n        doFocus(focusableElements[0]);\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if the given keyboard event represent a press of the enter key. This will exclude the key when pressed\n * as part of IME composing and it will also exclude the key if there are any modifier keys that are pressed at the same\n * time. This function supports both the built-in typescript KeyboardEvent type and the React version (which is\n * missing some properties).\n */\nfunction isEnterKey(event) {\n    if (event.key === \"Enter\" && !hasModifiers(event)) {\n        // Users using IMEs could be making a word selection when they hit enter. This check will prevent the user’s\n        // message from being sent prematurely.\n        return !(event.isComposing || event.keyCode === 229);\n    }\n    return false;\n}\n/**\n * Determines if the given keyboard event has any modifier keys pressed.\n */\nfunction hasModifiers(event) {\n    return event.shiftKey || event.altKey || event.metaKey || event.ctrlKey;\n}\n/**\n * Returns the \"scrollBottom\" value for the given element. This is similar to \"scrollTop\" except that it represents\n * the distance the element has been scrolled from the bottom.\n */\nfunction getScrollBottom(element) {\n    if (element) {\n        return element.scrollHeight - element.offsetHeight - element.scrollTop;\n    }\n    return 0;\n}\n\nexport { SCROLLBAR_WIDTH, doFocusRef, doScrollElement, doScrollElementIntoView, focusOnFirstFocusableItemInArrayOfElements, getScrollBottom, isElement, isEnterKey, isImageNode, isInputNode, isTextAreaNode, isTextNode };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport './constants.js';\nimport { findLastWithMap } from './lang/arrayUtils.js';\nimport { uuid } from './lang/uuid.js';\nimport { MessageResponseTypes, MessageInputType, ButtonItemType, AgentMessageType, InternalMessageRequestType } from '../../../types/messaging/Messages.js';\nimport { UUIDType } from './lang/UUIDType.js';\nimport { FileStatusValue } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst THREAD_ID_MAIN = \"main\";\n/**\n * This function determines if the given message is an output message (i.e. a message output from the assistant) and\n * is a {@link MessageResponse}. This function acts as a type guard which will narrow the type to\n * {@link MessageResponse} if it returns true.\n */\nfunction isResponse(message) {\n    return message && message.output !== undefined;\n}\nfunction isDateResponseType(localMessage) {\n    return (localMessage?.item.response_type === MessageResponseTypes.DATE);\n}\n/**\n * Adds default values to the given MessageResponse.\n */\nfunction addDefaultsToMessage(fullMessage) {\n    if (!fullMessage.id) {\n        fullMessage.id = uuid(UUIDType.MESSAGE);\n    }\n    if (!fullMessage.thread_id) {\n        fullMessage.thread_id = THREAD_ID_MAIN;\n    }\n    if (!fullMessage.history) {\n        fullMessage.history = {};\n    }\n    if (!fullMessage.history.timestamp) {\n        fullMessage.history.timestamp = Date.now();\n    }\n    if (fullMessage.history.from_history === undefined) {\n        fullMessage.history.from_history = false;\n    }\n    return fullMessage;\n}\n/**\n * This function determines if the given message is a message input to the assistant and is a {@link MessageRequest}.\n * This function will return false if the MessageRequest is an internal event. This function acts as a type guard which\n * will narrow the type to {@link MessageRequest} if it returns true.\n */\nfunction isRequest(message) {\n    return message?.input !== undefined;\n}\n/**\n * Indicates if this message was part of a conversation with a live agent.\n */\nfunction isLiveAgentMessage(message) {\n    return Boolean(message.item.agent_message_type);\n}\n/**\n * Indicates if this message contains a message that was part of a conversation with a live agent.\n */\nfunction hasLiveAgentMessage(message) {\n    return ((isResponse(message) &&\n        Boolean(message.output.generic?.find((item) => item?.agent_message_type))) ||\n        (isRequest(message) && Boolean(message.input.agent_message_type)));\n}\n/**\n * This function determines if the given message is an internal event message that was input (i.e. a message we sent to\n * the back-end that is a {@link MessageRequest} with {@link EventInput} in it). This function acts as a type guard\n * which will narrow the type to 'MessageRequest<EventInput>' if it returns true.\n */\nfunction isEventRequest(message) {\n    return (message?.input?.message_type ===\n        MessageInputType.EVENT);\n}\n/**\n * This function determines if the given generic item is a text item. This function acts as a type guard which will\n * narrow the type to {@link TextItem} if it returns true.\n */\nfunction isTextItem(item) {\n    return (item &&\n        item.response_type === \"text\" &&\n        item.text !== undefined);\n}\nfunction isTyping(message) {\n    // eslint-disable-next-line eqeqeq\n    return (message.response_type === MessageResponseTypes.PAUSE &&\n        message.typing == true);\n}\nfunction isPause(message) {\n    return message.response_type === MessageResponseTypes.PAUSE;\n}\n/**\n * This is a type guard that determines if the given item is an {@link OptionItem} item.\n */\nfunction isOptionItem(item) {\n    return (item?.response_type === MessageResponseTypes.OPTION &&\n        item.options !== undefined);\n}\n/**\n * Determines if the message is a transfer to agent response.\n */\nfunction isChannelTransferToAgent(message) {\n    const { generic } = message.output;\n    return generic.some(isConnectToAgent);\n}\n/**\n * Generates a {@link MessageRequest} for the given {@link Option} that the user has selected. This is used for\n * generating the request to the server once the user has selected a choice from an option or suggestion list.\n *\n * @param choice The selected value.\n * @param relatedResponseID If this choice was made as the result of the choice choosing a value from a previous\n * {@link MessageResponse}, this should be the ID of that message.\n */\nfunction createMessageRequestForChoice(choice, relatedResponseID) {\n    // The \"value\" of the choice contains the data that is to be sent to the server when this choice is selected.\n    // We'll clone it and add in the history value which stores the user-visible label in the history store.\n    const messageRequest = {\n        id: uuid(UUIDType.MESSAGE),\n        thread_id: THREAD_ID_MAIN,\n        ...cloneDeep(choice.value),\n    };\n    messageRequest.history = {\n        label: choice.label,\n        relatedMessageID: relatedResponseID,\n    };\n    return messageRequest;\n}\n/**\n * Generates a {@link MessageRequest} for the given {@link Option} that the user has selected. This is used for\n * generating the request to the server once the user has selected a choice from an option or suggestion list.\n *\n * @param buttonItem The button item.\n * @param relatedResponseID The id of the {@link MessageResponse} the button item came from.\n * {@link MessageResponse}, this should be the ID of that message.\n */\nfunction createMessageRequestForButtonItemOption(buttonItem, relatedResponseID) {\n    // The \"value\" of the choice contains the data that is to be sent to the server when this choice is selected.\n    const messageRequest = {\n        id: uuid(UUIDType.MESSAGE),\n        thread_id: THREAD_ID_MAIN,\n        input: null,\n    };\n    if (buttonItem.value?.input?.text) {\n        messageRequest.input = cloneDeep(buttonItem.value.input);\n    }\n    else {\n        messageRequest.input = { text: buttonItem.label };\n    }\n    messageRequest.history = { relatedMessageID: relatedResponseID };\n    return messageRequest;\n}\n/**\n * Generates a {@link MessageRequest} to request the welcome node.\n */\nfunction createWelcomeRequest() {\n    return addDefaultsToMessage({\n        id: uuid(UUIDType.MESSAGE),\n        input: {\n            text: \"\",\n        },\n        history: {\n            silent: true,\n            is_welcome_request: true,\n        },\n        thread_id: THREAD_ID_MAIN,\n    });\n}\n/**\n * Generates a {@link MessageRequest} for the given text message sent by the user. This is used for generating the\n * request to send to the server when the user has typed something into the input field.\n */\nfunction createMessageRequestForText(text) {\n    // The \"value\" of the choice contains the data that is to be sent to the server when this choice is selected.\n    // We'll clone it and add in the history value which stores the user-visible label in the history store.\n    return addDefaultsToMessage({\n        input: {\n            // The assistant will choke if we send it text with line breaks in it, so we have to remove them first.\n            text,\n            message_type: MessageInputType.TEXT,\n        },\n    });\n}\n/**\n * Generates a {@link MessageRequest} to represent a file upload.\n */\nfunction createMessageRequestForFileUpload(upload) {\n    return addDefaultsToMessage({\n        id: upload.id,\n        input: {\n            text: upload.file.name,\n            message_type: InternalMessageRequestType.FILE,\n            agent_message_type: AgentMessageType.FROM_USER,\n        },\n        history: {\n            file_upload_status: FileStatusValue.UPLOADING,\n        },\n    });\n}\nfunction createMessageRequestForDate(inputString, userString, relatedResponseID) {\n    const messageRequest = createMessageRequestForText(inputString);\n    messageRequest.history = {\n        label: userString,\n        relatedMessageID: relatedResponseID,\n    };\n    return messageRequest;\n}\n/**\n * Generates a {@link MessageResponse} for the given text message sent to the user.\n */\nfunction createMessageResponseForText(text, threadID = THREAD_ID_MAIN, responseType = MessageResponseTypes.TEXT, context) {\n    const textItem = {\n        response_type: responseType,\n        text,\n    };\n    const messageResponse = {\n        id: uuid(UUIDType.MESSAGE),\n        thread_id: threadID,\n        output: {\n            generic: [textItem],\n        },\n    };\n    return messageResponse;\n}\n/**\n * Generates a {@link MessageResponse} for the given item sent to the user.\n */\nfunction createMessageResponseForItem(item, context) {\n    const messageResponse = {\n        output: {\n            generic: [item],\n        },\n    };\n    return addDefaultsToMessage(messageResponse);\n}\n/**\n * Indicates if the dialog response is a \"connect_to_agent\" message.\n */\nfunction isConnectToAgent(response) {\n    return response?.response_type === MessageResponseTypes.CONNECT_TO_AGENT;\n}\nfunction isCardResponseType(response) {\n    // TODO: Add Card to wa-fd-types MessageResponseTypes enum.\n    return response?.response_type === MessageResponseTypes.CARD;\n}\nfunction isCarouselResponseType(response) {\n    return response?.response_type === MessageResponseTypes.CAROUSEL;\n}\nfunction isButtonResponseType(response) {\n    return response?.response_type === MessageResponseTypes.BUTTON;\n}\nfunction isShowPanelButtonType(response) {\n    return (isButtonResponseType(response) &&\n        response.button_type === ButtonItemType.SHOW_PANEL);\n}\n/**\n * Determines if the provided message item is a response type that supports nesting response types.\n */\nfunction isResponseWithNestedItems(item) {\n    if (isButtonResponseType(item)) {\n        return hasBodyOrFooter(item.panel);\n    }\n    if (isCardResponseType(item)) {\n        return hasBodyOrFooter(item);\n    }\n    if (isCarouselResponseType(item)) {\n        return item.items !== undefined;\n    }\n    return isGridResponseType(item);\n}\nfunction hasBodyOrFooter(item) {\n    return item?.body !== undefined || item?.footer !== undefined;\n}\n/**\n * Determines if the given message should be rendered as custom message.\n */\nfunction renderAsUserDefinedMessage(messageItem) {\n    const responseType = messageItem.response_type;\n    switch (responseType) {\n        case MessageResponseTypes.TEXT:\n        case MessageResponseTypes.IMAGE:\n        case MessageResponseTypes.OPTION:\n        case MessageResponseTypes.CONNECT_TO_AGENT:\n        case MessageResponseTypes.IFRAME:\n        case MessageResponseTypes.VIDEO:\n        case MessageResponseTypes.AUDIO:\n        case MessageResponseTypes.DATE:\n        case MessageResponseTypes.CONVERSATIONAL_SEARCH:\n        case MessageResponseTypes.TABLE:\n        case MessageResponseTypes.INLINE_ERROR:\n        case MessageResponseTypes.CARD:\n        case MessageResponseTypes.CAROUSEL:\n        case MessageResponseTypes.BUTTON:\n        case MessageResponseTypes.GRID:\n            return false;\n        default:\n            // If the custom response is for the tour feature then don't render as a custom message since it will be rendered\n            // as a tour instead.\n            return !renderAsTour(messageItem);\n    }\n}\n/**\n * Determines if the LocalMessage should be rendered as a tour.\n */\nfunction renderAsTour(messageItem) {\n    return hasTourUserDefinedType(messageItem);\n}\n/**\n * Determines if the Generic item's user_defined_type matched the type for the tour beta.\n */\nfunction hasTourUserDefinedType(message) {\n    // For now the tour response will be a custom message with a specific user_defined_type.\n    return message?.user_defined?.user_defined_type === \"IBM_BETA_JOURNEYS_TOUR\";\n}\n/**\n * Indicates if the given remote config indicates that a service desk is configured.\n */\nfunction hasServiceDesk(config) {\n    return Boolean(config.public.serviceDeskFactory);\n}\n/**\n * Determines if the provided message item can be rendered in a response body item.\n */\nfunction isItemSupportedInResponseBody(item) {\n    switch (item.response_type) {\n        case MessageResponseTypes.IMAGE:\n        case MessageResponseTypes.IFRAME:\n        case MessageResponseTypes.VIDEO:\n        case MessageResponseTypes.AUDIO:\n        case MessageResponseTypes.TEXT:\n        case MessageResponseTypes.USER_DEFINED:\n        case MessageResponseTypes.CARD:\n        case MessageResponseTypes.GRID:\n            return true;\n        default:\n            return false;\n    }\n}\n/**\n * Determines if the message item is a carousel response type with a single item.\n */\nfunction isSingleItemCarousel(messageItem) {\n    return isCarouselResponseType(messageItem) && messageItem.items.length === 1;\n}\nfunction isGridResponseType(item) {\n    return item?.response_type === MessageResponseTypes.GRID;\n}\nfunction getOptionType(preference, totalOptions) {\n    let type = \"button\";\n    if (preference && preference === \"button\") {\n        type = \"button\";\n    }\n    else if (preference && preference === \"dropdown\") {\n        type = \"dropdown\";\n    }\n    else if (totalOptions > 4) {\n        type = \"dropdown\";\n    }\n    return type;\n}\n/**\n * Indicates if the given stream chunk is a partial item.\n */\nfunction isStreamPartialItem(chunk) {\n    return Boolean(chunk.partial_item);\n}\n/**\n * Indicates if the given stream chunk is a complete item.\n */\nfunction isStreamCompleteItem(chunk) {\n    return Boolean(chunk.complete_item);\n}\n/**\n * Indicates if the given stream chunk is a partial item.\n */\nfunction isStreamFinalResponse(chunk) {\n    return Boolean(chunk.final_response);\n}\n/**\n * Returns the ID of a streaming item that is part of a message response. If the item does not have a streaming ID,\n * this will return null;\n */\nfunction streamItemID(messageID, item) {\n    const itemID = item?.streaming_metadata?.id;\n    if (!itemID) {\n        return null;\n    }\n    return `${messageID}-${itemID}`;\n}\n/**\n * Returns the dimensions info for the given media item.\n */\nfunction getMediaDimensions(item) {\n    return item.dimensions;\n}\n/**\n * Returns the last response message from the bot (excludes agent messages) that has a context object on it.\n */\nfunction getLastBotResponseWithContext(state) {\n    const messageIDs = state.botMessageState.messageIDs || [];\n    return findLastWithMap(messageIDs, state.allMessagesByID, (message) => isResponse(message) &&\n        !hasLiveAgentMessage(message) &&\n        Boolean(message.context));\n}\n\nexport { THREAD_ID_MAIN, addDefaultsToMessage, createMessageRequestForButtonItemOption, createMessageRequestForChoice, createMessageRequestForDate, createMessageRequestForFileUpload, createMessageRequestForText, createMessageResponseForItem, createMessageResponseForText, createWelcomeRequest, getLastBotResponseWithContext, getMediaDimensions, getOptionType, hasServiceDesk, hasTourUserDefinedType, isButtonResponseType, isCardResponseType, isCarouselResponseType, isChannelTransferToAgent, isConnectToAgent, isDateResponseType, isEventRequest, isGridResponseType, isItemSupportedInResponseBody, isLiveAgentMessage, isOptionItem, isPause, isRequest, isResponse, isResponseWithNestedItems, isShowPanelButtonType, isSingleItemCarousel, isStreamCompleteItem, isStreamFinalResponse, isStreamPartialItem, isTextItem, isTyping, renderAsTour, renderAsUserDefinedMessage, streamItemID };\n","import React, { PureComponent } from 'react';\nimport { withAriaAnnouncer } from '../../hocs/withAriaAnnouncer.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component creates an ARIA live-region around its children, but it does not render the children until this\n * component is mounted. A live-region does not make any announcements when the element is attached to the DOM.\n * Only changes made after it is attached are announced.\n */\nclass AnnounceOnMountComponent extends PureComponent {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = {\n            isMounted: false,\n        };\n        /**\n         * Indicates if the \"once\" prop message has been announced.\n         */\n        this.onceAnnounced = false;\n    }\n    componentDidMount() {\n        this.setState({ isMounted: true });\n        if (!this.onceAnnounced) {\n            if (this.props.announceOnce) {\n                setTimeout(() => {\n                    this.props.ariaAnnouncer(this.props.announceOnce);\n                });\n            }\n            this.onceAnnounced = true;\n        }\n    }\n    render() {\n        return (React.createElement(\"div\", { \"aria-live\": \"polite\" }, this.state.isMounted && this.props.children));\n    }\n}\nconst AnnounceOnMountComponentExport = withAriaAnnouncer(AnnounceOnMountComponent);\n\nexport { AnnounceOnMountComponentExport as AnnounceOnMountComponent };\n","export { ViewType } from '../instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The different available widths of a Carbon AI chat.\n */\nvar ChatWidthBreakpoint;\n(function (ChatWidthBreakpoint) {\n    // < 360px\n    ChatWidthBreakpoint[\"NARROW\"] = \"narrow\";\n    // >= 360px\n    ChatWidthBreakpoint[\"STANDARD\"] = \"standard\";\n    // > 672 + 16 + 16px\n    ChatWidthBreakpoint[\"WIDE\"] = \"wide\";\n})(ChatWidthBreakpoint || (ChatWidthBreakpoint = {}));\n\nexport { ChatWidthBreakpoint };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is used to render custom elements stored in the serviceManager and set in Chat.ts.\n * It adds a container element around the host element which in turn can be used by the external page for adding its\n * own custom elements below it.\n */\nfunction WriteableElement({ slotName, id, className }) {\n    // Attach the host element to the ref for this component.\n    return (React.createElement(\"div\", { className: className, id: id, \"data-floating-menu-container\": true },\n        React.createElement(\"slot\", { name: slotName })));\n}\nvar WriteableElement$1 = React.memo(WriteableElement);\n\nexport { WriteableElement$1 as default };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains the instance of the {@link ServiceManagerContext} which is used to provide access to the\n * {@link ServiceManager}.\n */\nconst ServiceManagerContext = React.createContext(null);\n\nexport { ServiceManagerContext };\n","import { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ModalPortalRootContext } from '../contexts/ModalPortalRootContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nclass ModalPortal extends Component {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = { attachedToHost: null };\n        /**\n         * The element that will contain this modal instance.\n         */\n        this.modalElement = document.createElement(\"div\");\n    }\n    componentDidMount() {\n        // Attach to the host if it's available right away.\n        this.attachIfNeeded();\n    }\n    componentDidUpdate() {\n        // Attach to the host later if it wasn't available when we mounted.\n        this.attachIfNeeded();\n    }\n    componentWillUnmount() {\n        if (this.state.attachedToHost) {\n            this.state.attachedToHost.removeChild(this.modalElement);\n            // this.attachedToHost = null;\n        }\n    }\n    /**\n     * This function will attach this component to the host element if needed and if the host element is available.\n     */\n    attachIfNeeded() {\n        const hostElement = this.context;\n        if (hostElement && !this.state.attachedToHost) {\n            // The value in the context is the host element. When we see it come in the first time, we'll attach to it and\n            // store it in state to make sure we re-render when that happens.\n            this.setState({ attachedToHost: hostElement });\n            hostElement.appendChild(this.modalElement);\n        }\n    }\n    render() {\n        if (!this.state.attachedToHost) {\n            // Don't render anything until after we've gotten attached to the host.\n            return null;\n        }\n        return ReactDOM.createPortal(this.props.children, this.modalElement);\n    }\n}\n// Specify the context type and redefine the context property so it's got the right type.\nModalPortal.contextType = ModalPortalRootContext;\n\nexport { ModalPortal };\n","import { Button } from '@carbon/react';\nimport FocusTrap from 'focus-trap-react';\nimport React, { Component } from 'react';\nimport { ModalPortal } from '../../containers/ModalPortal.js';\nimport { AriaLiveMessage as AriaLiveMessageExport } from '../aria/AriaLiveMessage.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nclass ConfirmModal extends Component {\n    constructor() {\n        super(...arguments);\n        /**\n         * The callback that is called when the user clicks the yes button confirming that they do want to end the chat.\n         */\n        this.onYesClick = () => {\n            // End the chat and close the panel.\n            this.props.onConfirm();\n        };\n        /**\n         * The callback that is called when the user clicks the no button indicating they want to continue the chat.\n         */\n        this.onNoClick = () => {\n            // Just close the panel.\n            this.props.onCancel();\n        };\n        /**\n         * A keyboard listener added to both buttons that will close the panel if the user presses escape.\n         */\n        this.onKeyDown = (event) => {\n            if (event.key === \"Escape\") {\n                this.props.onCancel();\n            }\n        };\n    }\n    render() {\n        const { title, message, cancelButtonLabel, confirmButtonLabel, modalAnnounceMessage, serviceManager, } = this.props;\n        return (React.createElement(ModalPortal, null,\n            React.createElement(FocusTrap, null,\n                React.createElement(\"div\", { className: \"WACConfirmModal\", role: \"dialog\", \"aria-labelledby\": \"WACConfirmModal__title\", \"aria-describedby\": \"WACConfirmModal__message\" },\n                    React.createElement(\"div\", { className: \"WACConfirmModal__container\" },\n                        React.createElement(AriaLiveMessageExport, { message: modalAnnounceMessage }),\n                        React.createElement(\"div\", { className: \"WACConfirmModal__title\", id: `WACConfirmModal__title${serviceManager.namespace.suffix}` }, title),\n                        React.createElement(\"div\", { className: \"WACConfirmModal__message\", id: `WACConfirmModal__message${serviceManager.namespace.suffix}` }, message),\n                        React.createElement(\"div\", { className: \"WACConfirmModal__buttonContainer\" },\n                            React.createElement(Button, { className: \"WACConfirmModal__NoButton\", kind: \"secondary\", onClick: this.onNoClick, onKeyDown: this.onKeyDown, size: \"md\" }, cancelButtonLabel),\n                            React.createElement(Button, { className: \"WACConfirmModal__YesButton\", onClick: this.onYesClick, onKeyDown: this.onKeyDown, size: \"md\" }, confirmButtonLabel)))))));\n    }\n}\n\nexport { ConfirmModal };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * @category Instance\n */\nvar WriteableElementName;\n(function (WriteableElementName) {\n    /**\n     * An element that appears in the AI theme only and is shown beneath the title and description in the AI tooltip\n     * content.\n     */\n    WriteableElementName[\"AI_TOOLTIP_AFTER_DESCRIPTION_ELEMENT\"] = \"aiTooltipAfterDescriptionElement\";\n    /**\n     * An element that appears in the main message body directly above the welcome node.\n     */\n    WriteableElementName[\"WELCOME_NODE_BEFORE_ELEMENT\"] = \"welcomeNodeBeforeElement\";\n    /**\n     * An element that appears in the header on a new line. Only visible while talking to the bot.\n     */\n    WriteableElementName[\"HEADER_BOTTOM_ELEMENT\"] = \"headerBottomElement\";\n    /**\n     * An element that appears after the messages area and before the input area.\n     */\n    WriteableElementName[\"BEFORE_INPUT_ELEMENT\"] = \"beforeInputElement\";\n    /**\n     * An element that appears above the input field on the home screen.\n     */\n    WriteableElementName[\"HOME_SCREEN_BEFORE_INPUT_ELEMENT\"] = \"homeScreenBeforeInputElement\";\n    /**\n     * An element that appears on the home screen after the conversation starters.\n     */\n    WriteableElementName[\"HOME_SCREEN_AFTER_STARTERS_ELEMENT\"] = \"homeScreenAfterStartersElement\";\n    /**\n     * An element that appears on the home screen above the welcome message and conversation starters.\n     */\n    WriteableElementName[\"HOME_SCREEN_HEADER_BOTTOM_ELEMENT\"] = \"homeScreenHeaderBottomElement\";\n    /**\n     * An element to be housed in the custom panel.\n     */\n    WriteableElementName[\"CUSTOM_PANEL_ELEMENT\"] = \"customPanelElement\";\n})(WriteableElementName || (WriteableElementName = {}));\n\nexport { WriteableElementName };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/** Simple “getters” for the raw pieces of state */\nconst getBotInputState = (state) => state.botInputState;\nconst getAgentInputState = (state) => state.agentState.inputState;\nconst getAgentState = (state) => state.agentState;\nconst getPersistedAgent = (state) => state.persistedToBrowserStorage.chatState.agentState;\n/**\n * Compute the display state for the agent.\n */\nfunction selectAgentDisplayState(state) {\n    const agentState = getAgentState(state);\n    const persisted = getPersistedAgent(state);\n    if (persisted.isSuspended) {\n        return {\n            isConnectingOrConnected: false,\n            disableInput: false,\n            isAgentTyping: false,\n            inputPlaceholderKey: null,\n        };\n    }\n    const { isReconnecting, isConnecting, isAgentTyping } = agentState;\n    const { isConnected } = persisted;\n    let inputPlaceholderKey;\n    if (isConnecting) {\n        inputPlaceholderKey = \"agent_inputPlaceholderConnecting\";\n    }\n    else if (isReconnecting) {\n        inputPlaceholderKey = \"agent_inputPlaceholderReconnecting\";\n    }\n    else {\n        inputPlaceholderKey = null;\n    }\n    return {\n        isAgentTyping,\n        isConnectingOrConnected: isConnecting || isConnected,\n        disableInput: isConnecting || isReconnecting,\n        inputPlaceholderKey,\n    };\n}\n/**\n * Is the chat currently routed to a human agent?\n */\nfunction selectIsInputToAgent(state) {\n    return selectAgentDisplayState(state).isConnectingOrConnected;\n}\n/**\n * Pick either the agent’s input slice or the bot’s.\n */\nfunction selectInputState(state) {\n    return selectIsInputToAgent(state)\n        ? getAgentInputState(state)\n        : getBotInputState(state);\n}\n\nexport { selectAgentDisplayState, selectInputState, selectIsInputToAgent };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Miscellaneous utils for dealing with promises.\n */\n/**\n * This is an async function that will simply wait for the given amount of time.\n *\n * @param milliseconds The amount of time in milliseconds to wait.\n */\nasync function sleep(milliseconds) {\n    await new Promise((resolve) => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n/**\n * This function returns a Promise that will be resolved if the provided Promise has resolved within the duration\n * specified. Otherwise the promise will be rejected.\n *\n * @param promise The Promise which will be resolved or timed out.\n * @param duration The duration of the timeout in milliseconds.\n * @param errorMessage An optional message to display.\n */\nfunction resolveOrTimeout(promise, duration, errorMessage) {\n    // Create a promise that rejects in <ms> milliseconds\n    const timeout = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const message = errorMessage || `The operation timed out after ${duration}ms`;\n            reject(message);\n        }, duration);\n    });\n    // Returns a race between the timeout and the original in promise\n    return Promise.race([promise, timeout]);\n}\n\nexport { resolveOrTimeout, sleep };\n","import Home from '@carbon/icons-react/es/Home.js';\nimport React, { forwardRef, useRef, useCallback, useImperativeHandle } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport { selectAgentDisplayState } from '../../store/selectors.js';\nimport '../../utils/constants.js';\nimport WriteableElement from '../WriteableElement.js';\nimport { Header as HeaderExport } from './Header.js';\nimport { WriteableElementName } from '../../../../types/instance/ChatInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction BotHeader(props, ref) {\n    const { onClose, onCloseAndRestart, onRestart, onToggleHomeScreen, headerDisplayName, includeWriteableElement, enableChatHeaderConfig, headerAvatarConfig, } = props;\n    const serviceManager = useServiceManager();\n    const languagePack = useLanguagePack();\n    const homeScreenIsOn = useSelector((state) => state.homeScreenConfig.is_on && state.homeScreenConfig.allow_return);\n    const publicConfig = useSelector((state) => state.config.public);\n    const customMenuOptions = useSelector((state) => state.customMenuOptions);\n    const { isConnectingOrConnected } = useSelector(selectAgentDisplayState, shallowEqual);\n    const useAITheme = useSelector((state) => state.theme.useAITheme);\n    const maxVisibleHeaderObjects = useSelector((state) => state.chatHeaderState.maxVisibleHeaderObjects);\n    const leftObjectsLength = useSelector((state) => state.chatHeaderState.config?.left?.length || 0);\n    const rightObjectsLength = useSelector((state) => state.chatHeaderState.config?.right?.length || 0);\n    const headerRef = useRef();\n    const isHeaderObjectsInOverflow = leftObjectsLength > maxVisibleHeaderObjects ||\n        rightObjectsLength > maxVisibleHeaderObjects;\n    const hasChatHeaderObjects = enableChatHeaderConfig && isHeaderObjectsInOverflow;\n    const showRestartButton = publicConfig.showRestartButton ||\n        publicConfig.headerConfig?.showRestartButton;\n    // We can't allow the user to return to the home screen if the user is connecting or connected to an agent.\n    const allowHomeScreen = homeScreenIsOn && !isConnectingOrConnected;\n    const overflowClicked = useCallback((index) => {\n        if (index === 0 && allowHomeScreen) {\n            onToggleHomeScreen?.();\n        }\n        else {\n            const { handler } = customMenuOptions[allowHomeScreen ? index - 1 : index];\n            handler();\n        }\n    }, [customMenuOptions, onToggleHomeScreen, allowHomeScreen]);\n    let overflowItems = customMenuOptions?.map((option) => option.text);\n    if (overflowItems && allowHomeScreen) {\n        // Insert a \"Home screen\" option at the top.\n        overflowItems.splice(0, 0, languagePack.homeScreen_overflowMenuHomeScreen);\n    }\n    else if (!overflowItems && allowHomeScreen && hasChatHeaderObjects) {\n        // If there are header objects in the overflow menu, insert the \"Home screen\" option.\n        overflowItems = [languagePack.homeScreen_overflowMenuHomeScreen];\n    }\n    // Reuse the imperative handles from the header.\n    useImperativeHandle(ref, () => headerRef.current);\n    return (React.createElement(\"div\", { className: \"WACHeader__Container\" },\n        React.createElement(HeaderExport, { ref: headerRef, showCenter: true, headerAvatarConfig: headerAvatarConfig, displayName: headerDisplayName, showBackButton: Boolean(allowHomeScreen && onToggleHomeScreen), showRestartButton: showRestartButton, useAITheme: useAITheme, backContent: React.createElement(Home, null), labelBackButton: languagePack.homeScreen_returnToHome, onClickRestart: onRestart, onClickClose: onClose, onCloseAndRestart: onCloseAndRestart, onClickBack: onToggleHomeScreen, overflowItems: overflowItems, overflowClicked: overflowClicked, enableChatHeaderConfig: enableChatHeaderConfig }),\n        includeWriteableElement && (React.createElement(WriteableElement, { slotName: WriteableElementName.HEADER_BOTTOM_ELEMENT, id: `headerBottomElement${serviceManager.namespace.suffix}`, className: \"WACHeader__HeaderBottomElement\" }))));\n}\nconst BotHeaderExport = React.memo(forwardRef(BotHeader));\n\nexport { BotHeaderExport as BotHeader };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Recursively deep freezes an object.\n */\nfunction deepFreeze(object) {\n    Object.freeze(object);\n    Object.getOwnPropertyNames(object).forEach((prop) => {\n        if (Object.prototype.hasOwnProperty.call(object, prop) &&\n            object[prop] !== null &&\n            (typeof object[prop] === \"object\" ||\n                typeof object[prop] === \"function\") &&\n            !Object.isFrozen(object[prop])) {\n            deepFreeze(object[prop]);\n        }\n    });\n    return object;\n}\n\nexport { deepFreeze };\n","import { MessageResponseTypes } from '../../../types/messaging/Messages.js';\nimport { uuid } from '../utils/lang/uuid.js';\nimport { UUIDType } from '../utils/lang/UUIDType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Takes data from the v2 message API and transforms into something usable by WAC.\n *\n * @param  message Takes an object in the shape of a v2 message API Send object. With an additional `ui_state`\n * object for local state.\n * @param originalUserText The original text provided by the user before it was potentially modified on the\n * underlying {@link MessageRequest}. This value may be null if there is no text from the user to display.\n * instance.\n * @param id If you have already generated an id, it's ok to pass it in. If not, one will be generated.\n */\nfunction inputItemToLocalItem(message, originalUserText, id = uuid(UUIDType.LOCAL_MESSAGE)) {\n    const localMessage = {\n        // The individual message in the format of an item from output.generic in the docs above.\n        item: {\n            response_type: MessageResponseTypes.TEXT,\n            ...message.input,\n        },\n        // ui_state is for rendering concerns and is not persistent.\n        ui_state: {\n            id,\n            originalUserText,\n            needsAnnouncement: false, // We don't announce text that came from the user.\n        },\n        fullMessageID: message.id,\n    };\n    return localMessage;\n}\n\nexport { inputItemToLocalItem as default };\n","import { useContext } from 'react';\nimport { AriaAnnouncerContext } from '../contexts/AriaAnnouncerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a React hook that will provided access to the {@link AriaAnnouncerFunctionType}.\n */\nfunction useAriaAnnouncer() {\n    return useContext(AriaAnnouncerContext);\n}\n\nexport { useAriaAnnouncer };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Redux action creators for human agent actions.\n */\nconst HA_SET_AGENT_AVAILABILITY = \"HA_SET_AGENT_AVAILABILITY\";\nconst HA_SET_IS_CONNECTING = \"HA_SET_IS_CONNECTING\";\nconst HA_SET_IS_RECONNECTING = \"HA_SET_IS_RECONNECTING\";\nconst HA_SET_AGENT_JOINED = \"HA_SET_AGENT_JOINED\";\nconst HA_SET_AGENT_LEFT_CHAT = \"HA_SET_AGENT_LEFT_CHAT\";\nconst HA_END_CHAT = \"HA_END_CHAT\";\nconst HA_UPDATE_CAPABILITIES = \"HA_UPDATE_CAPABILITIES\";\nconst HA_UPDATE_FILE_UPLOAD_IN_PROGRESS = \"HA_UPDATE_FILE_UPLOAD_IN_PROGRESS\";\nconst HA_SET_SHOW_SCREEN_SHARE_REQUEST = \"HA_SET_SHOW_SCREEN_SHARE_REQUEST\";\nconst HA_SET_IS_SCREEN_SHARING = \"HA_SET_IS_SCREEN_SHARING\";\nconst HA_SET_PERSISTED_STATE = \"HA_SET_PERSISTED_STATE\";\nconst HA_UPDATE_IS_SUSPENDED = \"HA_UPDATE_IS_SUSPENDED\";\nconst HA_UPDATE_IS_TYPING = \"HA_UPDATE_IS_TYPING\";\n/**\n * Sets the \"is connecting\" status for a human agent.\n */\nfunction setIsConnecting(isConnecting, localMessageID) {\n    return {\n        type: HA_SET_IS_CONNECTING,\n        isConnecting,\n        localMessageID,\n    };\n}\n/**\n * Sets the \"is reconnecting\" status for a human agent.\n */\nfunction setIsReconnecting(isReconnecting) {\n    return { type: HA_SET_IS_RECONNECTING, isReconnecting };\n}\n/**\n * Indicate agent has left chat.\n */\nfunction setAgentLeftChat() {\n    return { type: HA_SET_AGENT_LEFT_CHAT };\n}\n/**\n * Ends the current chat.\n */\nfunction endChat() {\n    return { type: HA_END_CHAT };\n}\n/**\n * Sets the availability information for a user who is waiting to be connected to an agent.\n */\nfunction setAgentAvailability(availability) {\n    return {\n        type: HA_SET_AGENT_AVAILABILITY,\n        availability,\n    };\n}\n/**\n * Sets the availability information for a user who is waiting to be connected to an agent.\n */\nfunction setAgentJoined(agentProfile) {\n    return {\n        type: HA_SET_AGENT_JOINED,\n        agentProfile,\n    };\n}\n/**\n * Updates Carbon AI chat with the capabilities supported by the service desk.\n */\nfunction updateCapabilities(capabilities) {\n    return { type: HA_UPDATE_CAPABILITIES, capabilities };\n}\n/**\n * Updates the indicator for if any files are being uploaded.\n */\nfunction updateFilesUploadInProgress(fileUploadInProgress) {\n    return { type: HA_UPDATE_FILE_UPLOAD_IN_PROGRESS, fileUploadInProgress };\n}\n/**\n * Sets the state of the screen sharing modal.\n */\nfunction setShowScreenShareRequest(showRequest) {\n    return { type: HA_SET_SHOW_SCREEN_SHARE_REQUEST, showRequest };\n}\n/**\n * Sets the state of screen sharing.\n */\nfunction setIsScreenSharing(isSharing) {\n    return { type: HA_SET_IS_SCREEN_SHARING, isSharing };\n}\n/**\n * Updates the object that is stored containing state for the service desk.\n */\nfunction setPersistedServiceDeskState(state) {\n    return { type: HA_SET_PERSISTED_STATE, state };\n}\n/**\n * Updates the suspended status for the current service desk.\n */\nfunction agentUpdateIsSuspended(isSuspended) {\n    return { type: HA_UPDATE_IS_SUSPENDED, isSuspended };\n}\n/**\n * Updates the suspended status for the current service desk.\n */\nfunction agentUpdateIsTyping(isTyping) {\n    return { type: HA_UPDATE_IS_TYPING, isTyping };\n}\n\nexport { HA_END_CHAT, HA_SET_AGENT_AVAILABILITY, HA_SET_AGENT_JOINED, HA_SET_AGENT_LEFT_CHAT, HA_SET_IS_CONNECTING, HA_SET_IS_RECONNECTING, HA_SET_IS_SCREEN_SHARING, HA_SET_PERSISTED_STATE, HA_SET_SHOW_SCREEN_SHARE_REQUEST, HA_UPDATE_CAPABILITIES, HA_UPDATE_FILE_UPLOAD_IN_PROGRESS, HA_UPDATE_IS_SUSPENDED, HA_UPDATE_IS_TYPING, agentUpdateIsSuspended, agentUpdateIsTyping, endChat, setAgentAvailability, setAgentJoined, setAgentLeftChat, setIsConnecting, setIsReconnecting, setIsScreenSharing, setPersistedServiceDeskState, setShowScreenShareRequest, updateCapabilities, updateFilesUploadInProgress };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains the instance of the {@link LanguagePackContext} which is used to provide access to the\n * {@link LanguagePack}.\n */\nconst LanguagePackContext = React.createContext(null);\n\nexport { LanguagePackContext };\n"],"names":["useUUID","ref","useRef","undefined","current","uuid","UUIDType","COMPONENT","withoutEmptyStarters","config","newConfig","starters","buttons","length","allow_return","filter","button","Boolean","label","trim","is_on","setIntl","serviceManager","locale","messages","intl","createIntl","store","dispatch","actions","setAppStateValue","createWriteableElementsProxy","elementSet","Set","handler","get","target","element","has","add","Proxy","writeableElements","VERSION","NotificationType","BOUNCING_ANIMATION_TIMEOUTS","DEFAULT_LAUNCHER","mobile","title","time_to_expand","new_expand_time","time_to_reduce","notification_type","TEXT_NOTIFICATION","desktop","deepFreeze","DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS","hideBackButton","hidePanelHeader","disableAnimation","DEFAULT_CUSTOM_PANEL_STATE","isOpen","panelID","DEFAULT_CUSTOM_PANEL_ID","options","DEFAULT_IFRAME_PANEL_STATE","messageItem","DEFAULT_CITATION_PANEL_STATE","citationItem","DEFAULT_TOUR_STATE","activeTourStepItems","DEFAULT_MESSAGE_PANEL_STATE","localMessageItem","isMessageForInput","VIEW_STATE_ALL_CLOSED","launcher","mainWindow","tour","VIEW_STATE_LAUNCHER_OPEN","VIEW_STATE_MAIN_WINDOW_OPEN","DEFAULT_PERSISTED_TO_BROWSER","chatState","version","disclaimersAccepted","homeScreenState","isHomeScreenOpen","showBackToBot","hasSentNonWelcomeMessage","persistedTourState","activeTourID","activeTourCurrentStepIndex","agentState","isConnected","isSuspended","agentProfiles","launcherState","wasLoadedFromBrowser","viewState","activeTour","showUnreadIndicator","mobileLauncherIsExtended","mobileLauncherWasReduced","mobileLauncherDisableBounce","desktopLauncherIsExpanded","desktopLauncherWasMinimized","bounceTurn","DEFAULT_CHAT_MESSAGES_STATE","localMessageIDs","messageIDs","isTypingCounter","isLoadingCounter","isHydratingCounter","isScrollAnchored","DEFAULT_MESSAGE_STATE","allMessageItemsByID","allMessagesByID","botMessageState","DEFAULT_AGENT_STATE","isConnecting","isReconnecting","numUnreadMessages","fileUploadInProgress","showScreenShareRequest","isScreenSharing","isAgentTyping","inputState","fieldVisible","isReadonly","files","allowFileUploads","allowMultipleFileUploads","allowedFileUploadTypes","stopStreamingButtonState","currentStreamID","isVisible","isDisabled","DEFAULT_THEME_STATE","carbonTheme","CarbonTheme","G10","useAITheme","corners","CornersType","ROUND","DEFAULT_LAYOUT_STATE","showFrame","hasContentMaxWidth","applyBotMessageState","state","newState","setHomeScreenOpenState","persistedToBrowserStorage","applyLocalMessageUIState","localMessageID","propertyName","propertyValue","oldMessage","ui_state","applyFullMessage","message","id","NoteType","MIN_CONTRAST","hexCodeToRGB","color","red","substring","blue","green","parseInt","consoleError","calculateContrast","color1","color2","rgb1","rgb2","luminance1","calculateRelativeLuminance","luminance2","contrast","r8","g8","b8","rRGB","gRGB","bRGB","whiteOrBlackText","background","gray100","white","adjustLightness","token","shift","original","Color","hsl","object","l","round","hex","toLowerCase","CSS_VAR_PREFIX","HEXADECIMAL_REGEX","INTERNAL_OVERRIDES_LIGHT_THEME_MAP","INTERNAL_OVERRIDES_DARK_THEME_MAP","ACCENT_COLOR_MAPS","blue20","blue60","blue60Hover","blue80","g10","g90","g100","fillValues","styles","propertyNames","value","forEach","mergeCSSVariables","publicVars","whiteLabelVariables","internalOverrides","internalOverridesMap","WHITE","includes","G90","G100","createInternalCSSOverridesMap","result","Object","entries","key","startsWith","match","console","warn","WA_CONSOLE_PREFIX","remoteVars","cssOverrides","primaryColor","secondaryColor","accentColor","useAccentColor","tryFocusColor","useFocusColor","colorMap","accentBlue20","accentBlue60Hover","accentBlue80","accentColorRGB","toString","accentColorBW","gray80","gray10","remoteStylesToCSSVars","getThemeClassNames","themeState","themeClassnames","CarbonThemeClassNames","validateViewState","appState","VALID_PUBLIC_VARS_IN_AI_THEME_LIST","VALID_PUBLIC_VARS_IN_AI_THEME_SET","UPDATE_CSS_VARS_AI_THEME_WARNING_MESSAGE","join","ChatActionsImpl","constructor","this","hydrating","restarting","alreadyHydrated","chunkQueue","hydrateChat","alternateWelcomeRequest","alternateWelcomeRequestSource","alternateOptions","fireReady","hydrationPromise","doHydrateChat","fire","type","BusEventType","CHAT_READY","history","debugLog","addIsHydratingCounter","historyService","loadHistory","humanAgentService","initialize","getState","hydrateMessageHistory","messageHistory","createElementsForUserDefinedResponses","latestPanelLocalMessageItem","openResponsePanel","homeScreenConfig","setHomeScreenIsOpen","public","messaging","skipWelcome","send","createWelcomeRequest","MessageSendSource","WELCOME_REQUEST","returnBeforeStreaming","chatWasHydrated","lastMessageID","arrayLastValue","lastMessage","lastOriginalMessage","fullMessageID","isLiveAgentMessage","isRequest","messageService","resendMessage","allowReconnect","serviceDesk","handleHydration","getPublicWebChatState","isConnectedWithHumanAgent","isWebChatOpen","isConnectingWithHumanAgent","isDebugEnabled","isEnableDebugLog","hasUserSentMessage","isTourActive","sendWithCatch","source","ignoreHydration","error","messageRequest","createMessageRequestForText","responsePanelState","setResponsePanelIsOpen","doSend","addDefaultsToMessage","originalUserText","input","text","silent","localMessage","inputItemToLocalItem","addMessage","addLocalMessageItem","setValueSelectedForMessageID","messageSetOptionSelected","cloneDeep","receive","isLatestWelcomeNode","requestMessage","requestOptions","restartCount","initialRestartCount","MESSAGE","preReceiveEvent","PRE_RECEIVE","data","updateHasSentNonWelcomeMessage","languagePack","isResponse","processMessageResponse","catch","inlineError","createMessageResponseForText","errors_singleMessage","thread_id","MessageResponseTypes","INLINE_ERROR","RECEIVE","removeMessages","insertHistory","scrollBottom","getMessagesScrollBottom","notes","HISTORY","body","currentAppStateMessages","newAppStateMessages","merge","doAutoScroll","scrollToBottom","receiveChunk","chunk","messageID","chunkPromise","resolvablePromise","push","processChunkQueue","isCompleteItem","isStreamCompleteItem","isPartialItem","isStreamPartialItem","isStopGeneratingVisible","botInputState","partial_item","streaming_metadata","cancellable","setStopStreamingButtonVisible","response_id","streamingStart","item","complete_item","streamingAddChunk","disableFadeAnimation","partial_response","keys","Error","streamingMergeHistory","handleUserDefinedResponseItemsChunk","isStreamFinalResponse","final_response","setStopStreamingButtonDisabled","doResolve","getOrCreateUserDefinedElement","messageItemID","userDefinedItem","userDefinedElementRegistry","document","createElement","slotName","setAttribute","set","handleUserDefinedResponseItems","originalMessage","renderAsUserDefinedMessage","user_defined","userDefinedResponseEvent","USER_DEFINED_RESPONSE","fullMessage","slot","fullWidth","setMessageUIProperty","isResponseWithNestedItems","itemsLocalMessageItemIDs","bodyLocalMessageItemIDs","footerLocalMessageItemIDs","gridLocalMessageItemIDs","createElementForNestedUserDefinedResponse","localMessageItemID","nestedLocalMessage","asyncForEach","row","cell","itemID","streamItemID","CHUNK_USER_DEFINED_RESPONSE","isProvidedFromTransfer","output","generic","request_id","previousItemID","index","pause","isPause","agent","isConnectToAgent","hasTourUserDefinedType","outputItemToLocalItem","skipTourCard","skip_card","startTourReason","TourStartReason","START_TOUR_METHOD","SKIP_CARD","mainWindowCloseReason","MainWindowCloseReason","CALLED_START_TOUR","TOUR_SKIP_CARD","startTour","viewChangeReason","ViewChangeReason","nestedLocalMessageItems","createLocalMessageItemsForNestedMessageItems","addNestedMessages","addIsTypingCounter","hasServiceDesk","errorOccurred","errorType","OnErrorType","INTEGRATION_ERROR","setMessageHistoryProperty","agentAvailability","checkAreAnyAgentsOnline","shouldAutoRequestAgent","isChannelTransferToAgent","skipConnectAgentCard","AgentsOnlineStatus","ONLINE","startChat","showIsTyping","isTyping","sleep","time","setResponsePanelContent","insertLocalMessageResponse","updateLanguagePack","changes","addNotification","notification","removeNotification","groupID","removeNotifications","removeAllNotifications","updateCSSVariables","theme","usePublicVars","variable","consoleWarn","allVariables","updateBotName","name","updateMainHeaderTitle","updateBotAvatarURL","url","updateHomeScreenConfig","updateLauncherConfig","launcherConfig","changeView","newView","reason","tryHydrating","forceViewChange","newViewState","constructViewState","isEqual","fireViewChangeEventsAndChangeView","isHydrated","viewChanging","setViewChanging","oldViewState","preViewChangeEvent","VIEW_PRE_CHANGE","cancelViewChange","setViewState","viewChangeEvent","VIEW_CHANGE","changeViewReason","setTourData","ViewType","TOUR","TOUR_START","TOUR_STEP","step","tourState","endTour","LAUNCHER","clearTourData","goToSpecificTourStep","stepId","newStepIndex","findIndex","stepItem","step_id","changeStepInTour","changeStepOptions","nextStep","previousStep","actualNewStepIndex","catastrophicErrorType","callOnError","additionalChatParameters","onError","restartConversation","skipHydration","endAgentConversation","fireEvents","PRE_RESTART_CONVERSATION","currentState","endChat","MAIN_WINDOW","mainWindowOpenReason","MainWindowOpenReason","CALLED_RESTART_CONVERSATION","instance","updateAssistantInputFieldVisibility","cancelAllMessageRequests","RESTART_CONVERSATION","destroySession","keepOpenState","originalViewState","newPersistedToBrowserStorage","userSessionStorageService","clearLauncherSession","clearChatSession","agentEndConversation","endedByUser","agentUpdateIsSuspended","values","HANDLER_NOT_FUNCTION","EventBus","handlersByType","Map","eventsTypesRunning","eventsRunningCount","busEvent","logEvent","JSON","stringify","handlersForType","handlersCopy","slice","Promise","delete","waitForEmptyPromise","fireSync","waitForEmpty","on","handlers","asArray","debugStackTrace","off","indexOf","removed","splice","once","onceHandler","event","logListeners","listeners","group","listener","consoleLog","groupEnd","clear","eventCopy","createCustomPanelInstance","customPanelInstance","open","setCustomPanelConfigOptions","setCustomPanelOpen","close","freeze","HistoryService","useHistory","publicConfig","resultData","customLoadHistory","items","historyNotes","async","allLocalMessagesByID","loadingState","allMessages","threadMessagesByThreadID","responsesByRequestID","relatedMessageByID","localMessagesByOriginalMessageID","lastThreadID","loadedHistory","latestTransferToAgentResponse","note","pushAndPrepareMessage","historyItem","isEventRequest","from_history","timestamp","Date","getTime","THREAD_ID_MAIN","file_upload_status","FileStatusValue","UPLOADING","COMPLETE","error_state","MessageErrorState","FAILED","relatedMessageID","beginEvent","HISTORY_BEGIN","eventBus","HISTORY_END","notesToMessages","getResponseItems","thread","addMessageToThread","createLocalMessages","localMessagesByFullMessageID","toChatMessageState","createChatStates","mainThreadMessages","welcomeRequest","findLast","is_welcome_request","welcomeResponse","isWelcomeResponse","markIsLatestWelcomeNode","isOptionItem","relatedRequest","optionSelected","isDateResponseType","markSelectedOptions","notesToLoadedHistory","SESSION_HISTORY","MessageLoadingManager","start","onExceededMaxSilentLoading","onEnd","onTimeout","msMaxSilentLoading","msMaxAttempt","hasExceededMaxSilentLoading","onSilentLoading","setTimeout","onMaxAttempt","end","clearTimeout","MS_BETWEEN_RETRIES","RetryType","MessageService","pendingLocale","localeIsExplicit","messageLoadingManager","queue","waiting","timeoutOverride","messageTimeoutSecs","timeoutMS","processSuccess","received","isProcessed","isWelcomeNode","setMessageErrorState","NONE","message_type","MessageInputType","EVENT","now","trackData","lastRequestTime","timeLastRequest","totalRequestTime","timeFirstRequest","sendMessagePromise","moveToNextQueueItem","addErrorMessage","errorMessage","createLocalMessageForInlineError","HYDRATE_RESEND","skipQueue","sendToAssistantAndUpdateErrorState","sendToAssistant","SILENT","VISIBLE","RETRYING","waitingMessage","WAITING","processError","pendingRequest","resultText","allowRetry","tryCount","isWelcome","msSinceStarted","isInAttemptWindow","numErrors","retryDelay","MESSAGE_COMMUNICATION","otherData","rejectFinalErrorOnMessage","doReject","customSendMessage","updateMessage","controller","AbortController","sendMessageController","signal","runQueueIfReady","clearCurrentQueueItem","getLastBotResponseWithContext","LOADING_INDICATOR_TIMER","messageLoadingIndicatorTimeoutSecs","addIsLoadingCounter","didExceedMaxLoading","cancelMessageRequestByID","PRE_SEND","updateLocalMessageItem","SEND","addToMessageQueue","newPendingMessage","errorState","messageToUpdate","announceMessageID","announceMessage","TEXT","logError","lastResponse","abort","safeFetchTextWithTimeout","NamespaceService","namespace","originalName","attributeSafe","suffix","computedName","computeNamespaceName","getSuffix","ServiceManager","innerStorage","storage","getItem","setItem","removeItem","IS_SESSION_STORAGE","window","sessionStorage","storage$1","UserSessionStorageService","prefix","loadChatSession","chatSessionString","getChatSessionKey","chatSession","parse","loadLauncherSession","launcherSessionString","getLauncherSessionKey","launcherSession","persistChatSession","session","persistLauncherSession","replaceCurrentArrayValue","currentValue","newValue","Array","isArray","agentReducers","HA_SET_IS_CONNECTING","action","activeLocalMessageID","HA_SET_IS_RECONNECTING","HA_SET_AGENT_AVAILABILITY","availability","HA_SET_SHOW_SCREEN_SHARE_REQUEST","showRequest","HA_SET_AGENT_JOINED","agentProfile","HA_SET_PERSISTED_STATE","serviceDeskState","HA_UPDATE_IS_SUSPENDED","HA_UPDATE_IS_TYPING","HA_SET_AGENT_LEFT_CHAT","HA_UPDATE_CAPABILITIES","newInputState","capabilities","HA_SET_IS_SCREEN_SHARING","isSharing","HA_UPDATE_FILE_UPLOAD_IN_PROGRESS","HA_END_CHAT","populateTourStepItems","tourMessageItem","find","steps","clearTourState","EXCLUDE_AGENT_UNREAD","AgentMessageType","USER_ENDED_CHAT","CHAT_WAS_ENDED","RELOAD_WARNING","reducers","CHANGE_STATE","partialState","HYDRATE_CHAT","iFramePanelState","viewSourcePanelState","customPanelState","HYDRATE_MESSAGE_HISTORY","ADD_LOCAL_MESSAGE_ITEM","addAfterID","isSilent","currentIndex","existingID","newLocalMessageIDs","insertAtIndex","afterIDIndex","isBotMessage","agent_message_type","isMainWindowOpen","isBrowserPageVisible","REMOVE_MESSAGES","idsSet","newAllMessages","newAllMessageItems","newMessageIDs","newMessageItemsIDs","UPDATE_LOCAL_MESSAGE_ITEM","UPDATE_MESSAGE","ADD_MESSAGE","itemIDsInNewMessage","newAllMessageItemsByID","existingItemIDs","firstFoundIndex","isItemInMessage","itemIDsToInsert","MESSAGE_SET_OPTION_SELECTED","newMessagesByID","sentMessage","ADD_IS_TYPING_COUNTER","Math","max","addToIsTyping","ADD_IS_LOADING_COUNTER","addToIsLoading","ADD_IS_HYDRATING_COUNTER","addToIsHydrating","SET_APP_STATE_VALUE","UPDATE_PERSISTED_CHAT_STATE","UPDATE_HAS_SENT_NON_WELCOME_MESSAGE","SET_VIEW_STATE","previousState","handleViewStateChange","SET_VIEW_CHANGING","SET_INITIAL_VIEW_CHANGE_COMPLETE","initialViewChangeComplete","changeComplete","UPDATE_BOT_NAME","botName","headerDisplayName","UPDATE_BOT_AVATAR_URL","botAvatarURL","UPDATE_LAUNCHER_AVATAR_URL","avatar_url_override","UPDATE_MAIN_HEADER_TITLE","UPDATE_CSS_VARIABLES","variables","cssVariableOverrides","UPDATE_HOME_SCREEN_CONFIG","newHomeScreenConfig","mergeWith","SET_MESSAGE_UI_PROPERTY","SET_MESSAGE_HISTORY_PROPERTY","MERGE_HISTORY","ANNOUNCE_MESSAGE","ACCEPTED_DISCLAIMER","location","hostname","SET_HOME_SCREEN_IS_OPEN","TOGGLE_HOME_SCREEN","UPDATE_LAUNCHER_CONFIG","SET_LAUNCHER_PROPERTY","SET_LAUNCHER_CONFIG_PROPERTY","launcherType","LauncherType","DESKTOP","MOBILE","SET_CHAT_MESSAGES_PROPERTY","SET_LAUNCHER_MINIMIZED","OPEN_IFRAME_CONTENT","CLOSE_IFRAME_PANEL","SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN","relatedSearchResult","SET_CUSTOM_PANEL_OPEN","SET_CUSTOM_PANEL_OPTIONS","SET_TOUR_DATA","newActiveTourMessageID","CLEAR_TOUR_DATA","CHANGE_STEP_IN_TOUR","min","newStepNumber","UPDATE_INPUT_STATE","applyInputState","getInputState","isInputToAgent","SET_IS_BROWSER_PAGE_VISIBLE","ADD_INPUT_FILE","file","currentInputState","REMOVE_INPUT_FILE","fileID","newUploads","REMOVE_LOCAL_MESSAGE_ITEM","ADD_NOTIFICATION","notificationID","notifications","concat","REMOVE_NOTIFICATIONS","REMOVE_ALL_NOTIFICATIONS","CLEAR_INPUT_FILES","FILE_UPLOAD_INPUT_ERROR","currentInputSate","isError","status","ADD_NESTED_MESSAGES","localMessageItems","SET_RESPONSE_PANEL_IS_OPEN","SET_RESPONSE_PANEL_CONTENT","STREAMING_START","STREAMING_MERGE_HISTORY","existingMessage","newMessage","STREAMING_ADD_CHUNK","chunkItem","localItemID","existingLocalMessageItem","newItem","needsAnnouncement","streamingState","chunks","isDone","isIntermediateStreaming","response_type","UPDATE_CHAT_HEADER_CONFIG","chatHeaderConfig","chatHeaderState","UPDATE_MAX_VISIBLE_HEADER_OBJECTS","maxTotal","maxVisibleHeaderObjects","SET_STOP_STREAMING_BUTTON_VISIBLE","SET_STOP_STREAMING_BUTTON_DISABLED","SET_STREAM_ID","UPDATE_MAIN_HEADER_AVATAR","headerAvatarConfig","assign","getThemeCornersType","getLayoutState","IS_PHONE","themeConfig","SQUARE","layout","reducerFunction","DEFAULT_PUBLIC_CONFIG","openChatByDefault","showLauncher","shouldTakeFocusIfOpensAutomatically","dayjs","LocalizedFormat","Chat","publicConfigProvided","customHostElement","additionalChatParametersProvided","debug","consoleDebug","appConfig","startInternal","doesHaveServiceDesk","getBotName","initialState","chatWidthBreakpoint","chatWidth","chatHeight","enLanguagePack","originalConfig","suspendScrollDetection","isDestroyed","targetViewState","customMenuOptions","showNonHeaderBackgroundCover","sessionStorageLauncherState","enhancer","__REDUX_DEVTOOLS_EXTENSION__","instanceId","createStore","doCreateStore","subscribe","previousPersistedToBrowserStorage","copyToSessionStorage","disableWindowTitleChanges","originalTitle","changeTitleTimer","agent_newMessage","createHandleWindowTitle","customPanelManager","serviceManger","panels","getPanel","createCustomPanelManager","WriteableElementName","AI_TOOLTIP_AFTER_DESCRIPTION_ELEMENT","WELCOME_NODE_BEFORE_ELEMENT","HEADER_BOTTOM_ELEMENT","BEFORE_INPUT_ELEMENT","HOME_SCREEN_HEADER_BOTTOM_ELEMENT","HOME_SCREEN_AFTER_STARTERS_ELEMENT","HOME_SCREEN_BEFORE_INPUT_ELEMENT","CUSTOM_PANEL_ELEMENT","setEnableDebugLog","debugStackTraces","setEnableDebugStackTracesLog","createServiceManager","localePack","render","createHumanAgentService","all","loadLanguagePack","loadLocale","resolve","loadHAA","reallyRenderAndReturnInstance","OPEN_BY_DEFAULT","WEB_CHAT_LOADED","setInitialViewChangeComplete","callRender","wasRendered","newPack","updateLocale","newLocale","localePromise","languagePackPromise","then","selectInputState","INSTANCE_SEND","destroy","container","remove","updateInputState","updateInputIsDisabled","updateBotUnreadIndicatorVisibility","setLauncherProperty","issueWithNewView","viewTypeValues","CALLED_CHANGE_VIEW","homeScreenConfigClone","scrollToMessage","animate","doScrollToMessage","customPanels","updateCustomMenuOptions","updateIsTypingCounter","direction","updateIsLoadingCounter","updateIsChatLoadingCounter","updateHeaderConfig","configCopy","updateChatHeaderConfig","updateMainHeaderAvatar","elements","getMainWindow","addClassName","removeClassName","getMessageInput","getHTMLElement","setValue","setEnableEnterKey","addChangeListener","removeChangeListener","getHomeScreenInput","tours","CALLED_END_TOUR","goToNextStep","goToStep","addMessageChunk","clearConversation","requestFocus","appWindow","endConversation","updateIsSuspended","createChatInstance","renderAndReturnInstance","promise","renderPromise","AriaAnnouncerProvider","props","useIntl","useServiceManager","announcerRef","announcerFunction","useCallback","announceValue","previousAnnounceMessageRef","useEffect","currentAnnounceMessage","React","AriaAnnouncerContext","Provider","children","AriaAnnouncerComponent","getLauncherButtonAriaLabel","isLauncherHidden","launcher_isTourOpen","launcher_isTourClosed","launcher_isOpen","launcher_isClosed","Launcher","onToggleOpen","unreadAgentCount","className","tabIndex","launcherHidden","launcherAvatarURL","useSelector","buttonRef","useImperativeHandle","doFocusRef","ariaLabel","formatMessage","count","launcherAvatar","AiLaunch","size","ChatLaunch","src","alt","cx","Button","WACLauncher__TourButton","kind","ButtonKindEnum","PRIMARY","onClick","ArrowUpLeft","LauncherExport","forwardRef","LauncherComplex","launcherComplexRef","launcherRef","onOpen","onMinimize","launcher_desktopGreeting","launcher_closeButton","launcher_ariaIsExpanded","disabled","WACLauncherComplex__Text","Tag","Close","LauncherDesktopContainer","onDoToggle","useLanguagePack","browserLauncherState","isExpandedLauncherEnabled","smallLauncherClassName","setSmallLauncherClassName","useState","complexLauncherClassName","setComplexLauncherClassName","launcherHiddenRef","animateOnceVisible","bounceTurnRef","animationStartTimerRef","animationFinishedTimerRef","firstBounceAnimationStartTimerRef","firstBounceAnimationFinishedTimerRef","secondBounceAnimationStartTimerRef","secondBounceAnimationFinishedTimerRef","determineLauncherHeight","expandedLauncherHeight","offsetHeight","style","setProperty","startExpandLauncher","setExpandAnimationTimers","clearExpandAnimationTimers","startBounceAnimation","finishBounceAnimation","setBounceAnimationTimers","clearBounceAnimationTimers","setDefaultLauncherState","setLauncherMinimized","useOnMount","setLauncherConfigProperty","prevLauncherTitle","usePrevious","animateWithClass","endAnimationNameOrDelay","endAnimationCallback","classList","animationName","removeEventListener","addEventListener","LauncherExtended","isExtended","playExtendAnimation","onSwipeRight","onReduceEnd","ariaAnnouncer","useAriaAnnouncer","animateExtendedState","setAnimateExtendedState","showGreetingMessage","setShowGreetingMessage","prevIsExtended","extendedContainerRef","greetingMessageRef","textHolderRef","touchStartRef","touchStartX","touchStartY","shouldReduceExtendedLauncher","extendWithAnimation","extendWithoutAnimation","launcherGreetingMessage","launcher_mobileGreeting","launcherContainerElement","textHolderEl","greetingMessageEl","extendedContainerEl","maxTextHolderWidth","launcherPosition","IS_MOBILE","width","height","screen","extendedWidth","getMaxLauncherExtendedWidth","clientWidth","querySelector","launcherExtendedWidth","removeAttribute","calculateAndSetMaxExtendedLauncherWidth","doFadeAnimationForElements","fadeInElement","fadeInTime","buttonEl","handleTouchMove","touchList","touchStartCoordinates","callback","clientX","touchEndX","clientY","touchEndY","differenceX","differenceY","abs","checkIfUserSwipedRight","touches","handleTouchStart","touchStart","reduceAnimationEndListener","fadeOutElement","GHOST","LauncherExtendedExport","LauncherMobileContainer","wasReduced","disableBounce","isStartingBounceAnimation","setIsStartingBounceAnimation","prevWasReduced","initialBounceTurn","previouslyPlayedExtendAnimation","extendLauncherTimeoutIDRef","reduceLauncherTimeoutIDRef","endBounceAnimationRef","shouldBounceRef","isExtending","disableIntroAnimation","setLauncherStateAsReduced","reduceLauncher","extendLauncherTimeoutID","reduceLauncherTimeoutID","clearTimeouts","setExpandAnimationTimeout","endBounceAnimation","startRecurringBounceAnimation","turnCounter","animation","timeouts","startingIndex","beforeAll","afterAll","beforeEach","afterEach","terminate","timeoutID","playAnimation","isComplete","setAnimationListener","replayAnimation","setAnimationTimeouts","handleToggleOpen","handleSwipeRight","LauncherContainer","LAUNCHER_CLICKED","launcherContainer","effect","deps","hasRunRef","useEffectDidUpdate","HydrationPanel","onClose","useHomeScreenVersion","isHidden","useContext","HideComponentContext","header","HomeScreenHeaderExport","BotHeaderExport","onToggleHomeScreen","includeWriteableElement","MountChildrenOnDelay","delay","AnnounceOnMountComponentExport","announceOnce","window_ariaWindowLoading","Loading","active","overlay","assistiveText","CustomPanel","onPanelOpenEnd","onPanelCloseEnd","onPanelOpenStart","onPanelCloseStart","onCloseAndRestart","onClickRestart","disableDefaultCloseAction","onClickBack","onClickClose","onClickCloseAndRestart","prevIsOpen","openAnimation","AnimationInType","SLIDE_IN_FROM_BOTTOM","closeAnimation","AnimationOutType","SLIDE_OUT_TO_BOTTOM","onClickBackLocal","onClickCloseLocal","checkAllowClose","onCloseAndRestartLocal","OverlayPanel","onOpenStart","CUSTOM_PANEL_PRE_OPEN","onOpenEnd","CUSTOM_PANEL_OPEN","onCloseStart","CUSTOM_PANEL_PRE_CLOSE","onCloseEnd","CUSTOM_PANEL_CLOSE","animationOnOpen","animationOnClose","shouldOpen","overlayPanelName","OverlayPanelName","CUSTOM","BasePanelComponentExport","eventName","eventDescription","labelBackButton","general_returnToAssistant","hideCloseButton","hideCloseAndRestartButton","WriteableElement","CustomPanelExport","lazyChat","CatastrophicError","lazyCatastrophicError","Disclaimer","lazyDisclaimer","HomeScreenContainer","lazyHomeScreenContainer","IFramePanel","lazyIFramePanel","ViewSourcePanel","lazyViewSourcePanel","BodyAndFooterPanelComponent","lazyBodyAndFooterPanelComponent","WIDTH_BREAKPOINT_STANDARD","WIDTH_BREAKPOINT_NARROW","WIDTH_BREAKPOINT_WIDE","MainWindow","Component","super","arguments","closing","modalPortalHostElement","numPanelsOpen","numPanelsAnimating","numPanelsCovering","isHydrationAnimationComplete","shouldAutoFocus","extraClassNames","areModulesLoaded","mainWindowRef","containerRef","botChatRef","homeScreenInputRef","disclaimerRef","brandingRef","animationContainerRef","iframePanelRef","viewSourcePanelRef","previousBodyVisibility","previousBodyPosition","onResize","appChatWidthBreakpoint","offsetWidth","ChatWidthBreakpoint","WIDE","STANDARD","NARROW","onVisualViewportResize","updateFromVisualViewport","visualViewport","offsetTop","offsetLeft","IS_IOS","getIPhoneHeightOffset","setModalPortalHostElement","setState","onSendInput","selectIsInputToAgent","sendMessageToAgent","clearInputFiles","onSendHomeButtonInput","createMessageRequestForChoice","HOME_SCREEN_STARTER","removeChatFromDom","onRestart","doClose","toggleHomeScreen","getShowDisclaimer","getShowHomeScreen","takeFocus","requestInputFocus","onUserTyping","userTyping","onAcceptDisclaimer","acceptDisclaimer","coverBackground","prevState","onHydrationPanelClose","componentDidMount","mainWindowObserver","ResizeObserver","observe","disableCustomElementMobileEnhancements","updateBody","SCROLLBAR_WIDTH","loadPanels","componentWillUnmount","unobserve","componentDidUpdate","oldProps","oldState","newProps","useCustomHostElement","prevViewState","requestAnimationFrame","newLastItemID","lastMessageItem","componentDidCatch","errorInfo","createDidCatchErrorData","preload","unmounting","getPropertyValue","fromCloseAndRestart","MAIN_WINDOW_CLOSED_AND_RESTARTED","DEFAULT_MINIMIZE","disclaimer","addClassNameToState","removeClassNameFromState","renderChat","showCovering","renderCustomPanel","renderHydrationPanel","renderDisclaimerPanel","renderResponsePanel","renderHomeScreenPanel","renderIFramePanel","renderViewSourcePanel","renderBotChat","headerAvatar","agentDisplayState","selectAgentDisplayState","showDisclaimer","hideBotContainer","HideComponent","hidden","Suspense","fallback","messageState","MESSAGE_INPUT","renderInnerHydrationPanel","shouldHide","HYDRATING","renderCatastrophicPanel","CATASTROPHIC","showHeader","FADE_IN","FADE_OUT","DISCLAIMER","disclaimerHTML","disclaimerAcceptButtonRef","showHomeScreen","onSendBotInput","HOME_SCREEN_INPUT","onSendButtonInput","IFRAME","CONVERSATIONAL_SEARCH_CITATION","panelOptions","panel","PANEL_RESPONSE","showAnimations","show_animations","renderWidget","localeClassName","showGlass","enableFocusTrap","headerConfig","hideMinimizeButton","trapActive","isWideWidth","FocusTrap","VisuallyHidden","window_title","onScroll","scrollTop","ModalPortalRootContext","MainWindow$1","connect","TourContainerLazy","lazyTourComponent","App","hostElement","applicationStyles","fontStyles","combinedStyles","AppContainer","useDispatch","windowSize","setWindowSize","innerWidth","innerHeight","cssVariableOverrideString","useMemo","cssVariables","cssVariablesString","allValues","map","replace","convertCSSVariablesToString","dir","windowListener","visibilityListener","setIsBrowserPageVisible","visibilityState","node","nonce","cspNonce","IS_PHONE_IN_PORTRAIT_MODE","WindowSizeContext","ServiceManagerContext","RawIntlProvider","LanguagePackContext","MainContainer","tourContainerRef","showTour","showedTourOnce","languageKey","regionLabel","role","UserDefinedResponsePortalsContainer","chatInstance","renderUserDefinedResponse","userDefinedResponseEventsBySlot","slotState","UserDefinedResponseComponentPortal","ReactDOM","UserDefinedResponsePortalsContainerExport","WriteableElementsPortalsContainer","renderResponseMap","responseItem","WriteableElementsComponentPortal","WriteableElementsPortalsContainerExport","onBeforeRender","onAfterRender","renderWriteableElements","setParentInstance","setInstance","renderProps","setRenderProps","setApplicationStyles","setInstances","setUserDefinedResponseEventsBySlot","managedWebChatRef","previousConfigRef","previousConfig","managedWebChat","shouldDestroy","destroyWebChat","widget","pagePublicConfig","chatConstructorPromise","protocol","compatMode","instantiateWidget","webChatInstance","log","userDefinedEventsBySlot","itemChunk","partialItems","addUserDefinedResponseHandler","loadChat","carbonStyles","loadBaseStyles","loadCarbon","loadStyles","AppContainerExport","default","carbon","createComponent","tagName","elementClass","CarbonLoadingElement","react","CSS_CLASS_PREFIX","WEB_COMPONENT_PREFIX","array","callbackFunction","predicate","startAt","lastIndex","findLastIndex","findLastWithMap","LOCAL_MESSAGE","createMessageResponseForItem","createLocalMessageForItem","fromHistory","allowFooter","isGridResponseType","rows","cells","cellLocalMessageItemIDs","createLocalMessageItemsForNestedType","nestedMessageItem","isSupportedMessageItemInBody","isCarouselResponseType","bodyItems","isShowPanelButtonType","footerItems","footer","rootMessageItem","isButtonResponseType","isSupportedMessageItemInFooter","nestedMessageItemIDs","isSupported","nestedLocalMessageItem","CARD","isCardResponseType","isItemSupportedInResponseBody","CAROUSEL","BUTTON","button_type","ButtonItemType","SHOW_PANEL","GRID","BasePanelComponent","headerProps","showRestartButton","headerRef","focusTrapOptions","clickOutsideDeactivates","returnFocusOnDeactivate","preventScroll","HeaderExport","showBackButton","displayName","showCenter","changeState","updatePersistedChatState","mergeMessageHistory","setMessageWasAnnounced","setChatMessagesStateProperty","closeIFramePanel","setIFrameContent","setViewSourcePanelIsOpen","addInputFile","removeFileUpload","removeLocalMessageItem","fileUploadInputError","setMaxVisibleHeaderObjects","setStreamID","withAriaAnnouncer","Wrapped","enableDebugLog","enableDebugStackTracesLog","args","response","resolveOrTimeout","component","isCatastrophicError","RENDER","getResponsiveElementPaddingValue","baseHeight","isValidForUpload","upload","EDIT","PureComponent","isClosing","isOpening","openPanelTimeout","closePanelTimeout","openPanel","animationDurationOpen","durationInMS","conditionalSetTimeout","closePanel","animationDurationClose","prevProps","ai_slug_title","ai_slug_description","components_overflow_ariaLabel","components_swiper_currentLabel","errors_communicating","errors_imageSource","errors_videoSource","errors_audioSource","errors_iframeSource","errors_ariaMessageRetrying","errors_ariaMessageFailed","errors_noAgentsAvailable","errors_noAgentsJoined","errors_connectingToAgent","errors_busy","errors_agentAppSessionExpired","errors_generalContent","errors_somethingWrong","input_ariaLabel","input_placeholder","input_buttonLabel","input_uploadButtonLabel","window_ariaTourRegion","window_ariaTourRegionNamespace","window_ariaChatRegion","window_ariaChatRegionNamespace","window_ariaWindowOpened","window_ariaWindowClosed","messages_youSaid","messages_botSaid","messages_agentSaid","messages_searchResults","messages_searchResultsLink","messages_searchResultsOpenDocument","messages_searchResultsOpenDocumentWithLabel","messages_searchResultsExpand","messages_searchResultsCollapse","messages_botIsLoading","messages_botIsTyping","messages_agentIsTyping","messages_scrollHandle","messages_scrollHandleDetailed","messages_scrollHandleEnd","messages_scrollHandleEndDetailed","message_labelBot","message_labelYou","notifications_toastClose","buttons_restart","buttons_cancel","buttons_retry","options_select","options_ariaOptionsDisabled","header_previewLinkTitle","header_ariaCloseRestart","header_ariaBotAvatar","header_overflowMenu_options","homeScreen_returnToAssistant","homeScreen_returnToHome","homeScreen_overflowMenuHomeScreen","homeScreen_ariaQuickStartListButton","homeScreen_ariaQuickStartListOpened","homeScreen_ariaQuickStartListClosed","default_agent_availableMessage","default_agent_unavailableMessage","agent_reason_error","agent_sdMissingWarning","agent_noName","agent_chatTitle","agent_startChat","agent_connecting","agent_agentNoNameTitle","agent_agentJoinedName","agent_agentJoinedNoName","agent_youConnectedWarning","agent_connectingMinutes","agent_connectingQueue","agent_ariaAgentAvatar","agent_ariaGenericAvatar","agent_ariaGenericBotAvatar","agent_youEndedChat","agent_conversationWasEnded","agent_disconnected","agent_reconnected","agent_agentLeftChat","agent_agentLeftChatNoName","agent_agentEndedChat","agent_agentEndedChatNoName","agent_transferring","agent_transferringNoName","agent_endChat","agent_confirmSuspendedEndChatTitle","agent_confirmSuspendedEndChatMessage","agent_confirmCancelRequestTitle","agent_confirmCancelRequestMessage","agent_confirmCancelRequestNo","agent_confirmCancelRequestYes","agent_confirmEndChat","agent_confirmEndChatNo","agent_confirmEndChatYes","agent_confirmEndSuspendedYes","agent_botReturned","agent_cardButtonChatRequested","agent_cardButtonConnected","agent_cardButtonChatEnded","agent_cardMessageChatEnded","agent_cardMessageConnected","agent_connectButtonCancel","agent_connectedButtonEndChat","agent_connectWaiting","agent_defaultMessageToAgent","agent_inputPlaceholderConnecting","agent_inputPlaceholderReconnecting","agent_sharingStopSharingButton","agent_sharingRequestTitle","agent_sharingRequestMessage","agent_sharingAcceptButton","agent_sharingDeclineButton","agent_sharingRequested","agent_sharingAccepted","agent_sharingDeclined","agent_sharingCancelled","agent_sharingEnded","agent_suspendedWarning","icon_ariaUnreadMessages","showMore","showMoreResults","disclaimer_title","disclaimer_accept","general_ariaCloseInformationOverlay","general_ariaAnnounceOpenedInformationOverlay","general_ariaAnnounceClosedInformationOverlay","general_ariaAnnounceEscapeOverlay","conversationalSearch_streamingIncomplete","conversationalSearch_viewSourceDocument","conversationalSearch_citationsLabel","conversationalSearch_toggleCitations","conversationalSearch_responseStopped","launcher_chatNow","iframe_ariaSourceLoaded","iframe_ariaImageAltText","iframe_ariaClosePanel","iframe_ariaOpenedPanel","iframe_ariaClosedPanel","iframe_ariaClickPreviewCard","closeAndRestartModal_title","closeAndRestartModal_message","closeAndRestartModal_confirm","closeAndRestartModal_cancel","datePicker_chooseDate","datePicker_confirmDate","tour_resumeButton","tour_restartButton","tour_startButton","tour_doneButton","tour_ariaMinimizeButton","tour_ariaCloseButton","tour_ariaChatButton","tour_ariaPreviousButton","tour_ariaNextButton","tour_instructions","tour_errorFetchingStep","tour_errorTitle","tour_errorBody","fileSharing_fileTooLarge","fileSharing_ariaAnnounceSuccess","fileSharing_fileIcon","fileSharing_removeButtonTitle","fileSharing_statusUploading","fileSharing_uploadFailed","fileSharing_agentMessageText","fileSharing_request","carousel_prevNavButton","carousel_nextNavButton","input_completionsTagApp","input_completionsTagAssistant","table_filterPlaceholder","table_previousPage","table_nextPage","table_itemsPerPage","table_paginationSupplementalText","table_paginationStatus","feedback_positiveLabel","feedback_negativeLabel","feedback_defaultTitle","feedback_defaultPrompt","feedback_defaultPlaceholder","feedback_submitLabel","feedback_cancelLabel","input_stopResponse","messages_responseStopped","chainOfThought_stepTitle","chainOfThought_inputLabel","chainOfThought_outputLabel","chainOfThought_toolLabel","chainOfThought_statusSucceededLabel","chainOfThought_statusFailedLabel","chainOfThought_statusProcessingLabel","chainOfThought_explainabilityLabel","showChildren","onComponentDidMount","defaultProps","resolveFunction","rejectFunction","reject","resolveValue","isResolved","rejectValue","isRejected","createService","lazyWithPreload","factory","mod","lazyMediaPlayer","lazyCarousel","browser","detect","IS_IPAD","test","navigator","platform","maxTouchPoints","os","IOS_HEIGHT_MAP","screenHeight","offset","memoizeOne","isAvailable","getURLHostName","URL","operation","timeout","ChatHeaderObjectType","ChatHeaderAvatarElement","LitElement","isLoaded","_handleOnError","css","unsafeCSS","__decorate","property","String","prototype","bind","CHAT_HEADER_AVATAR_TAG_NAME","CDSChatHeaderAvatarElement","classElement","html","chatHeaderAvatarTemplate","carbonElement","ChatHeaderAvatar","ChatHeaderLinkElement","isNewTab","customElementClass","chatHeaderLinkTemplate","ChatHeaderLink","ChatHeaderMenu","menuAlignment","Menu","mode","legacyAutoalign","ChatHeaderMenuButton","setIsOpen","refs","menuRefs","context","menuContext","useFloating","onOpenChange","getReferenceProps","getMenuReferenceProps","getFloatingProps","getMenuFloatingProps","useInteractions","useClick","useDismiss","setReference","ButtonSizeEnum","MEDIUM","renderIcon","ChevronUp","ChevronDown","onMouseDown","preventDefault","floating","setFloating","ChatHeaderMenuItem","MenuItem","ChatHeaderMenuItemRadioGroup","defaultSelectedItem","selectedItem","onChange","MenuItemRadioGroup","itemToString","menuItem","ChatHeaderOverflowMenu","tooltipPosition","iconDescription","hasIconOnly","ChatHeaderTitleElement","chatHeaderTitleTemplate","ChatHeaderTitle","AISlug","CDSAILabel","Header","backContent","overflowItems","overflowClicked","backButtonType","brandColor","enableChatHeaderConfig","backButtonRef","restartButtonRef","closeAndRestartButtonRef","closeButtonRef","centerObjectsRef","centerGapRef","overflowRef","overflowIsOpen","setOverflowIsOpen","confirmModelOpen","setConfirmModelOpen","selectedGroupMenuitems","setSelectedGroupMenuItems","isImageError","setIsImageError","hasHeaderAvatar","prevChatHeaderAvatarURL","chatHeaderTitle","headerTitle","chatHeaderDisplayName","closeConfirmModel","showCloseAndRestartButton","useHideCloseButton","closeIcon","closeReverseIcon","closeIsReversible","minimizeButtonIconType","MinimizeButtonIconType","CLOSE","CloseLarge","MINIMIZE","SubtractLarge","SIDE_PANEL_LEFT","SidePanelClose","SIDE_PANEL_RIGHT","onConfirm","getComponentInMenu","list","LINK","RADIO_GROUP","nextObject","Fragment","MenuItemDivider","MENU","getComponentInChatHeader","headerObject","leftObjectsLength","rightObjectsLength","left","right","isLeftObjectsInOverflow","isRightObjectsInOverflow","renderChatHeaderObjectsInOverflow","hasOverflow","isRTL","leftContent","leftChatHeaderComponents","rightChatHeaderComponents","leftChatHeaderMenuComponents","rightChatHeaderMenuComponents","HeaderButton","buttonKind","DownToBottom","centerResizeObserver","centerGapElement","newTotal","floor","disconnect","AI_LABEL_SIZE","EXTRA_SMALL","alignment","POPOVER_ALIGNMENT","BOTTOM_LEFT","BOTTOM_RIGHT","Restart","WACReverseIcon","isReversible","ConfirmModal","onCancel","cancelButtonLabel","confirmButtonLabel","modalAnnounceMessage","WACDirectionHasReversibleSVG","ANNOUNCE_INPUT_TYPES","ANNOUNCE_NODE_EXCLUDE_ATTRIBUTE","ref1","ref2","useRef1","doAnnouncements","strings","pendingValues","elementToAnnounce","nodeToText","useElement","innerText","innerHTML","nodeType","hasNodeType","formattedMessage","messageValues","messageText","isElement","getComputedStyle","display","getAttribute","hasAttribute","trimAndPush","isInputNode","placeholder","isTextAreaNode","isImageNode","shadowRoot","childNodes","childNode","isTextNode","replaceAll","RIGHT_TO_LEFT_MARK","fromCharCode","ENGLISH_US_DATE_FORMAT","RESPONSE_TYPE_TIMEOUT_MS","THROW_ERROR","BrandColorKind","AUTO_SCROLL_EXTRA","LIGHT_THEMES","isJest","process","env","JEST_WORKER_ID","AUTO_SCROLL_THROTTLE_TIMEOUT","HomeScreenHeader","option","locales","ar","ar-dz","ar-kw","ar-ly","ar-ma","ar-sa","ar-tn","cs","de","de-at","de-ch","en","en-au","en-ca","en-gb","en-ie","en-il","en-nz","es","es-do","es-us","nl","fr","fr-ca","fr-ch","it","it-ch","ja","ko","pt","pt-br","zh","zh-cn","zh-tw","zh-mo","zh-hk","requestedLocale","localeKey","requestedSupported","language","isSupportedLocale","keyList","findSupportedKey","localeModule","enLocaleData","providedLanguagePack","handleBTag","handleBRTag","addHTMLSupport","b","br","loadDayjsLocale","previousLocale","createEnglishFormat","IntlMessageFormat","htmlAttributes","WAC__hidden","_type","v4","AriaLiveMessage","AriaLiveMessageExport","outer","visibility","overflow","appendChild","inner","scrollbarWidth","parentNode","removeChild","doScrollElementIntoView","boundary","compute","scrollMode","block","inline","el","top","doScrollElement","scrollLeft","scroll","behavior","doFocus","activeElement","tabbable","getShadowRoot","focus","defer","focusOnFirstFocusableItemInArrayOfElements","focusOnFirstFocusableElement","parentElement","focusableElements","isEnterKey","shiftKey","altKey","metaKey","ctrlKey","hasModifiers","isComposing","keyCode","getScrollBottom","scrollHeight","DATE","isTextItem","PAUSE","typing","OPTION","some","choice","relatedResponseID","createMessageRequestForButtonItemOption","buttonItem","createMessageRequestForFileUpload","InternalMessageRequestType","FILE","FROM_USER","createMessageRequestForDate","inputString","userString","threadID","responseType","textItem","CONNECT_TO_AGENT","hasBodyOrFooter","IMAGE","VIDEO","AUDIO","CONVERSATIONAL_SEARCH","TABLE","renderAsTour","user_defined_type","serviceDeskFactory","USER_DEFINED","isSingleItemCarousel","getOptionType","preference","totalOptions","getMediaDimensions","dimensions","hasLiveAgentMessage","AnnounceOnMountComponent","isMounted","onceAnnounced","WriteableElement$1","ModalPortal","attachedToHost","modalElement","attachIfNeeded","contextType","onYesClick","onNoClick","onKeyDown","getBotInputState","getAgentInputState","getAgentState","getPersistedAgent","persisted","isConnectingOrConnected","disableInput","inputPlaceholderKey","milliseconds","duration","race","BotHeader","homeScreenIsOn","shallowEqual","hasChatHeaderObjects","allowHomeScreen","Home","getOwnPropertyNames","prop","hasOwnProperty","call","isFrozen","setIsConnecting","setIsReconnecting","setAgentLeftChat","setAgentAvailability","setAgentJoined","updateCapabilities","updateFilesUploadInProgress","setShowScreenShareRequest","setIsScreenSharing","setPersistedServiceDeskState","agentUpdateIsTyping"],"sourceRoot":""}