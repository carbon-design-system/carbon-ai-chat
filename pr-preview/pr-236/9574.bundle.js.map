{"version":3,"file":"9574.bundle.js","mappings":"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","sources":["webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/ErrorMessageDark.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/ErrorMessageLight.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/CatastrophicError.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/inlineLoadingElement/cds-aichat-inline-loading.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/inlineLoadingElement/src/styles.scss.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/inlineLoading/InlineLoadingComponent.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/@carbon/icons-react/es/ScreenOff.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/@carbon/icons-react/es/UserAvatar.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/agent/AgentAvatar.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/agent/AgentBanner.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/agent/AgentBannerContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/LatestWelcomeNodes.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/notifications/Notifications.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/@carbon/icons-react/es/ChatBot.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/@carbon/icons-react/es/CheckmarkFilled.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/Avatar.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/IconHolder.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/ImageWithFallback.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/containers/MessageComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/timeUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/containers/MessagesComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hocs/withServiceManager.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/memoizerUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/modals/RequestScreenShareModal.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/Chat.js"],"sourcesContent":["import React from 'react';\nimport { uuid } from '../utils/lang/uuid.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component renders an error message svg to indicate an error has occurred.\n */\nfunction ErrorMessageDark() {\n    const linearGradientID = uuid();\n    return (React.createElement(\"svg\", { viewBox: \"0 0 80 80\" },\n        React.createElement(\"defs\", null,\n            React.createElement(\"linearGradient\", { id: `${linearGradientID}-1`, x1: \"38.91\", y1: \"4.92\", x2: \"38.91\", y2: \"73.85\", gradientTransform: \"matrix(1, 0, 0, -1, 0, 82)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \"0\", stopColor: \"#262626\" }),\n                React.createElement(\"stop\", { offset: \"1\", stopColor: \"#393939\" })),\n            React.createElement(\"linearGradient\", { id: `${linearGradientID}-2`, x1: \"12.44\", y1: \"71.21\", x2: \"76.34\", y2: \"34.31\", gradientTransform: \"matrix(1, 0, 0, -1, 0, 82)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \"0\", stopColor: \"#525252\" }),\n                React.createElement(\"stop\", { offset: \"0.52\", stopColor: \"#393939\" }),\n                React.createElement(\"stop\", { offset: \"0.61\", stopColor: \"#393939\" }),\n                React.createElement(\"stop\", { offset: \"0.99\", stopColor: \"#161616\" })),\n            React.createElement(\"linearGradient\", { id: `${linearGradientID}-3`, x1: \"39.38\", y1: \"50.63\", x2: \"52.04\", y2: \"72.55\", gradientTransform: \"matrix(1, 0, 0, -1, 0, 82)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \"0.11\", stopColor: \"#6f6f6f\", stopOpacity: \"0\" }),\n                React.createElement(\"stop\", { offset: \"0.94\", stopColor: \"#6f6f6f\" }))),\n        React.createElement(\"rect\", { width: \"80\", height: \"80\", fill: \"none\" }),\n        React.createElement(\"polygon\", { points: \"59.91 78.34 16.91 53.51 21.77 50.7 64.77 75.53 59.91 78.34\", opacity: \"0.25\", className: \"error_message_isolate\" }),\n        React.createElement(\"path\", { d: \"M39,6.92c12.15,7,22,24,21.92,38S51,64.49,38.83,57.48s-22-24-21.92-38S26.83-.09,39,6.92Z\", fill: `url(#${linearGradientID}-1)` }),\n        React.createElement(\"path\", { d: \"M42.85,4.68C36.74,1.15,31.2.82,27.2,3.15L23.54,5.28C27.52,3.08,33,3.45,39,6.92c12.15,7,22,24,21.92,38,0,6.77-2.35,11.58-6.13,13.94h-.07c-.32.2,3.66-2.1,3.66-2.1,4-2.3,6.39-7.18,6.41-14.12C64.81,28.7,55,11.69,42.85,4.68Z\", fill: `url(#${linearGradientID}-2)` }),\n        React.createElement(\"path\", { d: \"M29.11,3.91v.36a19.59,19.59,0,0,1,9.68,3c12,6.94,21.78,23.84,21.74,37.65,0,9.4-4.56,15.23-11.83,15.23a19.59,19.59,0,0,1-9.68-3C27,50.21,17.24,33.32,17.28,19.5c0-9.39,4.56-15.23,11.83-15.23V3.91m0,0c-7.21,0-12.17,5.71-12.2,15.59,0,14,9.77,31,21.92,38a20.18,20.18,0,0,0,9.87,3c7.21,0,12.17-5.71,12.2-15.6C60.9,31,51.13,14,39,6.9a19.94,19.94,0,0,0-9.87-3Z\", fill: `url(#${linearGradientID}-3)` }),\n        React.createElement(\"path\", { className: \"cls-6\", d: \"M38.93,49.79a6.83,6.83,0,0,1-2.66-2.51,6.19,6.19,0,0,1-.81-3v-1a2.26,2.26,0,0,1,.81-2c.54-.35,1.43-.17,2.66.54a6.67,6.67,0,0,1,2.61,2.5,6,6,0,0,1,.81,3v1a2.23,2.23,0,0,1-.81,2C41,50.66,40.13,50.49,38.93,49.79ZM37.77,38.16,36,22.77V13l5.81,3.36v9.73L40.17,39.55Z\", fill: \"#525252\" })));\n}\n\nexport { ErrorMessageDark };\n","import React from 'react';\nimport { uuid } from '../utils/lang/uuid.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component renders an error message svg to indicate an error has occurred.\n */\nfunction ErrorMessageLight() {\n    const linearGradientID = uuid();\n    return (React.createElement(\"svg\", { viewBox: \"0 0 80 80\" },\n        React.createElement(\"defs\", null,\n            React.createElement(\"linearGradient\", { id: `${linearGradientID}-1`, x1: \"29.96\", y1: \"36.32\", x2: \"53.15\", y2: \"-3.84\", gradientTransform: \"matrix(1, 0, 0, -1, 0, 82)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \"0\", stopColor: \"#525252\", stopOpacity: \"0.05\" }),\n                React.createElement(\"stop\", { offset: \"1\", stopOpacity: \"0.1\" })),\n            React.createElement(\"linearGradient\", { id: `${linearGradientID}-2`, x1: \"38.91\", y1: \"29.41\", x2: \"38.91\", y2: \"78.7\", gradientTransform: \"matrix(1, 0, 0, -1, 0, 82)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \"0\", stopColor: \"#c6c6c6\" }),\n                React.createElement(\"stop\", { offset: \"0.78\", stopColor: \"#e0e0e0\" })),\n            React.createElement(\"linearGradient\", { id: `${linearGradientID}-3`, x1: \"18.08\", y1: \"67.95\", x2: \"71.65\", y2: \"37.02\", gradientTransform: \"matrix(1, 0, 0, -1, 0, 82)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \"0\", stopColor: \"#e0e0e0\" }),\n                React.createElement(\"stop\", { offset: \"0.13\", stopColor: \"#f4f4f4\" }),\n                React.createElement(\"stop\", { offset: \"0.56\", stopColor: \"#e0e0e0\" }),\n                React.createElement(\"stop\", { offset: \"0.62\", stopColor: \"#d8d8d8\" }),\n                React.createElement(\"stop\", { offset: \"0.7\", stopColor: \"#c6c6c6\" }),\n                React.createElement(\"stop\", { offset: \"0.89\", stopColor: \"#a8a8a8\" }),\n                React.createElement(\"stop\", { offset: \"1\", stopColor: \"#8d8d8d\" })),\n            React.createElement(\"linearGradient\", { id: `${linearGradientID}-4`, x1: \"27.93\", y1: \"30.78\", x2: \"49.86\", y2: \"68.76\", gradientTransform: \"matrix(1, 0, 0, -1, 0, 82)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \"0.54\", stopColor: \"#d0d0d0\", stopOpacity: \"0\" }),\n                React.createElement(\"stop\", { offset: \"0.82\", stopColor: \"#f1f1f1\", stopOpacity: \"0.7\" }),\n                React.createElement(\"stop\", { offset: \"0.94\", stopColor: \"#fff\" })),\n            React.createElement(\"linearGradient\", { id: `${linearGradientID}-5`, x1: \"28.67\", y1: \"55.68\", x2: \"47.16\", y2: \"45.01\", gradientTransform: \"matrix(1, 0, 0, -1, 0, 82)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \"0\", stopColor: \"#fff\" }),\n                React.createElement(\"stop\", { offset: \"0.05\", stopColor: \"#fdfdfd\" }),\n                React.createElement(\"stop\", { offset: \"0.3\", stopColor: \"#f6f6f6\" }),\n                React.createElement(\"stop\", { offset: \"1\", stopColor: \"#f4f4f4\" }))),\n        React.createElement(\"rect\", { width: \"80\", height: \"80\", fill: \"none\" }),\n        React.createElement(\"polygon\", { points: \"59.91 78.34 16.91 53.51 21.77 50.7 64.77 75.53 59.91 78.34\", fill: `url(#${linearGradientID}-1)` }),\n        React.createElement(\"path\", { d: \"M39,6.92c12.15,7,22,24,21.92,38S51,64.49,38.83,57.48s-22-24-21.92-38S26.83-.09,39,6.92Z\", fill: `url(#${linearGradientID}-2)` }),\n        React.createElement(\"path\", { d: \"M42.85,4.68C36.74,1.15,31.2.82,27.2,3.15L23.54,5.28C27.52,3.08,33,3.45,39,6.92c12.15,7,22,24,21.92,38,0,6.77-2.35,11.58-6.13,13.94h-.07c-.32.2,3.66-2.1,3.66-2.1,4-2.3,6.39-7.18,6.41-14.12C64.81,28.7,55,11.69,42.85,4.68Z\", fill: `url(#${linearGradientID}-3)` }),\n        React.createElement(\"path\", { d: \"M29.11,3.91v.36a19.59,19.59,0,0,1,9.68,3c12,6.94,21.78,23.84,21.74,37.65,0,9.4-4.56,15.23-11.83,15.23a19.59,19.59,0,0,1-9.68-3C27,50.21,17.24,33.32,17.28,19.5c0-9.39,4.56-15.23,11.83-15.23V3.91m0,0c-7.21,0-12.17,5.71-12.2,15.59,0,14,9.77,31,21.92,38a20.18,20.18,0,0,0,9.87,3c7.21,0,12.17-5.71,12.2-15.6C60.9,31,51.13,14,39,6.9a19.94,19.94,0,0,0-9.87-3Z\", fill: `url(#${linearGradientID}-4)` }),\n        React.createElement(\"path\", { d: \"M38.93,49.79a6.83,6.83,0,0,1-2.66-2.51,6.19,6.19,0,0,1-.81-3v-1a2.26,2.26,0,0,1,.81-2c.54-.35,1.43-.17,2.66.54a6.67,6.67,0,0,1,2.61,2.5,6,6,0,0,1,.81,3v1a2.23,2.23,0,0,1-.81,2C41,50.66,40.13,50.49,38.93,49.79ZM37.77,38.16,36,22.77V13l5.81,3.36v9.73L40.17,39.55Z\", fill: `url(#${linearGradientID}-5)` })));\n}\n\nexport { ErrorMessageLight };\n","import Restart from '@carbon/icons-react/es/Restart.js';\nimport { unstable__ChatButton } from '@carbon/react';\nimport cx from 'classnames';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { ErrorMessageDark } from './ErrorMessageDark.js';\nimport { ErrorMessageLight } from './ErrorMessageLight.js';\nimport { BotHeader as BotHeaderExport } from './header/BotHeader.js';\nimport { RichText as RichTextExport } from './responseTypes/util/RichText.js';\nimport { ButtonSizeEnum, ButtonKindEnum } from '../../../types/utilities/carbonTypes.js';\nimport { CarbonTheme } from '../../../types/config/PublicConfig.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is rendered while the Carbon AI chat is hydrating.\n */\nfunction CatastrophicError({ serviceManager, onClose, languagePack, onRestart, showHeader, botName, headerDisplayName, }) {\n    const intl = useIntl();\n    const carbonTheme = useSelector((state) => state.theme.carbonTheme);\n    const isDarkTheme = carbonTheme === CarbonTheme.G90 || carbonTheme === CarbonTheme.G100;\n    const errorKey = \"errors_communicating\";\n    const errorBodyText = intl.formatMessage({ id: errorKey }, { botName });\n    return (React.createElement(\"div\", { className: \"WAC\" },\n        showHeader && (React.createElement(BotHeaderExport, { headerDisplayName: headerDisplayName, onClose: onClose, onToggleHomeScreen: null, includeWriteableElement: false })),\n        React.createElement(\"div\", { className: cx(\"WACCatastrophicError\", \"WACPanelContent\", {\n                \"WACCatastrophicError--withHeader\": showHeader,\n            }) },\n            React.createElement(\"div\", { className: \"WACCatastrophicError__ErrorTextContainer\" },\n                isDarkTheme && React.createElement(ErrorMessageDark, null),\n                !isDarkTheme && React.createElement(ErrorMessageLight, null),\n                React.createElement(\"div\", { className: \"WACCatastrophicError__ErrorHeading\" }, languagePack.errors_somethingWrong),\n                React.createElement(\"div\", { className: \"WACCatastrophicError__ErrorBody\" },\n                    React.createElement(RichTextExport, { text: errorBodyText })),\n                onRestart && (React.createElement(unstable__ChatButton, { className: \"WACCatastrophicError__RestartButton\", kind: ButtonKindEnum.TERTIARY, size: ButtonSizeEnum.SMALL, id: `WAC__error-reset${serviceManager.namespace.suffix}`, \"aria-label\": languagePack.buttons_restart, onClick: onRestart, renderIcon: Restart, type: \"button\" }, languagePack.buttons_retry))))));\n}\nconst CatastrophicErrorExport = React.memo(CatastrophicError);\n\nexport { CatastrophicErrorExport as CatastrophicError };\n","import { __decorate } from 'tslib';\nimport { LitElement, html, unsafeCSS, css } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { carbonElement } from '../../decorators/customElement.js';\nimport { WEB_COMPONENT_PREFIX } from '../../settings.js';\nimport css_248z from './src/styles.scss.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst INLINE_LOADING_TAG_NAME = `${WEB_COMPONENT_PREFIX}-inline-loading`;\nlet CDSInlineLoadingElement = class CDSInlineLoadingElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.bounce = false;\n        this.loop = false;\n        this.quickLoad = false;\n        this.carbonTheme = \"g10\";\n    }\n    getAnimationEffect() {\n        const classNames = [];\n        if (this.quickLoad === true) {\n            classNames.push(\"quick-load\");\n        }\n        if (this.bounce === true && this.loop === true) {\n            classNames.push(\"vertical\");\n        }\n        if (this.bounce === false && this.loop === true) {\n            classNames.push(\"linear\");\n        }\n        if (this.bounce === true && this.loop === false) {\n            classNames.push(\"vertical--no-loop\");\n        }\n        if (classNames.length) {\n            return classNames.join(\" \");\n        }\n        return \"linear--no-loop\";\n    }\n    render() {\n        return html `<div\n      data-carbon-theme=${this.carbonTheme}\n      class=${this.getAnimationEffect()}\n    >\n      <svg class=\"dots\" viewBox=\"0 0 32 32\">\n        <circle class=\"dot dot--left\" cx=\"8\" cy=\"16\" />\n        <circle class=\"dot dot--center\" cx=\"16\" cy=\"16\" r=\"2\" />\n        <circle class=\"dot dot--right\" cx=\"24\" cy=\"16\" r=\"2\" />\n      </svg>\n    </div>`;\n    }\n};\nCDSInlineLoadingElement.styles = css `\n    ${unsafeCSS(css_248z)}\n  `;\n__decorate([\n    property({ type: Boolean })\n], CDSInlineLoadingElement.prototype, \"bounce\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CDSInlineLoadingElement.prototype, \"loop\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CDSInlineLoadingElement.prototype, \"quickLoad\", void 0);\n__decorate([\n    property({ type: String })\n], CDSInlineLoadingElement.prototype, \"carbonTheme\", void 0);\nCDSInlineLoadingElement = __decorate([\n    carbonElement(INLINE_LOADING_TAG_NAME)\n], CDSInlineLoadingElement);\n\nexport { CDSInlineLoadingElement, INLINE_LOADING_TAG_NAME };\n","var css_248z = \".dots{\\n  block-size:32px;\\n  inline-size:32px;\\n}\\n\\n.dot{\\n  fill:none;\\n  r:0;\\n  stroke-width:0;\\n  transform:translateY(0);\\n}\\n\\n[data-carbon-theme=white] .dot,\\n[data-carbon-theme=g10] .dot{\\n  stroke:#001d6c;\\n}\\n\\n[data-carbon-theme=g90] .dot,\\n[data-carbon-theme=g100] .dot{\\n  stroke:#f4f4f4;\\n}\\n\\n@media screen and (prefers-reduced-motion: reduce){\\n  .linear .dot--left{\\n    animation:none;\\n    animation-delay:1s, 1s, 2s, 2s;\\n    animation-duration:1s;\\n    animation-fill-mode:forwards;\\n    animation-iteration-count:1, 1, infinite, infinite;\\n    transform-origin:25% 50%;\\n  }\\n}\\n.linear .dot--left{\\n  animation:linear-load-size, linear-load-stroke, linear-loop-size, linear-loop-stroke;\\n  animation-delay:1s, 1s, 2s, 2s;\\n  animation-duration:1s;\\n  animation-fill-mode:forwards;\\n  animation-iteration-count:1, 1, infinite, infinite;\\n  transform-origin:25% 50%;\\n}\\n@media screen and (prefers-reduced-motion: reduce){\\n  .linear .dot--center{\\n    animation:none;\\n    animation-delay:1.167s, 1.167s, 2.167s, 2.167s;\\n    animation-duration:1s;\\n    animation-fill-mode:forwards;\\n    animation-iteration-count:1, 1, infinite, infinite;\\n    transform-origin:50% 50%;\\n  }\\n}\\n.linear .dot--center{\\n  animation:linear-load-size, linear-load-stroke, linear-loop-size, linear-loop-stroke;\\n  animation-delay:1.167s, 1.167s, 2.167s, 2.167s;\\n  animation-duration:1s;\\n  animation-fill-mode:forwards;\\n  animation-iteration-count:1, 1, infinite, infinite;\\n  transform-origin:50% 50%;\\n}\\n@media screen and (prefers-reduced-motion: reduce){\\n  .linear .dot--right{\\n    animation:none;\\n    animation-delay:1.334s, 1.334s, 2.334s, 2.334s;\\n    animation-duration:1s;\\n    animation-fill-mode:forwards;\\n    animation-iteration-count:1, 1, infinite, infinite;\\n    transform-origin:75% 50%;\\n  }\\n}\\n.linear .dot--right{\\n  animation:linear-load-size, linear-load-stroke, linear-loop-size, linear-loop-stroke;\\n  animation-delay:1.334s, 1.334s, 2.334s, 2.334s;\\n  animation-duration:1s;\\n  animation-fill-mode:forwards;\\n  animation-iteration-count:1, 1, infinite, infinite;\\n  transform-origin:75% 50%;\\n}\\n\\n[dir=rtl] .linear .dot--left{\\n  animation-delay:1.334s, 1.334s, 2.334s, 2.334s, 7.334s, 7.334s;\\n}\\n[dir=rtl] .linear .dot--center{\\n  animation-delay:1.167s, 1.167s, 2.167s, 2.167s, 7.167s, 7.167s;\\n}\\n[dir=rtl] .linear .dot--right{\\n  animation-delay:1s, 1s, 2s, 2s, 7s, 7s;\\n}\\n\\n@media screen and (prefers-reduced-motion: reduce){\\n  .linear--no-loop .dot--left{\\n    animation:none;\\n    animation-delay:1s, 1s, 2s, 2s;\\n    animation-duration:1s;\\n    animation-fill-mode:forwards;\\n    animation-iteration-count:1;\\n    transform-origin:25% 50%;\\n  }\\n}\\n.linear--no-loop .dot--left{\\n  animation:linear-load-size, linear-load-stroke, linear-unload-size, linear-unload-stroke;\\n  animation-delay:1s, 1s, 2s, 2s;\\n  animation-duration:1s;\\n  animation-fill-mode:forwards;\\n  animation-iteration-count:1;\\n  transform-origin:25% 50%;\\n}\\n@media screen and (prefers-reduced-motion: reduce){\\n  .linear--no-loop .dot--center{\\n    animation:none;\\n    animation-delay:1.167s, 1.167s, 2.167s, 2.167s;\\n    animation-duration:1s;\\n    animation-fill-mode:forwards;\\n    animation-iteration-count:1;\\n    transform-origin:50% 50%;\\n  }\\n}\\n.linear--no-loop .dot--center{\\n  animation:linear-load-size, linear-load-stroke, linear-unload-size, linear-unload-stroke;\\n  animation-delay:1.167s, 1.167s, 2.167s, 2.167s;\\n  animation-duration:1s;\\n  animation-fill-mode:forwards;\\n  animation-iteration-count:1;\\n  transform-origin:50% 50%;\\n}\\n@media screen and (prefers-reduced-motion: reduce){\\n  .linear--no-loop .dot--right{\\n    animation:none;\\n    animation-delay:1.334s, 1.334s, 2.334s, 2.334s;\\n    animation-duration:1s;\\n    animation-fill-mode:forwards;\\n    animation-iteration-count:1;\\n    transform-origin:75% 50%;\\n  }\\n}\\n.linear--no-loop .dot--right{\\n  animation:linear-load-size, linear-load-stroke, linear-unload-size, linear-unload-stroke;\\n  animation-delay:1.334s, 1.334s, 2.334s, 2.334s;\\n  animation-duration:1s;\\n  animation-fill-mode:forwards;\\n  animation-iteration-count:1;\\n  transform-origin:75% 50%;\\n}\\n\\n[dir=rtl] .linear--no-loop .dot--left{\\n  animation-delay:1.334s, 1.334s, 2.334s, 2.334s;\\n}\\n[dir=rtl] .linear--no-loop .dot--center{\\n  animation-delay:1.167s, 1.167s, 2.167s, 2.167s;\\n}\\n[dir=rtl] .linear--no-loop .dot--right{\\n  animation-delay:1s, 1s, 2s, 2s;\\n}\\n\\n@keyframes linear-load-size{\\n  0%{\\n    animation-timing-function:cubic-bezier(0, 0, 0.3, 1);\\n    r:0;\\n  }\\n  25%{\\n    animation-timing-function:cubic-bezier(0, 0, 0.3, 1);\\n    r:2.5px;\\n  }\\n  83.3%{\\n    r:0.875px;\\n  }\\n  100%{\\n    r:0.875px;\\n  }\\n}\\n@keyframes linear-load-stroke{\\n  0%{\\n    animation-timing-function:cubic-bezier(0, 0, 0.3, 1);\\n    stroke-width:0;\\n  }\\n  8.33%{\\n    stroke-width:1.72;\\n  }\\n  100%{\\n    stroke-width:1.72;\\n  }\\n}\\n@keyframes linear-loop-size{\\n  0%{\\n    animation-timing-function:cubic-bezier(0, 0, 0.3, 1);\\n    r:0.875px;\\n  }\\n  25%{\\n    animation-timing-function:cubic-bezier(0, 0, 0.3, 1);\\n    r:2.5px;\\n  }\\n  91.66%{\\n    r:0.875px;\\n  }\\n  100%{\\n    r:0.875px;\\n  }\\n}\\n@keyframes linear-loop-stroke{\\n  0%{\\n    animation-timing-function:cubic-bezier(0.4, 0.14, 1, 1);\\n    stroke-width:1.72;\\n  }\\n  100%{\\n    stroke-width:1.72;\\n  }\\n}\\n@keyframes linear-unload-size{\\n  0%{\\n    r:0.875px;\\n  }\\n  8.33%{\\n    r:0.875px;\\n  }\\n  33.33%{\\n    animation-timing-function:cubic-bezier(0.4, 0.14, 1, 1);\\n    r:2.5px;\\n  }\\n  58.33%{\\n    r:0;\\n  }\\n  100%{\\n    r:0;\\n  }\\n}\\n@keyframes linear-unload-stroke{\\n  0%{\\n    stroke-width:1.72;\\n  }\\n  50%{\\n    stroke-width:1.72;\\n  }\\n  58.33%{\\n    stroke-width:0;\\n  }\\n  100%{\\n    stroke-width:0;\\n  }\\n}\\n@media (prefers-reduced-motion: reduce){\\n  .dot--left,\\n  .dot--center,\\n  .dot--right{\\n    animation:none;\\n    transition:none;\\n  }\\n}\";\n\nexport { css_248z as default };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport { CDSInlineLoadingElement, INLINE_LOADING_TAG_NAME } from '../../../web-components/components/inlineLoadingElement/cds-aichat-inline-loading.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst InlineLoadingComponent = createComponent({\n    tagName: INLINE_LOADING_TAG_NAME,\n    elementClass: CDSInlineLoadingElement,\n    react: React,\n});\n\nexport { InlineLoadingComponent };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nimport React from 'react';\nimport Icon from './Icon.js';\nimport { i as iconPropTypes } from './iconPropTypes-4cbeb95d.js';\nimport '@carbon/icon-helpers';\nimport 'prop-types';\n\nvar _path;\nconst ScreenOff = /*#__PURE__*/React.forwardRef(function ScreenOff({\n  children,\n  size = 16,\n  ...rest\n}, ref) {\n  return /*#__PURE__*/React.createElement(Icon, {\n    width: size,\n    height: size,\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 32 32\",\n    fill: \"currentColor\",\n    ...rest\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28,22H11.41L30,3.41,28.59,2l-2,2H4A2,2,0,0,0,2,6V22H4V6H24.59L2,28.59,3.41,30l6-6H12v4H8v2H24V28H20V24h8a2,2,0,0,0,2-2V9H28ZM18,28H14V24h4Z\"\n  })), children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ScreenOff.propTypes = iconPropTypes;\n}\n\nexport { ScreenOff as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nimport React from 'react';\nimport Icon from './Icon.js';\nimport { i as iconPropTypes } from './iconPropTypes-4cbeb95d.js';\nimport '@carbon/icon-helpers';\nimport 'prop-types';\n\nvar _path, _path2, _path3, _path4;\nconst UserAvatar = /*#__PURE__*/React.forwardRef(function UserAvatar({\n  children,\n  size = 16,\n  ...rest\n}, ref) {\n  if (size === 16 || size === \"16\" || size === \"16px\") {\n    return /*#__PURE__*/React.createElement(Icon, {\n      width: size,\n      height: size,\n      ref: ref,\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 16 16\",\n      fill: \"currentColor\",\n      ...rest\n    }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M8,1C4.1,1,1,4.1,1,8s3.1,7,7,7s7-3.1,7-7S11.9,1,8,1z M5,13.2v-1.5c0-0.9,0.6-1.6,1.5-1.7h3c0.9,0.1,1.5,0.8,1.5,1.7v1.5 C9.1,14.3,6.9,14.3,5,13.2L5,13.2z M12,12l0-0.8c0-0.9-1.1-2.1-2.5-2.2h-3C5.1,9.1,4,10.3,4,11.7l0,0.5v0.3c-2.5-2.2-2.7-6-0.5-8.5 s6-2.7,8.5-0.5s2.7,6,0.5,8.5c-0.1,0.2-0.3,0.3-0.5,0.5V12z\"\n    })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M8,3C6.6,3,5.5,4.1,5.5,5.5S6.6,8,8,8s2.5-1.1,2.5-2.5S9.4,3,8,3z M8,7C7.2,7,6.5,6.3,6.5,5.5S7.2,4,8,4s1.5,0.7,1.5,1.5 S8.8,7,8,7z\"\n    })), children);\n  }\n  return /*#__PURE__*/React.createElement(Icon, {\n    width: size,\n    height: size,\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 32 32\",\n    fill: \"currentColor\",\n    ...rest\n  }, _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16,8a5,5,0,1,0,5,5A5,5,0,0,0,16,8Zm0,8a3,3,0,1,1,3-3A3.0034,3.0034,0,0,1,16,16Z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16,2A14,14,0,1,0,30,16,14.0158,14.0158,0,0,0,16,2ZM10,26.3765V25a3.0033,3.0033,0,0,1,3-3h6a3.0033,3.0033,0,0,1,3,3v1.3765a11.8989,11.8989,0,0,1-12,0Zm13.9925-1.4507A5.0016,5.0016,0,0,0,19,20H13a5.0016,5.0016,0,0,0-4.9925,4.9258,12,12,0,1,1,15.985,0Z\"\n  })), children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  UserAvatar.propTypes = iconPropTypes;\n}\n\nexport { UserAvatar as default };\n","import UserAvatar from '@carbon/icons-react/es/UserAvatar.js';\nimport React, { useState, useEffect } from 'react';\nimport { useDynamicCSSProperties } from '../../hooks/useCSSCustomProperties.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Displays an image for a human agent's avatar or a default icon if no image is available.\n */\nfunction AgentAvatar(props) {\n    const { agentProfile, languagePack, width, height } = props;\n    const agentName = agentProfile?.nickname;\n    const avatarStyles = useDynamicCSSProperties({ width, height });\n    const avatarUrl = agentProfile?.profile_picture_url;\n    // Indicates if the avatar for a human agent failed to load.\n    const [hasError, setHasError] = useState(false);\n    let component;\n    // If the avatar Url changes, then hasError should reset to allow an attempt at loading the new avatar url.\n    useEffect(() => {\n        setHasError(false);\n    }, [avatarUrl]);\n    if (!hasError && avatarUrl) {\n        component = (React.createElement(\"img\", { src: avatarUrl, alt: languagePack.agent_ariaAgentAvatar, onError: () => setHasError(true) }));\n    }\n    else if (agentName?.match(/^[\\x20-\\xFE]+$/)) {\n        // If the agentName only contains ASCII characters (and at least one), then show the first letter of the agentName\n        // as the agentAvatar. For most Latin languages, we can infer that the first letter of the name is an appropriate\n        // representation for that person. For other languages such as Chinese, it's not clear what the correct letter\n        // would be so if we see any such characters at all, we'll just fall back to showing a picture instead of a letter.\n        // We're only accepting ASCII (and extended ASCII) because proper browser detection for Latin characters is lacking.\n        component = (React.createElement(\"div\", { \"aria-label\": languagePack.agent_ariaAgentAvatar, className: \"WACAgentAvatar__Circle\", \n            // eslint-disable-next-line react/forbid-dom-props\n            style: avatarStyles },\n            React.createElement(\"div\", { className: \"WACAgentAvatar__Letter\" }, agentName.charAt(0))));\n    }\n    else {\n        // If the agentName contains any non-ASCII characters, then show the default agent avatar.\n        component = (React.createElement(UserAvatar, { size: 32, width: width ? Number(width.replace(\"px\", \"\")) : undefined, height: height ? Number(height.replace(\"px\", \"\")) : undefined, \"aria-label\": languagePack.agent_ariaAgentAvatar }));\n    }\n    return React.createElement(\"div\", { className: \"WACAgentAvatar\" }, component);\n}\n\nexport { AgentAvatar };\n","import ScreenOff from '@carbon/icons-react/es/ScreenOff.js';\nimport { Button } from '@carbon/react';\nimport cx from 'classnames';\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport { selectAgentDisplayState } from '../../store/selectors.js';\nimport { doFocusRef } from '../../utils/domUtils.js';\nimport { AnnounceOnMountComponent as AnnounceOnMountComponentExport } from '../util/AnnounceOnMountComponent.js';\nimport { AgentAvatar } from './AgentAvatar.js';\nimport { AvailabilityMessage } from './AvailabilityMessage.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is a banner that appears at the top of the screen when the user is connecting or connected to a\n * live agent. It will display a cancel button in the case where the user is waiting for an agent or an \"end chat\"\n * button for when the user is connected to an agent.\n */\nfunction AgentBanner(props, ref) {\n    const { onButtonClick } = props;\n    const languagePack = useLanguagePack();\n    const serviceManager = useServiceManager();\n    const persistedAgentState = useSelector((state) => state.persistedToBrowserStorage.chatState.agentState);\n    const agentState = useSelector((state) => state.agentState);\n    const { isConnecting, availability, isScreenSharing } = agentState;\n    const displayState = useSelector(selectAgentDisplayState, shallowEqual);\n    const { agentProfile } = persistedAgentState;\n    const buttonRef = useRef();\n    let line1;\n    let line2;\n    let avatar;\n    let buttonLabel;\n    let animation;\n    if (isConnecting) {\n        animation = React.createElement(\"div\", { className: \"WACLoadingBar__ConnectingAnimation\" });\n        line1 = languagePack.agent_connecting;\n        line2 = (React.createElement(AnnounceOnMountComponentExport, { announceOnce: languagePack.agent_connecting },\n            React.createElement(AvailabilityMessage, { availability: availability, fallbackText: languagePack.agent_connectWaiting })));\n        buttonLabel = languagePack.agent_connectButtonCancel;\n    }\n    else {\n        line1 = agentProfile?.nickname || languagePack.agent_noName;\n        buttonLabel = languagePack.agent_connectedButtonEndChat;\n        avatar = (React.createElement(AgentAvatar, { agentProfile: agentProfile, languagePack: languagePack, width: \"32px\", height: \"32px\" }));\n    }\n    const onStopSharing = () => {\n        serviceManager.humanAgentService.screenShareStop();\n    };\n    // Add a \"requestFocus\" imperative function to the ref so other components can trigger focus here.\n    useImperativeHandle(ref, () => ({\n        requestFocus: () => {\n            if (buttonRef.current) {\n                doFocusRef(buttonRef);\n                return true;\n            }\n            return false;\n        },\n    }));\n    return (React.createElement(\"div\", { className: cx(\"WACAgentBanner\", {\n            \"WACAgentBanner--connected\": !isConnecting,\n        }) },\n        displayState.isConnectingOrConnected && (React.createElement(\"div\", { className: \"WACAgentBanner__Body\" },\n            avatar,\n            React.createElement(\"div\", { className: \"WACAgentBanner__AgentInfo\" },\n                React.createElement(\"div\", { className: \"WACAgentBanner__AgentLine1\" }, line1),\n                line2 && React.createElement(\"div\", { className: \"WACAgentBanner__AgentLine2\" }, line2)),\n            React.createElement(Button, { ref: buttonRef, className: \"WACAgentBanner__Button WACAgentBanner__CancelButton\", onClick: onButtonClick, size: \"sm\" }, buttonLabel))),\n        isScreenSharing && (React.createElement(Button, { className: \"WACAgentBanner__Button WACAgentBanner__StopSharingButton\", kind: \"danger\", size: \"sm\", renderIcon: ScreenOff, onClick: onStopSharing }, languagePack.agent_sharingStopSharingButton)),\n        animation));\n}\nconst AgentBannerExport = React.memo(forwardRef(AgentBanner));\n\nexport { AgentBannerExport as AgentBanner };\n","import React from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { selectAgentDisplayState } from '../../store/selectors.js';\nimport { AgentBanner as AgentBannerExport } from './AgentBanner.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A simple container for the agent banner that avoids rendering it if it is hidden.\n */\nfunction AgentBannerContainer({ onButtonClick, bannerRef, }) {\n    const agentState = useSelector((state) => state.agentState);\n    const displayState = useSelector(selectAgentDisplayState, shallowEqual);\n    if (displayState.isConnectingOrConnected || agentState.isScreenSharing) {\n        return React.createElement(AgentBannerExport, { ref: bannerRef, onButtonClick: onButtonClick });\n    }\n    return null;\n}\n\nexport { AgentBannerContainer };\n","import React from 'react';\nimport { WriteableElementName } from '../../../types/instance/ChatInstance.js';\nimport { useServiceManager } from '../hooks/useServiceManager.js';\nimport WriteableElement from './WriteableElement.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is used to render an element above the most recent welcome node. This element is exposed to Deb for\n * her to do what she likes. The element is stored in the serviceManager and set in Chat.ts.\n */\nfunction LatestWelcomeNodes({ children }) {\n    const { namespace } = useServiceManager();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(WriteableElement, { slotName: WriteableElementName.WELCOME_NODE_BEFORE_ELEMENT, id: `welcomeNodeBeforeElement${namespace.suffix}` }),\n        children));\n}\nvar LatestWelcomeNodes$1 = React.memo(LatestWelcomeNodes);\n\nexport { LatestWelcomeNodes$1 as default };\n","import { ActionableNotification } from '@carbon/react';\nimport React from 'react';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport actions from '../../store/actions.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A BETA component to show notifications in the chat. Marked as beta because Carbon still has some keyboard\n * accessibility issues to work out and we may have to react to them.\n *\n * Currently, when a notification pops up, it is put in a focus trap and you MUST interact with it if you are using\n * keyboard navigation.\n */\nfunction Notifications({ notifications, serviceManager }) {\n    const languagePack = useLanguagePack();\n    if (notifications.length) {\n        return (React.createElement(\"div\", { className: \"WACNotifications\" }, notifications.map((notification) => {\n            const item = notification.notification;\n            const onClose = () => {\n                serviceManager.store.dispatch(actions.removeNotifications({ notificationID: notification.id }));\n            };\n            let onActionButtonClick;\n            let actionButtonLabel;\n            if (item.actionButtonLabel && item.onActionButtonClick) {\n                onActionButtonClick = () => {\n                    item.onActionButtonClick();\n                    onClose();\n                };\n                actionButtonLabel = item.actionButtonLabel;\n            }\n            return (React.createElement(\"div\", { className: \"WACNotifications__Notification\", key: notification.id },\n                React.createElement(ActionableNotification, { \"aria-label\": languagePack.notifications_toastClose, actionButtonLabel: actionButtonLabel, onActionButtonClick: onActionButtonClick, kind: item.kind, onClose: () => {\n                        onClose();\n                        item.onCloseButtonClick?.();\n                    }, subtitle: item.message, title: item.title, \n                    // Instead of this property, we are supposed to use the StaticNotification component which does not\n                    // steal focus but it's still experimental and does not provide the functionality we need (it does not\n                    // have a close button).\n                    hasFocus: false })));\n        })));\n    }\n    return null;\n}\n\nexport { Notifications };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nimport React from 'react';\nimport Icon from './Icon.js';\nimport { i as iconPropTypes } from './iconPropTypes-4cbeb95d.js';\nimport '@carbon/icon-helpers';\nimport 'prop-types';\n\nvar _path, _path2;\nconst ChatBot = /*#__PURE__*/React.forwardRef(function ChatBot({\n  children,\n  size = 16,\n  ...rest\n}, ref) {\n  return /*#__PURE__*/React.createElement(Icon, {\n    width: size,\n    height: size,\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 32 32\",\n    fill: \"currentColor\",\n    ...rest\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16 19a6.9908 6.9908 0 01-5.833-3.1287l1.666-1.1074a5.0007 5.0007 0 008.334 0l1.666 1.1074A6.9908 6.9908 0 0116 19zM20 8a2 2 0 102 2A1.9806 1.9806 0 0020 8zM12 8a2 2 0 102 2A1.9806 1.9806 0 0012 8z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.7358,30,16,29l4-7h6a1.9966,1.9966,0,0,0,2-2V6a1.9966,1.9966,0,0,0-2-2H6A1.9966,1.9966,0,0,0,4,6V20a1.9966,1.9966,0,0,0,2,2h9v2H6a3.9993,3.9993,0,0,1-4-4V6A3.9988,3.9988,0,0,1,6,2H26a3.9988,3.9988,0,0,1,4,4V20a3.9993,3.9993,0,0,1-4,4H21.1646Z\"\n  })), children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ChatBot.propTypes = iconPropTypes;\n}\n\nexport { ChatBot as default };\n","/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.\n */\nimport React from 'react';\nimport Icon from './Icon.js';\nimport { i as iconPropTypes } from './iconPropTypes-4cbeb95d.js';\nimport '@carbon/icon-helpers';\nimport 'prop-types';\n\nvar _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8;\nconst CheckmarkFilled = /*#__PURE__*/React.forwardRef(function CheckmarkFilled({\n  children,\n  size = 16,\n  ...rest\n}, ref) {\n  if (size === 16 || size === \"16\" || size === \"16px\") {\n    return /*#__PURE__*/React.createElement(Icon, {\n      width: size,\n      height: size,\n      ref: ref,\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 16 16\",\n      fill: \"currentColor\",\n      ...rest\n    }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M8,1C4.1,1,1,4.1,1,8c0,3.9,3.1,7,7,7s7-3.1,7-7C15,4.1,11.9,1,8,1z M7,11L4.3,8.3l0.9-0.8L7,9.3l4-3.9l0.9,0.8L7,11z\"\n    })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M7,11L4.3,8.3l0.9-0.8L7,9.3l4-3.9l0.9,0.8L7,11z\",\n      \"data-icon-path\": \"inner-path\",\n      opacity: \"0\"\n    })), children);\n  }\n  if (size === 20 || size === \"20\" || size === \"20px\") {\n    return /*#__PURE__*/React.createElement(Icon, {\n      width: size,\n      height: size,\n      ref: ref,\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\",\n      fill: \"currentColor\",\n      ...rest\n    }, _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M10,1c-4.9,0-9,4.1-9,9s4.1,9,9,9s9-4,9-9S15,1,10,1z M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z\"\n    })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n      fill: \"none\",\n      d: \"M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z\",\n      \"data-icon-path\": \"inner-path\",\n      opacity: \"0\"\n    })), children);\n  }\n  if (size === 24 || size === \"24\" || size === \"24px\") {\n    return /*#__PURE__*/React.createElement(Icon, {\n      width: size,\n      height: size,\n      ref: ref,\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 24 24\",\n      fill: \"currentColor\",\n      ...rest\n    }, _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M12,1C6,1,1,6,1,12s5,11,11,11s11-4.9,11-11S18.1,1,12,1z M10.4,16.3l-3.9-3.9l1.3-1.2l2.7,2.7l5.8-5.8l1.3,1.3L10.4,16.3z\"\n    })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n      fill: \"none\",\n      d: \"M10.4,16.3l-3.9-3.9l1.3-1.2l2.7,2.7l5.8-5.8l1.3,1.3L10.4,16.3z\",\n      \"data-icon-path\": \"inner-path\",\n      opacity: \"0\"\n    })), children);\n  }\n  return /*#__PURE__*/React.createElement(Icon, {\n    width: size,\n    height: size,\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 32 32\",\n    fill: \"currentColor\",\n    ...rest\n  }, _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2ZM14,21.5908l-5-5L10.5906,15,14,18.4092,21.41,11l1.5957,1.5859Z\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M14 21.591L9 16.591 10.591 15 14 18.409 21.41 11 23.005 12.585 14 21.591z\",\n    \"data-icon-path\": \"inner-path\"\n  })), children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  CheckmarkFilled.propTypes = iconPropTypes;\n}\n\nexport { CheckmarkFilled as default };\n","import React from 'react';\nimport { uuid } from '../utils/lang/uuid.js';\nimport '../../../types/utilities/carbonTypes.js';\nimport { CarbonTheme } from '../../../types/config/PublicConfig.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/* eslint-disable react/forbid-dom-props */\n/**\n * Light and dark versions of the watsonx logo sourced from https://ibm.ent.box.com/s/ptn44fwqwbfu2i83poh4tk21a1lun3yn/folder/222574830530\n */\nfunction Avatar({ theme }) {\n    const a = `a-${uuid()}`;\n    const b = `b-${uuid()}`;\n    const c = `c-${uuid()}`;\n    const d = `d-${uuid()}`;\n    const e = `e-${uuid()}`;\n    if (theme === CarbonTheme.WHITE || theme === CarbonTheme.G10) {\n        return (React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 32 32\", className: \"cds--watsonx-avatar\", \"aria-hidden\": \"true\" },\n            React.createElement(\"defs\", null,\n                React.createElement(\"linearGradient\", { id: a, x1: \"1186.526\", y1: \"2863.168\", x2: \"1199.825\", y2: \"2845.109\", gradientTransform: \"matrix(.8312 .55596 -.27409 .40979 -198.894 -1827.398)\", gradientUnits: \"userSpaceOnUse\" },\n                    React.createElement(\"stop\", { offset: \".3\" }),\n                    React.createElement(\"stop\", { offset: \"1\", stopOpacity: \"0\" })),\n                React.createElement(\"linearGradient\", { id: b, x1: \"1189.388\", y1: \"2911.794\", x2: \"1200.478\", y2: \"2896.735\", gradientTransform: \"rotate(146.223 380.87 -882.286) scale(1 -.493)\", gradientUnits: \"userSpaceOnUse\" },\n                    React.createElement(\"stop\", { offset: \".3\" }),\n                    React.createElement(\"stop\", { offset: \".9\", stopOpacity: \"0\" })),\n                React.createElement(\"linearGradient\", { id: c, x1: \"-4995.033\", y1: \"-20162.835\", x2: \"-4981.733\", y2: \"-20180.895\", gradientTransform: \"rotate(-146.223 -971.422 -5714.55) scale(1 .493)\", gradientUnits: \"userSpaceOnUse\" },\n                    React.createElement(\"stop\", { offset: \".32\" }),\n                    React.createElement(\"stop\", { offset: \".354\", stopOpacity: \".798\" }),\n                    React.createElement(\"stop\", { offset: \".7\", stopOpacity: \"0\" })),\n                React.createElement(\"linearGradient\", { id: d, x1: \"0\", y1: \"32\", x2: \"32\", y2: \"0\", gradientUnits: \"userSpaceOnUse\" },\n                    React.createElement(\"stop\", { offset: \".1\", stopColor: \"#a56eff\" }),\n                    React.createElement(\"stop\", { offset: \".9\", stopColor: \"#0f62fe\" })),\n                React.createElement(\"mask\", { id: e, x: \"0\", y: \"0\", width: \"32\", height: \"32\", maskUnits: \"userSpaceOnUse\" },\n                    React.createElement(\"path\", { d: \"M16 1A14.915 14.915 0 0 0 5.502 5.286l1.4 1.429A12.922 12.922 0 0 1 16 3.001c.977 0 1.929.109 2.845.315-3.402.921-5.916 4.026-5.916 7.715 0 .782.118 1.537.328 2.252a7.978 7.978 0 0 0-2.188-.312c-3.704 0-6.819 2.534-7.726 5.957a12.954 12.954 0 0 1-.345-2.927c0-2.117.492-4.134 1.462-5.996l-1.773-.924A15.037 15.037 0 0 0 .999 16c0 8.271 6.729 15 15 15 3.949 0 7.678-1.522 10.498-4.286l-1.4-1.428A12.926 12.926 0 0 1 15.999 29c-3.648 0-6.945-1.516-9.309-3.945a5.959 5.959 0 0 1-1.621-4.086c0-3.309 2.691-6 6-6a6.006 6.006 0 0 1 5.897 7.107l1.967.367a7.971 7.971 0 0 0-.192-3.726 7.976 7.976 0 0 0 2.187.312c3.71 0 6.829-2.542 7.73-5.974.22.947.34 1.931.34 2.944 0 2.117-.492 4.134-1.462 5.995l1.773.924a15.034 15.034 0 0 0 1.688-6.919C31 7.729 24.272 1 16 1zm4.93 16.03c-3.309 0-6-2.692-6-6s2.691-6 6-6 6 2.691 6 6-2.691 6-6 6z\", style: { fill: \"#fff\", strokeWidth: 0 } }),\n                    React.createElement(\"path\", { style: { fill: `url(#${a})`, strokeWidth: 0 }, d: \"M8 9 0 0h16l2.305 3.304L8 9z\" }),\n                    React.createElement(\"path\", { style: { fill: `url(#${b})`, strokeWidth: 0 }, d: \"m12 31 4.386-9L6 21 2 31h10z\" }),\n                    React.createElement(\"path\", { style: { fill: `url(#${c})`, strokeWidth: 0 }, d: \"m24 23 8 9H16l-2.304-3.305L24 23z\" }),\n                    React.createElement(\"path\", { style: { strokeWidth: 0 }, d: \"M16 31h-4.283L15 22h2l-1 9z\" }))),\n            React.createElement(\"g\", { style: { mask: `url(#${e})` } },\n                React.createElement(\"path\", { style: { fill: `url(#${d})`, strokeWidth: 0 }, d: \"M0 0h32v32H0z\" })),\n            React.createElement(\"circle\", { cx: \"6\", cy: \"6\", r: \"2\", style: { fill: \"#001d6c\", strokeWidth: 0 } }),\n            React.createElement(\"circle\", { cx: \"26\", cy: \"26\", r: \"2\", style: { fill: \"#001d6c\", strokeWidth: 0 } }),\n            React.createElement(\"path\", { d: \"M16 31c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5zm0-8c-1.654 0-3 1.346-3 3s1.346 3 3 3 3-1.346 3-3-1.346-3-3-3z\", style: { fill: \"#001d6c\", strokeWidth: 0 } })));\n    }\n    return (React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 32 32\", className: \"cds--watsonx-avatar\", \"aria-hidden\": \"true\" },\n        React.createElement(\"defs\", null,\n            React.createElement(\"linearGradient\", { id: a, x1: \"1196.653\", y1: \"2930.892\", x2: \"1209.953\", y2: \"2912.832\", gradientTransform: \"matrix(.8312 .55596 -.27409 .40979 -188.767 -1860.755)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \".3\" }),\n                React.createElement(\"stop\", { offset: \"1\", stopOpacity: \"0\" })),\n            React.createElement(\"linearGradient\", { id: b, x1: \"1299.261\", y1: \"2844.072\", x2: \"1310.351\", y2: \"2829.012\", gradientTransform: \"rotate(146.223 440.869 -882.286) scale(1 -.493)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \".3\" }),\n                React.createElement(\"stop\", { offset: \".9\", stopOpacity: \"0\" })),\n            React.createElement(\"linearGradient\", { id: c, x1: \"-4885.16\", y1: \"-20230.559\", x2: \"-4871.86\", y2: \"-20248.618\", gradientTransform: \"rotate(-146.223 -911.421 -5714.55) scale(1 .493)\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \".32\" }),\n                React.createElement(\"stop\", { offset: \".354\", stopOpacity: \".798\" }),\n                React.createElement(\"stop\", { offset: \".7\", stopOpacity: \"0\" })),\n            React.createElement(\"linearGradient\", { id: d, x1: \"0\", y1: \"32\", x2: \"32\", y2: \"0\", gradientUnits: \"userSpaceOnUse\" },\n                React.createElement(\"stop\", { offset: \".1\", stopColor: \"#be95ff\" }),\n                React.createElement(\"stop\", { offset: \".9\", stopColor: \"#4589ff\" })),\n            React.createElement(\"mask\", { id: e, x: \"0\", y: \"0\", width: \"32\", height: \"32\", maskUnits: \"userSpaceOnUse\" },\n                React.createElement(\"path\", { d: \"M16 1A14.915 14.915 0 0 0 5.502 5.286l1.4 1.429A12.922 12.922 0 0 1 16 3.001c.977 0 1.929.109 2.845.315-3.402.921-5.916 4.026-5.916 7.715 0 .782.118 1.537.328 2.252a7.978 7.978 0 0 0-2.188-.312c-3.704 0-6.819 2.534-7.726 5.957a12.954 12.954 0 0 1-.345-2.927c0-2.117.492-4.134 1.462-5.996l-1.773-.924A15.037 15.037 0 0 0 .999 16c0 8.271 6.729 15 15 15 3.949 0 7.678-1.522 10.498-4.286l-1.4-1.428A12.926 12.926 0 0 1 15.999 29c-3.648 0-6.945-1.516-9.309-3.945a5.959 5.959 0 0 1-1.621-4.086c0-3.309 2.691-6 6-6a6.006 6.006 0 0 1 5.897 7.107l1.967.367a7.971 7.971 0 0 0-.192-3.726 7.976 7.976 0 0 0 2.187.312c3.71 0 6.829-2.542 7.73-5.974.22.947.34 1.931.34 2.944 0 2.117-.492 4.134-1.462 5.995l1.773.924a15.034 15.034 0 0 0 1.688-6.919c0-8.271-6.729-15-15-15zm4.93 16.03c-3.309 0-6-2.692-6-6s2.691-6 6-6 6 2.691 6 6-2.691 6-6 6z\", style: { fill: \"#fff\", strokeWidth: 0 } }),\n                React.createElement(\"path\", { style: { fill: `url(#${a})`, strokeWidth: 0 }, d: \"M8 9 0 0h16l2.305 3.305L8 9z\" }),\n                React.createElement(\"path\", { style: { fill: `url(#${b})`, strokeWidth: 0 }, d: \"m12 31 4.386-9L6 21 2 31h10z\" }),\n                React.createElement(\"path\", { style: { fill: `url(#${c})`, strokeWidth: 0 }, d: \"m24 23 8 9H16l-2.305-3.305L24 23z\" }),\n                React.createElement(\"path\", { style: { strokeWidth: 0 }, d: \"M16 31h-4.283L15 22h2l-1 9z\" }))),\n        React.createElement(\"g\", { style: { mask: `url(#${e})` } },\n            React.createElement(\"path\", { style: { fill: `url(#${d})`, strokeWidth: 0 }, d: \"M0 0h32v32H0z\" })),\n        React.createElement(\"circle\", { cx: \"6\", cy: \"6\", r: \"2\", style: { fill: \"#f4f4f4\", strokeWidth: 0 } }),\n        React.createElement(\"circle\", { cx: \"26\", cy: \"26\", r: \"2\", style: { fill: \"#f4f4f4\", strokeWidth: 0 } }),\n        React.createElement(\"path\", { d: \"M16 31c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5zm0-8c-1.654 0-3 1.346-3 3s1.346 3 3 3 3-1.346 3-3-1.346-3-3-3z\", style: { fill: \"#f4f4f4\", strokeWidth: 0 } })));\n}\nconst AvatarExport = React.memo(Avatar);\n\nexport { AvatarExport as Avatar };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction IconHolder(props) {\n    return React.createElement(\"div\", { className: \"WACIconHolder\" }, props.icon);\n}\n\nexport { IconHolder };\n","import React, { useState, useEffect } from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction ImageWithFallback(props) {\n    const { url, alt, fallback } = props;\n    // Indicates if the image failed to load.\n    const [hasError, setHasError] = useState(false);\n    // If the url changes, then hasError should reset to allow an attempt at loading the new image.\n    useEffect(() => {\n        setHasError(false);\n    }, [url]);\n    let component;\n    if (!hasError && url) {\n        component = React.createElement(\"img\", { src: url, alt: alt, onError: () => setHasError(true) });\n    }\n    else {\n        component = fallback;\n    }\n    return React.createElement(\"div\", { className: \"WACImageWithFallback\" }, component);\n}\n\nexport { ImageWithFallback };\n","import ChatBot from '@carbon/icons-react/es/ChatBot.js';\nimport CheckmarkFilled from '@carbon/icons-react/es/CheckmarkFilled.js';\nimport Headset from '@carbon/icons-react/es/Headset.js';\nimport Loading from '../../react/carbon/Loading.js';\nimport cx from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { nodeToText } from '../components/aria/AriaAnnouncerComponent.js';\nimport { Avatar as AvatarExport } from '../components/Avatar.js';\nimport { InlineError } from '../components/responseTypes/error/InlineError.js';\nimport { IconHolder } from '../components/util/IconHolder.js';\nimport { ImageWithFallback } from '../components/util/ImageWithFallback.js';\nimport VisuallyHidden from '../components/util/VisuallyHidden.js';\nimport { withAriaAnnouncer } from '../hocs/withAriaAnnouncer.js';\nimport actions from '../store/actions.js';\nimport { MessageErrorState } from '../../../types/messaging/LocalMessageItem.js';\nimport '../utils/constants.js';\nimport { doFocusRef } from '../utils/domUtils.js';\nimport { isConnectToAgent, isRequest, isResponse, renderAsUserDefinedMessage, isOptionItem, isSingleItemCarousel } from '../utils/messageUtils.js';\nimport { createDidCatchErrorData } from '../utils/miscUtils.js';\nimport { timestampToTimeString } from '../utils/timeUtils.js';\nimport { MessageTypeComponent } from './MessageTypeComponent.js';\nimport { MessageResponseTypes, AgentMessageType } from '../../../types/messaging/Messages.js';\nimport { FileStatusValue } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nvar MoveFocusType;\n(function (MoveFocusType) {\n    /**\n     * Indicates that focus should be moved to the first message.\n     */\n    MoveFocusType[MoveFocusType[\"FIRST\"] = 1] = \"FIRST\";\n    /**\n     * Indicates that focus should be moved to the last message.\n     */\n    MoveFocusType[MoveFocusType[\"LAST\"] = 2] = \"LAST\";\n    /**\n     * Indicates that focus should be moved to the next message.\n     */\n    MoveFocusType[MoveFocusType[\"NEXT\"] = 3] = \"NEXT\";\n    /**\n     * Indicates that focus should be moved to the previous message.\n     */\n    MoveFocusType[MoveFocusType[\"PREVIOUS\"] = 4] = \"PREVIOUS\";\n    /**\n     * Indicates that focus should be moved back to the input field.\n     */\n    MoveFocusType[MoveFocusType[\"INPUT\"] = 5] = \"INPUT\";\n})(MoveFocusType || (MoveFocusType = {}));\nclass MessageComponent extends PureComponent {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = {\n            didRenderErrorOccur: false,\n            focusHandleHasFocus: false,\n        };\n        /**\n         * A reference to the root element in this component.\n         */\n        this.ref = React.createRef();\n        /**\n         * A reference to the pure message element in this component.\n         */\n        this.messageRef = React.createRef();\n        /**\n         * A reference to the focus handle element in this component.\n         */\n        this.focusHandleRef = React.createRef();\n        /**\n         * Returns the value of the local message for the component.\n         */\n        this.getLocalMessage = () => {\n            return this.props.localMessageItem;\n        };\n        /**\n         * Called when the focus handle gets focus.\n         */\n        this.onHandleFocus = () => {\n            this.setState({ focusHandleHasFocus: true });\n        };\n        /**\n         * Called when the focus handle loses focus.\n         */\n        this.onHandleBlur = () => {\n            this.setState({ focusHandleHasFocus: false });\n        };\n        /**\n         * Called when a key down event occurs while the focus handle has focus.\n         */\n        this.onHandleKeyDown = (event) => {\n            if (event.altKey || event.metaKey || event.ctrlKey || event.shiftKey) {\n                // Don't do anything if any modifiers are present.\n                return;\n            }\n            let moveFocus;\n            if (event.key === \"ArrowUp\") {\n                moveFocus = MoveFocusType.PREVIOUS;\n            }\n            else if (event.key === \"ArrowDown\") {\n                moveFocus = MoveFocusType.NEXT;\n            }\n            else if (event.key === \"Home\") {\n                moveFocus = MoveFocusType.FIRST;\n            }\n            else if (event.key === \"End\") {\n                moveFocus = MoveFocusType.LAST;\n            }\n            else if (event.key === \"Escape\") {\n                moveFocus = MoveFocusType.INPUT;\n            }\n            else if (event.key === \"Enter\" || event.key === \" \") {\n                // Prevent native scrolling on Space\n                event.preventDefault();\n                this.reAnnounceFocusHandle(); // Re-announce message content\n                return;\n            }\n            if (moveFocus) {\n                // This will stop the scroll panel from moving as a result of the keypress. We only want it to move as a\n                // result of the focus change.\n                event.preventDefault();\n                this.props.requestMoveFocus(moveFocus, this.props.messagesIndex);\n            }\n        };\n    }\n    /**\n     * Returns an ARIA message that can be used to indicate that the widget (either bot or agent) was responsible for\n     * saying a specific message.\n     */\n    getWidgetSaidMessage() {\n        const { intl, botName, localMessageItem } = this.props;\n        let messageId;\n        if (localMessageItem.item.agent_message_type) {\n            // For the human agent view, we only want to say \"agent said\" for messages that are text. The status messages\n            // do not need this announcement.\n            if (localMessageItem.item.response_type === MessageResponseTypes.TEXT) {\n                messageId = \"messages_agentSaid\";\n            }\n        }\n        else {\n            messageId = \"messages_botSaid\";\n        }\n        return messageId\n            ? intl.formatMessage({ id: messageId }, { botName })\n            : null;\n    }\n    componentDidCatch(error, errorInfo) {\n        this.props.serviceManager.actions.errorOccurred(createDidCatchErrorData(\"Message\", error, errorInfo));\n        this.setState({ didRenderErrorOccur: true });\n    }\n    componentDidMount() {\n        const uiState = this.props.localMessageItem.ui_state;\n        if (uiState.needsAnnouncement) {\n            this.props.ariaAnnouncer(this.ref.current);\n            this.props.serviceManager.store.dispatch(actions.setMessageWasAnnounced(uiState.id));\n        }\n    }\n    componentDidUpdate() {\n        const uiState = this.props.localMessageItem.ui_state;\n        if (uiState.needsAnnouncement) {\n            this.props.ariaAnnouncer(this.ref.current);\n            this.props.serviceManager.store.dispatch(actions.setMessageWasAnnounced(uiState.id));\n        }\n    }\n    /**\n     * Indicates if we should render the failed message instead of the actual message.\n     */\n    shouldRenderFailedMessage() {\n        if (this.state.didRenderErrorOccur) {\n            return true;\n        }\n        const { localMessageItem, message } = this.props;\n        // If the message is a CTA, has a service desk error, and we're supposed to report service desk errors, then we\n        // need to render the failed message.\n        return (isConnectToAgent(localMessageItem.item) &&\n            message.history?.agent_no_service_desk);\n    }\n    reAnnounceFocusHandle() {\n        const handle = this.focusHandleRef.current;\n        if (!handle) {\n            return;\n        }\n        this.props.ariaAnnouncer(handle.getAttribute(\"aria-label\"));\n    }\n    /**\n     * Moves focus to this message's focus handle.\n     *\n     * @see renderFocusHandle\n     */\n    requestHandleFocus() {\n        const { languagePack, intl, message, botName } = this.props;\n        // Announce who said it and then the actual message. The \"Bot said\" text is normally only read once per\n        // MessageResponse instead of once per LocalMessage but since we're moving focus between each LocalMessage, go\n        // ahead and announce the \"who\" part for each one.\n        const whoAnnouncement = isRequest(message)\n            ? languagePack.messages_youSaid\n            : intl.formatMessage({ id: \"messages_botSaid\" }, { botName });\n        const strings = [whoAnnouncement];\n        nodeToText(this.messageRef.current, strings);\n        // Using this aria-label allows us to make sure that this text is read out loud before JAWS reads its \"1 of 2\"\n        // list item message that it adds after reading the aria-label.\n        this.focusHandleRef.current.setAttribute(\"aria-label\", strings.join(\" \"));\n        doFocusRef(this.focusHandleRef, true);\n    }\n    /**\n     * Renders the error state version of this message. This code carefully avoids touching the message data as it\n     * could be data that doesn't match what we were expecting.\n     */\n    renderFailedRenderMessage() {\n        const { messagesIndex } = this.props;\n        return (React.createElement(\"div\", { className: `WAC__message WAC__message--inlineError WAC__message-${messagesIndex} ${this.props.className || \"\"}`, ref: this.ref },\n            React.createElement(\"div\", { className: \"WAC__message--padding\" },\n                React.createElement(\"div\", { className: \"WAC__bot-message\" },\n                    React.createElement(VisuallyHidden, null, this.getWidgetSaidMessage()),\n                    React.createElement(\"div\", { className: \"WAC__received WAC__message-vertical-padding WAC__received--text\" },\n                        React.createElement(InlineError, { text: this.props.languagePack.errors_singleMessage }))))));\n    }\n    /**\n     * Renders the avatar line that appears above each message that has the avatar (for responses) and timestamps.\n     */\n    renderAvatarLine(localMessageItem, message) {\n        let avatar;\n        const { languagePack, botAvatarURL, useAITheme, carbonTheme } = this.props;\n        const timestamp = timestampToTimeString(message.history.timestamp);\n        let label;\n        let actorName;\n        let iconClassName = \"\";\n        if (isResponse(message)) {\n            // We'll use the first message item for deciding if we should show the agent's avatar.\n            const agentMessageType = localMessageItem.item.agent_message_type;\n            const agentProfile = message.history.agent_profile;\n            if (isAgentStatusMessage(agentMessageType)) {\n                // These messages don't show an avatar line.\n                return null;\n            }\n            const fromAgent = agentMessageType === AgentMessageType.FROM_AGENT;\n            if (fromAgent || agentProfile?.profile_picture_url) {\n                avatar = (React.createElement(ImageWithFallback, { url: agentProfile?.profile_picture_url, alt: fromAgent\n                        ? languagePack.agent_ariaAgentAvatar\n                        : languagePack.agent_ariaGenericAvatar, fallback: React.createElement(IconHolder, { icon: React.createElement(Headset, null) }) }));\n                iconClassName = \"WACMessage__Avatar--agent\";\n            }\n            else {\n                const icon = useAITheme ? (React.createElement(AvatarExport, { theme: carbonTheme })) : (React.createElement(IconHolder, { icon: React.createElement(ChatBot, null) }));\n                const imageUrl = useAITheme ? undefined : botAvatarURL;\n                avatar = (React.createElement(ImageWithFallback, { url: imageUrl, alt: languagePack.agent_ariaGenericBotAvatar, fallback: icon }));\n                iconClassName = \"WACMessage__Avatar--bot\";\n            }\n            if (fromAgent || agentProfile?.nickname) {\n                actorName =\n                    agentProfile?.nickname || languagePack.agent_agentNoNameTitle;\n            }\n            else if (useAITheme) {\n                actorName = \"watsonx\";\n            }\n            label = (React.createElement(\"span\", { \"data-wac-exclude-node-read\": true },\n                React.createElement(FormattedMessage, { id: \"message_labelBot\", values: { timestamp, actorName } })));\n        }\n        else {\n            label = React.createElement(FormattedMessage, { id: \"message_labelYou\", values: { timestamp } });\n        }\n        return (React.createElement(\"div\", { className: \"WACMessage__AvatarLine\", key: `${message.id}-avatar-line` },\n            avatar && (React.createElement(\"div\", { className: `WACMessage__Avatar ${iconClassName}` }, avatar)),\n            React.createElement(\"div\", { className: \"WACMessage__Label\" }, label)));\n    }\n    /**\n     * Renders the state indicator for the message sent by the user. This can appear on the left of message or beneath the\n     * message.\n     */\n    renderMessageState(message) {\n        const { languagePack } = this.props;\n        let element;\n        let className;\n        let showBelowMessage = false;\n        const errorState = message.history?.error_state;\n        const fileStatus = message.history?.file_upload_status;\n        if (errorState === MessageErrorState.FAILED) {\n            element = React.createElement(InlineError, { text: languagePack.errors_singleMessage });\n            className = \"WAC__message-error-failed\";\n            showBelowMessage = true;\n        }\n        else if (fileStatus === FileStatusValue.UPLOADING) {\n            element = (React.createElement(Loading, { active: true, overlay: false, small: true, assistiveText: languagePack.fileSharing_statusUploading }));\n            className = \"WAC__message-status-file-uploading\";\n        }\n        else if (fileStatus === \"success\") {\n            element = (React.createElement(CheckmarkFilled, { \"aria-label\": languagePack.fileSharing_statusUploading }));\n            className = \"WAC__message-status-file-success\";\n        }\n        // We probably should include an aria-label here but since we explicit announce state changes in the message\n        // service and this icon is contained in a live region, that would result in duplicate text being announced. We\n        // can't rely solely on the aria-label here in this live region because the SRs don't seem to reliably announce\n        // what we want to announce, moving to success for example. Our a11y expert says it's okay to leave it out here.\n        return (element && {\n            element: (React.createElement(\"div\", { className: `WAC__message-status ${className}` }, element)),\n            showBelowMessage,\n        });\n    }\n    /**\n     * Renders a focus \"handle\" for this message. When this message gets focus, we actually move focus to an element\n     * inside it instead of the entire message. This is only done when the user clicks the scroll handle button on the\n     * scroll container that moves focus into the scroll panel or when focus moves from one message to another. We move\n     * focus to the handle which is inside the message instead of the message itself because if we make the whole message\n     * actually focusable then a screen reader will read the entire message whenever any item inside it gets focus which\n     * is not desirable.\n     */\n    renderFocusHandle() {\n        return (\n        // The aria-label is dynamically added when focused.\n        // eslint-disable-next-line jsx-a11y/control-has-associated-label\n        React.createElement(\"div\", { className: \"WACMessage--focusHandle\", ref: this.focusHandleRef, tabIndex: -1, onFocus: this.onHandleFocus, onBlur: this.onHandleBlur, onKeyDown: (event) => this.onHandleKeyDown(event), onClick: () => this.reAnnounceFocusHandle(), role: \"button\" }));\n    }\n    render() {\n        if (this.shouldRenderFailedMessage()) {\n            // If an error occurred, don't attempt to do anything with the message. Just show an error.\n            return this.renderFailedRenderMessage();\n        }\n        const { serviceManager, config, localMessageItem, message, languagePack, requestInputFocus, messagesIndex, disableUserInputs, showAvatarLine, className, doAutoScroll, isMessageForInput, scrollElementIntoView, isFirstMessageItem, hideFeedback, allowNewFeedback, } = this.props;\n        const { isIntermediateStreaming, isWelcomeResponse, disableFadeAnimation } = localMessageItem.ui_state;\n        const messageItem = localMessageItem.item;\n        const responseType = messageItem.response_type;\n        const agentMessageType = messageItem.agent_message_type;\n        const fromHistory = message.history.from_history;\n        const readWidgetSaid = isFirstMessageItem;\n        if (isIntermediateStreaming &&\n            !canRenderIntermediateStreaming(messageItem.response_type)) {\n            return false;\n        }\n        const messageComponent = (React.createElement(MessageTypeComponent, { serviceManager: serviceManager, languagePack: languagePack, requestInputFocus: requestInputFocus, message: localMessageItem, originalMessage: message, disableUserInputs: disableUserInputs, isMessageForInput: isMessageForInput, config: config, doAutoScroll: doAutoScroll, scrollElementIntoView: scrollElementIntoView, hideFeedback: hideFeedback, allowNewFeedback: allowNewFeedback }));\n        const isCustomMessage = renderAsUserDefinedMessage(localMessageItem.item);\n        // Don't show animation on the welcome node or for messages that explicitly turn it off.\n        const noAnimation = isWelcomeResponse || disableFadeAnimation;\n        // If this is a user_defined response type with silent set, we don't want to render all the extra cruft around it.\n        const agentClassName = getAgentMessageClassName(agentMessageType, responseType, isCustomMessage);\n        const messageIsRequest = isRequest(message);\n        const isSystemMessage = isAgentStatusMessage(localMessageItem.item.agent_message_type);\n        let isOptionResponseWithoutTitleOrDescription = false;\n        if (isOptionItem(localMessageItem.item)) {\n            if (!localMessageItem.item.title && !localMessageItem.item.description) {\n                isOptionResponseWithoutTitleOrDescription = true;\n            }\n        }\n        let messageState;\n        if (messageIsRequest) {\n            messageState = this.renderMessageState(message);\n        }\n        return (React.createElement(\"div\", { id: `WAC__message-${messagesIndex}${serviceManager.namespace.suffix}`, className: cx(`WAC__message WAC__message-${messagesIndex}`, className, agentMessageType && \"WAC__message--agentMessage\", {\n                \"WAC__message--withAvatarLine\": showAvatarLine,\n                \"WAC__message--request\": messageIsRequest,\n                \"WAC__message--systemMessage\": isSystemMessage,\n                \"WAC__message--response\": !messageIsRequest,\n                \"WAC__message--no-animation\": noAnimation,\n                \"WAC__message--custom\": isCustomMessage,\n                \"WAC__message--disabled-inputs\": disableUserInputs,\n                \"WAC__message--has-focus\": this.state.focusHandleHasFocus,\n                \"WAC__message--option-response-without-title-or-description\": isOptionResponseWithoutTitleOrDescription,\n            }), ref: this.ref },\n            this.renderFocusHandle(),\n            showAvatarLine && this.renderAvatarLine(localMessageItem, message),\n            React.createElement(\"div\", { className: \"WAC__message--padding\" },\n                isResponse(message) && (React.createElement(\"div\", { className: \"WAC__bot-message\" },\n                    readWidgetSaid && (React.createElement(VisuallyHidden, null, this.getWidgetSaidMessage())),\n                    React.createElement(\"div\", { className: cx(\"WAC__received\", \"WAC__message-vertical-padding\", agentClassName, {\n                            \"WAC__received--text\": responseType === MessageResponseTypes.TEXT,\n                            \"WAC__received--image\": responseType === MessageResponseTypes.IMAGE,\n                            \"WAC__received--options\": responseType === MessageResponseTypes.OPTION,\n                            \"WAC__received--inlineError\": responseType === MessageResponseTypes.INLINE_ERROR,\n                            \"WAC__received--iframePreviewCard\": responseType === MessageResponseTypes.IFRAME,\n                            \"WAC__received--video\": responseType === MessageResponseTypes.VIDEO,\n                            \"WAC__received--audio\": responseType === MessageResponseTypes.AUDIO,\n                            \"WAC__received--date\": responseType === MessageResponseTypes.DATE,\n                            \"WAC__received--card\": responseType === MessageResponseTypes.CARD,\n                            \"WAC__received--carousel\": responseType === MessageResponseTypes.CAROUSEL,\n                            \"WAC__received--conversationalSearch\": responseType ===\n                                MessageResponseTypes.CONVERSATIONAL_SEARCH,\n                            \"WAC__received--carouselSingle\": isSingleItemCarousel(localMessageItem.item),\n                            \"WAC__received--button\": responseType === MessageResponseTypes.BUTTON,\n                            \"WAC__received--grid\": responseType === MessageResponseTypes.GRID,\n                            \"WAC__received--fullWidth\": localMessageItem.ui_state.fullWidth,\n                            \"WAC__message--historical\": fromHistory,\n                        }), ref: this.messageRef },\n                        React.createElement(\"div\", { className: \"WAC__received--inner\" }, messageComponent)))),\n                messageIsRequest && (React.createElement(\"div\", { className: \"WAC__sent-container\" },\n                    React.createElement(\"div\", { className: cx(\"WAC__sentAndMessageState-container\", \"WAC__message-vertical-padding\", {\n                            \"WAC__sentAndMessageState--belowMessage\": messageState?.showBelowMessage,\n                        }) },\n                        !messageState?.showBelowMessage && messageState?.element,\n                        React.createElement(\"div\", { className: \"WAC__sent\" },\n                            React.createElement(VisuallyHidden, null, languagePack.messages_youSaid),\n                            React.createElement(\"div\", { className: \"WAC__sent--bubble\" },\n                                React.createElement(\"div\", { ref: this.messageRef }, messageComponent))),\n                        messageState?.showBelowMessage && messageState?.element))))));\n    }\n}\n/**\n * Returns the class name to add to messages with the given agent message type.\n */\nfunction getAgentMessageClassName(agentMessageType, messageResponseType, isUserDefinedResponse) {\n    if (isUserDefinedResponse) {\n        return \"WAC__received--agentCustom\";\n    }\n    if (!messageResponseType ||\n        (messageResponseType !== MessageResponseTypes.TEXT &&\n            messageResponseType !== MessageResponseTypes.BUTTON)) {\n        return \"\";\n    }\n    switch (agentMessageType) {\n        case null:\n        case undefined:\n        case AgentMessageType.FROM_USER:\n            return null;\n        case AgentMessageType.RELOAD_WARNING:\n        case AgentMessageType.DISCONNECTED:\n            return \"WAC__received--chatStatusMessage\";\n        case AgentMessageType.FROM_AGENT:\n            return \"WAC__received--fromAgent\";\n        default:\n            return \"WAC__received--agentStatusMessage\";\n    }\n}\n/**\n * Indicates if this message is a status message. These are messages that are centered in the view.\n */\nfunction isAgentStatusMessage(agentMessageType) {\n    switch (agentMessageType) {\n        case null:\n        case undefined:\n        case AgentMessageType.FROM_USER:\n        case AgentMessageType.RELOAD_WARNING:\n        case AgentMessageType.DISCONNECTED:\n        case AgentMessageType.FROM_AGENT:\n        case AgentMessageType.INLINE_ERROR:\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Indicates if an item with the given response type is allowed to be rendered in an intermediate stream state.\n */\nfunction canRenderIntermediateStreaming(type) {\n    switch (type) {\n        case MessageResponseTypes.IMAGE:\n        case MessageResponseTypes.VIDEO:\n        case MessageResponseTypes.AUDIO:\n        case MessageResponseTypes.OPTION:\n        case MessageResponseTypes.IFRAME:\n        case MessageResponseTypes.INLINE_ERROR:\n        case MessageResponseTypes.CONVERSATIONAL_SEARCH:\n        case MessageResponseTypes.USER_DEFINED:\n        case MessageResponseTypes.TEXT:\n            return true;\n        default:\n            return false;\n    }\n}\nvar MessageComponent$1 = withAriaAnnouncer(injectIntl(MessageComponent, { forwardRef: true }));\n\nexport { MessageComponent as MessageClass, MoveFocusType, MessageComponent$1 as default };\n","import dayjs from 'dayjs';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Returns the time from the given timestamp localized into the user's current timezone and formatted with the\n * current locale.\n */\nfunction timestampToTimeString(timestamp) {\n    return dayjs(timestamp).format(\"LT\");\n}\n\nexport { timestampToTimeString };\n","import cx from 'classnames';\nimport throttle from 'lodash-es/throttle.js';\nimport React, { PureComponent, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { InlineLoadingComponent } from '../../react/components/inlineLoading/InlineLoadingComponent.js';\nimport { AgentBannerContainer } from '../components/agent/AgentBannerContainer.js';\nimport { AriaLiveMessage as AriaLiveMessageExport } from '../components/aria/AriaLiveMessage.js';\nimport LatestWelcomeNodes from '../components/LatestWelcomeNodes.js';\nimport { Notifications } from '../components/notifications/Notifications.js';\nimport { withServiceManager } from '../hocs/withServiceManager.js';\nimport actions from '../store/actions.js';\nimport { selectAgentDisplayState, selectInputState } from '../store/selectors.js';\nimport { MessageErrorState } from '../../../types/messaging/LocalMessageItem.js';\nimport { IS_MOBILE } from '../utils/browserUtils.js';\nimport { AUTO_SCROLL_EXTRA, AUTO_SCROLL_THROTTLE_TIMEOUT } from '../utils/constants.js';\nimport { doScrollElement, getScrollBottom } from '../utils/domUtils.js';\nimport { arrayLastValue } from '../utils/lang/arrayUtils.js';\nimport { isResponse, isRequest } from '../utils/messageUtils.js';\nimport { consoleError } from '../utils/miscUtils.js';\nimport MessageComponent, { MoveFocusType } from './MessageComponent.js';\nimport { WriteableElementName } from '../../../types/instance/ChatInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\nclass MessagesComponent extends PureComponent {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = {\n            scrollHandleHasFocus: false,\n        };\n        /**\n         * A registry of references to the child {@link MessageComponent} instances. The keys of the map are the IDs of\n         * each message item and the value is the ref to the component.\n         */\n        this.messageRefs = new Map();\n        /**\n         * A ref to the scrollable container that contains the messages.\n         */\n        this.messagesContainerWithScrollingRef = React.createRef();\n        /**\n         * A ref to the element that acts as a handle for scrolling.\n         */\n        this.scrollHandleRef = React.createRef();\n        /**\n         * A ref to the element that acts as a handle for scrolling.\n         */\n        this.agentBannerRef = React.createRef();\n        /**\n         * This will check to see if the messages list is anchored to the bottom of the panel and if so, ensure that the\n         * list is still scrolled to the bottom.\n         */\n        this.onResize = () => {\n            if (this.props.messageState.isScrollAnchored) {\n                const element = this.messagesContainerWithScrollingRef.current;\n                if (element) {\n                    element.scrollTop = element.scrollHeight;\n                }\n            }\n        };\n        /**\n         * This will execute an auto-scroll operation based on the current state of messages in the component. This should\n         * be called whenever the messages change.\n         *\n         * The scrolling rules are as follows.\n         *\n         * 1. If the last message is a welcome node, auto-scroll to the top of the message without animating. This\n         * means the user has just started a new chat, and we want to just jump to the top.\n         * 2. If the component has just mounted and the last message is not a welcome node, just jump to the bottom\n         * without animating.\n         * 3. If the typing indicator is visible, then scroll that into view.\n         * 4. Scroll to the top of the last user message. This means that the bot messages will auto-scroll until the user's\n         * last message reaches the top of the window, and then they'll stop and not scroll anymore.\n         * 5. If the there is no user message that can be scrolled to, scroll to the last bot message.\n         * 6. If the last bot message has an empty output. Just scroll to bottom.\n         *\n         * @param options The options to control how the scrolling should occur.\n         */\n        this.doAutoScroll = throttle((options = {}) => {\n            try {\n                debugAutoScroll(\"[doAutoScroll] Running doAutoScroll\", options);\n                const { scrollToTop, scrollToBottom } = options;\n                const { localMessageItems, messageState, allMessagesByID } = this.props;\n                const { isTypingCounter, isLoadingCounter } = messageState;\n                const { isAgentTyping } = selectAgentDisplayState(this.props);\n                const scrollElement = this.messagesContainerWithScrollingRef.current;\n                if (scrollToTop !== undefined) {\n                    doScrollElement(scrollElement, scrollToTop, 0, false);\n                    return;\n                }\n                if (scrollToBottom !== undefined) {\n                    const scrollTop = scrollElement.scrollHeight -\n                        scrollElement.offsetHeight -\n                        scrollToBottom;\n                    doScrollElement(scrollElement, scrollTop, 0, false);\n                    return;\n                }\n                let animate = true;\n                let setScrollTop;\n                const lastLocalItemIndex = localMessageItems.length - 1;\n                const lastLocalItem = localMessageItems.length\n                    ? localMessageItems[lastLocalItemIndex]\n                    : null;\n                const lastMessage = allMessagesByID[lastLocalItem?.fullMessageID];\n                if (!lastLocalItem) {\n                    debugAutoScroll(\"[doAutoScroll] No last time\");\n                    // No messages, so set the scroll position to the top. If we don't set this explicitly, the browser may\n                    // decide it remembers the previous scroll position and set it for us.\n                    animate = false;\n                    setScrollTop = 0;\n                }\n                else if (isTypingCounter > 0 || isLoadingCounter > 0 || isAgentTyping) {\n                    // The typing indicator is visible, so scroll to the bottom.\n                    setScrollTop = scrollElement.scrollHeight;\n                    debugAutoScroll(\"[doAutoScroll] isTyping visible\", isTypingCounter);\n                }\n                else {\n                    /**\n                     * Determines if the message should be scrolled to. The last user message should be scrolled to by default.\n                     * However, the last bot message should be scrolled to if there is no user message that can be scrolled to.\n                     */\n                    const shouldScrollToMessage = (localItem, message) => {\n                        if (isResponse(message)) {\n                            const messageRequest = allMessagesByID[message?.request_id];\n                            // If the request for this response was silent, then scroll to it instead of scrolling to where the\n                            // silent user message would be. But don't do this if it's an empty message (which happens with a\n                            // skip_use_input message from an extension).\n                            return (messageRequest?.history?.silent &&\n                                messageRequest.input?.text !== \"\");\n                        }\n                        return isRequest(message);\n                    };\n                    // Iterate backwards until we find the last message to scroll to. By default, the user's last message should be\n                    // scrolled to. However, if the user's message was silent, the last response should be scrolled to.\n                    let messageIndex = localMessageItems.length - 1;\n                    let localItem = localMessageItems[messageIndex];\n                    let lastScrollableMessageComponent = this.messageRefs.get(localItem?.ui_state.id);\n                    while (messageIndex >= 1) {\n                        localItem = localMessageItems[messageIndex];\n                        const message = allMessagesByID[localItem?.fullMessageID];\n                        if (shouldScrollToMessage(localItem, message)) {\n                            lastScrollableMessageComponent = this.messageRefs.get(localItem?.ui_state.id);\n                            debugAutoScroll(`[doAutoScroll] lastScrollableMessageComponent=${messageIndex}`, localMessageItems[messageIndex], message);\n                            break;\n                        }\n                        messageIndex--;\n                    }\n                    if (lastScrollableMessageComponent) {\n                        // Scroll to the top of the user's message. Those messages have 28px of padding on the top so let's cut\n                        // that down to just 8 by scrolling a little bit more.\n                        const offsetTop = lastScrollableMessageComponent.ref.current?.offsetTop;\n                        setScrollTop = offsetTop + AUTO_SCROLL_EXTRA;\n                        debugAutoScroll(`[doAutoScroll] Scrolling to message offsetTop=${offsetTop}`);\n                    }\n                    else {\n                        // No message found.\n                        setScrollTop = -1;\n                        debugAutoScroll(\"[doAutoScroll] No message found\");\n                    }\n                }\n                if (setScrollTop !== -1) {\n                    if (setScrollTop >= scrollElement.scrollTop) {\n                        // If this is from history, we don't want to animate.\n                        if (lastMessage?.history?.from_history) {\n                            animate = false;\n                        }\n                        debugAutoScroll(`[doAutoScroll] doScrollElement`, scrollElement, setScrollTop, animate);\n                        doScrollElement(scrollElement, setScrollTop, 0, animate);\n                        // Update the scroll anchor setting based on this new position.\n                        this.checkScrollAnchor(true, setScrollTop);\n                    }\n                }\n            }\n            catch (error) {\n                // Just ignore any errors. It's not the end of the world if scrolling doesn't work for any reason.\n                consoleError(\"An error occurred while attempting to scroll.\", error);\n            }\n        }, AUTO_SCROLL_THROTTLE_TIMEOUT);\n        /**\n         * Returns the current scrollBottom value for the message scroll panel.\n         */\n        this.getContainerScrollBottom = () => {\n            return getScrollBottom(this.messagesContainerWithScrollingRef?.current);\n        };\n        /**\n         * Scrolls the given element into view so that it is fully visible. If the element is already visible, then no\n         * scrolling will be done.\n         *\n         * @param element The element to scroll into view.\n         * @param paddingTop An additional pixel value that will over scroll by this amount to give a little padding between\n         * the element and the top of the scroll area.\n         * @param paddingBottom An additional pixel value that will over scroll by this amount to give a little padding\n         * between the element and the top of the scroll area.\n         */\n        this.scrollElementIntoView = (element, paddingTop = 8, paddingBottom = 8) => {\n            const scrollElement = this.messagesContainerWithScrollingRef.current;\n            const scrollRect = scrollElement.getBoundingClientRect();\n            const elementRect = element.getBoundingClientRect();\n            // The distance the top and bottom of the element is from the top of the message list.\n            const topDistanceFromTop = elementRect.top - scrollRect.top + scrollElement.scrollTop - paddingTop;\n            const bottomDistanceFromTop = elementRect.bottom -\n                scrollRect.top +\n                scrollElement.scrollTop +\n                paddingBottom;\n            const elementHeight = element.offsetHeight + paddingTop + paddingBottom;\n            if (topDistanceFromTop < scrollElement.scrollTop ||\n                elementHeight > scrollElement.offsetHeight) {\n                // The top of the element is above the fold or the element doesn't fully fit. Scroll it so its top is at the top\n                // of the scroll panel.\n                doScrollElement(scrollElement, topDistanceFromTop, 0);\n            }\n            else if (bottomDistanceFromTop >\n                scrollElement.scrollTop + scrollElement.offsetHeight) {\n                // The bottom of the element is below the fold. Scroll it so its bottom is at the bottom of the scroll panel.\n                doScrollElement(scrollElement, bottomDistanceFromTop - scrollElement.offsetHeight, 0);\n            }\n        };\n        /**\n         * This is a callback called by a child message component to request that it move focus to a different message.\n         */\n        this.requestMoveFocus = (moveFocusType, currentMessageIndex) => {\n            if (moveFocusType === MoveFocusType.INPUT) {\n                this.props.requestInputFocus();\n            }\n            else {\n                const { localMessageItems } = this.props;\n                let index;\n                switch (moveFocusType) {\n                    case MoveFocusType.LAST:\n                        index = localMessageItems.length - 1;\n                        break;\n                    case MoveFocusType.NEXT:\n                        index = currentMessageIndex + 1;\n                        if (index >= localMessageItems.length) {\n                            index = 0;\n                        }\n                        break;\n                    case MoveFocusType.PREVIOUS:\n                        index = currentMessageIndex - 1;\n                        if (index < 0) {\n                            index = localMessageItems.length - 1;\n                        }\n                        break;\n                    default:\n                        index = 0;\n                        break;\n                }\n                const messageItem = localMessageItems[index];\n                const ref = this.messageRefs.get(messageItem?.ui_state.id);\n                if (ref) {\n                    ref.requestHandleFocus();\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        this.scrollPanelObserver = new ResizeObserver(this.onResize);\n        this.scrollPanelObserver.observe(this.messagesContainerWithScrollingRef.current);\n        this.previousScrollOffsetHeight =\n            this.messagesContainerWithScrollingRef.current.offsetHeight;\n    }\n    componentDidUpdate(oldProps) {\n        const newProps = this.props;\n        // If the number of messages changes (usually because of new messages) or the state of the \"is typing\" indicator\n        // changes, then we need to check to see if we want to perform some auto-scrolling behavior.\n        const numMessagesChanged = oldProps.localMessageItems.length !== newProps.localMessageItems.length;\n        const oldAgentDisplayState = selectAgentDisplayState(oldProps);\n        const newAgentDisplayState = selectAgentDisplayState(newProps);\n        const typingChanged = oldProps.messageState.isTypingCounter !==\n            newProps.messageState.isTypingCounter ||\n            oldProps.messageState.isLoadingCounter !==\n                newProps.messageState.isLoadingCounter ||\n            oldAgentDisplayState.isAgentTyping !== newAgentDisplayState.isAgentTyping;\n        if (numMessagesChanged || typingChanged) {\n            const newLastItem = arrayLastValue(newProps.localMessageItems);\n            const oldLastItem = arrayLastValue(oldProps.localMessageItems);\n            // If the last message has changed, then do an auto scroll.\n            const lastItemChanged = newLastItem !== oldLastItem;\n            if (lastItemChanged || typingChanged) {\n                this.doAutoScroll();\n            }\n        }\n    }\n    componentWillUnmount() {\n        // Remove the listeners and observer we added previously.\n        this.scrollPanelObserver.unobserve(this.messagesContainerWithScrollingRef.current);\n    }\n    /**\n     * This function is called when the scrollable messages list is scrolled. It will determine if the scroll panel\n     * has been scrolled all the way to the bottom and if so, it will enable the scroll anchor that will keep it there.\n     * Note that this callback is not attached via the normal react method with an `onScroll` prop as that doesn't\n     * work with under a shadow DOM. This callback is attached directly in {@link componentDidMount}.\n     *\n     * This function will also make a somewhat crude attempt to distinguish if a scroll event has occurred because the\n     * user initiated a scroll or if the application initiated a scroll as the result of a changing in size of the\n     * widget. If the user initiates a scroll, then we use that event to anchor or un-anchor the scroll panel. If the\n     * application did the scroll, we want the anchor state to remain unchanged.\n     *\n     * @param fromAutoScroll Indicates if the reason we are checking the anchor is due to an auto-scroll action.\n     * @param assumeScrollTop A value to assume the scroll panel is (or will be) scrolled to. This can be useful when\n     * an animation is occurring and the current scroll position isn't the final scroll position.\n     */\n    checkScrollAnchor(fromAutoScroll, assumeScrollTop) {\n        const scrollElement = this.messagesContainerWithScrollingRef.current;\n        // If we're checking because of auto-scrolling, we want check the scroll position even if the scroll detection\n        // is normally suspended because of something like an animation in progress.\n        if (fromAutoScroll ||\n            (this.previousScrollOffsetHeight === scrollElement.offsetHeight &&\n                !this.props.suspendScrollDetection)) {\n            // If the scroll panel has been scrolled all the way to the bottom, turn on the anchor.\n            const assumedScrollTop = assumeScrollTop !== undefined\n                ? assumeScrollTop\n                : scrollElement.scrollTop;\n            const isScrollAnchored = assumedScrollTop >=\n                scrollElement.scrollHeight - scrollElement.offsetHeight;\n            if (isScrollAnchored !== this.props.messageState.isScrollAnchored) {\n                this.props.serviceManager.store.dispatch(actions.setChatMessagesStateProperty(\"isScrollAnchored\", isScrollAnchored));\n            }\n        }\n        this.previousScrollOffsetHeight = scrollElement.offsetHeight;\n    }\n    /**\n     * Moves focus to the button in the agent header.\n     */\n    requestAgentBannerFocus() {\n        if (this.agentBannerRef.current) {\n            return this.agentBannerRef.current.requestFocus();\n        }\n        return false;\n    }\n    /**\n     * Scrolls to the (full) message with the given ID. Since there may be multiple message items in a given\n     * message, this will scroll the first message to the top of the message window.\n     *\n     * @param messageID The (full) message ID to scroll to.\n     * @param animate Whether or not the scroll should be animated. Defaults to true.\n     */\n    doScrollToMessage(messageID, animate = true) {\n        try {\n            // Find the component that has the message we want to scroll to.\n            const { localMessageItems } = this.props;\n            let panelComponent;\n            for (let index = 0; index <= localMessageItems.length; index++) {\n                const messageItem = localMessageItems[index];\n                if (messageItem.fullMessageID === messageID) {\n                    panelComponent = this.messageRefs.get(messageItem.ui_state.id);\n                    break;\n                }\n            }\n            if (panelComponent) {\n                const scrollElement = this.messagesContainerWithScrollingRef.current;\n                // Scroll to the top of the message.\n                const setScrollTop = panelComponent.ref.current.offsetTop;\n                // Do the scrolling.\n                doScrollElement(scrollElement, setScrollTop, 0, animate);\n                // Update the scroll anchor setting based on this new position.\n                this.checkScrollAnchor(true, setScrollTop);\n            }\n        }\n        catch (error) {\n            // Just ignore any errors. It's not the end of the world if scrolling doesn't work for any reason.\n            consoleError(\"An error occurred while attempting to scroll.\", error);\n        }\n    }\n    /**\n     * Get all the elements inside the lastBotMessageGroupID.\n     */\n    getLastOutputMessageElements() {\n        const { localMessageItems, allMessagesByID } = this.props;\n        const lastMessageItem = arrayLastValue(localMessageItems);\n        const lastMessage = allMessagesByID[lastMessageItem?.fullMessageID];\n        if (isResponse(lastMessage)) {\n            const elements = [];\n            let hasFoundLastBotMessageGroupID = false;\n            // Loop from end of messages array until we find the elements with the lastBotMessageGroupID.\n            for (let index = localMessageItems.length - 1; index >= 0; index--) {\n                const messageItem = localMessageItems[index];\n                const componentRef = this.messageRefs.get(messageItem?.ui_state.id);\n                if (componentRef) {\n                    const { getLocalMessage } = componentRef;\n                    if (getLocalMessage().fullMessageID === lastMessage.id) {\n                        hasFoundLastBotMessageGroupID = true;\n                        const element = componentRef.ref?.current;\n                        if (element) {\n                            elements.push(element);\n                        }\n                        else {\n                            // If there are no refs to the elements yet, there is nothing to do here.\n                            break;\n                        }\n                    }\n                    else if (hasFoundLastBotMessageGroupID) {\n                        break;\n                    }\n                }\n            }\n            // Reverse so the older messages are first.\n            return elements.reverse();\n        }\n        return [];\n    }\n    /**\n     * JSX to show typing indicator.\n     *\n     * @param isTypingMessage The aria label for the typing indicator.\n     * @param index The index of this message.\n     */\n    renderTypingIndicator(isTypingMessage, index) {\n        return (React.createElement(\"div\", { className: `WAC__message WAC__message-${index} WAC__message--lastMessage` },\n            React.createElement(\"div\", { className: \"WAC__message--padding\" },\n                isTypingMessage && React.createElement(AriaLiveMessageExport, { message: isTypingMessage }),\n                React.createElement(\"div\", { className: \"WAC__bot-message\" },\n                    React.createElement(\"div\", { className: \"WAC__received WAC__received--loading WAC__message-vertical-padding\" },\n                        React.createElement(\"div\", { className: \"WAC__received--inner\" },\n                            React.createElement(InlineLoadingComponent, { loop: true, carbonTheme: this.props.carbonTheme })))))));\n    }\n    /**\n     * Renders the given message.\n     *\n     * @param localMessage The localMessage to be processed.\n     * @param fullMessage The full message to be processed.\n     * @param messagesIndex The index of the message.\n     * @param showBeforeWelcomeNodeElement Boolean indicating if this is the first message in the most recent welcome\n     * node.\n     * @param isMessageForInput Indicates if this message is part the most recent message response that allows for input.\n     * @param isFirstMessageItem Indicates if this message item is the first item in a message response.\n     * @param lastMessageID The ID of the last full message shown.\n     */\n    renderMessage(localMessage, fullMessage, messagesIndex, showBeforeWelcomeNodeElement, isMessageForInput, isFirstMessageItem, lastMessageID) {\n        const { serviceManager, config, languagePack, requestInputFocus, persistedToBrowserStorage, botName, messageState, locale, botAvatarURL, carbonTheme, useAITheme, } = this.props;\n        const inputState = selectInputState(this.props);\n        const { isAgentTyping } = selectAgentDisplayState(this.props);\n        const { isTypingCounter, isLoadingCounter } = messageState;\n        const { chatState } = persistedToBrowserStorage;\n        const { disclaimersAccepted } = chatState;\n        // If there is a disclaimer, messages should only be rendered once it's accepted.\n        if (config.public.disclaimer?.is_on &&\n            !disclaimersAccepted[window.location.hostname]) {\n            return null;\n        }\n        const totalMessagesWithTyping = this.props.localMessageItems.length +\n            (isTypingCounter > 0 || isLoadingCounter > 0 || isAgentTyping ? 1 : 0);\n        const isLastMessage = messagesIndex === totalMessagesWithTyping - 1;\n        const className = cx({\n            \"WAC__message--firstMessage\": messagesIndex === 0,\n            \"WAC__message--lastMessage\": isLastMessage,\n        });\n        // The user can only provide feedback on the last message.\n        const allowNewFeedback = localMessage.fullMessageID === lastMessageID;\n        const messageItemID = localMessage.ui_state.id;\n        const message = (React.createElement(MessageComponent, { ref: (component) => {\n                if (component) {\n                    this.messageRefs.set(messageItemID, component);\n                }\n                else {\n                    this.messageRefs.delete(messageItemID);\n                }\n            }, className: className, config: config, localMessageItem: localMessage, message: fullMessage, languagePack: languagePack, requestInputFocus: requestInputFocus, serviceManager: serviceManager, messagesIndex: messagesIndex, botName: botName, disableUserInputs: inputState.isReadonly, isMessageForInput: isMessageForInput, showAvatarLine: isFirstMessageItem, botAvatarURL: botAvatarURL, requestMoveFocus: this.requestMoveFocus, doAutoScroll: this.doAutoScroll, scrollElementIntoView: this.scrollElementIntoView, isFirstMessageItem: isFirstMessageItem, locale: locale, carbonTheme: carbonTheme, useAITheme: useAITheme, allowNewFeedback: allowNewFeedback, hideFeedback: false }));\n        if (showBeforeWelcomeNodeElement) {\n            return (React.createElement(LatestWelcomeNodes, { welcomeNodeBeforeElement: serviceManager.writeableElements[WriteableElementName.WELCOME_NODE_BEFORE_ELEMENT], key: messageItemID }, message));\n        }\n        return React.createElement(Fragment, { key: messageItemID }, message);\n    }\n    /**\n     * Renders the agent banner that appears at the top of the messages list when connecting to an agent.\n     */\n    renderAgentBanner() {\n        return (React.createElement(AgentBannerContainer, { bannerRef: this.agentBannerRef, onButtonClick: this.props.onEndAgentChat }));\n    }\n    /**\n     * Renders an element that acts as a \"handle\" for the scroll panel. This is provided to allow the scroll panel to be\n     * moved using the keyboard. When this element gets focus the keyboard can be used. Normally we would add\n     * tabIndex=0 to the scroll panel itself but that has the unfortunate consequence of causing the scroll panel\n     * to get focus when you click on it which we don't want. When this element gets focus it causes an extra class\n     * name to be added to the scroll panel which displays a focus indicator on the scroll panel even though it\n     * doesn't actually have focus. This element is not actually visible.\n     *\n     * In addition to providing the ability to scroll the panel, this acts as a button that will move focus to one of\n     * the messages inside the scroll panel to provide additional navigation options.\n     *\n     * @param atTop Indicates if we're rendering the scroll handle at the top or bottom of the scroll panel.\n     */\n    renderScrollHandle(atTop) {\n        const { languagePack } = this.props;\n        let labelKey;\n        if (IS_MOBILE) {\n            labelKey = atTop ? \"messages_scrollHandle\" : \"messages_scrollHandleEnd\";\n        }\n        else {\n            labelKey = atTop\n                ? \"messages_scrollHandleDetailed\"\n                : \"messages_scrollHandleEndDetailed\";\n        }\n        const onClick = IS_MOBILE\n            ? undefined\n            : () => this.requestMoveFocus(atTop ? MoveFocusType.FIRST : MoveFocusType.LAST, 0);\n        return (React.createElement(\"button\", { type: \"button\", className: \"WACMessages--scrollHandle\", ref: this.scrollHandleRef, tabIndex: 0, \"aria-label\": languagePack[labelKey] || languagePack.messages_scrollHandle, onClick: onClick, onFocus: () => this.setState({ scrollHandleHasFocus: true }), onBlur: () => this.setState({ scrollHandleHasFocus: false }) }));\n    }\n    /**\n     * As soon as the user sends a message, we want to disable all the previous message responses to prevent the user\n     * from interacting with them again. However, if the user's message results in an error, we want to re-enable the\n     * last response from the bot to prevent the user from getting stuck in the case where the input bar is disabled.\n     * This function returns the id of the last message that is permitted to be enabled.\n     */\n    getMessageIDForUserInput() {\n        const { localMessageItems, allMessagesByID } = this.props;\n        for (let index = localMessageItems.length - 1; index >= 0; index--) {\n            const message = localMessageItems[index];\n            const originalMessage = allMessagesByID[message.fullMessageID];\n            if (isRequest(originalMessage) &&\n                originalMessage?.history?.error_state !== MessageErrorState.FAILED) {\n                // If we find a request that was not an error, then we need to disable everything.\n                return null;\n            }\n            if (isResponse(originalMessage)) {\n                // If we didn't find a successful request, then the first response we find can be enabled.\n                return message.fullMessageID;\n            }\n        }\n        // Nothing should be enabled.\n        return null;\n    }\n    /**\n     * Returns an array of React elements created by this.renderMessage starting from a given index and until the end of\n     * the array OR optionally until we hit a new welcome node.\n     *\n     * @param messageIDForInput The ID of the last message response that can receive input.\n     */\n    renderMessages(messageIDForInput) {\n        const { localMessageItems, allMessagesByID } = this.props;\n        const renderMessageArray = [];\n        const lastMessageID = arrayLastValue(localMessageItems)?.fullMessageID;\n        let previousMessageID = null;\n        for (let currentIndex = 0; currentIndex < localMessageItems.length; currentIndex++) {\n            const localMessageItem = localMessageItems[currentIndex];\n            const fullMessage = allMessagesByID[localMessageItem.fullMessageID];\n            const isMessageForInput = messageIDForInput === localMessageItem.fullMessageID;\n            const isFirstMessageItem = previousMessageID !== localMessageItem.fullMessageID;\n            const showBeforeWelcomeNodeElement = localMessageItem.ui_state.isWelcomeResponse && isFirstMessageItem;\n            previousMessageID = localMessageItem.fullMessageID;\n            renderMessageArray.push(this.renderMessage(localMessageItem, fullMessage, currentIndex, showBeforeWelcomeNodeElement, isMessageForInput, isFirstMessageItem, lastMessageID));\n        }\n        return renderMessageArray;\n    }\n    render() {\n        const { localMessageItems, messageState, intl, botName, serviceManager, notifications, } = this.props;\n        const { isTypingCounter, isLoadingCounter } = messageState;\n        const { isAgentTyping } = selectAgentDisplayState(this.props);\n        const { scrollHandleHasFocus } = this.state;\n        const messageIDForInput = this.getMessageIDForUserInput();\n        const regularMessages = this.renderMessages(messageIDForInput);\n        let isTypingMessage;\n        if (isAgentTyping) {\n            isTypingMessage = intl.formatMessage({ id: \"messages_agentIsTyping\" });\n        }\n        else if (isTypingCounter) {\n            isTypingMessage = intl.formatMessage({ id: \"messages_botIsTyping\" }, { botName });\n        }\n        else if (isLoadingCounter) {\n            isTypingMessage = intl.formatMessage({ id: \"messages_botIsLoading\" }, { botName });\n        }\n        return (React.createElement(\"div\", { id: `WACMessages--holder${serviceManager.namespace.suffix}`, className: \"WACMessages--holder\" },\n            this.renderAgentBanner(),\n            React.createElement(\"div\", { className: cx(\"WACMessages__Wrapper\", {\n                    \"WACMessages__Wrapper--scrollHandleHasFocus\": scrollHandleHasFocus,\n                }) },\n                React.createElement(\"div\", { id: `WAC__messages${serviceManager.namespace.suffix}`, className: \"WAC__messages\", ref: this.messagesContainerWithScrollingRef, onScroll: () => this.checkScrollAnchor() },\n                    this.renderScrollHandle(true),\n                    regularMessages,\n                    (Boolean(isTypingCounter) ||\n                        Boolean(isLoadingCounter) ||\n                        isAgentTyping) &&\n                        this.renderTypingIndicator(isTypingMessage, localMessageItems.length),\n                    React.createElement(Notifications, { serviceManager: serviceManager, notifications: notifications }),\n                    this.renderScrollHandle(false)))));\n    }\n}\nfunction debugAutoScroll(message, ...args) {\n}\nvar MessagesComponent$1 = withServiceManager(connect((state) => state, null, null, {\n    forwardRef: true,\n})(MessagesComponent));\n\nexport { MessagesComponent as MessagesComponentClass, MessagesComponent$1 as default };\n","import React, { useContext } from 'react';\nimport { ServiceManagerContext } from '../contexts/ServiceManagerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a high order component that will inject a {@link ServiceManager} in to a component.\n */\nfunction withServiceManager(Component) {\n    // 2. Tell forwardRef what ref type (here unknown) and what props (OuterProps) look like\n    const Wrapped = React.forwardRef((props, ref) => {\n        const serviceManager = useContext(ServiceManagerContext);\n        return (React.createElement(Component, { ...props, ref: ref, serviceManager: serviceManager }));\n    });\n    // 3. (Optional) for better React DevTools display\n    Wrapped.displayName = `withServiceManager(${Component.displayName || Component.name || \"Component\"})`;\n    return Wrapped;\n}\n\nexport { ServiceManagerContext, withServiceManager };\n","import memoizeOne from 'memoize-one';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Creates a memoizer that will take an array of keys and a map of those keys to values and return an array of\n * values that corresponds to those keys.\n *\n * This is optimized to only return a new array of values if the array would actually contain different values\n * (either in a different order or different values). It performs element-wise comparisons of both the requested\n * array of keys as well as only the specific values from the map. If the map has extra values that are not used,\n * those will be ignored.\n *\n * For example:\n * ['key1'], {key1: 'value1', key2: 'value2'} => ['value1']\n */\nfunction createUnmappingMemoizer() {\n    return memoizeOne((keys, map) => keys.map((key) => map[key]), isUnmappingEqual);\n}\n/**\n * This function will determine if any of the specific messages used by this class have changed. Note: this could\n * be a little more efficient if it was pushed up higher in the component chain.\n */\nfunction isUnmappingEqual(newArgs, oldArgs) {\n    const [keys1, map1] = newArgs;\n    const [keys2, map2] = oldArgs;\n    if (keys1 === keys2 && map1 === map2) {\n        // Both sets of arguments are the same.\n        return true;\n    }\n    if (keys1.length !== keys2.length) {\n        // The array are different sizes, so the values will not be the same.\n        return false;\n    }\n    // Check each value one by one.\n    for (let index = 0; index <= keys1.length; index++) {\n        const key1 = keys1[index];\n        const key2 = keys2[index];\n        if (key1 !== key2) {\n            // If a key is different, the values will be different.\n            return false;\n        }\n        const value1 = map1[key1];\n        const value2 = map2[key2];\n        if (value1 !== value2) {\n            // A value was found to be different.\n            return false;\n        }\n    }\n    // Everything found to be the same.\n    return true;\n}\n\nexport { createUnmappingMemoizer };\n","import React from 'react';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport { ConfirmModal } from './ConfirmModal.js';\nimport { ScreenShareState } from '../../../../types/config/ServiceDeskConfig.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Displays a modal asking if the user wants to end a chat with an agent. This also covers the case where the user\n * cancels a request for an agent before an agent has joined.\n */\nfunction RequestScreenShareModal() {\n    const serviceManager = useServiceManager();\n    const languagePack = useLanguagePack();\n    const onConfirm = () => {\n        serviceManager.humanAgentService?.screenShareUpdateRequestState(ScreenShareState.ACCEPTED);\n    };\n    const onCancel = () => {\n        serviceManager.humanAgentService?.screenShareUpdateRequestState(ScreenShareState.DECLINED);\n    };\n    const title = languagePack.agent_sharingRequestTitle;\n    const message = languagePack.agent_sharingRequestMessage;\n    const cancelButtonLabel = languagePack.agent_sharingDeclineButton;\n    const confirmButtonLabel = languagePack.agent_sharingAcceptButton;\n    return (React.createElement(ConfirmModal, { title: title, message: message, onConfirm: onConfirm, onCancel: onCancel, cancelButtonLabel: cancelButtonLabel, confirmButtonLabel: confirmButtonLabel, modalAnnounceMessage: message, serviceManager: serviceManager }));\n}\n\nexport { RequestScreenShareModal };\n","import React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport MessagesComponent from '../containers/MessagesComponent.js';\nimport '../utils/constants.js';\nimport { doFocusRef, focusOnFirstFocusableItemInArrayOfElements } from '../utils/domUtils.js';\nimport { createUnmappingMemoizer } from '../utils/memoizerUtils.js';\nimport { consoleError, createDidCatchErrorData } from '../utils/miscUtils.js';\nimport { CatastrophicError as CatastrophicErrorExport } from './CatastrophicError.js';\nimport { BotHeader as BotHeaderExport } from './header/BotHeader.js';\nimport { Input as InputExport } from './input/Input.js';\nimport { EndAgentChatModal } from './modals/EndAgentChatModal.js';\nimport { RequestScreenShareModal } from './modals/RequestScreenShareModal.js';\nimport WriteableElement from './WriteableElement.js';\nimport { WriteableElementName } from '../../../types/instance/ChatInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nclass Chat extends Component {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = {\n            showEndChatConfirmation: false,\n            hasCaughtError: false,\n        };\n        /**\n         * A React ref to the Input component.\n         */\n        this.inputRef = React.createRef();\n        /**\n         * A React ref to the Header component.\n         */\n        this.headerRef = React.createRef();\n        /**\n         * A React ref to the Messages component.\n         */\n        this.messagesRef = React.createRef();\n        /**\n         * This is the memoized messages used in this component. This is the step that pulls the messages from\n         * the map and puts them in the right order in an array.\n         */\n        this.messagesToArray = createUnmappingMemoizer();\n        /**\n         * The callback that can be called when the end chat confirmation panel should be hidden.\n         */\n        this.hideConfirmEndChat = () => {\n            // Hide the modal and then move focus back to the input field.\n            this.setState({ showEndChatConfirmation: false });\n            setTimeout(() => {\n                // The input field may still be disabled until the state change is re-rendered, so defer the focus move.\n                this.requestInputFocus();\n            });\n        };\n        /**\n         * The callback that can be called when the end chat confirmation panel should be shown.\n         */\n        this.showConfirmEndChat = () => {\n            this.setState({ showEndChatConfirmation: true });\n        };\n        /**\n         * The callback that can be called when the end agent chat confirmation panel should be shown.\n         */\n        this.confirmAgentEndChat = () => {\n            this.hideConfirmEndChat();\n            this.props.serviceManager.humanAgentService.endChat(true);\n        };\n        /**\n         * If we have nothing to focus on correctly in the chat window, we focus on the header. If the header has no buttons\n         * available, we can fall back to focusing on the messages scroll handle.\n         */\n        this.requestDefaultFocus = () => {\n            if (!this.headerRef?.current?.requestFocus()) {\n                doFocusRef(this.messagesRef.current?.scrollHandleRef);\n            }\n        };\n        /**\n         * This is a callback function that will request that focus be moved to the main input field where the user types\n         * in their requests to the assistant. If the input is currently disabled or hidden, then we will try to focus on\n         * a focusable option in the latest responses from the assistant. If that doesn't exist then focus will be moved\n         * to the close button instead.\n         *\n         */\n        this.requestInputFocus = () => {\n            const { agentDisplayState } = this.props;\n            try {\n                // If the agent banner is visible and the input field is disabled, move focus there.\n                if (agentDisplayState.isConnectingOrConnected &&\n                    agentDisplayState.disableInput) {\n                    if (this.messagesRef.current.requestAgentBannerFocus()) {\n                        return;\n                    }\n                }\n                if (this.inputRef.current) {\n                    if (this.props.inputState.fieldVisible && !this.shouldDisableInput()) {\n                        this.inputRef.current.takeFocus();\n                    }\n                    else {\n                        // This will attempt to move focus to the last output message in the message list. This is intended to cover\n                        // the use case where the customer has disabled the input field. When the assistant returns a response and\n                        // there is no input field, the expectation is that something in that response will be focusable and we'll\n                        // try to move focus to it. If the last message is not a response and the input field is disabled, that\n                        // means the assistant is processing a request. In that case, we don't want to move focus to a message but\n                        // rather fallback to something else like the close button.\n                        const htmlElements = this.messagesRef.current.getLastOutputMessageElements();\n                        if (!focusOnFirstFocusableItemInArrayOfElements(htmlElements)) {\n                            this.requestDefaultFocus();\n                        }\n                    }\n                }\n                else {\n                    this.requestDefaultFocus();\n                }\n            }\n            catch (error) {\n                consoleError(\"An error occurred in Chat.requestInputFocus\", error);\n            }\n        };\n        /**\n         * Requests an auto scroll operation to happen on the messages panel. See {@link MessagesComponent#doAutoScroll} for\n         * more information.\n         */\n        this.doAutoScroll = (options) => {\n            this.messagesRef.current?.doAutoScroll(options);\n        };\n        /**\n         * Returns the current scrollBottom value for the message scroll panel.\n         */\n        this.getMessagesScrollBottom = () => {\n            return this.messagesRef?.current?.getContainerScrollBottom();\n        };\n        /**\n         * The callback that is called when the user selects one or more files to be uploaded.\n         */\n        this.onFilesSelectedForUpload = (uploads) => {\n            const isInputToAgent = this.props.agentDisplayState.isConnectingOrConnected;\n            if (isInputToAgent) {\n                this.props.serviceManager.humanAgentService.filesSelectedForUpload(uploads);\n                // If the user chose a file and multiple files are not allowed, the file input will become disabled so we need to\n                // move focus back to the text input.\n                if (!this.props.inputState.allowMultipleFileUploads) {\n                    this.requestInputFocus();\n                }\n            }\n        };\n    }\n    async scrollOnHydrationComplete() {\n        // Once the hydration is complete, we want to scroll to the very bottom.\n        this.doAutoScroll();\n    }\n    componentDidMount() {\n        if (this.props.isHydrationAnimationComplete) {\n            setTimeout(() => {\n                // We need to make sure React has finished rendering updates before we scroll.\n                this.scrollOnHydrationComplete();\n            });\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { isHydrationAnimationComplete, agentState } = this.props;\n        // If we don't wait for the animation to complete, the auto scroll can not work correctly.\n        // Thankfully, we have this property already to look at and kick off the autoscroll.\n        if (isHydrationAnimationComplete &&\n            !prevProps.isHydrationAnimationComplete) {\n            setTimeout(() => {\n                // We need to make sure React has finished rendering updates before we scroll.\n                this.scrollOnHydrationComplete();\n            });\n        }\n        // This covers the case where an agent joins while the confirmation modal is visible.\n        const connectingChanged = agentState.isConnecting !== prevProps.agentState.isConnecting;\n        if (this.state.showEndChatConfirmation && connectingChanged) {\n            this.hideConfirmEndChat();\n        }\n    }\n    componentDidCatch(error, errorInfo) {\n        this.props.serviceManager.actions.errorOccurred(createDidCatchErrorData(\"Chat\", error, errorInfo));\n        this.setState({ hasCaughtError: true });\n    }\n    /**\n     * Scrolls to the (full) message with the given ID. Since there may be multiple message items in a given\n     * message, this will scroll the first message to the top of the message window.\n     *\n     * @param messageID The (full) message ID to scroll to.\n     * @param animate Whether or not the scroll should be animated. Defaults to true.\n     */\n    doScrollToMessage(messageID, animate = true) {\n        this.messagesRef.current?.doScrollToMessage(messageID, animate);\n    }\n    getMessageInput() {\n        return this.inputRef.current?.getMessageInput();\n    }\n    /**\n     * Determines if the input field should be disabled based on the current props.\n     */\n    shouldDisableInput() {\n        return (this.props.inputState.isReadonly ||\n            this.props.agentDisplayState.disableInput);\n    }\n    /**\n     * Determines if the send button should be disabled based on the current props. The send button is disabled if the\n     * input field should be disabled or if the messages are not yet hydrated (ready to be shown). We let the user\n     * type into the input field before the messages are ready to avoid messing with moving focus around, but we don't\n     * let them send the message.\n     */\n    shouldDisableSend() {\n        const { isHydrated } = this.props;\n        return this.shouldDisableInput() || !isHydrated;\n    }\n    renderMessagesAndInput() {\n        const { languagePack, messageState, intl, allMessageItemsByID, isHydrated, serviceManager, inputState, onUserTyping, agentState, botName, onSendInput, locale, useAITheme, carbonTheme, agentDisplayState, } = this.props;\n        const { fieldVisible, files, allowFileUploads, allowedFileUploadTypes, allowMultipleFileUploads, stopStreamingButtonState, } = inputState;\n        const { fileUploadInProgress } = agentState;\n        const { inputPlaceholderKey } = agentDisplayState;\n        // If there are any files currently selected or being uploaded and multiple files are not allowed, then show the\n        // button as disabled.\n        const numFiles = files?.length ?? 0;\n        const anyCurrentFiles = numFiles > 0 || fileUploadInProgress;\n        const showUploadButtonDisabled = anyCurrentFiles && !allowMultipleFileUploads;\n        return (React.createElement(React.Fragment, null,\n            isHydrated && (React.createElement(\"div\", { className: \"WACMessagesContainer__NonInputContainer\" },\n                React.createElement(MessagesComponent, { ref: this.messagesRef, messageState: messageState, localMessageItems: this.messagesToArray(messageState.localMessageIDs, allMessageItemsByID), requestInputFocus: this.requestInputFocus, botName: botName, intl: intl, onEndAgentChat: this.showConfirmEndChat, locale: locale, useAITheme: useAITheme, carbonTheme: carbonTheme }))),\n            React.createElement(WriteableElement, { slotName: WriteableElementName.BEFORE_INPUT_ELEMENT, id: `beforeInputElement${serviceManager.namespace.suffix}` }),\n            React.createElement(InputExport, { ref: this.inputRef, languagePack: languagePack, serviceManager: serviceManager, disableInput: this.shouldDisableInput(), disableSend: this.shouldDisableSend(), isInputVisible: fieldVisible, onSendInput: onSendInput, onUserTyping: onUserTyping, showUploadButton: allowFileUploads, disableUploadButton: showUploadButtonDisabled, allowedFileUploadTypes: allowedFileUploadTypes, allowMultipleFileUploads: allowMultipleFileUploads, pendingUploads: files, onFilesSelectedForUpload: this.onFilesSelectedForUpload, placeholder: languagePack[inputPlaceholderKey], isStopStreamingButtonVisible: stopStreamingButtonState.isVisible, isStopStreamingButtonDisabled: stopStreamingButtonState.isDisabled }),\n            this.state.showEndChatConfirmation && (React.createElement(EndAgentChatModal, { onConfirm: this.confirmAgentEndChat, onCancel: this.hideConfirmEndChat })),\n            this.props.agentState.showScreenShareRequest && (React.createElement(RequestScreenShareModal, null))));\n    }\n    render() {\n        const { serviceManager, languagePack, onClose, onCloseAndRestart, onRestart, onToggleHomeScreen, botName, headerDisplayName, headerAvatarConfig, } = this.props;\n        const { hasCaughtError } = this.state;\n        const className = \"WAC\";\n        return (React.createElement(\"div\", { className: className },\n            React.createElement(BotHeaderExport, { ref: this.headerRef, onClose: onClose, onCloseAndRestart: onCloseAndRestart, onRestart: onRestart, headerDisplayName: headerDisplayName, headerAvatarConfig: headerAvatarConfig, onToggleHomeScreen: onToggleHomeScreen, enableChatHeaderConfig: true, includeWriteableElement: true }),\n            React.createElement(NonHeaderBackground, null),\n            React.createElement(\"div\", { className: \"WACPanelContent WAC__ChatNonHeaderContainer\" },\n                hasCaughtError && (React.createElement(\"div\", { className: \"WAC__MessagesErrorHandler\" },\n                    React.createElement(CatastrophicErrorExport, { serviceManager: serviceManager, languagePack: languagePack, onRestart: onRestart, showHeader: false, botName: botName, headerDisplayName: headerDisplayName }))),\n                !hasCaughtError && (React.createElement(\"div\", { className: \"WAC__messagesAndInputContainer\" }, this.renderMessagesAndInput())))));\n    }\n}\n/**\n * Displays a background that covers the non-header area of the chat.\n */\nfunction NonHeaderBackground() {\n    const isVisible = useSelector((state) => state.showNonHeaderBackgroundCover);\n    return isVisible ? (React.createElement(\"div\", { className: \"WACBackgroundCover WACBackgroundCover__NonHeader\" })) : null;\n}\nvar Chat$1 = injectIntl(Chat, { forwardRef: true });\n\nexport { Chat as ChatClass, Chat$1 as default };\n"],"names":["ErrorMessageDark","linearGradientID","uuid","React","viewBox","id","x1","y1","x2","y2","gradientTransform","gradientUnits","offset","stopColor","stopOpacity","width","height","fill","points","opacity","className","d","ErrorMessageLight","CatastrophicError","serviceManager","onClose","languagePack","onRestart","showHeader","botName","headerDisplayName","intl","useIntl","carbonTheme","useSelector","state","theme","isDarkTheme","CarbonTheme","G90","G100","errorBodyText","formatMessage","BotHeaderExport","onToggleHomeScreen","includeWriteableElement","cx","errors_somethingWrong","RichTextExport","text","unstable__ChatButton","kind","ButtonKindEnum","TERTIARY","size","ButtonSizeEnum","SMALL","namespace","suffix","buttons_restart","onClick","renderIcon","Restart","type","buttons_retry","CatastrophicErrorExport","INLINE_LOADING_TAG_NAME","WEB_COMPONENT_PREFIX","CDSInlineLoadingElement","LitElement","constructor","super","arguments","this","bounce","loop","quickLoad","getAnimationEffect","classNames","push","length","join","render","html","styles","css","unsafeCSS","__decorate","property","Boolean","prototype","String","carbonElement","InlineLoadingComponent","createComponent","tagName","elementClass","react","_path","ScreenOff","children","rest","ref","Icon","xmlns","_path2","_path3","_path4","UserAvatar","AgentAvatar","props","agentProfile","agentName","nickname","avatarStyles","useDynamicCSSProperties","avatarUrl","profile_picture_url","hasError","setHasError","useState","component","useEffect","src","alt","agent_ariaAgentAvatar","onError","match","style","charAt","Number","replace","undefined","AgentBanner","onButtonClick","useLanguagePack","useServiceManager","persistedAgentState","persistedToBrowserStorage","chatState","agentState","isConnecting","availability","isScreenSharing","displayState","selectAgentDisplayState","shallowEqual","buttonRef","useRef","line1","line2","avatar","buttonLabel","animation","agent_connecting","AnnounceOnMountComponentExport","announceOnce","AvailabilityMessage","fallbackText","agent_connectWaiting","agent_connectButtonCancel","agent_noName","agent_connectedButtonEndChat","useImperativeHandle","requestFocus","current","doFocusRef","isConnectingOrConnected","Button","onStopSharing","humanAgentService","screenShareStop","agent_sharingStopSharingButton","AgentBannerExport","forwardRef","AgentBannerContainer","bannerRef","LatestWelcomeNodes","WriteableElement","slotName","WriteableElementName","WELCOME_NODE_BEFORE_ELEMENT","LatestWelcomeNodes$1","Notifications","notifications","map","notification","item","store","dispatch","actions","removeNotifications","notificationID","onActionButtonClick","actionButtonLabel","key","ActionableNotification","notifications_toastClose","onCloseButtonClick","subtitle","message","title","hasFocus","ChatBot","_path5","_path6","_path7","_path8","CheckmarkFilled","Avatar","a","b","c","e","WHITE","G10","x","y","maskUnits","strokeWidth","mask","cy","r","AvatarExport","IconHolder","icon","ImageWithFallback","url","fallback","MoveFocusType","MessageComponent","PureComponent","didRenderErrorOccur","focusHandleHasFocus","messageRef","focusHandleRef","getLocalMessage","localMessageItem","onHandleFocus","setState","onHandleBlur","onHandleKeyDown","event","altKey","metaKey","ctrlKey","shiftKey","moveFocus","PREVIOUS","NEXT","FIRST","LAST","INPUT","preventDefault","reAnnounceFocusHandle","requestMoveFocus","messagesIndex","getWidgetSaidMessage","messageId","agent_message_type","response_type","MessageResponseTypes","TEXT","componentDidCatch","error","errorInfo","errorOccurred","createDidCatchErrorData","componentDidMount","uiState","ui_state","needsAnnouncement","ariaAnnouncer","setMessageWasAnnounced","componentDidUpdate","shouldRenderFailedMessage","isConnectToAgent","history","agent_no_service_desk","handle","getAttribute","requestHandleFocus","strings","isRequest","messages_youSaid","nodeToText","setAttribute","renderFailedRenderMessage","VisuallyHidden","InlineError","errors_singleMessage","renderAvatarLine","botAvatarURL","useAITheme","timestamp","dayjs","format","timestampToTimeString","label","actorName","iconClassName","isResponse","agentMessageType","agent_profile","isAgentStatusMessage","fromAgent","AgentMessageType","FROM_AGENT","agent_ariaGenericAvatar","Headset","imageUrl","agent_ariaGenericBotAvatar","agent_agentNoNameTitle","FormattedMessage","values","renderMessageState","element","showBelowMessage","errorState","error_state","fileStatus","file_upload_status","MessageErrorState","FAILED","FileStatusValue","UPLOADING","Loading","active","overlay","small","assistiveText","fileSharing_statusUploading","renderFocusHandle","tabIndex","onFocus","onBlur","onKeyDown","role","config","requestInputFocus","disableUserInputs","showAvatarLine","doAutoScroll","isMessageForInput","scrollElementIntoView","isFirstMessageItem","hideFeedback","allowNewFeedback","isIntermediateStreaming","isWelcomeResponse","disableFadeAnimation","messageItem","responseType","fromHistory","from_history","readWidgetSaid","IMAGE","VIDEO","AUDIO","OPTION","IFRAME","INLINE_ERROR","CONVERSATIONAL_SEARCH","USER_DEFINED","canRenderIntermediateStreaming","messageComponent","MessageTypeComponent","originalMessage","isCustomMessage","renderAsUserDefinedMessage","noAnimation","agentClassName","messageResponseType","isUserDefinedResponse","BUTTON","FROM_USER","RELOAD_WARNING","DISCONNECTED","getAgentMessageClassName","messageIsRequest","isSystemMessage","messageState","isOptionResponseWithoutTitleOrDescription","isOptionItem","description","DATE","CARD","CAROUSEL","isSingleItemCarousel","GRID","fullWidth","MessageComponent$1","withAriaAnnouncer","injectIntl","MessagesComponent","scrollHandleHasFocus","messageRefs","Map","messagesContainerWithScrollingRef","scrollHandleRef","agentBannerRef","onResize","isScrollAnchored","scrollTop","scrollHeight","throttle","options","scrollToTop","scrollToBottom","localMessageItems","allMessagesByID","isTypingCounter","isLoadingCounter","isAgentTyping","scrollElement","doScrollElement","offsetHeight","setScrollTop","animate","lastLocalItemIndex","lastLocalItem","lastMessage","fullMessageID","shouldScrollToMessage","localItem","messageRequest","request_id","silent","input","messageIndex","lastScrollableMessageComponent","get","debugAutoScroll","offsetTop","AUTO_SCROLL_EXTRA","checkScrollAnchor","consoleError","AUTO_SCROLL_THROTTLE_TIMEOUT","getContainerScrollBottom","getScrollBottom","paddingTop","paddingBottom","scrollRect","getBoundingClientRect","elementRect","topDistanceFromTop","top","bottomDistanceFromTop","bottom","elementHeight","moveFocusType","currentMessageIndex","index","scrollPanelObserver","ResizeObserver","observe","previousScrollOffsetHeight","oldProps","newProps","numMessagesChanged","oldAgentDisplayState","newAgentDisplayState","typingChanged","arrayLastValue","componentWillUnmount","unobserve","fromAutoScroll","assumeScrollTop","suspendScrollDetection","setChatMessagesStateProperty","requestAgentBannerFocus","doScrollToMessage","messageID","panelComponent","getLastOutputMessageElements","lastMessageItem","elements","hasFoundLastBotMessageGroupID","componentRef","reverse","renderTypingIndicator","isTypingMessage","AriaLiveMessageExport","renderMessage","localMessage","fullMessage","showBeforeWelcomeNodeElement","lastMessageID","locale","inputState","selectInputState","disclaimersAccepted","public","disclaimer","is_on","window","location","hostname","totalMessagesWithTyping","messageItemID","set","delete","isReadonly","welcomeNodeBeforeElement","writeableElements","Fragment","renderAgentBanner","onEndAgentChat","renderScrollHandle","atTop","labelKey","IS_MOBILE","messages_scrollHandle","getMessageIDForUserInput","renderMessages","messageIDForInput","renderMessageArray","previousMessageID","currentIndex","regularMessages","onScroll","args","MessagesComponent$1","Component","Wrapped","useContext","ServiceManagerContext","displayName","name","withServiceManager","connect","isUnmappingEqual","newArgs","oldArgs","keys1","map1","keys2","map2","key1","key2","RequestScreenShareModal","agent_sharingRequestTitle","agent_sharingRequestMessage","cancelButtonLabel","agent_sharingDeclineButton","confirmButtonLabel","agent_sharingAcceptButton","ConfirmModal","onConfirm","screenShareUpdateRequestState","ScreenShareState","ACCEPTED","onCancel","DECLINED","modalAnnounceMessage","Chat","showEndChatConfirmation","hasCaughtError","inputRef","headerRef","messagesRef","messagesToArray","memoizeOne","keys","hideConfirmEndChat","setTimeout","showConfirmEndChat","confirmAgentEndChat","endChat","requestDefaultFocus","agentDisplayState","disableInput","fieldVisible","shouldDisableInput","takeFocus","htmlElements","focusOnFirstFocusableItemInArrayOfElements","getMessagesScrollBottom","onFilesSelectedForUpload","uploads","filesSelectedForUpload","allowMultipleFileUploads","scrollOnHydrationComplete","isHydrationAnimationComplete","prevProps","connectingChanged","getMessageInput","shouldDisableSend","isHydrated","renderMessagesAndInput","allMessageItemsByID","onUserTyping","onSendInput","files","allowFileUploads","allowedFileUploadTypes","stopStreamingButtonState","fileUploadInProgress","inputPlaceholderKey","showUploadButtonDisabled","localMessageIDs","BEFORE_INPUT_ELEMENT","InputExport","disableSend","isInputVisible","showUploadButton","disableUploadButton","pendingUploads","placeholder","isStopStreamingButtonVisible","isVisible","isStopStreamingButtonDisabled","isDisabled","EndAgentChatModal","showScreenShareRequest","onCloseAndRestart","headerAvatarConfig","enableChatHeaderConfig","NonHeaderBackground","showNonHeaderBackgroundCover","Chat$1"],"sourceRoot":""}