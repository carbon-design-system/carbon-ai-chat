{"version":3,"file":"2046.bundle.js","mappings":"oLAGA,MAAMA,EAAc,6CAEpB,SAASC,EAAWC,EAAOC,GACzB,MAAMC,EAAMF,EAAMG,OACZC,EAAQJ,EAAMK,IAEpB,GAAoC,MAAhCL,EAAMM,IAAIC,WAAWH,GAA0B,OAAO,EAC1D,GAAIH,EAAU,OAAO,EACrB,GAAIG,EAAQ,GAAKF,EAAO,OAAO,EAE/BF,EAAMK,IAAMD,EAAQ,EACpB,IAAII,GAAQ,EAEZ,KAAOR,EAAMK,IAAMH,GAAK,CACtB,GAAwC,MAApCF,EAAMM,IAAIC,WAAWP,EAAMK,KAAsB,CACnDG,GAAQ,EACR,KACF,CAEAR,EAAMS,GAAGC,OAAOC,UAAUX,EAC5B,CAEA,IAAKQ,GAASJ,EAAQ,IAAMJ,EAAMK,IAEhC,OADAL,EAAMK,IAAMD,GACL,EAGT,MAAMQ,EAAUZ,EAAMM,IAAIO,MAAMT,EAAQ,EAAGJ,EAAMK,KAGjD,OAAIO,EAAQE,MAAM,uBAChBd,EAAMK,IAAMD,GACL,IAITJ,EAAMG,OAASH,EAAMK,IACrBL,EAAMK,IAAMD,EAAQ,EAGHJ,EAAMe,KAAK,WAAY,MAAO,GACtCC,OAAS,IAEFhB,EAAMe,KAAK,OAAQ,GAAI,GAC/BH,QAAUA,EAAQK,QAAQnB,EAAa,MAE9BE,EAAMe,KAAK,YAAa,OAAQ,GACxCC,OAAS,IAElBhB,EAAMK,IAAML,EAAMG,OAAS,EAC3BH,EAAMG,OAASD,GACR,EACT,CAEe,SAASgB,EAAYT,GAClCA,EAAGC,OAAOS,MAAMC,MAAM,WAAY,MAAOrB,EAC3C,C,oECxDA,MAAMD,EAAc,6CAEpB,SAASuB,EAAarB,EAAOC,GAC3B,MAAMC,EAAMF,EAAMG,OACZC,EAAQJ,EAAMK,IAEpB,GAAoC,KAAhCL,EAAMM,IAAIC,WAAWH,GAA0B,OAAO,EAC1D,GAAIH,EAAU,OAAO,EACrB,GAAIG,EAAQ,GAAKF,EAAO,OAAO,EAE/BF,EAAMK,IAAMD,EAAQ,EACpB,IAAII,GAAQ,EAEZ,KAAOR,EAAMK,IAAMH,GAAK,CACtB,GAAwC,KAApCF,EAAMM,IAAIC,WAAWP,EAAMK,KAAsB,CACnDG,GAAQ,EACR,KACF,CAEAR,EAAMS,GAAGC,OAAOC,UAAUX,EAC5B,CAEA,IAAKQ,GAASJ,EAAQ,IAAMJ,EAAMK,IAEhC,OADAL,EAAMK,IAAMD,GACL,EAGT,MAAMQ,EAAUZ,EAAMM,IAAIO,MAAMT,EAAQ,EAAGJ,EAAMK,KAGjD,OAAIO,EAAQE,MAAM,uBAChBd,EAAMK,IAAMD,GACL,IAITJ,EAAMG,OAASH,EAAMK,IACrBL,EAAMK,IAAMD,EAAQ,EAGHJ,EAAMe,KAAK,WAAY,MAAO,GACtCC,OAAS,IAEFhB,EAAMe,KAAK,OAAQ,GAAI,GAC/BH,QAAUA,EAAQK,QAAQnB,EAAa,MAE9BE,EAAMe,KAAK,YAAa,OAAQ,GACxCC,OAAS,IAElBhB,EAAMK,IAAML,EAAMG,OAAS,EAC3BH,EAAMG,OAASD,GACR,EACT,CAEe,SAASoB,EAAYb,GAClCA,EAAGC,OAAOS,MAAMC,MAAM,WAAY,MAAOC,EAC3C,C,gjCCzDA,MAAME,EAAc,CAAC,EAuBrB,SAASC,EAAQC,EAAQC,GACA,iBAAZA,IACTA,EAAUF,EAAOG,cAGnB,MAAMC,EA1BR,SAAyBF,GACvB,IAAIE,EAAQL,EAAYG,GACxB,GAAIE,EAAS,OAAOA,EAEpBA,EAAQL,EAAYG,GAAW,GAE/B,IAAK,IAAIG,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAMC,EAAKC,OAAOC,aAAaH,GAC/BD,EAAMb,KAAKe,EACb,CAEA,IAAK,IAAID,EAAI,EAAGA,EAAIH,EAAQO,OAAQJ,IAAK,CACvC,MAAMC,EAAKJ,EAAQnB,WAAWsB,GAC9BD,EAAME,GAAM,KAAO,IAAMA,EAAGI,SAAS,IAAIC,eAAetB,OAAO,EACjE,CAEA,OAAOe,CACT,CASgBQ,CAAeV,GAE7B,OAAOD,EAAOR,QAAQ,oBAAqB,SAAUoB,GACnD,IAAIC,EAAS,GAEb,IAAK,IAAIT,EAAI,EAAGU,EAAIF,EAAIJ,OAAQJ,EAAIU,EAAGV,GAAK,EAAG,CAC7C,MAAMW,EAAKC,SAASJ,EAAIxB,MAAMgB,EAAI,EAAGA,EAAI,GAAI,IAE7C,GAAIW,EAAK,IACPF,GAAUV,EAAMY,OADlB,CAKA,GAAoB,MAAV,IAALA,IAAwBX,EAAI,EAAIU,EAAI,CAEvC,MAAMG,EAAKD,SAASJ,EAAIxB,MAAMgB,EAAI,EAAGA,EAAI,GAAI,IAE7C,GAAoB,MAAV,IAALa,GAAqB,CACxB,MAAMC,EAAQH,GAAM,EAAK,KAAe,GAALE,EAGjCJ,GADEK,EAAM,IACE,KAEAZ,OAAOC,aAAaW,GAGhCd,GAAK,EACL,QACF,CACF,CAEA,GAAoB,MAAV,IAALW,IAAwBX,EAAI,EAAIU,EAAI,CAEvC,MAAMG,EAAKD,SAASJ,EAAIxB,MAAMgB,EAAI,EAAGA,EAAI,GAAI,IACvCe,EAAKH,SAASJ,EAAIxB,MAAMgB,EAAI,EAAGA,EAAI,GAAI,IAE7C,GAAoB,MAAV,IAALa,IAAuC,MAAV,IAALE,GAAqB,CAChD,MAAMD,EAAQH,GAAM,GAAM,MAAYE,GAAM,EAAK,KAAe,GAALE,EAGzDN,GADEK,EAAM,MAAUA,GAAO,OAAUA,GAAO,MAChC,MAEAZ,OAAOC,aAAaW,GAGhCd,GAAK,EACL,QACF,CACF,CAEA,GAAoB,MAAV,IAALW,IAAwBX,EAAI,EAAIU,EAAI,CAEvC,MAAMG,EAAKD,SAASJ,EAAIxB,MAAMgB,EAAI,EAAGA,EAAI,GAAI,IACvCe,EAAKH,SAASJ,EAAIxB,MAAMgB,EAAI,EAAGA,EAAI,GAAI,IACvCgB,EAAKJ,SAASJ,EAAIxB,MAAMgB,EAAI,GAAIA,EAAI,IAAK,IAE/C,GAAoB,MAAV,IAALa,IAAuC,MAAV,IAALE,IAAuC,MAAV,IAALC,GAAqB,CACxE,IAAIF,EAAQH,GAAM,GAAM,QAAcE,GAAM,GAAM,OAAaE,GAAM,EAAK,KAAe,GAALC,EAEhFF,EAAM,OAAWA,EAAM,QACzBL,GAAU,QAEVK,GAAO,MACPL,GAAUP,OAAOC,aAAa,OAAUW,GAAO,IAAK,OAAgB,KAANA,KAGhEd,GAAK,EACL,QACF,CACF,CAEAS,GAAU,GA5DV,CA6DF,CAEA,OAAOA,CACT,EACF,CAEAd,EAAOG,aAAe,cACtBH,EAAOsB,eAAiB,GAExB,QC/GA,MAAMC,EAAc,CAAC,EAoCrB,SAASC,EAAQvB,EAAQC,EAASuB,GACT,iBAAZvB,IAETuB,EAAcvB,EACdA,EAAUsB,EAAOrB,mBAGQ,IAAhBsB,IACTA,GAAc,GAGhB,MAAMrB,EA1CR,SAAyBF,GACvB,IAAIE,EAAQmB,EAAYrB,GACxB,GAAIE,EAAS,OAAOA,EAEpBA,EAAQmB,EAAYrB,GAAW,GAE/B,IAAK,IAAIG,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAMC,EAAKC,OAAOC,aAAaH,GAE3B,cAAcqB,KAAKpB,GAErBF,EAAMb,KAAKe,GAEXF,EAAMb,KAAK,KAAO,IAAMc,EAAEK,SAAS,IAAIC,eAAetB,OAAO,GAEjE,CAEA,IAAK,IAAIgB,EAAI,EAAGA,EAAIH,EAAQO,OAAQJ,IAClCD,EAAMF,EAAQnB,WAAWsB,IAAMH,EAAQG,GAGzC,OAAOD,CACT,CAoBgBuB,CAAezB,GAC7B,IAAIY,EAAS,GAEb,IAAK,IAAIT,EAAI,EAAGU,EAAId,EAAOQ,OAAQJ,EAAIU,EAAGV,IAAK,CAC7C,MAAMuB,EAAO3B,EAAOlB,WAAWsB,GAE/B,GAAIoB,GAAwB,KAATG,GAAyBvB,EAAI,EAAIU,GAC9C,iBAAiBW,KAAKzB,EAAOZ,MAAMgB,EAAI,EAAGA,EAAI,IAChDS,GAAUb,EAAOZ,MAAMgB,EAAGA,EAAI,GAC9BA,GAAK,OAKT,GAAIuB,EAAO,IACTd,GAAUV,EAAMwB,QAIlB,GAAIA,GAAQ,OAAUA,GAAQ,MAA9B,CACE,GAAIA,GAAQ,OAAUA,GAAQ,OAAUvB,EAAI,EAAIU,EAAG,CACjD,MAAMc,EAAW5B,EAAOlB,WAAWsB,EAAI,GACvC,GAAIwB,GAAY,OAAUA,GAAY,MAAQ,CAC5Cf,GAAUgB,mBAAmB7B,EAAOI,GAAKJ,EAAOI,EAAI,IACpDA,IACA,QACF,CACF,CACAS,GAAU,WAEZ,MAEAA,GAAUgB,mBAAmB7B,EAAOI,GACtC,CAEA,OAAOS,CACT,CAEAU,EAAOrB,aAAe,uBACtBqB,EAAOF,eAAiB,YAExB,QCxFe,SAASS,EAAQC,GAC9B,IAAIlB,EAAS,GAkBb,OAhBAA,GAAUkB,EAAIC,UAAY,GAC1BnB,GAAUkB,EAAIE,QAAU,KAAO,GAC/BpB,GAAUkB,EAAIG,KAAOH,EAAIG,KAAO,IAAM,GAElCH,EAAII,WAA2C,IAA/BJ,EAAII,SAASC,QAAQ,KAEvCvB,GAAU,IAAMkB,EAAII,SAAW,IAE/BtB,GAAUkB,EAAII,UAAY,GAG5BtB,GAAUkB,EAAIM,KAAO,IAAMN,EAAIM,KAAO,GACtCxB,GAAUkB,EAAIO,UAAY,GAC1BzB,GAAUkB,EAAIQ,QAAU,GACxB1B,GAAUkB,EAAIS,MAAQ,GAEf3B,CACT,CCsBA,SAAS4B,IACPC,KAAKV,SAAW,KAChBU,KAAKT,QAAU,KACfS,KAAKR,KAAO,KACZQ,KAAKL,KAAO,KACZK,KAAKP,SAAW,KAChBO,KAAKF,KAAO,KACZE,KAAKH,OAAS,KACdG,KAAKJ,SAAW,IAClB,CAMA,MAAMK,EAAkB,oBAClBC,EAAc,WAIdC,EAAoB,qCAOpBC,EAAS,CAAC,IAAK,IAAK,IAAK,KAAM,IAAK,KAAKC,OAHhC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,OAM/CC,EAAa,CAAC,KAAMD,OAAOD,GAK3BG,EAAe,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKF,OAAOC,GAChDE,EAAkB,CAAC,IAAK,IAAK,KAE7BC,EAAsB,yBACtBC,EAAoB,+BAGpBC,EAAmB,CACvBC,YAAY,EACZ,eAAe,GAGXC,EAAkB,CACtBC,MAAM,EACNC,OAAO,EACPC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACN,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,EACX,SAAS,GAWXnB,EAAIoB,UAAUC,MAAQ,SAAU/B,EAAKgC,GACnC,IAAIC,EAAYC,EAAKhC,EACjBiC,EAAOnC,EAMX,GAFAmC,EAAOA,EAAKC,QAEPJ,GAA+C,IAA1BhC,EAAIqC,MAAM,KAAK5D,OAAc,CAErD,MAAM6D,EAAaxB,EAAkByB,KAAKJ,GAC1C,GAAIG,EAKF,OAJA3B,KAAKJ,SAAW+B,EAAW,GACvBA,EAAW,KACb3B,KAAKH,OAAS8B,EAAW,IAEpB3B,IAEX,CAEA,IAAI6B,EAAQ5B,EAAgB2B,KAAKJ,GAqBjC,GApBIK,IACFA,EAAQA,EAAM,GACdP,EAAaO,EAAMC,cACnB9B,KAAKV,SAAWuC,EAChBL,EAAOA,EAAKO,OAAOF,EAAM/D,UAQvBuD,GAAqBQ,GAASL,EAAK7E,MAAM,2BAC3C4C,EAAgC,OAAtBiC,EAAKO,OAAO,EAAG,IACrBxC,GAAasC,GAASlB,EAAiBkB,KACzCL,EAAOA,EAAKO,OAAO,GACnB/B,KAAKT,SAAU,KAIdoB,EAAiBkB,KACjBtC,GAAYsC,IAAUhB,EAAgBgB,IAAU,CAiBnD,IAUIrC,EAAMwC,EAVNC,GAAW,EACf,IAAK,IAAIvE,EAAI,EAAGA,EAAI8C,EAAgB1C,OAAQJ,IAC1C6D,EAAMC,EAAK9B,QAAQc,EAAgB9C,KACtB,IAAT6D,KAA4B,IAAbU,GAAkBV,EAAMU,KACzCA,EAAUV,GASZS,GAFe,IAAbC,EAEOT,EAAKU,YAAY,KAIjBV,EAAKU,YAAY,IAAKD,IAKjB,IAAZD,IACFxC,EAAOgC,EAAK9E,MAAM,EAAGsF,GACrBR,EAAOA,EAAK9E,MAAMsF,EAAS,GAC3BhC,KAAKR,KAAOA,GAIdyC,GAAW,EACX,IAAK,IAAIvE,EAAI,EAAGA,EAAI6C,EAAazC,OAAQJ,IACvC6D,EAAMC,EAAK9B,QAAQa,EAAa7C,KACnB,IAAT6D,KAA4B,IAAbU,GAAkBV,EAAMU,KACzCA,EAAUV,IAIG,IAAbU,IACFA,EAAUT,EAAK1D,QAGS,MAAtB0D,EAAKS,EAAU,IAAcA,IACjC,MAAME,EAAOX,EAAK9E,MAAM,EAAGuF,GAC3BT,EAAOA,EAAK9E,MAAMuF,GAGlBjC,KAAKoC,UAAUD,GAIfnC,KAAKP,SAAWO,KAAKP,UAAY,GAIjC,MAAM4C,EAAoC,MAArBrC,KAAKP,SAAS,IACa,MAA5CO,KAAKP,SAASO,KAAKP,SAAS3B,OAAS,GAGzC,IAAKuE,EAAc,CACjB,MAAMC,EAAYtC,KAAKP,SAASiC,MAAM,MACtC,IAAK,IAAIhE,EAAI,EAAGU,EAAIkE,EAAUxE,OAAQJ,EAAIU,EAAGV,IAAK,CAChD,MAAM6E,EAAOD,EAAU5E,GACvB,GAAK6E,IACAA,EAAK5F,MAAM8D,GAAsB,CACpC,IAAI+B,EAAU,GACd,IAAK,IAAIC,EAAI,EAAGC,EAAIH,EAAKzE,OAAQ2E,EAAIC,EAAGD,IAClCF,EAAKnG,WAAWqG,GAAK,IAIvBD,GAAW,IAEXA,GAAWD,EAAKE,GAIpB,IAAKD,EAAQ7F,MAAM8D,GAAsB,CACvC,MAAMkC,EAAaL,EAAU5F,MAAM,EAAGgB,GAChCkF,EAAUN,EAAU5F,MAAMgB,EAAI,GAC9BmF,EAAMN,EAAK5F,MAAM+D,GACnBmC,IACFF,EAAW/F,KAAKiG,EAAI,IACpBD,EAAQE,QAAQD,EAAI,KAElBD,EAAQ9E,SACV0D,EAAOoB,EAAQG,KAAK,KAAOvB,GAE7BxB,KAAKP,SAAWkD,EAAWI,KAAK,KAChC,KACF,CACF,CACF,CACF,CAEI/C,KAAKP,SAAS3B,OAxLC,MAyLjBkC,KAAKP,SAAW,IAKd4C,IACFrC,KAAKP,SAAWO,KAAKP,SAASsC,OAAO,EAAG/B,KAAKP,SAAS3B,OAAS,GAEnE,CAGA,MAAMgC,EAAO0B,EAAK9B,QAAQ,MACZ,IAAVI,IAEFE,KAAKF,KAAO0B,EAAKO,OAAOjC,GACxB0B,EAAOA,EAAK9E,MAAM,EAAGoD,IAEvB,MAAMkD,EAAKxB,EAAK9B,QAAQ,KAWxB,OAVY,IAARsD,IACFhD,KAAKH,OAAS2B,EAAKO,OAAOiB,GAC1BxB,EAAOA,EAAK9E,MAAM,EAAGsG,IAEnBxB,IAAQxB,KAAKJ,SAAW4B,GACxBX,EAAgBS,IAChBtB,KAAKP,WAAaO,KAAKJ,WACzBI,KAAKJ,SAAW,IAGXI,IACT,EAEAD,EAAIoB,UAAUiB,UAAY,SAAUD,GAClC,IAAIxC,EAAOO,EAAY0B,KAAKO,GACxBxC,IACFA,EAAOA,EAAK,GACC,MAATA,IACFK,KAAKL,KAAOA,EAAKoC,OAAO,IAE1BI,EAAOA,EAAKJ,OAAO,EAAGI,EAAKrE,OAAS6B,EAAK7B,SAEvCqE,IAAQnC,KAAKP,SAAW0C,EAC9B,EAEA,IClTIc,EDkTJ,EA7MA,SAAmB5D,EAAKgC,GACtB,GAAIhC,GAAOA,aAAeU,EAAK,OAAOV,EAEtC,MAAM6D,EAAI,IAAInD,EAEd,OADAmD,EAAE9B,MAAM/B,EAAKgC,GACN6B,CACT,EE5GA,8+DCAA,2+ECAA,qICAA,uBCAA,4PCAA,6DCCA,MAAmBC,YAEnB,2keACKzB,MAAM,IACN0B,IAAKC,GAAMA,EAAEjH,WAAW,KCJ7B,MAAmB+G,YAEnB,sCACKzB,MAAM,IACN0B,IAAKC,GAAMA,EAAEjH,WAAW,KRH7B,MAAMkH,EAAY,IAAIC,IAAI,CACtB,CAAC,EAAG,OAEJ,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,OAKGC,EAEmB,QAA/BP,EAAKrF,OAAO4F,qBAAkC,IAAPP,EAAgBA,EAAK,SAAUQ,GACnE,IAAIC,EAAS,GAOb,OANID,EAAY,QACZA,GAAa,MACbC,GAAU9F,OAAOC,aAAe4F,IAAc,GAAM,KAAS,OAC7DA,EAAY,MAAsB,KAAZA,GAE1BC,GAAU9F,OAAOC,aAAa4F,GACvBC,CACX,ESzCA,IAAIC,EAiBOC,EA2BPC,EAQO,EACAC,EA9BX,SAASC,EAAS9E,GACd,OAAOA,GAAQ0E,EAAUK,MAAQ/E,GAAQ0E,EAAUM,IACvD,CACA,SAASC,EAAuBjF,GAC5B,OAASA,GAAQ0E,EAAUQ,SAAWlF,GAAQ0E,EAAUS,SACnDnF,GAAQ0E,EAAUU,SAAWpF,GAAQ0E,EAAUW,OACxD,CAYA,SAASC,EAA8BtF,GACnC,OAAOA,IAAS0E,EAAUa,QAZ9B,SAA6BvF,GACzB,OAASA,GAAQ0E,EAAUQ,SAAWlF,GAAQ0E,EAAUc,SACnDxF,GAAQ0E,EAAUU,SAAWpF,GAAQ0E,EAAUe,SAChDX,EAAS9E,EACjB,CAQwC0F,CAAoB1F,EAC5D,EA1CA,SAAW0E,GACPA,EAAUA,EAAe,IAAI,IAAM,MACnCA,EAAUA,EAAgB,KAAI,IAAM,OACpCA,EAAUA,EAAkB,OAAI,IAAM,SACtCA,EAAUA,EAAgB,KAAI,IAAM,OACpCA,EAAUA,EAAgB,KAAI,IAAM,OACpCA,EAAUA,EAAmB,QAAI,IAAM,UACvCA,EAAUA,EAAmB,QAAI,KAAO,UACxCA,EAAUA,EAAmB,QAAI,KAAO,UACxCA,EAAUA,EAAmB,QAAI,KAAO,UACxCA,EAAUA,EAAmB,QAAI,IAAM,UACvCA,EAAUA,EAAmB,QAAI,IAAM,UACvCA,EAAUA,EAAmB,QAAI,IAAM,SAC1C,CAbD,CAaGA,IAAcA,EAAY,CAAC,IAI9B,SAAWC,GACPA,EAAaA,EAA2B,aAAI,OAAS,eACrDA,EAAaA,EAA4B,cAAI,OAAS,gBACtDA,EAAaA,EAAyB,WAAI,KAAO,YACpD,CAJD,CAIGA,IAAiBA,EAAe,CAAC,IAuBpC,SAAWC,GACPA,EAAmBA,EAAgC,YAAI,GAAK,cAC5DA,EAAmBA,EAAiC,aAAI,GAAK,eAC7DA,EAAmBA,EAAmC,eAAI,GAAK,iBAC/DA,EAAmBA,EAA+B,WAAI,GAAK,aAC3DA,EAAmBA,EAAgC,YAAI,GAAK,aAC/D,CAND,CAMGA,IAAuBA,EAAqB,CAAC,KAErCC,EAOR,IAAiB,EAAe,CAAC,IALnBA,EAAqB,OAAI,GAAK,SAE3CA,EAAaA,EAAqB,OAAI,GAAK,SAE3CA,EAAaA,EAAwB,UAAI,GAAK,YAK3C,MAAMc,EACT,WAAAC,CAEAC,EAUAC,EAEAC,GACIhF,KAAK8E,WAAaA,EAClB9E,KAAK+E,cAAgBA,EACrB/E,KAAKgF,OAASA,EAEdhF,KAAKnE,MAAQgI,EAAmBoB,YAEhCjF,KAAKkF,SAAW,EAOhBlF,KAAK7B,OAAS,EAEd6B,KAAKmF,UAAY,EAEjBnF,KAAKoF,OAAS,EAEdpF,KAAKqF,WAAa,EAAaC,MACnC,CAEA,WAAAC,CAAYF,GACRrF,KAAKqF,WAAaA,EAClBrF,KAAKnE,MAAQgI,EAAmBoB,YAChCjF,KAAK7B,OAAS,EACd6B,KAAKmF,UAAY,EACjBnF,KAAKoF,OAAS,EACdpF,KAAKkF,SAAW,CACpB,CAYA,KAAAM,CAAMC,EAAKC,GACP,OAAQ1F,KAAKnE,OACT,KAAKgI,EAAmBoB,YACpB,OAAIQ,EAAIrJ,WAAWsJ,KAAY/B,EAAUgC,KACrC3F,KAAKnE,MAAQgI,EAAmB+B,aAChC5F,KAAKkF,UAAY,EACVlF,KAAK6F,kBAAkBJ,EAAKC,EAAS,KAEhD1F,KAAKnE,MAAQgI,EAAmBiC,YACzB9F,KAAK+F,iBAAiBN,EAAKC,IAEtC,KAAK7B,EAAmB+B,aACpB,OAAO5F,KAAK6F,kBAAkBJ,EAAKC,GAEvC,KAAK7B,EAAmBmC,eACpB,OAAOhG,KAAKiG,oBAAoBR,EAAKC,GAEzC,KAAK7B,EAAmBqC,WACpB,OAAOlG,KAAKmG,gBAAgBV,EAAKC,GAErC,KAAK7B,EAAmBiC,YACpB,OAAO9F,KAAK+F,iBAAiBN,EAAKC,GAG9C,CAUA,iBAAAG,CAAkBJ,EAAKC,GACnB,OAAIA,GAAUD,EAAI3H,QACN,GA7IC,GA+IR2H,EAAIrJ,WAAWsJ,MAA4B/B,EAAUyC,SACtDpG,KAAKnE,MAAQgI,EAAmBqC,WAChClG,KAAKkF,UAAY,EACVlF,KAAKmG,gBAAgBV,EAAKC,EAAS,KAE9C1F,KAAKnE,MAAQgI,EAAmBmC,eACzBhG,KAAKiG,oBAAoBR,EAAKC,GACzC,CACA,kBAAAW,CAAmBZ,EAAKxJ,EAAOqK,EAAKC,GAChC,GAAItK,IAAUqK,EAAK,CACf,MAAME,EAAaF,EAAMrK,EACzB+D,KAAK7B,OACD6B,KAAK7B,OAASsI,KAAKC,IAAIH,EAAMC,GACzBlI,SAASmH,EAAI1D,OAAO9F,EAAOuK,GAAaD,GAChDvG,KAAKkF,UAAYsB,CACrB,CACJ,CAUA,eAAAL,CAAgBV,EAAKC,GACjB,MAAMiB,EAAWjB,EACjB,KAAOA,EAASD,EAAI3H,QAAQ,CACxB,MAAM8I,EAAOnB,EAAIrJ,WAAWsJ,GAC5B,IAAI3B,EAAS6C,KAAS1C,EAAuB0C,GAKzC,OADA5G,KAAKqG,mBAAmBZ,EAAKkB,EAAUjB,EAAQ,IACxC1F,KAAK6G,kBAAkBD,EAAM,GAJpClB,GAAU,CAMlB,CAEA,OADA1F,KAAKqG,mBAAmBZ,EAAKkB,EAAUjB,EAAQ,KACvC,CACZ,CAUA,mBAAAO,CAAoBR,EAAKC,GACrB,MAAMiB,EAAWjB,EACjB,KAAOA,EAASD,EAAI3H,QAAQ,CACxB,MAAM8I,EAAOnB,EAAIrJ,WAAWsJ,GAC5B,IAAI3B,EAAS6C,GAKT,OADA5G,KAAKqG,mBAAmBZ,EAAKkB,EAAUjB,EAAQ,IACxC1F,KAAK6G,kBAAkBD,EAAM,GAJpClB,GAAU,CAMlB,CAEA,OADA1F,KAAKqG,mBAAmBZ,EAAKkB,EAAUjB,EAAQ,KACvC,CACZ,CAcA,iBAAAmB,CAAkBC,EAAQC,GACtB,IAAI9D,EAEJ,GAAIjD,KAAKkF,UAAY6B,EAEjB,OADuB,QAAtB9D,EAAKjD,KAAKgF,cAA2B,IAAP/B,GAAyBA,EAAG+D,2CAA2ChH,KAAKkF,UACpG,EAGX,GAAI4B,IAAWnD,EAAUsD,KACrBjH,KAAKkF,UAAY,OAEhB,GAAIlF,KAAKqF,aAAe,EAAaC,OACtC,OAAO,EASX,OAPAtF,KAAK+E,cT5MN,SAA0BtB,GAC7B,IAAIR,EACJ,OAAKQ,GAAa,OAAUA,GAAa,OAAWA,EAAY,QACrD,MAEgC,QAAnCR,EAAKK,EAAU4D,IAAIzD,UAA+B,IAAPR,EAAgBA,EAAKQ,CAC5E,CSsM2B0D,CAAiBnH,KAAK7B,QAAS6B,KAAKkF,UACnDlF,KAAKgF,SACD8B,IAAWnD,EAAUsD,MACrBjH,KAAKgF,OAAOoC,0CAEhBpH,KAAKgF,OAAOqC,kCAAkCrH,KAAK7B,SAEhD6B,KAAKkF,QAChB,CAUA,gBAAAa,CAAiBN,EAAKC,GAClB,MAAM,WAAEZ,GAAe9E,KACvB,IAAIsH,EAAUxC,EAAW9E,KAAKmF,WAE1BoC,GAAeD,EAAU1D,EAAa4D,eAAiB,GAC3D,KAAO9B,EAASD,EAAI3H,OAAQ4H,IAAU1F,KAAKoF,SAAU,CACjD,MAAMwB,EAAOnB,EAAIrJ,WAAWsJ,GAE5B,GADA1F,KAAKmF,UAAYsC,EAAgB3C,EAAYwC,EAAStH,KAAKmF,UAAYsB,KAAK1K,IAAI,EAAGwL,GAAcX,GAC7F5G,KAAKmF,UAAY,EACjB,OAAuB,IAAhBnF,KAAK7B,QAEP6B,KAAKqF,aAAe,EAAaqC,YAEb,IAAhBH,GAEGhD,EAA8BqC,IACpC,EACA5G,KAAK2H,+BAKf,GAHAL,EAAUxC,EAAW9E,KAAKmF,WAC1BoC,GAAeD,EAAU1D,EAAa4D,eAAiB,GAEnC,IAAhBD,EAAmB,CAEnB,GAAIX,IAASjD,EAAUsD,KACnB,OAAOjH,KAAK4H,oBAAoB5H,KAAKmF,UAAWoC,EAAavH,KAAKkF,SAAWlF,KAAKoF,QAGlFpF,KAAKqF,aAAe,EAAaC,SACjCtF,KAAK7B,OAAS6B,KAAKmF,UACnBnF,KAAKkF,UAAYlF,KAAKoF,OACtBpF,KAAKoF,OAAS,EAEtB,CACJ,CACA,OAAQ,CACZ,CAMA,4BAAAuC,GACI,IAAI1E,EACJ,MAAM,OAAE9E,EAAM,WAAE2G,GAAe9E,KACzBuH,GAAezC,EAAW3G,GAAUyF,EAAa4D,eAAiB,GAGxE,OAFAxH,KAAK4H,oBAAoBzJ,EAAQoJ,EAAavH,KAAKkF,UAC5B,QAAtBjC,EAAKjD,KAAKgF,cAA2B,IAAP/B,GAAyBA,EAAGmE,0CACpDpH,KAAKkF,QAChB,CAUA,mBAAA0C,CAAoBzJ,EAAQoJ,EAAarC,GACrC,MAAM,WAAEJ,GAAe9E,KAQvB,OAPAA,KAAK+E,cAA8B,IAAhBwC,EACbzC,EAAW3G,IAAWyF,EAAa4D,aACnC1C,EAAW3G,EAAS,GAAI+G,GACV,IAAhBqC,GAEAvH,KAAK+E,cAAcD,EAAW3G,EAAS,GAAI+G,GAExCA,CACX,CAQA,GAAAoB,GACI,IAAIrD,EACJ,OAAQjD,KAAKnE,OACT,KAAKgI,EAAmBiC,YAEpB,OAAuB,IAAhB9F,KAAK7B,QACP6B,KAAKqF,aAAe,EAAaqC,WAC9B1H,KAAK7B,SAAW6B,KAAKmF,UAEvB,EADAnF,KAAK2H,+BAIf,KAAK9D,EAAmBmC,eACpB,OAAOhG,KAAK6G,kBAAkB,EAAG,GAErC,KAAKhD,EAAmBqC,WACpB,OAAOlG,KAAK6G,kBAAkB,EAAG,GAErC,KAAKhD,EAAmB+B,aAEpB,OADuB,QAAtB3C,EAAKjD,KAAKgF,cAA2B,IAAP/B,GAAyBA,EAAG+D,2CAA2ChH,KAAKkF,UACpG,EAEX,KAAKrB,EAAmBoB,YAEpB,OAAO,EAGnB,EAQJ,SAAS4C,EAAW/C,GAChB,IAAIgD,EAAM,GACV,MAAMC,EAAU,IAAInD,EAAcE,EAAaW,GAASqC,GAAOtE,EAAciC,IAC7E,OAAO,SAAwBA,EAAKJ,GAChC,IAAI2C,EAAY,EACZtC,EAAS,EACb,MAAQA,EAASD,EAAI/F,QAAQ,IAAKgG,KAAY,GAAG,CAC7CoC,GAAOrC,EAAI/I,MAAMsL,EAAWtC,GAC5BqC,EAAQxC,YAAYF,GACpB,MAAM4C,EAAMF,EAAQvC,MAAMC,EAE1BC,EAAS,GACT,GAAIuC,EAAM,EAAG,CACTD,EAAYtC,EAASqC,EAAQzB,MAC7B,KACJ,CACA0B,EAAYtC,EAASuC,EAErBvC,EAAiB,IAARuC,EAAYD,EAAY,EAAIA,CACzC,CACA,MAAM7J,EAAS2J,EAAMrC,EAAI/I,MAAMsL,GAG/B,OADAF,EAAM,GACC3J,CACX,CACJ,CAWO,SAASsJ,EAAgB3C,EAAYwC,EAASY,EAAStB,GAC1D,MAAMuB,GAAeb,EAAU1D,EAAawE,gBAAkB,EACxDC,EAAaf,EAAU1D,EAAa0E,WAE1C,GAAoB,IAAhBH,EACA,OAAsB,IAAfE,GAAoBzB,IAASyB,EAAaH,GAAW,EAGhE,GAAIG,EAAY,CACZ,MAAME,EAAQ3B,EAAOyB,EACrB,OAAOE,EAAQ,GAAKA,GAASJ,GACtB,EACDrD,EAAWoD,EAAUK,GAAS,CACxC,CAGA,IAAIC,EAAKN,EACLO,EAAKD,EAAKL,EAAc,EAC5B,KAAOK,GAAMC,GAAI,CACb,MAAMC,EAAOF,EAAKC,IAAQ,EACpBE,EAAS7D,EAAW4D,GAC1B,GAAIC,EAAS/B,EACT4B,EAAKE,EAAM,MAEV,MAAIC,EAAS/B,GAId,OAAO9B,EAAW4D,EAAMP,GAHxBM,EAAKC,EAAM,CAIf,CACJ,CACA,OAAQ,CACZ,CACA,MAAME,EAAcf,EAAW,GASxB,SAAS,EAAWpC,EAAKoD,EAAO,EAAaC,QAChD,OAAOF,EAAYnD,EAAKoD,EAC5B,CCldA,SAASE,EAAYC,GACjB,IAAK,IAAItL,EAAI,EAAGA,EAAIsL,EAAIlL,OAAQJ,IAC5BsL,EAAItL,GAAG,IAAMsL,EAAItL,EAAI,GAAG,GAAK,EAEjC,OAAOsL,CACX,CDmcmBnB,EAAW,GCjc9B,IAAmBtE,IAAoBwF,EAAY,CAAC,CAAC,EAAG,SAAU,CAAC,EAAG,aAAc,CAAC,GAAI,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,SAAU,CAAC,GAAI,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,CAAEE,EAAG,OAAQC,EAAG,KAAMC,EAAG,WAAa,CAAC,EAAG,CAAEF,EAAG,WAAYC,EAAG,KAAMC,EAAG,UAAY,CAAC,EAAG,CAAEF,EAAG,OAAQC,EAAG,KAAMC,EAAG,WAAa,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,GAAI,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,sBAAuB,CAAC,EAAG,CAAED,EAAG,IAAKC,EAAG,YAAc,CAAC,GAAI,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,GAAI,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,cAAe,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,eAAgB,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,eAAgB,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,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","sources":["webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it-sub/index.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it-sup/index.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/mdurl/lib/decode.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/mdurl/lib/encode.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/mdurl/lib/format.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/mdurl/lib/parse.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/node_modules/entities/lib/esm/decode_codepoint.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/uc.micro/categories/P/regex.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/uc.micro/categories/S/regex.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/uc.micro/properties/Any/regex.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/uc.micro/categories/Cc/regex.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/uc.micro/categories/Cf/regex.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/uc.micro/categories/Z/regex.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/node_modules/entities/lib/esm/generated/decode-data-html.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/node_modules/entities/lib/esm/generated/decode-data-xml.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/node_modules/entities/lib/esm/decode.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/node_modules/entities/lib/esm/generated/encode-html.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/node_modules/entities/lib/esm/escape.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/node_modules/entities/lib/esm/index.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/common/utils.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/helpers/parse_link_label.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/helpers/parse_link_destination.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/helpers/parse_link_title.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/renderer.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/ruler.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/token.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_core/state_core.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_core/normalize.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_core/linkify.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_core/replacements.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_core/smartquotes.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/parser_core.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_core/block.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_core/inline.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_core/text_join.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/state_block.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/table.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/list.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/common/html_re.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/html_block.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/common/html_blocks.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/parser_block.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/code.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/fence.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/blockquote.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/hr.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/reference.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/heading.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/lheading.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_block/paragraph.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/state_inline.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/text.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/linkify.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/escape.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/strikethrough.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/emphasis.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/autolink.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/entity.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/balance_pairs.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/parser_inline.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/newline.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/backticks.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/link.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/image.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/html_inline.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/rules_inline/fragments_join.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/linkify-it/index.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/linkify-it/lib/re.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/punycode.js/punycode.es6.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/index.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/presets/default.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/presets/zero.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it/lib/presets/commonmark.mjs","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it-attrs/patterns.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it-attrs/utils.js","webpack://@carbon/ai-chat-examples-demo/../node_modules/markdown-it-attrs/index.js"],"sourcesContent":["// Process ~subscript~\n\n// same as UNESCAPE_MD_RE plus a space\nconst UNESCAPE_RE = /\\\\([ \\\\!\"#$%&'()*+,./:;<=>?@[\\]^_`{|}~-])/g\n\nfunction subscript (state, silent) {\n  const max = state.posMax\n  const start = state.pos\n\n  if (state.src.charCodeAt(start) !== 0x7E/* ~ */) { return false }\n  if (silent) { return false } // don't run any pairs in validation mode\n  if (start + 2 >= max) { return false }\n\n  state.pos = start + 1\n  let found = false\n\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === 0x7E/* ~ */) {\n      found = true\n      break\n    }\n\n    state.md.inline.skipToken(state)\n  }\n\n  if (!found || start + 1 === state.pos) {\n    state.pos = start\n    return false\n  }\n\n  const content = state.src.slice(start + 1, state.pos)\n\n  // don't allow unescaped spaces/newlines inside\n  if (content.match(/(^|[^\\\\])(\\\\\\\\)*\\s/)) {\n    state.pos = start\n    return false\n  }\n\n  // found!\n  state.posMax = state.pos\n  state.pos = start + 1\n\n  // Earlier we checked !silent, but this implementation does not need it\n  const token_so = state.push('sub_open', 'sub', 1)\n  token_so.markup = '~'\n\n  const token_t = state.push('text', '', 0)\n  token_t.content = content.replace(UNESCAPE_RE, '$1')\n\n  const token_sc = state.push('sub_close', 'sub', -1)\n  token_sc.markup = '~'\n\n  state.pos = state.posMax + 1\n  state.posMax = max\n  return true\n}\n\nexport default function sub_plugin (md) {\n  md.inline.ruler.after('emphasis', 'sub', subscript)\n};\n","// Process ^superscript^\n\n// same as UNESCAPE_MD_RE plus a space\nconst UNESCAPE_RE = /\\\\([ \\\\!\"#$%&'()*+,./:;<=>?@[\\]^_`{|}~-])/g\n\nfunction superscript (state, silent) {\n  const max = state.posMax\n  const start = state.pos\n\n  if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false }\n  if (silent) { return false } // don't run any pairs in validation mode\n  if (start + 2 >= max) { return false }\n\n  state.pos = start + 1\n  let found = false\n\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === 0x5E/* ^ */) {\n      found = true\n      break\n    }\n\n    state.md.inline.skipToken(state)\n  }\n\n  if (!found || start + 1 === state.pos) {\n    state.pos = start\n    return false\n  }\n\n  const content = state.src.slice(start + 1, state.pos)\n\n  // don't allow unescaped spaces/newlines inside\n  if (content.match(/(^|[^\\\\])(\\\\\\\\)*\\s/)) {\n    state.pos = start\n    return false\n  }\n\n  // found!\n  state.posMax = state.pos\n  state.pos = start + 1\n\n  // Earlier we checked !silent, but this implementation does not need it\n  const token_so = state.push('sup_open', 'sup', 1)\n  token_so.markup = '^'\n\n  const token_t = state.push('text', '', 0)\n  token_t.content = content.replace(UNESCAPE_RE, '$1')\n\n  const token_sc = state.push('sup_close', 'sup', -1)\n  token_sc.markup = '^'\n\n  state.pos = state.posMax + 1\n  state.posMax = max\n  return true\n}\n\nexport default function sup_plugin (md) {\n  md.inline.ruler.after('emphasis', 'sup', superscript)\n};\n","/* eslint-disable no-bitwise */\n\nconst decodeCache = {}\n\nfunction getDecodeCache (exclude) {\n  let cache = decodeCache[exclude]\n  if (cache) { return cache }\n\n  cache = decodeCache[exclude] = []\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i)\n    cache.push(ch)\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    const ch = exclude.charCodeAt(i)\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2)\n  }\n\n  return cache\n}\n\n// Decode percent-encoded string.\n//\nfunction decode (string, exclude) {\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars\n  }\n\n  const cache = getDecodeCache(exclude)\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {\n    let result = ''\n\n    for (let i = 0, l = seq.length; i < l; i += 3) {\n      const b1 = parseInt(seq.slice(i + 1, i + 3), 16)\n\n      if (b1 < 0x80) {\n        result += cache[b1]\n        continue\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n\n        if ((b2 & 0xC0) === 0x80) {\n          const chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F)\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd'\n          } else {\n            result += String.fromCharCode(chr)\n          }\n\n          i += 3\n          continue\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16)\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          const chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F)\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd'\n          } else {\n            result += String.fromCharCode(chr)\n          }\n\n          i += 6\n          continue\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16)\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16)\n        const b4 = parseInt(seq.slice(i + 10, i + 12), 16)\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          let chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F)\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd'\n          } else {\n            chr -= 0x10000\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF))\n          }\n\n          i += 9\n          continue\n        }\n      }\n\n      result += '\\ufffd'\n    }\n\n    return result\n  })\n}\n\ndecode.defaultChars = ';/?:@&=+$,#'\ndecode.componentChars = ''\n\nexport default decode\n","const encodeCache = {}\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache (exclude) {\n  let cache = encodeCache[exclude]\n  if (cache) { return cache }\n\n  cache = encodeCache[exclude] = []\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i)\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch)\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2))\n    }\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i]\n  }\n\n  return cache\n}\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode (string, exclude, keepEscaped) {\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped = exclude\n    exclude = encode.defaultChars\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true\n  }\n\n  const cache = getEncodeCache(exclude)\n  let result = ''\n\n  for (let i = 0, l = string.length; i < l; i++) {\n    const code = string.charCodeAt(i)\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3)\n        i += 2\n        continue\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code]\n      continue\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        const nextCode = string.charCodeAt(i + 1)\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1])\n          i++\n          continue\n        }\n      }\n      result += '%EF%BF%BD'\n      continue\n    }\n\n    result += encodeURIComponent(string[i])\n  }\n\n  return result\n}\n\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\"\nencode.componentChars = \"-_.!~*'()\"\n\nexport default encode\n","export default function format (url) {\n  let result = ''\n\n  result += url.protocol || ''\n  result += url.slashes ? '//' : ''\n  result += url.auth ? url.auth + '@' : ''\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']'\n  } else {\n    result += url.hostname || ''\n  }\n\n  result += url.port ? ':' + url.port : ''\n  result += url.pathname || ''\n  result += url.search || ''\n  result += url.hash || ''\n\n  return result\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\nfunction Url () {\n  this.protocol = null\n  this.slashes = null\n  this.auth = null\n  this.port = null\n  this.hostname = null\n  this.hash = null\n  this.search = null\n  this.pathname = null\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nconst protocolPattern = /^([a-z0-9.+-]+:)/i\nconst portPattern = /:[0-9]*$/\n\n// Special case for a simple path URL\n/* eslint-disable-next-line no-useless-escape */\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/\n\n// RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\nconst delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t']\n\n// RFC 2396: characters not allowed for various reasons.\nconst unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims)\n\n// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nconst autoEscape = ['\\''].concat(unwise)\n// Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nconst nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape)\nconst hostEndingChars = ['/', '?', '#']\nconst hostnameMaxLen = 255\nconst hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/\nconst hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/\n// protocols that can allow \"unsafe\" and \"unwise\" chars.\n// protocols that never have a hostname.\nconst hostlessProtocol = {\n  javascript: true,\n  'javascript:': true\n}\n// protocols that always contain a // bit.\nconst slashedProtocol = {\n  http: true,\n  https: true,\n  ftp: true,\n  gopher: true,\n  file: true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n}\n\nfunction urlParse (url, slashesDenoteHost) {\n  if (url && url instanceof Url) return url\n\n  const u = new Url()\n  u.parse(url, slashesDenoteHost)\n  return u\n}\n\nUrl.prototype.parse = function (url, slashesDenoteHost) {\n  let lowerProto, hec, slashes\n  let rest = url\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim()\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    const simplePath = simplePathPattern.exec(rest)\n    if (simplePath) {\n      this.pathname = simplePath[1]\n      if (simplePath[2]) {\n        this.search = simplePath[2]\n      }\n      return this\n    }\n  }\n\n  let proto = protocolPattern.exec(rest)\n  if (proto) {\n    proto = proto[0]\n    lowerProto = proto.toLowerCase()\n    this.protocol = proto\n    rest = rest.substr(proto.length)\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  /* eslint-disable-next-line no-useless-escape */\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//'\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2)\n      this.slashes = true\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    let hostEnd = -1\n    for (let i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i])\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    let auth, atSign\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@')\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd)\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign)\n      rest = rest.slice(atSign + 1)\n      this.auth = auth\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1\n    for (let i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i])\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd-- }\n    const host = rest.slice(0, hostEnd)\n    rest = rest.slice(hostEnd)\n\n    // pull out port.\n    this.parseHost(host)\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || ''\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    const ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']'\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      const hostparts = this.hostname.split(/\\./)\n      for (let i = 0, l = hostparts.length; i < l; i++) {\n        const part = hostparts[i]\n        if (!part) { continue }\n        if (!part.match(hostnamePartPattern)) {\n          let newpart = ''\n          for (let j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x'\n            } else {\n              newpart += part[j]\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            const validParts = hostparts.slice(0, i)\n            const notHost = hostparts.slice(i + 1)\n            const bit = part.match(hostnamePartStart)\n            if (bit) {\n              validParts.push(bit[1])\n              notHost.unshift(bit[2])\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest\n            }\n            this.hostname = validParts.join('.')\n            break\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = ''\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2)\n    }\n  }\n\n  // chop off from the tail first.\n  const hash = rest.indexOf('#')\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash)\n    rest = rest.slice(0, hash)\n  }\n  const qm = rest.indexOf('?')\n  if (qm !== -1) {\n    this.search = rest.substr(qm)\n    rest = rest.slice(0, qm)\n  }\n  if (rest) { this.pathname = rest }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = ''\n  }\n\n  return this\n}\n\nUrl.prototype.parseHost = function (host) {\n  let port = portPattern.exec(host)\n  if (port) {\n    port = port[0]\n    if (port !== ':') {\n      this.port = port.substr(1)\n    }\n    host = host.substr(0, host.length - port.length)\n  }\n  if (host) { this.hostname = host }\n}\n\nexport default urlParse\n","// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nconst decodeMap = new Map([\n    [0, 65533],\n    // C1 Unicode control character reference replacements\n    [128, 8364],\n    [130, 8218],\n    [131, 402],\n    [132, 8222],\n    [133, 8230],\n    [134, 8224],\n    [135, 8225],\n    [136, 710],\n    [137, 8240],\n    [138, 352],\n    [139, 8249],\n    [140, 338],\n    [142, 381],\n    [145, 8216],\n    [146, 8217],\n    [147, 8220],\n    [148, 8221],\n    [149, 8226],\n    [150, 8211],\n    [151, 8212],\n    [152, 732],\n    [153, 8482],\n    [154, 353],\n    [155, 8250],\n    [156, 339],\n    [158, 382],\n    [159, 376],\n]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */\nexport const fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {\n    let output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */\nexport function replaceCodePoint(codePoint) {\n    var _a;\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return 0xfffd;\n    }\n    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */\nexport default function decodeCodePoint(codePoint) {\n    return fromCodePoint(replaceCodePoint(codePoint));\n}\n//# sourceMappingURL=decode_codepoint.js.map","export default /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A\\uDFE2]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","export default /[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u0888\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2E50\\u2E51\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uAB6A\\uAB6B\\uFB29\\uFBB2-\\uFBC2\\uFD40-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD833[\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0\\uDCB1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC5\\uDECE-\\uDEDB\\uDEE0-\\uDEE8\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFCA]/","export default /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","export default /[\\0-\\x1F\\x7F-\\x9F]/","export default /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD80D[\\uDC30-\\uDC3F]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","export default /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-html.js.map","// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u0200aglq\\t\\x15\\x18\\x1b\\u026d\\x0f\\0\\0\\x12p;\\u4026os;\\u4027t;\\u403et;\\u403cuot;\\u4022\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-xml.js.map","import htmlDecodeTree from \"./generated/decode-data-html.js\";\nimport xmlDecodeTree from \"./generated/decode-data-xml.js\";\nimport decodeCodePoint, { replaceCodePoint, fromCodePoint, } from \"./decode_codepoint.js\";\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree, xmlDecodeTree, decodeCodePoint };\nexport { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nconst TO_LOWER_BIT = 0b100000;\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n}\nfunction isAsciiAlphaNumeric(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n        isNumber(code));\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nexport var DecodingMode;\n(function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nexport class EntityDecoder {\n    constructor(\n    /** The tree used to decode entities. */\n    decodeTree, \n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, \n    /** An object that is used to produce errors. */\n    errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */\n        this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */\n        this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */\n        this.result = 0;\n        /** The current index in the decode tree. */\n        this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */\n        this.excess = 1;\n        /** The mode in which the decoder is operating. */\n        this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    }\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    write(str, offset) {\n        switch (this.state) {\n            case EntityDecoderState.EntityStart: {\n                if (str.charCodeAt(offset) === CharCodes.NUM) {\n                    this.state = EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(str, offset + 1);\n                }\n                this.state = EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(str, offset);\n            }\n            case EntityDecoderState.NumericStart: {\n                return this.stateNumericStart(str, offset);\n            }\n            case EntityDecoderState.NumericDecimal: {\n                return this.stateNumericDecimal(str, offset);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.stateNumericHex(str, offset);\n            }\n            case EntityDecoderState.NamedEntity: {\n                return this.stateNamedEntity(str, offset);\n            }\n        }\n    }\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericStart(str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    }\n    addToNumericResult(str, start, end, base) {\n        if (start !== end) {\n            const digitCount = end - start;\n            this.result =\n                this.result * Math.pow(base, digitCount) +\n                    parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    }\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericHex(str, offset) {\n        const startIdx = offset;\n        while (offset < str.length) {\n            const char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    }\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericDecimal(str, offset) {\n        const startIdx = offset;\n        while (offset < str.length) {\n            const char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    }\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n    emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        }\n        else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    }\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNamedEntity(str, offset) {\n        const { decodeTree } = this;\n        let current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n            const char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 ||\n                    // If we are parsing an attribute\n                    (this.decodeMode === DecodingMode.Attribute &&\n                        // We shouldn't have consumed any characters after the entity,\n                        (valueLength === 0 ||\n                            // And there should be no invalid characters.\n                            isEntityInAttributeInvalidEnd(char)))\n                    ? 0\n                    : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNotTerminatedNamedEntity() {\n        var _a;\n        const { result, decodeTree } = this;\n        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    }\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNamedEntityData(result, valueLength, consumed) {\n        const { decodeTree } = this;\n        this.emitCodePoint(valueLength === 1\n            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n            : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    }\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n    end() {\n        var _a;\n        switch (this.state) {\n            case EntityDecoderState.NamedEntity: {\n                // Emit a named entity if we have one.\n                return this.result !== 0 &&\n                    (this.decodeMode !== DecodingMode.Attribute ||\n                        this.result === this.treeIndex)\n                    ? this.emitNotTerminatedNamedEntity()\n                    : 0;\n            }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal: {\n                return this.emitNumericEntity(0, 2);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.emitNumericEntity(0, 3);\n            }\n            case EntityDecoderState.NumericStart: {\n                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            }\n            case EntityDecoderState.EntityStart: {\n                // Return 0 if we have no entity.\n                return 0;\n            }\n        }\n    }\n}\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n    let ret = \"\";\n    const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint(str)));\n    return function decodeWithTrie(str, decodeMode) {\n        let lastIndex = 0;\n        let offset = 0;\n        while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            const len = decoder.write(str, \n            // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        const result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nexport function determineBranch(decodeTree, current, nodeIdx, char) {\n    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        const value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    let lo = nodeIdx;\n    let hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nconst htmlDecoder = getDecoder(htmlDecodeTree);\nconst xmlDecoder = getDecoder(xmlDecodeTree);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nexport function decodeHTML(str, mode = DecodingMode.Legacy) {\n    return htmlDecoder(str, mode);\n}\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n}\n//# sourceMappingURL=decode.js.map","// Generated using scripts/write-encode-map.ts\nfunction restoreDiff(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        arr[i][0] += arr[i - 1][0] + 1;\n    }\n    return arr;\n}\n// prettier-ignore\nexport default new Map(/* #__PURE__ */ restoreDiff([[9, \"&Tab;\"], [0, \"&NewLine;\"], [22, \"&excl;\"], [0, \"&quot;\"], [0, \"&num;\"], [0, \"&dollar;\"], [0, \"&percnt;\"], [0, \"&amp;\"], [0, \"&apos;\"], [0, \"&lpar;\"], [0, \"&rpar;\"], [0, \"&ast;\"], [0, \"&plus;\"], [0, \"&comma;\"], [1, \"&period;\"], [0, \"&sol;\"], [10, \"&colon;\"], [0, \"&semi;\"], [0, { v: \"&lt;\", n: 8402, o: \"&nvlt;\" }], [0, { v: \"&equals;\", n: 8421, o: \"&bne;\" }], [0, { v: \"&gt;\", n: 8402, o: \"&nvgt;\" }], [0, \"&quest;\"], [0, \"&commat;\"], [26, \"&lbrack;\"], [0, \"&bsol;\"], [0, \"&rbrack;\"], [0, \"&Hat;\"], [0, \"&lowbar;\"], [0, \"&DiacriticalGrave;\"], [5, { n: 106, o: \"&fjlig;\" }], [20, \"&lbrace;\"], [0, \"&verbar;\"], [0, \"&rbrace;\"], [34, \"&nbsp;\"], [0, \"&iexcl;\"], [0, \"&cent;\"], [0, \"&pound;\"], [0, \"&curren;\"], [0, \"&yen;\"], [0, \"&brvbar;\"], [0, \"&sect;\"], [0, \"&die;\"], [0, \"&copy;\"], [0, \"&ordf;\"], [0, \"&laquo;\"], [0, \"&not;\"], [0, \"&shy;\"], [0, \"&circledR;\"], [0, \"&macr;\"], [0, \"&deg;\"], [0, \"&PlusMinus;\"], [0, \"&sup2;\"], [0, \"&sup3;\"], [0, \"&acute;\"], [0, \"&micro;\"], [0, \"&para;\"], [0, \"&centerdot;\"], [0, \"&cedil;\"], [0, \"&sup1;\"], [0, \"&ordm;\"], [0, \"&raquo;\"], [0, \"&frac14;\"], [0, \"&frac12;\"], [0, \"&frac34;\"], [0, \"&iquest;\"], [0, \"&Agrave;\"], [0, \"&Aacute;\"], [0, \"&Acirc;\"], [0, \"&Atilde;\"], [0, \"&Auml;\"], [0, \"&angst;\"], [0, \"&AElig;\"], [0, \"&Ccedil;\"], [0, \"&Egrave;\"], [0, \"&Eacute;\"], [0, \"&Ecirc;\"], [0, \"&Euml;\"], [0, \"&Igrave;\"], [0, \"&Iacute;\"], [0, \"&Icirc;\"], [0, \"&Iuml;\"], [0, \"&ETH;\"], [0, \"&Ntilde;\"], [0, \"&Ograve;\"], [0, \"&Oacute;\"], [0, \"&Ocirc;\"], [0, \"&Otilde;\"], [0, \"&Ouml;\"], [0, \"&times;\"], [0, \"&Oslash;\"], [0, \"&Ugrave;\"], [0, \"&Uacute;\"], [0, \"&Ucirc;\"], [0, \"&Uuml;\"], [0, \"&Yacute;\"], [0, \"&THORN;\"], [0, \"&szlig;\"], [0, \"&agrave;\"], [0, \"&aacute;\"], [0, \"&acirc;\"], [0, \"&atilde;\"], [0, \"&auml;\"], [0, \"&aring;\"], [0, \"&aelig;\"], [0, \"&ccedil;\"], [0, \"&egrave;\"], [0, \"&eacute;\"], [0, \"&ecirc;\"], [0, \"&euml;\"], [0, \"&igrave;\"], [0, \"&iacute;\"], [0, \"&icirc;\"], [0, \"&iuml;\"], [0, \"&eth;\"], [0, \"&ntilde;\"], [0, \"&ograve;\"], [0, \"&oacute;\"], [0, \"&ocirc;\"], [0, \"&otilde;\"], [0, \"&ouml;\"], [0, \"&div;\"], [0, \"&oslash;\"], [0, \"&ugrave;\"], [0, \"&uacute;\"], [0, \"&ucirc;\"], [0, \"&uuml;\"], [0, \"&yacute;\"], [0, \"&thorn;\"], [0, \"&yuml;\"], [0, \"&Amacr;\"], [0, \"&amacr;\"], [0, \"&Abreve;\"], [0, \"&abreve;\"], [0, \"&Aogon;\"], [0, \"&aogon;\"], [0, \"&Cacute;\"], [0, \"&cacute;\"], [0, \"&Ccirc;\"], [0, \"&ccirc;\"], [0, \"&Cdot;\"], [0, \"&cdot;\"], [0, \"&Ccaron;\"], [0, \"&ccaron;\"], [0, \"&Dcaron;\"], [0, \"&dcaron;\"], [0, \"&Dstrok;\"], [0, \"&dstrok;\"], [0, \"&Emacr;\"], [0, \"&emacr;\"], [2, \"&Edot;\"], [0, \"&edot;\"], [0, \"&Eogon;\"], [0, \"&eogon;\"], [0, \"&Ecaron;\"], [0, \"&ecaron;\"], [0, \"&Gcirc;\"], [0, \"&gcirc;\"], [0, \"&Gbreve;\"], [0, \"&gbreve;\"], [0, \"&Gdot;\"], [0, \"&gdot;\"], [0, \"&Gcedil;\"], [1, \"&Hcirc;\"], [0, \"&hcirc;\"], [0, \"&Hstrok;\"], [0, \"&hstrok;\"], [0, \"&Itilde;\"], [0, \"&itilde;\"], [0, \"&Imacr;\"], [0, \"&imacr;\"], [2, \"&Iogon;\"], [0, \"&iogon;\"], [0, \"&Idot;\"], [0, \"&imath;\"], [0, \"&IJlig;\"], [0, \"&ijlig;\"], [0, \"&Jcirc;\"], [0, \"&jcirc;\"], [0, \"&Kcedil;\"], [0, \"&kcedil;\"], [0, \"&kgreen;\"], [0, \"&Lacute;\"], [0, \"&lacute;\"], [0, \"&Lcedil;\"], [0, \"&lcedil;\"], [0, \"&Lcaron;\"], [0, \"&lcaron;\"], [0, \"&Lmidot;\"], [0, \"&lmidot;\"], [0, \"&Lstrok;\"], [0, \"&lstrok;\"], [0, \"&Nacute;\"], [0, \"&nacute;\"], [0, \"&Ncedil;\"], [0, \"&ncedil;\"], [0, \"&Ncaron;\"], [0, \"&ncaron;\"], [0, \"&napos;\"], [0, \"&ENG;\"], [0, \"&eng;\"], [0, \"&Omacr;\"], [0, \"&omacr;\"], [2, \"&Odblac;\"], [0, \"&odblac;\"], [0, \"&OElig;\"], [0, \"&oelig;\"], [0, \"&Racute;\"], [0, \"&racute;\"], [0, \"&Rcedil;\"], [0, \"&rcedil;\"], [0, \"&Rcaron;\"], [0, \"&rcaron;\"], [0, \"&Sacute;\"], [0, \"&sacute;\"], [0, \"&Scirc;\"], [0, \"&scirc;\"], [0, \"&Scedil;\"], [0, \"&scedil;\"], [0, \"&Scaron;\"], [0, \"&scaron;\"], [0, \"&Tcedil;\"], [0, \"&tcedil;\"], [0, \"&Tcaron;\"], [0, \"&tcaron;\"], [0, \"&Tstrok;\"], [0, \"&tstrok;\"], [0, \"&Utilde;\"], [0, \"&utilde;\"], [0, \"&Umacr;\"], [0, \"&umacr;\"], [0, \"&Ubreve;\"], [0, \"&ubreve;\"], [0, \"&Uring;\"], [0, \"&uring;\"], [0, \"&Udblac;\"], [0, \"&udblac;\"], [0, \"&Uogon;\"], [0, \"&uogon;\"], [0, \"&Wcirc;\"], [0, \"&wcirc;\"], [0, \"&Ycirc;\"], [0, \"&ycirc;\"], [0, \"&Yuml;\"], [0, \"&Zacute;\"], [0, \"&zacute;\"], [0, \"&Zdot;\"], [0, \"&zdot;\"], [0, \"&Zcaron;\"], [0, \"&zcaron;\"], [19, \"&fnof;\"], [34, \"&imped;\"], [63, \"&gacute;\"], [65, \"&jmath;\"], [142, \"&circ;\"], [0, \"&caron;\"], [16, \"&breve;\"], [0, \"&DiacriticalDot;\"], [0, \"&ring;\"], [0, \"&ogon;\"], [0, \"&DiacriticalTilde;\"], [0, \"&dblac;\"], [51, \"&DownBreve;\"], [127, \"&Alpha;\"], [0, \"&Beta;\"], [0, \"&Gamma;\"], [0, \"&Delta;\"], [0, \"&Epsilon;\"], [0, \"&Zeta;\"], [0, \"&Eta;\"], [0, \"&Theta;\"], [0, \"&Iota;\"], [0, \"&Kappa;\"], [0, \"&Lambda;\"], [0, \"&Mu;\"], [0, \"&Nu;\"], [0, \"&Xi;\"], [0, \"&Omicron;\"], [0, \"&Pi;\"], [0, \"&Rho;\"], [1, \"&Sigma;\"], [0, \"&Tau;\"], [0, \"&Upsilon;\"], [0, \"&Phi;\"], [0, \"&Chi;\"], [0, \"&Psi;\"], [0, \"&ohm;\"], [7, \"&alpha;\"], [0, \"&beta;\"], [0, \"&gamma;\"], [0, \"&delta;\"], [0, \"&epsi;\"], [0, \"&zeta;\"], [0, \"&eta;\"], [0, \"&theta;\"], [0, \"&iota;\"], [0, \"&kappa;\"], [0, \"&lambda;\"], [0, \"&mu;\"], [0, \"&nu;\"], [0, \"&xi;\"], [0, \"&omicron;\"], [0, \"&pi;\"], [0, \"&rho;\"], [0, \"&sigmaf;\"], [0, \"&sigma;\"], [0, \"&tau;\"], [0, \"&upsi;\"], [0, \"&phi;\"], [0, \"&chi;\"], [0, \"&psi;\"], [0, \"&omega;\"], [7, \"&thetasym;\"], [0, \"&Upsi;\"], [2, \"&phiv;\"], [0, \"&piv;\"], [5, \"&Gammad;\"], [0, \"&digamma;\"], [18, \"&kappav;\"], [0, \"&rhov;\"], [3, \"&epsiv;\"], [0, \"&backepsilon;\"], [10, \"&IOcy;\"], [0, \"&DJcy;\"], [0, \"&GJcy;\"], [0, \"&Jukcy;\"], [0, \"&DScy;\"], [0, \"&Iukcy;\"], [0, \"&YIcy;\"], [0, \"&Jsercy;\"], [0, \"&LJcy;\"], [0, \"&NJcy;\"], [0, \"&TSHcy;\"], [0, \"&KJcy;\"], [1, \"&Ubrcy;\"], [0, \"&DZcy;\"], [0, \"&Acy;\"], [0, \"&Bcy;\"], [0, \"&Vcy;\"], [0, \"&Gcy;\"], [0, \"&Dcy;\"], [0, \"&IEcy;\"], [0, \"&ZHcy;\"], [0, \"&Zcy;\"], [0, \"&Icy;\"], [0, \"&Jcy;\"], [0, \"&Kcy;\"], [0, \"&Lcy;\"], [0, \"&Mcy;\"], [0, \"&Ncy;\"], [0, \"&Ocy;\"], [0, \"&Pcy;\"], [0, \"&Rcy;\"], [0, \"&Scy;\"], [0, \"&Tcy;\"], [0, \"&Ucy;\"], [0, \"&Fcy;\"], [0, \"&KHcy;\"], [0, \"&TScy;\"], [0, \"&CHcy;\"], [0, \"&SHcy;\"], [0, \"&SHCHcy;\"], [0, \"&HARDcy;\"], [0, \"&Ycy;\"], [0, \"&SOFTcy;\"], [0, \"&Ecy;\"], [0, \"&YUcy;\"], [0, \"&YAcy;\"], [0, \"&acy;\"], [0, \"&bcy;\"], [0, \"&vcy;\"], [0, \"&gcy;\"], [0, \"&dcy;\"], [0, \"&iecy;\"], [0, \"&zhcy;\"], [0, \"&zcy;\"], [0, \"&icy;\"], [0, \"&jcy;\"], [0, \"&kcy;\"], [0, \"&lcy;\"], [0, \"&mcy;\"], [0, \"&ncy;\"], [0, \"&ocy;\"], [0, \"&pcy;\"], [0, \"&rcy;\"], [0, \"&scy;\"], [0, \"&tcy;\"], [0, \"&ucy;\"], [0, \"&fcy;\"], [0, \"&khcy;\"], [0, \"&tscy;\"], [0, \"&chcy;\"], [0, \"&shcy;\"], [0, \"&shchcy;\"], [0, \"&hardcy;\"], [0, \"&ycy;\"], [0, \"&softcy;\"], [0, \"&ecy;\"], [0, \"&yucy;\"], [0, \"&yacy;\"], [1, \"&iocy;\"], [0, \"&djcy;\"], [0, \"&gjcy;\"], [0, \"&jukcy;\"], [0, \"&dscy;\"], [0, \"&iukcy;\"], [0, \"&yicy;\"], [0, \"&jsercy;\"], [0, \"&ljcy;\"], [0, \"&njcy;\"], [0, \"&tshcy;\"], [0, \"&kjcy;\"], [1, \"&ubrcy;\"], [0, \"&dzcy;\"], [7074, \"&ensp;\"], [0, \"&emsp;\"], [0, \"&emsp13;\"], [0, \"&emsp14;\"], [1, \"&numsp;\"], [0, \"&puncsp;\"], [0, \"&ThinSpace;\"], [0, \"&hairsp;\"], [0, \"&NegativeMediumSpace;\"], [0, \"&zwnj;\"], [0, \"&zwj;\"], [0, \"&lrm;\"], [0, \"&rlm;\"], [0, \"&dash;\"], [2, \"&ndash;\"], [0, \"&mdash;\"], [0, \"&horbar;\"], [0, \"&Verbar;\"], [1, \"&lsquo;\"], [0, \"&CloseCurlyQuote;\"], [0, \"&lsquor;\"], [1, \"&ldquo;\"], [0, \"&CloseCurlyDoubleQuote;\"], [0, \"&bdquo;\"], [1, \"&dagger;\"], [0, \"&Dagger;\"], [0, \"&bull;\"], [2, \"&nldr;\"], [0, \"&hellip;\"], [9, \"&permil;\"], [0, \"&pertenk;\"], [0, \"&prime;\"], [0, \"&Prime;\"], [0, \"&tprime;\"], [0, \"&backprime;\"], [3, \"&lsaquo;\"], [0, \"&rsaquo;\"], [3, \"&oline;\"], [2, \"&caret;\"], [1, \"&hybull;\"], [0, \"&frasl;\"], [10, \"&bsemi;\"], [7, \"&qprime;\"], [7, { v: \"&MediumSpace;\", n: 8202, o: \"&ThickSpace;\" }], [0, \"&NoBreak;\"], [0, \"&af;\"], [0, \"&InvisibleTimes;\"], [0, \"&ic;\"], [72, \"&euro;\"], [46, \"&tdot;\"], [0, \"&DotDot;\"], [37, \"&complexes;\"], [2, \"&incare;\"], [4, \"&gscr;\"], [0, \"&hamilt;\"], [0, \"&Hfr;\"], [0, \"&Hopf;\"], [0, \"&planckh;\"], [0, \"&hbar;\"], [0, \"&imagline;\"], [0, \"&Ifr;\"], [0, \"&lagran;\"], [0, \"&ell;\"], [1, \"&naturals;\"], [0, \"&numero;\"], [0, \"&copysr;\"], [0, \"&weierp;\"], [0, \"&Popf;\"], [0, \"&Qopf;\"], [0, \"&realine;\"], [0, \"&real;\"], [0, \"&reals;\"], [0, \"&rx;\"], [3, \"&trade;\"], [1, \"&integers;\"], [2, \"&mho;\"], [0, \"&zeetrf;\"], [0, \"&iiota;\"], [2, \"&bernou;\"], [0, \"&Cayleys;\"], [1, \"&escr;\"], [0, \"&Escr;\"], [0, \"&Fouriertrf;\"], [1, \"&Mellintrf;\"], [0, \"&order;\"], [0, \"&alefsym;\"], [0, \"&beth;\"], [0, \"&gimel;\"], [0, \"&daleth;\"], [12, \"&CapitalDifferentialD;\"], [0, \"&dd;\"], [0, \"&ee;\"], [0, \"&ii;\"], [10, \"&frac13;\"], [0, \"&frac23;\"], [0, \"&frac15;\"], [0, \"&frac25;\"], [0, \"&frac35;\"], [0, \"&frac45;\"], [0, \"&frac16;\"], [0, \"&frac56;\"], [0, \"&frac18;\"], [0, \"&frac38;\"], [0, \"&frac58;\"], [0, \"&frac78;\"], [49, \"&larr;\"], [0, \"&ShortUpArrow;\"], [0, \"&rarr;\"], [0, \"&darr;\"], [0, \"&harr;\"], [0, \"&updownarrow;\"], [0, \"&nwarr;\"], [0, \"&nearr;\"], [0, \"&LowerRightArrow;\"], [0, \"&LowerLeftArrow;\"], [0, \"&nlarr;\"], [0, \"&nrarr;\"], [1, { v: \"&rarrw;\", n: 824, o: \"&nrarrw;\" }], [0, \"&Larr;\"], [0, \"&Uarr;\"], [0, \"&Rarr;\"], [0, \"&Darr;\"], [0, \"&larrtl;\"], [0, \"&rarrtl;\"], [0, \"&LeftTeeArrow;\"], [0, \"&mapstoup;\"], [0, \"&map;\"], [0, \"&DownTeeArrow;\"], [1, \"&hookleftarrow;\"], [0, \"&hookrightarrow;\"], [0, \"&larrlp;\"], [0, \"&looparrowright;\"], [0, \"&harrw;\"], [0, \"&nharr;\"], [1, \"&lsh;\"], [0, \"&rsh;\"], [0, \"&ldsh;\"], [0, \"&rdsh;\"], [1, \"&crarr;\"], [0, \"&cularr;\"], [0, \"&curarr;\"], [2, \"&circlearrowleft;\"], [0, \"&circlearrowright;\"], [0, \"&leftharpoonup;\"], [0, \"&DownLeftVector;\"], [0, \"&RightUpVector;\"], [0, \"&LeftUpVector;\"], [0, \"&rharu;\"], [0, \"&DownRightVector;\"], [0, \"&dharr;\"], [0, \"&dharl;\"], [0, \"&RightArrowLeftArrow;\"], [0, \"&udarr;\"], [0, \"&LeftArrowRightArrow;\"], [0, \"&leftleftarrows;\"], [0, \"&upuparrows;\"], [0, \"&rightrightarrows;\"], [0, \"&ddarr;\"], [0, \"&leftrightharpoons;\"], [0, \"&Equilibrium;\"], [0, \"&nlArr;\"], [0, \"&nhArr;\"], [0, \"&nrArr;\"], [0, \"&DoubleLeftArrow;\"], [0, \"&DoubleUpArrow;\"], [0, \"&DoubleRightArrow;\"], [0, \"&dArr;\"], [0, \"&DoubleLeftRightArrow;\"], [0, \"&DoubleUpDownArrow;\"], [0, \"&nwArr;\"], [0, \"&neArr;\"], [0, \"&seArr;\"], [0, \"&swArr;\"], [0, \"&lAarr;\"], [0, \"&rAarr;\"], [1, \"&zigrarr;\"], [6, \"&larrb;\"], [0, \"&rarrb;\"], [15, \"&DownArrowUpArrow;\"], [7, \"&loarr;\"], [0, \"&roarr;\"], [0, \"&hoarr;\"], [0, \"&forall;\"], [0, \"&comp;\"], [0, { v: \"&part;\", n: 824, o: \"&npart;\" }], [0, \"&exist;\"], [0, \"&nexist;\"], [0, \"&empty;\"], [1, \"&Del;\"], [0, \"&Element;\"], [0, \"&NotElement;\"], [1, \"&ni;\"], [0, \"&notni;\"], [2, \"&prod;\"], [0, \"&coprod;\"], [0, \"&sum;\"], [0, \"&minus;\"], [0, \"&MinusPlus;\"], [0, \"&dotplus;\"], [1, \"&Backslash;\"], [0, \"&lowast;\"], [0, \"&compfn;\"], [1, \"&radic;\"], [2, \"&prop;\"], [0, \"&infin;\"], [0, \"&angrt;\"], [0, { v: \"&ang;\", n: 8402, o: \"&nang;\" }], [0, \"&angmsd;\"], [0, \"&angsph;\"], [0, \"&mid;\"], [0, \"&nmid;\"], [0, \"&DoubleVerticalBar;\"], [0, \"&NotDoubleVerticalBar;\"], [0, \"&and;\"], [0, \"&or;\"], [0, { v: \"&cap;\", n: 65024, o: \"&caps;\" }], [0, { v: \"&cup;\", n: 65024, o: \"&cups;\" }], [0, \"&int;\"], [0, \"&Int;\"], [0, \"&iiint;\"], [0, \"&conint;\"], [0, \"&Conint;\"], [0, \"&Cconint;\"], [0, \"&cwint;\"], [0, \"&ClockwiseContourIntegral;\"], [0, \"&awconint;\"], [0, \"&there4;\"], [0, \"&becaus;\"], [0, \"&ratio;\"], [0, \"&Colon;\"], [0, \"&dotminus;\"], [1, \"&mDDot;\"], [0, \"&homtht;\"], [0, { v: \"&sim;\", n: 8402, o: \"&nvsim;\" }], [0, { v: \"&backsim;\", n: 817, o: \"&race;\" }], [0, { v: \"&ac;\", n: 819, o: \"&acE;\" }], [0, \"&acd;\"], [0, \"&VerticalTilde;\"], [0, \"&NotTilde;\"], [0, { v: \"&eqsim;\", n: 824, o: \"&nesim;\" }], [0, \"&sime;\"], [0, \"&NotTildeEqual;\"], [0, \"&cong;\"], [0, \"&simne;\"], [0, \"&ncong;\"], [0, \"&ap;\"], [0, \"&nap;\"], [0, \"&ape;\"], [0, { v: \"&apid;\", n: 824, o: \"&napid;\" }], [0, \"&backcong;\"], [0, { v: \"&asympeq;\", n: 8402, o: \"&nvap;\" }], [0, { v: \"&bump;\", n: 824, o: \"&nbump;\" }], [0, { v: \"&bumpe;\", n: 824, o: \"&nbumpe;\" }], [0, { v: \"&doteq;\", n: 824, o: \"&nedot;\" }], [0, \"&doteqdot;\"], [0, \"&efDot;\"], [0, \"&erDot;\"], [0, \"&Assign;\"], [0, \"&ecolon;\"], [0, \"&ecir;\"], [0, \"&circeq;\"], [1, \"&wedgeq;\"], [0, \"&veeeq;\"], [1, \"&triangleq;\"], [2, \"&equest;\"], [0, \"&ne;\"], [0, { v: \"&Congruent;\", n: 8421, o: \"&bnequiv;\" }], [0, \"&nequiv;\"], [1, { v: \"&le;\", n: 8402, o: \"&nvle;\" }], [0, { v: \"&ge;\", n: 8402, o: \"&nvge;\" }], [0, { v: \"&lE;\", n: 824, o: \"&nlE;\" }], [0, { v: \"&gE;\", n: 824, o: \"&ngE;\" }], [0, { v: \"&lnE;\", n: 65024, o: \"&lvertneqq;\" }], [0, { v: \"&gnE;\", n: 65024, o: \"&gvertneqq;\" }], [0, { v: \"&ll;\", n: new Map(/* #__PURE__ */ restoreDiff([[824, \"&nLtv;\"], [7577, \"&nLt;\"]])) }], [0, { v: \"&gg;\", n: new Map(/* #__PURE__ */ restoreDiff([[824, \"&nGtv;\"], [7577, \"&nGt;\"]])) }], [0, \"&between;\"], [0, \"&NotCupCap;\"], [0, \"&nless;\"], [0, \"&ngt;\"], [0, \"&nle;\"], [0, \"&nge;\"], [0, \"&lesssim;\"], [0, \"&GreaterTilde;\"], [0, \"&nlsim;\"], [0, \"&ngsim;\"], [0, \"&LessGreater;\"], [0, \"&gl;\"], [0, \"&NotLessGreater;\"], [0, \"&NotGreaterLess;\"], [0, \"&pr;\"], [0, \"&sc;\"], [0, \"&prcue;\"], [0, \"&sccue;\"], [0, \"&PrecedesTilde;\"], [0, { v: \"&scsim;\", n: 824, o: \"&NotSucceedsTilde;\" }], [0, \"&NotPrecedes;\"], [0, \"&NotSucceeds;\"], [0, { v: \"&sub;\", n: 8402, o: \"&NotSubset;\" }], [0, { v: \"&sup;\", n: 8402, o: \"&NotSuperset;\" }], [0, \"&nsub;\"], [0, \"&nsup;\"], [0, \"&sube;\"], [0, \"&supe;\"], [0, \"&NotSubsetEqual;\"], [0, \"&NotSupersetEqual;\"], [0, { v: \"&subne;\", n: 65024, o: \"&varsubsetneq;\" }], [0, { v: \"&supne;\", n: 65024, o: \"&varsupsetneq;\" }], [1, \"&cupdot;\"], [0, \"&UnionPlus;\"], [0, { v: \"&sqsub;\", n: 824, o: \"&NotSquareSubset;\" }], [0, { v: \"&sqsup;\", n: 824, o: \"&NotSquareSuperset;\" }], [0, \"&sqsube;\"], [0, \"&sqsupe;\"], [0, { v: \"&sqcap;\", n: 65024, o: \"&sqcaps;\" }], [0, { v: \"&sqcup;\", n: 65024, o: \"&sqcups;\" }], [0, \"&CirclePlus;\"], [0, \"&CircleMinus;\"], [0, \"&CircleTimes;\"], [0, \"&osol;\"], [0, \"&CircleDot;\"], [0, \"&circledcirc;\"], [0, \"&circledast;\"], [1, \"&circleddash;\"], [0, \"&boxplus;\"], [0, \"&boxminus;\"], [0, \"&boxtimes;\"], [0, \"&dotsquare;\"], [0, \"&RightTee;\"], [0, \"&dashv;\"], [0, \"&DownTee;\"], [0, \"&bot;\"], [1, \"&models;\"], [0, \"&DoubleRightTee;\"], [0, \"&Vdash;\"], [0, \"&Vvdash;\"], [0, \"&VDash;\"], [0, \"&nvdash;\"], [0, \"&nvDash;\"], [0, \"&nVdash;\"], [0, \"&nVDash;\"], [0, \"&prurel;\"], [1, \"&LeftTriangle;\"], [0, \"&RightTriangle;\"], [0, { v: \"&LeftTriangleEqual;\", n: 8402, o: \"&nvltrie;\" }], [0, { v: \"&RightTriangleEqual;\", n: 8402, o: \"&nvrtrie;\" }], [0, \"&origof;\"], [0, \"&imof;\"], [0, \"&multimap;\"], [0, \"&hercon;\"], [0, \"&intcal;\"], [0, \"&veebar;\"], [1, \"&barvee;\"], [0, \"&angrtvb;\"], [0, \"&lrtri;\"], [0, \"&bigwedge;\"], [0, \"&bigvee;\"], [0, \"&bigcap;\"], [0, \"&bigcup;\"], [0, \"&diam;\"], [0, \"&sdot;\"], [0, \"&sstarf;\"], [0, \"&divideontimes;\"], [0, \"&bowtie;\"], [0, \"&ltimes;\"], [0, \"&rtimes;\"], [0, \"&leftthreetimes;\"], [0, \"&rightthreetimes;\"], [0, \"&backsimeq;\"], [0, \"&curlyvee;\"], [0, \"&curlywedge;\"], [0, \"&Sub;\"], [0, \"&Sup;\"], [0, \"&Cap;\"], [0, \"&Cup;\"], [0, \"&fork;\"], [0, \"&epar;\"], [0, \"&lessdot;\"], [0, \"&gtdot;\"], [0, { v: \"&Ll;\", n: 824, o: \"&nLl;\" }], [0, { v: \"&Gg;\", n: 824, o: \"&nGg;\" }], [0, { v: \"&leg;\", n: 65024, o: \"&lesg;\" }], [0, { v: \"&gel;\", n: 65024, o: \"&gesl;\" }], [2, \"&cuepr;\"], [0, \"&cuesc;\"], [0, \"&NotPrecedesSlantEqual;\"], [0, \"&NotSucceedsSlantEqual;\"], [0, \"&NotSquareSubsetEqual;\"], [0, \"&NotSquareSupersetEqual;\"], [2, \"&lnsim;\"], [0, \"&gnsim;\"], [0, \"&precnsim;\"], [0, \"&scnsim;\"], [0, \"&nltri;\"], [0, \"&NotRightTriangle;\"], [0, \"&nltrie;\"], [0, \"&NotRightTriangleEqual;\"], [0, \"&vellip;\"], [0, \"&ctdot;\"], [0, \"&utdot;\"], [0, \"&dtdot;\"], [0, \"&disin;\"], [0, \"&isinsv;\"], [0, \"&isins;\"], [0, { v: \"&isindot;\", n: 824, o: \"&notindot;\" }], [0, \"&notinvc;\"], [0, \"&notinvb;\"], [1, { v: \"&isinE;\", n: 824, o: \"&notinE;\" }], [0, \"&nisd;\"], [0, \"&xnis;\"], [0, \"&nis;\"], [0, \"&notnivc;\"], [0, \"&notnivb;\"], [6, \"&barwed;\"], [0, \"&Barwed;\"], [1, \"&lceil;\"], [0, \"&rceil;\"], [0, \"&LeftFloor;\"], [0, \"&rfloor;\"], [0, \"&drcrop;\"], [0, \"&dlcrop;\"], [0, \"&urcrop;\"], [0, \"&ulcrop;\"], [0, \"&bnot;\"], [1, \"&profline;\"], [0, \"&profsurf;\"], [1, \"&telrec;\"], [0, \"&target;\"], [5, \"&ulcorn;\"], [0, \"&urcorn;\"], [0, \"&dlcorn;\"], [0, \"&drcorn;\"], [2, \"&frown;\"], [0, \"&smile;\"], [9, \"&cylcty;\"], [0, \"&profalar;\"], [7, \"&topbot;\"], [6, \"&ovbar;\"], [1, \"&solbar;\"], [60, \"&angzarr;\"], [51, \"&lmoustache;\"], [0, \"&rmoustache;\"], [2, \"&OverBracket;\"], [0, \"&bbrk;\"], [0, \"&bbrktbrk;\"], [37, \"&OverParenthesis;\"], [0, \"&UnderParenthesis;\"], [0, \"&OverBrace;\"], [0, \"&UnderBrace;\"], [2, \"&trpezium;\"], [4, \"&elinters;\"], [59, \"&blank;\"], [164, \"&circledS;\"], [55, \"&boxh;\"], [1, \"&boxv;\"], [9, \"&boxdr;\"], [3, \"&boxdl;\"], [3, \"&boxur;\"], [3, \"&boxul;\"], [3, \"&boxvr;\"], [7, \"&boxvl;\"], [7, \"&boxhd;\"], [7, \"&boxhu;\"], [7, \"&boxvh;\"], [19, \"&boxH;\"], [0, \"&boxV;\"], [0, \"&boxdR;\"], [0, \"&boxDr;\"], [0, \"&boxDR;\"], [0, \"&boxdL;\"], [0, \"&boxDl;\"], [0, \"&boxDL;\"], [0, \"&boxuR;\"], [0, \"&boxUr;\"], [0, \"&boxUR;\"], [0, \"&boxuL;\"], [0, \"&boxUl;\"], [0, \"&boxUL;\"], [0, \"&boxvR;\"], [0, \"&boxVr;\"], [0, \"&boxVR;\"], [0, \"&boxvL;\"], [0, \"&boxVl;\"], [0, \"&boxVL;\"], [0, \"&boxHd;\"], [0, \"&boxhD;\"], [0, \"&boxHD;\"], [0, \"&boxHu;\"], [0, \"&boxhU;\"], [0, \"&boxHU;\"], [0, \"&boxvH;\"], [0, \"&boxVh;\"], [0, \"&boxVH;\"], [19, \"&uhblk;\"], [3, \"&lhblk;\"], [3, \"&block;\"], [8, \"&blk14;\"], [0, \"&blk12;\"], [0, \"&blk34;\"], [13, \"&square;\"], [8, \"&blacksquare;\"], [0, \"&EmptyVerySmallSquare;\"], [1, \"&rect;\"], [0, \"&marker;\"], [2, \"&fltns;\"], [1, \"&bigtriangleup;\"], [0, \"&blacktriangle;\"], [0, \"&triangle;\"], [2, \"&blacktriangleright;\"], [0, \"&rtri;\"], [3, \"&bigtriangledown;\"], [0, \"&blacktriangledown;\"], [0, \"&dtri;\"], [2, \"&blacktriangleleft;\"], [0, \"&ltri;\"], [6, \"&loz;\"], [0, \"&cir;\"], [32, \"&tridot;\"], [2, \"&bigcirc;\"], [8, \"&ultri;\"], [0, \"&urtri;\"], [0, \"&lltri;\"], [0, \"&EmptySmallSquare;\"], [0, \"&FilledSmallSquare;\"], [8, \"&bigstar;\"], [0, \"&star;\"], [7, \"&phone;\"], [49, \"&female;\"], [1, \"&male;\"], [29, \"&spades;\"], [2, \"&clubs;\"], [1, \"&hearts;\"], [0, \"&diamondsuit;\"], [3, \"&sung;\"], [2, \"&flat;\"], [0, \"&natural;\"], [0, \"&sharp;\"], [163, \"&check;\"], [3, \"&cross;\"], [8, \"&malt;\"], [21, \"&sext;\"], [33, \"&VerticalSeparator;\"], [25, \"&lbbrk;\"], [0, \"&rbbrk;\"], [84, \"&bsolhsub;\"], [0, \"&suphsol;\"], [28, \"&LeftDoubleBracket;\"], [0, \"&RightDoubleBracket;\"], [0, \"&lang;\"], [0, \"&rang;\"], [0, \"&Lang;\"], [0, \"&Rang;\"], [0, \"&loang;\"], [0, \"&roang;\"], [7, \"&longleftarrow;\"], [0, \"&longrightarrow;\"], [0, \"&longleftrightarrow;\"], [0, \"&DoubleLongLeftArrow;\"], [0, \"&DoubleLongRightArrow;\"], [0, \"&DoubleLongLeftRightArrow;\"], [1, \"&longmapsto;\"], [2, \"&dzigrarr;\"], [258, \"&nvlArr;\"], [0, \"&nvrArr;\"], [0, \"&nvHarr;\"], [0, \"&Map;\"], [6, \"&lbarr;\"], [0, \"&bkarow;\"], [0, \"&lBarr;\"], [0, \"&dbkarow;\"], [0, \"&drbkarow;\"], [0, \"&DDotrahd;\"], [0, \"&UpArrowBar;\"], [0, \"&DownArrowBar;\"], [2, \"&Rarrtl;\"], [2, \"&latail;\"], [0, \"&ratail;\"], [0, \"&lAtail;\"], [0, \"&rAtail;\"], [0, \"&larrfs;\"], [0, \"&rarrfs;\"], [0, \"&larrbfs;\"], [0, \"&rarrbfs;\"], [2, \"&nwarhk;\"], [0, \"&nearhk;\"], [0, \"&hksearow;\"], [0, \"&hkswarow;\"], [0, \"&nwnear;\"], [0, \"&nesear;\"], [0, \"&seswar;\"], [0, \"&swnwar;\"], [8, { v: \"&rarrc;\", n: 824, o: \"&nrarrc;\" }], [1, \"&cudarrr;\"], [0, \"&ldca;\"], [0, \"&rdca;\"], [0, \"&cudarrl;\"], [0, \"&larrpl;\"], [2, \"&curarrm;\"], [0, \"&cularrp;\"], [7, \"&rarrpl;\"], [2, \"&harrcir;\"], [0, \"&Uarrocir;\"], [0, \"&lurdshar;\"], [0, \"&ldrushar;\"], [2, \"&LeftRightVector;\"], [0, \"&RightUpDownVector;\"], [0, \"&DownLeftRightVector;\"], [0, \"&LeftUpDownVector;\"], [0, \"&LeftVectorBar;\"], [0, \"&RightVectorBar;\"], [0, \"&RightUpVectorBar;\"], [0, \"&RightDownVectorBar;\"], [0, \"&DownLeftVectorBar;\"], [0, \"&DownRightVectorBar;\"], [0, \"&LeftUpVectorBar;\"], [0, \"&LeftDownVectorBar;\"], [0, \"&LeftTeeVector;\"], [0, \"&RightTeeVector;\"], [0, \"&RightUpTeeVector;\"], [0, \"&RightDownTeeVector;\"], [0, \"&DownLeftTeeVector;\"], [0, \"&DownRightTeeVector;\"], [0, \"&LeftUpTeeVector;\"], [0, \"&LeftDownTeeVector;\"], [0, \"&lHar;\"], [0, \"&uHar;\"], [0, \"&rHar;\"], [0, \"&dHar;\"], [0, \"&luruhar;\"], [0, \"&ldrdhar;\"], [0, \"&ruluhar;\"], [0, \"&rdldhar;\"], [0, \"&lharul;\"], [0, \"&llhard;\"], [0, \"&rharul;\"], [0, \"&lrhard;\"], [0, \"&udhar;\"], [0, \"&duhar;\"], [0, \"&RoundImplies;\"], [0, \"&erarr;\"], [0, \"&simrarr;\"], [0, \"&larrsim;\"], [0, \"&rarrsim;\"], [0, \"&rarrap;\"], [0, \"&ltlarr;\"], [1, \"&gtrarr;\"], [0, \"&subrarr;\"], [1, \"&suplarr;\"], [0, \"&lfisht;\"], [0, \"&rfisht;\"], [0, \"&ufisht;\"], [0, \"&dfisht;\"], [5, \"&lopar;\"], [0, \"&ropar;\"], [4, \"&lbrke;\"], [0, \"&rbrke;\"], [0, \"&lbrkslu;\"], [0, \"&rbrksld;\"], [0, \"&lbrksld;\"], [0, \"&rbrkslu;\"], [0, \"&langd;\"], [0, \"&rangd;\"], [0, \"&lparlt;\"], [0, \"&rpargt;\"], [0, \"&gtlPar;\"], [0, \"&ltrPar;\"], [3, \"&vzigzag;\"], [1, \"&vangrt;\"], [0, \"&angrtvbd;\"], [6, \"&ange;\"], [0, \"&range;\"], [0, \"&dwangle;\"], [0, \"&uwangle;\"], [0, \"&angmsdaa;\"], [0, \"&angmsdab;\"], [0, \"&angmsdac;\"], [0, \"&angmsdad;\"], [0, \"&angmsdae;\"], [0, \"&angmsdaf;\"], [0, \"&angmsdag;\"], [0, \"&angmsdah;\"], [0, \"&bemptyv;\"], [0, \"&demptyv;\"], [0, \"&cemptyv;\"], [0, \"&raemptyv;\"], [0, \"&laemptyv;\"], [0, \"&ohbar;\"], [0, \"&omid;\"], [0, \"&opar;\"], [1, \"&operp;\"], [1, \"&olcross;\"], [0, \"&odsold;\"], [1, \"&olcir;\"], [0, \"&ofcir;\"], [0, \"&olt;\"], [0, \"&ogt;\"], [0, \"&cirscir;\"], [0, \"&cirE;\"], [0, \"&solb;\"], [0, \"&bsolb;\"], [3, \"&boxbox;\"], [3, \"&trisb;\"], [0, \"&rtriltri;\"], [0, { v: \"&LeftTriangleBar;\", n: 824, o: \"&NotLeftTriangleBar;\" }], [0, { v: \"&RightTriangleBar;\", n: 824, o: \"&NotRightTriangleBar;\" }], [11, \"&iinfin;\"], [0, \"&infintie;\"], [0, \"&nvinfin;\"], [4, \"&eparsl;\"], [0, \"&smeparsl;\"], [0, \"&eqvparsl;\"], [5, \"&blacklozenge;\"], [8, \"&RuleDelayed;\"], [1, \"&dsol;\"], [9, \"&bigodot;\"], [0, \"&bigoplus;\"], [0, \"&bigotimes;\"], [1, \"&biguplus;\"], [1, \"&bigsqcup;\"], [5, \"&iiiint;\"], [0, \"&fpartint;\"], [2, \"&cirfnint;\"], [0, \"&awint;\"], [0, \"&rppolint;\"], [0, \"&scpolint;\"], [0, \"&npolint;\"], [0, \"&pointint;\"], [0, \"&quatint;\"], [0, \"&intlarhk;\"], [10, \"&pluscir;\"], [0, \"&plusacir;\"], [0, \"&simplus;\"], [0, \"&plusdu;\"], [0, \"&plussim;\"], [0, \"&plustwo;\"], [1, \"&mcomma;\"], [0, \"&minusdu;\"], [2, \"&loplus;\"], [0, \"&roplus;\"], [0, \"&Cross;\"], [0, \"&timesd;\"], [0, \"&timesbar;\"], [1, \"&smashp;\"], [0, \"&lotimes;\"], [0, \"&rotimes;\"], [0, \"&otimesas;\"], [0, \"&Otimes;\"], [0, \"&odiv;\"], [0, \"&triplus;\"], [0, \"&triminus;\"], [0, \"&tritime;\"], [0, \"&intprod;\"], [2, \"&amalg;\"], [0, \"&capdot;\"], [1, \"&ncup;\"], [0, \"&ncap;\"], [0, \"&capand;\"], [0, \"&cupor;\"], [0, \"&cupcap;\"], [0, \"&capcup;\"], [0, \"&cupbrcap;\"], [0, \"&capbrcup;\"], [0, \"&cupcup;\"], [0, \"&capcap;\"], [0, \"&ccups;\"], [0, \"&ccaps;\"], [2, \"&ccupssm;\"], [2, \"&And;\"], [0, \"&Or;\"], [0, \"&andand;\"], [0, \"&oror;\"], [0, \"&orslope;\"], [0, \"&andslope;\"], [1, \"&andv;\"], [0, \"&orv;\"], [0, \"&andd;\"], [0, \"&ord;\"], [1, \"&wedbar;\"], [6, \"&sdote;\"], [3, \"&simdot;\"], [2, { v: \"&congdot;\", n: 824, o: \"&ncongdot;\" }], [0, \"&easter;\"], [0, \"&apacir;\"], [0, { v: \"&apE;\", n: 824, o: \"&napE;\" }], [0, \"&eplus;\"], [0, \"&pluse;\"], [0, \"&Esim;\"], [0, \"&Colone;\"], [0, \"&Equal;\"], [1, \"&ddotseq;\"], [0, \"&equivDD;\"], [0, \"&ltcir;\"], [0, \"&gtcir;\"], [0, \"&ltquest;\"], [0, \"&gtquest;\"], [0, { v: \"&leqslant;\", n: 824, o: \"&nleqslant;\" }], [0, { v: \"&geqslant;\", n: 824, o: \"&ngeqslant;\" }], [0, \"&lesdot;\"], [0, \"&gesdot;\"], [0, \"&lesdoto;\"], [0, \"&gesdoto;\"], [0, \"&lesdotor;\"], [0, \"&gesdotol;\"], [0, \"&lap;\"], [0, \"&gap;\"], [0, \"&lne;\"], [0, \"&gne;\"], [0, \"&lnap;\"], [0, \"&gnap;\"], [0, \"&lEg;\"], [0, \"&gEl;\"], [0, \"&lsime;\"], [0, \"&gsime;\"], [0, \"&lsimg;\"], [0, \"&gsiml;\"], [0, \"&lgE;\"], [0, \"&glE;\"], [0, \"&lesges;\"], [0, \"&gesles;\"], [0, \"&els;\"], [0, \"&egs;\"], [0, \"&elsdot;\"], [0, \"&egsdot;\"], [0, \"&el;\"], [0, \"&eg;\"], [2, \"&siml;\"], [0, \"&simg;\"], [0, \"&simlE;\"], [0, \"&simgE;\"], [0, { v: \"&LessLess;\", n: 824, o: \"&NotNestedLessLess;\" }], [0, { v: \"&GreaterGreater;\", n: 824, o: \"&NotNestedGreaterGreater;\" }], [1, \"&glj;\"], [0, \"&gla;\"], [0, \"&ltcc;\"], [0, \"&gtcc;\"], [0, \"&lescc;\"], [0, \"&gescc;\"], [0, \"&smt;\"], [0, \"&lat;\"], [0, { v: \"&smte;\", n: 65024, o: \"&smtes;\" }], [0, { v: \"&late;\", n: 65024, o: \"&lates;\" }], [0, \"&bumpE;\"], [0, { v: \"&PrecedesEqual;\", n: 824, o: \"&NotPrecedesEqual;\" }], [0, { v: \"&sce;\", n: 824, o: \"&NotSucceedsEqual;\" }], [2, \"&prE;\"], [0, \"&scE;\"], [0, \"&precneqq;\"], [0, \"&scnE;\"], [0, \"&prap;\"], [0, \"&scap;\"], [0, \"&precnapprox;\"], [0, \"&scnap;\"], [0, \"&Pr;\"], [0, \"&Sc;\"], [0, \"&subdot;\"], [0, \"&supdot;\"], [0, \"&subplus;\"], [0, \"&supplus;\"], [0, \"&submult;\"], [0, \"&supmult;\"], [0, \"&subedot;\"], [0, \"&supedot;\"], [0, { v: \"&subE;\", n: 824, o: \"&nsubE;\" }], [0, { v: \"&supE;\", n: 824, o: \"&nsupE;\" }], [0, \"&subsim;\"], [0, \"&supsim;\"], [2, { v: \"&subnE;\", n: 65024, o: \"&varsubsetneqq;\" }], [0, { v: \"&supnE;\", n: 65024, o: \"&varsupsetneqq;\" }], [2, \"&csub;\"], [0, \"&csup;\"], [0, \"&csube;\"], [0, \"&csupe;\"], [0, \"&subsup;\"], [0, \"&supsub;\"], [0, \"&subsub;\"], [0, \"&supsup;\"], [0, \"&suphsub;\"], [0, \"&supdsub;\"], [0, \"&forkv;\"], [0, \"&topfork;\"], [0, \"&mlcp;\"], [8, \"&Dashv;\"], [1, \"&Vdashl;\"], [0, \"&Barv;\"], [0, \"&vBar;\"], [0, \"&vBarv;\"], [1, \"&Vbar;\"], [0, \"&Not;\"], [0, \"&bNot;\"], [0, \"&rnmid;\"], [0, \"&cirmid;\"], [0, \"&midcir;\"], [0, \"&topcir;\"], [0, \"&nhpar;\"], [0, \"&parsim;\"], [9, { v: \"&parsl;\", n: 8421, o: \"&nparsl;\" }], [44343, { n: new Map(/* #__PURE__ */ restoreDiff([[56476, \"&Ascr;\"], [1, \"&Cscr;\"], [0, \"&Dscr;\"], [2, \"&Gscr;\"], [2, \"&Jscr;\"], [0, \"&Kscr;\"], [2, \"&Nscr;\"], [0, \"&Oscr;\"], [0, \"&Pscr;\"], [0, \"&Qscr;\"], [1, \"&Sscr;\"], [0, \"&Tscr;\"], [0, \"&Uscr;\"], [0, \"&Vscr;\"], [0, \"&Wscr;\"], [0, \"&Xscr;\"], [0, \"&Yscr;\"], [0, \"&Zscr;\"], [0, \"&ascr;\"], [0, \"&bscr;\"], [0, \"&cscr;\"], [0, \"&dscr;\"], [1, \"&fscr;\"], [1, \"&hscr;\"], [0, \"&iscr;\"], [0, \"&jscr;\"], [0, \"&kscr;\"], [0, \"&lscr;\"], [0, \"&mscr;\"], [0, \"&nscr;\"], [1, \"&pscr;\"], [0, \"&qscr;\"], [0, \"&rscr;\"], [0, \"&sscr;\"], [0, \"&tscr;\"], [0, \"&uscr;\"], [0, \"&vscr;\"], [0, \"&wscr;\"], [0, \"&xscr;\"], [0, \"&yscr;\"], [0, \"&zscr;\"], [52, \"&Afr;\"], [0, \"&Bfr;\"], [1, \"&Dfr;\"], [0, \"&Efr;\"], [0, \"&Ffr;\"], [0, \"&Gfr;\"], [2, \"&Jfr;\"], [0, \"&Kfr;\"], [0, \"&Lfr;\"], [0, \"&Mfr;\"], [0, \"&Nfr;\"], [0, \"&Ofr;\"], [0, \"&Pfr;\"], [0, \"&Qfr;\"], [1, \"&Sfr;\"], [0, \"&Tfr;\"], [0, \"&Ufr;\"], [0, \"&Vfr;\"], [0, \"&Wfr;\"], [0, \"&Xfr;\"], [0, \"&Yfr;\"], [1, \"&afr;\"], [0, \"&bfr;\"], [0, \"&cfr;\"], [0, \"&dfr;\"], [0, \"&efr;\"], [0, \"&ffr;\"], [0, \"&gfr;\"], [0, \"&hfr;\"], [0, \"&ifr;\"], [0, \"&jfr;\"], [0, \"&kfr;\"], [0, \"&lfr;\"], [0, \"&mfr;\"], [0, \"&nfr;\"], [0, \"&ofr;\"], [0, \"&pfr;\"], [0, \"&qfr;\"], [0, \"&rfr;\"], [0, \"&sfr;\"], [0, \"&tfr;\"], [0, \"&ufr;\"], [0, \"&vfr;\"], [0, \"&wfr;\"], [0, \"&xfr;\"], [0, \"&yfr;\"], [0, \"&zfr;\"], [0, \"&Aopf;\"], [0, \"&Bopf;\"], [1, \"&Dopf;\"], [0, \"&Eopf;\"], [0, \"&Fopf;\"], [0, \"&Gopf;\"], [1, \"&Iopf;\"], [0, \"&Jopf;\"], [0, \"&Kopf;\"], [0, \"&Lopf;\"], [0, \"&Mopf;\"], [1, \"&Oopf;\"], [3, \"&Sopf;\"], [0, \"&Topf;\"], [0, \"&Uopf;\"], [0, \"&Vopf;\"], [0, \"&Wopf;\"], [0, \"&Xopf;\"], [0, \"&Yopf;\"], [1, \"&aopf;\"], [0, \"&bopf;\"], [0, \"&copf;\"], [0, \"&dopf;\"], [0, \"&eopf;\"], [0, \"&fopf;\"], [0, \"&gopf;\"], [0, \"&hopf;\"], [0, \"&iopf;\"], [0, \"&jopf;\"], [0, \"&kopf;\"], [0, \"&lopf;\"], [0, \"&mopf;\"], [0, \"&nopf;\"], [0, \"&oopf;\"], [0, \"&popf;\"], [0, \"&qopf;\"], [0, \"&ropf;\"], [0, \"&sopf;\"], [0, \"&topf;\"], [0, \"&uopf;\"], [0, \"&vopf;\"], [0, \"&wopf;\"], [0, \"&xopf;\"], [0, \"&yopf;\"], [0, \"&zopf;\"]])) }], [8906, \"&fflig;\"], [0, \"&filig;\"], [0, \"&fllig;\"], [0, \"&ffilig;\"], [0, \"&ffllig;\"]]));\n//# sourceMappingURL=encode-html.js.map","export const xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nconst xmlCodeMap = new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [39, \"&apos;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n]);\n// For compatibility with node < 4, we wrap `codePointAt`\nexport const getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? (str, index) => str.codePointAt(index)\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        (c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800\n            ? (c.charCodeAt(index) - 0xd800) * 0x400 +\n                c.charCodeAt(index + 1) -\n                0xdc00 +\n                0x10000\n            : c.charCodeAt(index);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexport function encodeXML(str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while ((match = xmlReplacer.exec(str)) !== null) {\n        const i = match.index;\n        const char = str.charCodeAt(i);\n        const next = xmlCodeMap.get(char);\n        if (next !== undefined) {\n            ret += str.substring(lastIdx, i) + next;\n            lastIdx = i + 1;\n        }\n        else {\n            ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nexport const escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */\nfunction getEscaper(regex, map) {\n    return function escape(data) {\n        let match;\n        let lastIdx = 0;\n        let result = \"\";\n        while ((match = regex.exec(data))) {\n            if (lastIdx !== match.index) {\n                result += data.substring(lastIdx, match.index);\n            }\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIdx = match.index + 1;\n        }\n        return result + data.substring(lastIdx);\n    };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nexport const escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [160, \"&nbsp;\"],\n]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([\n    [38, \"&amp;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n    [160, \"&nbsp;\"],\n]));\n//# sourceMappingURL=escape.js.map","import { decodeXML, decodeHTML, DecodingMode } from \"./decode.js\";\nimport { encodeHTML, encodeNonAsciiHTML } from \"./encode.js\";\nimport { encodeXML, escapeUTF8, escapeAttribute, escapeText, } from \"./escape.js\";\n/** The level of entities to support. */\nexport var EntityLevel;\n(function (EntityLevel) {\n    /** Support only XML entities. */\n    EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n    /** Support HTML entities, which are a superset of XML entities. */\n    EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\nexport var EncodingMode;\n(function (EncodingMode) {\n    /**\n     * The output is UTF-8 encoded. Only characters that need escaping within\n     * XML will be escaped.\n     */\n    EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n    /**\n     * The output consists only of ASCII characters. Characters that need\n     * escaping within HTML, and characters that aren't ASCII characters will\n     * be escaped.\n     */\n    EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n    /**\n     * Encode all characters that have an equivalent entity, as well as all\n     * characters that are not ASCII characters.\n     */\n    EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n    /**\n     * Encode all characters that have to be escaped in HTML attributes,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n    /**\n     * Encode all characters that have to be escaped in HTML text,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\nexport function decode(data, options = EntityLevel.XML) {\n    const level = typeof options === \"number\" ? options : options.level;\n    if (level === EntityLevel.HTML) {\n        const mode = typeof options === \"object\" ? options.mode : undefined;\n        return decodeHTML(data, mode);\n    }\n    return decodeXML(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\nexport function decodeStrict(data, options = EntityLevel.XML) {\n    var _a;\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    (_a = opts.mode) !== null && _a !== void 0 ? _a : (opts.mode = DecodingMode.Strict);\n    return decode(data, opts);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\nexport function encode(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    // Mode `UTF8` just escapes XML entities\n    if (opts.mode === EncodingMode.UTF8)\n        return escapeUTF8(data);\n    if (opts.mode === EncodingMode.Attribute)\n        return escapeAttribute(data);\n    if (opts.mode === EncodingMode.Text)\n        return escapeText(data);\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === EncodingMode.ASCII) {\n            return encodeNonAsciiHTML(data);\n        }\n        return encodeHTML(data);\n    }\n    // ASCII and Extensive are equivalent\n    return encodeXML(data);\n}\nexport { encodeXML, escape, escapeUTF8, escapeAttribute, escapeText, } from \"./escape.js\";\nexport { encodeHTML, encodeNonAsciiHTML, \n// Legacy aliases (deprecated)\nencodeHTML as encodeHTML4, encodeHTML as encodeHTML5, } from \"./encode.js\";\nexport { EntityDecoder, DecodingMode, decodeXML, decodeHTML, decodeHTMLStrict, decodeHTMLAttribute, \n// Legacy aliases (deprecated)\ndecodeHTML as decodeHTML4, decodeHTML as decodeHTML5, decodeHTMLStrict as decodeHTML4Strict, decodeHTMLStrict as decodeHTML5Strict, decodeXML as decodeXMLStrict, } from \"./decode.js\";\n//# sourceMappingURL=index.js.map","// Utilities\n//\n\nimport * as mdurl from 'mdurl'\nimport * as ucmicro from 'uc.micro'\nimport { decodeHTML } from 'entities'\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\n\nfunction isString (obj) { return _class(obj) === '[object String]' }\n\nconst _hasOwnProperty = Object.prototype.hasOwnProperty\n\nfunction has (object, key) {\n  return _hasOwnProperty.call(object, key)\n}\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1)\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object')\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt (src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1))\n}\n\nfunction isValidEntityCode (c) {\n  /* eslint no-bitwise:0 */\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false }\n  if (c === 0x0B) { return false }\n  if (c >= 0x0E && c <= 0x1F) { return false }\n  if (c >= 0x7F && c <= 0x9F) { return false }\n  // out of range\n  if (c > 0x10FFFF) { return false }\n  return true\n}\n\nfunction fromCodePoint (c) {\n  /* eslint no-bitwise:0 */\n  if (c > 0xffff) {\n    c -= 0x10000\n    const surrogate1 = 0xd800 + (c >> 10)\n    const surrogate2 = 0xdc00 + (c & 0x3ff)\n\n    return String.fromCharCode(surrogate1, surrogate2)\n  }\n  return String.fromCharCode(c)\n}\n\nconst UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g\nconst ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi\nconst UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi')\n\nconst DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i\n\nfunction replaceEntityPattern (match, name) {\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    const code = name[1].toLowerCase() === 'x'\n      ? parseInt(name.slice(2), 16)\n      : parseInt(name.slice(1), 10)\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code)\n    }\n\n    return match\n  }\n\n  const decoded = decodeHTML(match)\n  if (decoded !== match) {\n    return decoded\n  }\n\n  return match\n}\n\n/* function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n} */\n\nfunction unescapeMd (str) {\n  if (str.indexOf('\\\\') < 0) { return str }\n  return str.replace(UNESCAPE_MD_RE, '$1')\n}\n\nfunction unescapeAll (str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped }\n    return replaceEntityPattern(match, entity)\n  })\n}\n\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n}\n\nfunction replaceUnsafeChar (ch) {\n  return HTML_REPLACEMENTS[ch]\n}\n\nfunction escapeHtml (str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar)\n  }\n  return str\n}\n\nconst REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g\n\nfunction escapeRE (str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&')\n}\n\nfunction isSpace (code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true\n  }\n  return false\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace (code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true\n  }\n  return false\n}\n\n/* eslint-disable max-len */\n\n// Currently without astral characters support.\nfunction isPunctChar (ch) {\n  return ucmicro.P.test(ch) || ucmicro.S.test(ch)\n}\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct (ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference (str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ')\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß')\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase()\n}\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nconst lib = { mdurl, ucmicro }\n\nexport {\n  lib,\n  assign,\n  isString,\n  has,\n  unescapeMd,\n  unescapeAll,\n  isValidEntityCode,\n  fromCodePoint,\n  escapeHtml,\n  arrayReplaceAt,\n  isSpace,\n  isWhiteSpace,\n  isMdAsciiPunct,\n  isPunctChar,\n  escapeRE,\n  normalizeReference\n}\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nexport default function parseLinkLabel (state, start, disableNested) {\n  let level, found, marker, prevPos\n\n  const max = state.posMax\n  const oldPos = state.pos\n\n  state.pos = start + 1\n  level = 1\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos)\n    if (marker === 0x5D /* ] */) {\n      level--\n      if (level === 0) {\n        found = true\n        break\n      }\n    }\n\n    prevPos = state.pos\n    state.md.inline.skipToken(state)\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++\n      } else if (disableNested) {\n        state.pos = oldPos\n        return -1\n      }\n    }\n  }\n\n  let labelEnd = -1\n\n  if (found) {\n    labelEnd = state.pos\n  }\n\n  // restore old state\n  state.pos = oldPos\n\n  return labelEnd\n}\n","// Parse link destination\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\nexport default function parseLinkDestination (str, start, max) {\n  let code\n  let pos = start\n\n  const result = {\n    ok: false,\n    pos: 0,\n    str: ''\n  }\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++\n    while (pos < max) {\n      code = str.charCodeAt(pos)\n      if (code === 0x0A /* \\n */) { return result }\n      if (code === 0x3C /* < */) { return result }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1\n        result.str = unescapeAll(str.slice(start + 1, pos))\n        result.ok = true\n        return result\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2\n        continue\n      }\n\n      pos++\n    }\n\n    // no closing '>'\n    return result\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n\n    if (code === 0x20) { break }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break }\n      pos += 2\n      continue\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++\n      if (level > 32) { return result }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break }\n      level--\n    }\n\n    pos++\n  }\n\n  if (start === pos) { return result }\n  if (level !== 0) { return result }\n\n  result.str = unescapeAll(str.slice(start, pos))\n  result.pos = pos\n  result.ok = true\n  return result\n}\n","// Parse link title\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\n// Parse link title within `str` in [start, max] range,\n// or continue previous parsing if `prev_state` is defined (equal to result of last execution).\n//\nexport default function parseLinkTitle (str, start, max, prev_state) {\n  let code\n  let pos = start\n\n  const state = {\n    // if `true`, this is a valid link title\n    ok: false,\n    // if `true`, this link can be continued on the next line\n    can_continue: false,\n    // if `ok`, it's the position of the first character after the closing marker\n    pos: 0,\n    // if `ok`, it's the unescaped title\n    str: '',\n    // expected closing marker character code\n    marker: 0\n  }\n\n  if (prev_state) {\n    // this is a continuation of a previous parseLinkTitle call on the next line,\n    // used in reference links only\n    state.str = prev_state.str\n    state.marker = prev_state.marker\n  } else {\n    if (pos >= max) { return state }\n\n    let marker = str.charCodeAt(pos)\n    if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return state }\n\n    start++\n    pos++\n\n    // if opening marker is \"(\", switch it to closing marker \")\"\n    if (marker === 0x28) { marker = 0x29 }\n\n    state.marker = marker\n  }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n    if (code === state.marker) {\n      state.pos = pos + 1\n      state.str += unescapeAll(str.slice(start, pos))\n      state.ok = true\n      return state\n    } else if (code === 0x28 /* ( */ && state.marker === 0x29 /* ) */) {\n      return state\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++\n    }\n\n    pos++\n  }\n\n  // no closing marker found, but this link title may continue on the next line (for references)\n  state.can_continue = true\n  state.str += unescapeAll(str.slice(start, pos))\n  return state\n}\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nimport { assign, unescapeAll, escapeHtml } from './common/utils.mjs'\n\nconst default_rules = {}\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(token.content) +\n          '</code>'\n}\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n'\n}\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n  const info = token.info ? unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let langAttrs = ''\n\n  if (info) {\n    const arr = info.split(/(\\s+)/g)\n    langName = arr[0]\n    langAttrs = arr.slice(2).join('')\n  }\n\n  let highlighted\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content)\n  } else {\n    highlighted = escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n'\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class')\n    const tmpAttrs = token.attrs ? token.attrs.slice() : []\n\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName])\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice()\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    }\n\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`\n  }\n\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env)\n\n  return slf.renderToken(tokens, idx, options)\n}\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n'\n}\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n'\n}\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content)\n}\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer () {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules)\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs (token) {\n  let i, l, result\n\n  if (!token.attrs) { return '' }\n\n  result = ''\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"'\n  }\n\n  return result\n}\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken (tokens, idx, options) {\n  const token = tokens[idx]\n  let result = ''\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return ''\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n'\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token)\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /'\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false\n  if (token.block) {\n    needLf = true\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1]\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>'\n\n  return result\n}\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options)\n    }\n  }\n\n  return result\n}\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = ''\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content\n        break\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env)\n        break\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content\n        break\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n'\n        break\n      default:\n        // all other tokens are skipped\n    }\n  }\n\n  return result\n}\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env)\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options, env)\n    }\n  }\n\n  return result\n}\n\nexport default Renderer\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler () {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = []\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i\n    }\n  }\n  return -1\n}\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this\n  const chains = ['']\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName)\n      }\n    })\n  })\n\n  self.__cache__ = {}\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = []\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return }\n\n      self.__cache__[chain].push(rule.fn)\n    })\n  })\n}\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name) }\n\n  this.__rules__[index].fn = fn\n  this.__rules__[index].alt = opt.alt || []\n  this.__cache__ = null\n}\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {}\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = true\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false })\n\n  this.enable(list, ignoreInvalid)\n}\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = false\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__()\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || []\n}\n\nexport default Ruler\n","// Token class\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token (type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = ''\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = ''\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = ''\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false\n}\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex (name) {\n  if (!this.attrs) { return -1 }\n\n  const attrs = this.attrs\n\n  for (let i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i }\n  }\n  return -1\n}\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush (attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData)\n  } else {\n    this.attrs = [attrData]\n  }\n}\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet (name, value) {\n  const idx = this.attrIndex(name)\n  const attrData = [name, value]\n\n  if (idx < 0) {\n    this.attrPush(attrData)\n  } else {\n    this.attrs[idx] = attrData\n  }\n}\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet (name) {\n  const idx = this.attrIndex(name)\n  let value = null\n  if (idx >= 0) {\n    value = this.attrs[idx][1]\n  }\n  return value\n}\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin (name, value) {\n  const idx = this.attrIndex(name)\n\n  if (idx < 0) {\n    this.attrPush([name, value])\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value\n  }\n}\n\nexport default Token\n","// Core state object\n//\n\nimport Token from '../token.mjs'\n\nfunction StateCore (src, md, env) {\n  this.src = src\n  this.env = env\n  this.tokens = []\n  this.inlineMode = false\n  this.md = md // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token\n\nexport default StateCore\n","// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nconst NEWLINES_RE  = /\\r\\n?|\\n/g\nconst NULL_RE      = /\\0/g\n\nexport default function normalize (state) {\n  let str\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n')\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD')\n\n  state.src = str\n}\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nimport { arrayReplaceAt } from '../common/utils.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nexport default function linkify (state) {\n  const blockTokens = state.tokens\n\n  if (!state.md.options.linkify) { return }\n\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue\n    }\n\n    let tokens = blockTokens[j].children\n\n    let htmlLinkLevel = 0\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i]\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--\n        }\n        continue\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++\n        }\n      }\n      if (htmlLinkLevel > 0) { continue }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content\n        let links = state.md.linkify.match(text)\n\n        // Now split string to nodes\n        const nodes = []\n        let level = currentToken.level\n        let lastPos = 0\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1)\n        }\n\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url\n          const fullUrl = state.md.normalizeLink(url)\n          if (!state.md.validateLink(fullUrl)) { continue }\n\n          let urlText = links[ln].text\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '')\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '')\n          } else {\n            urlText = state.md.normalizeLinkText(urlText)\n          }\n\n          const pos = links[ln].index\n\n          if (pos > lastPos) {\n            const token   = new state.Token('text', '', 0)\n            token.content = text.slice(lastPos, pos)\n            token.level   = level\n            nodes.push(token)\n          }\n\n          const token_o   = new state.Token('link_open', 'a', 1)\n          token_o.attrs   = [['href', fullUrl]]\n          token_o.level   = level++\n          token_o.markup  = 'linkify'\n          token_o.info    = 'auto'\n          nodes.push(token_o)\n\n          const token_t   = new state.Token('text', '', 0)\n          token_t.content = urlText\n          token_t.level   = level\n          nodes.push(token_t)\n\n          const token_c   = new state.Token('link_close', 'a', -1)\n          token_c.level   = --level\n          token_c.markup  = 'linkify'\n          token_c.info    = 'auto'\n          nodes.push(token_c)\n\n          lastPos = links[ln].lastIndex\n        }\n        if (lastPos < text.length) {\n          const token   = new state.Token('text', '', 0)\n          token.content = text.slice(lastPos)\n          token.level   = level\n          nodes.push(token)\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)\n      }\n    }\n  }\n}\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i\n\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n}\n\nfunction replaceFn (match, name) {\n  return SCOPED_ABBR[name.toLowerCase()]\n}\n\nfunction replace_scoped (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn)\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nfunction replace_rare (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013')\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nexport default function replace (state) {\n  let blkIdx\n\n  if (!state.md.options.typographer) { return }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') { continue }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children)\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children)\n    }\n  }\n}\n","// Convert straight quotation marks to typographic ones\n//\n\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nconst QUOTE_TEST_RE = /['\"]/\nconst QUOTE_RE = /['\"]/g\nconst APOSTROPHE = '\\u2019' /* ’ */\n\nfunction replaceAt (str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1)\n}\n\nfunction process_inlines (tokens, state) {\n  let j\n\n  const stack = []\n\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n\n    const thisLevel = tokens[i].level\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break }\n    }\n    stack.length = j + 1\n\n    if (token.type !== 'text') { continue }\n\n    let text = token.content\n    let pos = 0\n    let max = text.length\n\n    /* eslint no-labels:0,block-scoped-var:0 */\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos\n      const t = QUOTE_RE.exec(text)\n      if (!t) { break }\n\n      let canOpen = true\n      let canClose = true\n      pos = t.index + 1\n      const isSingle = (t[0] === \"'\")\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      let lastChar = 0x20\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1)\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // lastChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1)\n          break\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      let nextChar = 0x20\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos)\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // nextChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0)\n          break\n        }\n      }\n\n      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n      const isLastWhiteSpace = isWhiteSpace(lastChar)\n      const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n      if (isNextWhiteSpace) {\n        canOpen = false\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar\n        canClose = isNextPunctChar\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE)\n        }\n        continue\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          let item = stack[j]\n          if (stack[j].level < thisLevel) { break }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j]\n\n            let openQuote\n            let closeQuote\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2]\n              closeQuote = state.md.options.quotes[3]\n            } else {\n              openQuote = state.md.options.quotes[0]\n              closeQuote = state.md.options.quotes[1]\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote)\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote)\n\n            pos += closeQuote.length - 1\n            if (item.token === i) { pos += openQuote.length - 1 }\n\n            text = token.content\n            max = text.length\n\n            stack.length = j\n            continue OUTER\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        })\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE)\n      }\n    }\n  }\n}\n\nexport default function smartquotes (state) {\n  /* eslint max-depth:0 */\n  if (!state.md.options.typographer) { return }\n\n  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state)\n  }\n}\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateCore from './rules_core/state_core.mjs'\n\nimport r_normalize from './rules_core/normalize.mjs'\nimport r_block from './rules_core/block.mjs'\nimport r_inline from './rules_core/inline.mjs'\nimport r_linkify from './rules_core/linkify.mjs'\nimport r_replacements from './rules_core/replacements.mjs'\nimport r_smartquotes from './rules_core/smartquotes.mjs'\nimport r_text_join from './rules_core/text_join.mjs'\n\nconst _rules = [\n  ['normalize',      r_normalize],\n  ['block',          r_block],\n  ['inline',         r_inline],\n  ['linkify',        r_linkify],\n  ['replacements',   r_replacements],\n  ['smartquotes',    r_smartquotes],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  ['text_join',      r_text_join]\n]\n\n/**\n * new Core()\n **/\nfunction Core () {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('')\n\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state)\n  }\n}\n\nCore.prototype.State = StateCore\n\nexport default Core\n","export default function block (state) {\n  let token\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0)\n    token.content  = state.src\n    token.map      = [0, 1]\n    token.children = []\n    state.tokens.push(token)\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens)\n  }\n}\n","export default function inline (state) {\n  const tokens = state.tokens\n\n  // Parse inlines\n  for (let i = 0, l = tokens.length; i < l; i++) {\n    const tok = tokens[i]\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children)\n    }\n  }\n}\n","// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nexport default function text_join (state) {\n  let curr, last\n  const blockTokens = state.tokens\n  const l = blockTokens.length\n\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue\n\n    const tokens = blockTokens[j].children\n    const max = tokens.length\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text'\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr] }\n\n        last++\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last\n    }\n  }\n}\n","// Parser state class\n\nimport Token from '../token.mjs'\nimport { isSpace } from '../common/utils.mjs'\n\nfunction StateBlock (src, md, env, tokens) {\n  this.src = src\n\n  // link to parser instance\n  this.md     = md\n\n  this.env = env\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens\n\n  this.bMarks = []  // line begin offsets for fast jumps\n  this.eMarks = []  // line end offsets for fast jumps\n  this.tShift = []  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = []  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = []\n\n  // block parser variables\n\n  // required block content indent (for example, if we are\n  // inside a list, it would be positioned after list marker)\n  this.blkIndent  = 0\n  this.line       = 0 // line index in src\n  this.lineMax    = 0 // lines count\n  this.tight      = false  // loose/tight mode for lists\n  this.ddIndent   = -1 // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1 // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root'\n\n  this.level = 0\n\n  // Create caches\n  // Generate markers.\n  const s = this.src\n\n  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {\n    const ch = s.charCodeAt(pos)\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4\n        } else {\n          offset++\n        }\n        continue\n      } else {\n        indent_found = true\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++ }\n      this.bMarks.push(start)\n      this.eMarks.push(pos)\n      this.tShift.push(indent)\n      this.sCount.push(offset)\n      this.bsCount.push(0)\n\n      indent_found = false\n      indent = 0\n      offset = 0\n      start = pos + 1\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length)\n  this.eMarks.push(s.length)\n  this.tShift.push(0)\n  this.sCount.push(0)\n  this.bsCount.push(0)\n\n  this.lineMax = this.bMarks.length - 1 // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  const token = new Token(type, tag, nesting)\n  token.block = true\n\n  if (nesting < 0) this.level-- // closing tag\n  token.level = this.level\n  if (nesting > 0) this.level++ // opening tag\n\n  this.tokens.push(token)\n  return token\n}\n\nStateBlock.prototype.isEmpty = function isEmpty (line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line]\n}\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines (from) {\n  for (let max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break\n    }\n  }\n  return from\n}\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces (pos) {\n  for (let max = this.src.length; pos < max; pos++) {\n    const ch = this.src.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n  }\n  return pos\n}\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack (pos, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1 }\n  }\n  return pos\n}\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars (pos, code) {\n  for (let max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break }\n  }\n  return pos\n}\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack (pos, code, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1 }\n  }\n  return pos\n}\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines (begin, end, indent, keepLastLF) {\n  if (begin >= end) {\n    return ''\n  }\n\n  const queue = new Array(end - begin)\n\n  for (let i = 0, line = begin; line < end; line++, i++) {\n    let lineIndent = 0\n    const lineStart = this.bMarks[line]\n    let first = lineStart\n    let last\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1\n    } else {\n      last = this.eMarks[line]\n    }\n\n    while (first < last && lineIndent < indent) {\n      const ch = this.src.charCodeAt(first)\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4\n        } else {\n          lineIndent++\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++\n      } else {\n        break\n      }\n\n      first++\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last)\n    } else {\n      queue[i] = this.src.slice(first, last)\n    }\n  }\n\n  return queue.join('')\n}\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token\n\nexport default StateBlock\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Limit the amount of empty autocompleted cells in a table,\n// see https://github.com/markdown-it/markdown-it/issues/1000,\n//\n// Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.\n// We set it to 65k, which can expand user input by a factor of x370\n// (256x256 square is 1.8kB expanded into 650kB).\nconst MAX_AUTOCOMPLETED_CELLS = 0x10000\n\nfunction getLine (state, line) {\n  const pos = state.bMarks[line] + state.tShift[line]\n  const max = state.eMarks[line]\n\n  return state.src.slice(pos, max)\n}\n\nfunction escapedSplit (str) {\n  const result = []\n  const max = str.length\n\n  let pos = 0\n  let ch = str.charCodeAt(pos)\n  let isEscaped = false\n  let lastPos = 0\n  let current = ''\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos))\n        current = ''\n        lastPos = pos + 1\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1)\n        lastPos = pos\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */)\n    pos++\n\n    ch = str.charCodeAt(pos)\n  }\n\n  result.push(current + str.substring(lastPos))\n\n  return result\n}\n\nexport default function table (state, startLine, endLine, silent) {\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false }\n\n  let nextLine = startLine + 1\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const firstCh = state.src.charCodeAt(pos++)\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false }\n\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const secondCh = state.src.charCodeAt(pos++)\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false }\n\n  while (pos < state.eMarks[nextLine]) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false }\n\n    pos++\n  }\n\n  let lineText = getLine(state, startLine + 1)\n  let columns = lineText.split('|')\n  const aligns = []\n  for (let i = 0; i < columns.length; i++) {\n    const t = columns[i].trim()\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue\n      } else {\n        return false\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right')\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left')\n    } else {\n      aligns.push('')\n    }\n  }\n\n  lineText = getLine(state, startLine).trim()\n  if (lineText.indexOf('|') === -1) { return false }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n  columns = escapedSplit(lineText)\n  if (columns.length && columns[0] === '') columns.shift()\n  if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  const columnCount = columns.length\n  if (columnCount === 0 || columnCount !== aligns.length) { return false }\n\n  if (silent) { return true }\n\n  const oldParentType = state.parentType\n  state.parentType = 'table'\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const token_to = state.push('table_open', 'table', 1)\n  const tableLines = [startLine, 0]\n  token_to.map = tableLines\n\n  const token_tho = state.push('thead_open', 'thead', 1)\n  token_tho.map = [startLine, startLine + 1]\n\n  const token_htro = state.push('tr_open', 'tr', 1)\n  token_htro.map = [startLine, startLine + 1]\n\n  for (let i = 0; i < columns.length; i++) {\n    const token_ho = state.push('th_open', 'th', 1)\n    if (aligns[i]) {\n      token_ho.attrs  = [['style', 'text-align:' + aligns[i]]]\n    }\n\n    const token_il = state.push('inline', '', 0)\n    token_il.content  = columns[i].trim()\n    token_il.children = []\n\n    state.push('th_close', 'th', -1)\n  }\n\n  state.push('tr_close', 'tr', -1)\n  state.push('thead_close', 'thead', -1)\n\n  let tbodyLines\n  let autocompletedCells = 0\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) { break }\n    lineText = getLine(state, nextLine).trim()\n    if (!lineText) { break }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n    columns = escapedSplit(lineText)\n    if (columns.length && columns[0] === '') columns.shift()\n    if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n    // note: autocomplete count can be negative if user specifies more columns than header,\n    // but that does not affect intended use (which is limiting expansion)\n    autocompletedCells += columnCount - columns.length\n    if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) { break }\n\n    if (nextLine === startLine + 2) {\n      const token_tbo = state.push('tbody_open', 'tbody', 1)\n      token_tbo.map = tbodyLines = [startLine + 2, 0]\n    }\n\n    const token_tro = state.push('tr_open', 'tr', 1)\n    token_tro.map = [nextLine, nextLine + 1]\n\n    for (let i = 0; i < columnCount; i++) {\n      const token_tdo = state.push('td_open', 'td', 1)\n      if (aligns[i]) {\n        token_tdo.attrs  = [['style', 'text-align:' + aligns[i]]]\n      }\n\n      const token_il = state.push('inline', '', 0)\n      token_il.content  = columns[i] ? columns[i].trim() : ''\n      token_il.children = []\n\n      state.push('td_close', 'td', -1)\n    }\n    state.push('tr_close', 'tr', -1)\n  }\n\n  if (tbodyLines) {\n    state.push('tbody_close', 'tbody', -1)\n    tbodyLines[1] = nextLine\n  }\n\n  state.push('table_close', 'table', -1)\n  tableLines[1] = nextLine\n\n  state.parentType = oldParentType\n  state.line = nextLine\n  return true\n}\n","// Lists\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker (state, startLine) {\n  const max = state.eMarks[startLine]\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n\n  const marker = state.src.charCodeAt(pos++)\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1\n  }\n\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1\n    }\n  }\n\n  return pos\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker (state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine]\n  const max = state.eMarks[startLine]\n  let pos = start\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1 }\n\n  let ch = state.src.charCodeAt(pos++)\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1 }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1 }\n\n    ch = state.src.charCodeAt(pos++)\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1 }\n\n      continue\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break\n    }\n\n    return -1\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1\n    }\n  }\n  return pos\n}\n\nfunction markTightParagraphs (state, idx) {\n  const level = state.level + 2\n\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true\n      state.tokens[i].hidden = true\n      i += 2\n    }\n  }\n}\n\nexport default function list (state, startLine, endLine, silent) {\n  let max, pos, start, token\n  let nextLine = startLine\n  let tight = true\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[nextLine] - state.listIndent >= 4 &&\n      state.sCount[nextLine] < state.blkIndent) {\n    return false\n  }\n\n  let isTerminatingParagraph = false\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered\n  let markerValue\n  let posAfterMarker\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true\n    start = state.bMarks[nextLine] + state.tShift[nextLine]\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1))\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false\n  } else {\n    return false\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1)\n\n  // Start list\n  const listTokIdx = state.tokens.length\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1)\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]]\n    }\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1)\n  }\n\n  const listLines = [nextLine, 0]\n  token.map    = listLines\n  token.markup = String.fromCharCode(markerCharCode)\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false\n  const terminatorRules = state.md.block.ruler.getRules('list')\n\n  const oldParentType = state.parentType\n  state.parentType = 'list'\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker\n    max = state.eMarks[nextLine]\n\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine])\n    let offset = initial\n\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos)\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4\n      } else if (ch === 0x20) {\n        offset++\n      } else {\n        break\n      }\n\n      pos++\n    }\n\n    const contentStart = pos\n    let indentAfterMarker\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1\n    } else {\n      indentAfterMarker = offset - initial\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1 }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1)\n    token.markup = String.fromCharCode(markerCharCode)\n    const itemLines = [nextLine, 0]\n    token.map    = itemLines\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1)\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight\n    const oldTShift = state.tShift[nextLine]\n    const oldSCount = state.sCount[nextLine]\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent\n    state.listIndent = state.blkIndent\n    state.blkIndent = indent\n\n    state.tight = true\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine]\n    state.sCount[nextLine] = offset\n\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine)\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true)\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1)\n\n    state.blkIndent = state.listIndent\n    state.listIndent = oldListIndent\n    state.tShift[nextLine] = oldTShift\n    state.sCount[nextLine] = oldSCount\n    state.tight = oldTight\n\n    token        = state.push('list_item_close', 'li', -1)\n    token.markup = String.fromCharCode(markerCharCode)\n\n    nextLine = state.line\n    itemLines[1] = nextLine\n\n    if (nextLine >= endLine) { break }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n\n    // fail if terminating block found\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n      start = state.bMarks[nextLine] + state.tShift[nextLine]\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1)\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1)\n  }\n  token.markup = String.fromCharCode(markerCharCode)\n\n  listLines[1] = nextLine\n  state.line = nextLine\n\n  state.parentType = oldParentType\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx)\n  }\n\n  return true\n}\n","// Regexps to match html elements\n\nconst attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*'\n\nconst unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+'\nconst single_quoted = \"'[^']*'\"\nconst double_quoted = '\"[^\"]*\"'\n\nconst attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')'\n\nconst attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)'\n\nconst open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>'\n\nconst close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>'\nconst comment     = '<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->'\nconst processing  = '<[?][\\\\s\\\\S]*?[?]>'\nconst declaration = '<![A-Za-z][^>]*>'\nconst cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>'\n\nconst HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')')\nconst HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')')\n\nexport { HTML_TAG_RE, HTML_OPEN_CLOSE_TAG_RE }\n","// HTML block\n\nimport block_names from '../common/html_blocks.mjs'\nimport { HTML_OPEN_CLOSE_TAG_RE } from '../common/html_re.mjs'\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [\n  [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n  [/^<!--/,        /-->/,   true],\n  [/^<\\?/,         /\\?>/,   true],\n  [/^<![A-Z]/,     />/,     true],\n  [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n  [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true],\n  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false]\n]\n\nexport default function html_block (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (!state.md.options.html) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  let lineText = state.src.slice(pos, max)\n\n  let i = 0\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break }\n  }\n  if (i === HTML_SEQUENCES.length) { return false }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2]\n  }\n\n  let nextLine = startLine + 1\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      max = state.eMarks[nextLine]\n      lineText = state.src.slice(pos, max)\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++ }\n        break\n      }\n    }\n  }\n\n  state.line = nextLine\n\n  const token   = state.push('html_block', '', 0)\n  token.map     = [startLine, nextLine]\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true)\n\n  return true\n}\n","// List of valid html blocks names, according to commonmark spec\n// https://spec.commonmark.org/0.30/#html-blocks\n\nexport default [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateBlock from './rules_block/state_block.mjs'\n\nimport r_table from './rules_block/table.mjs'\nimport r_code from './rules_block/code.mjs'\nimport r_fence from './rules_block/fence.mjs'\nimport r_blockquote from './rules_block/blockquote.mjs'\nimport r_hr from './rules_block/hr.mjs'\nimport r_list from './rules_block/list.mjs'\nimport r_reference from './rules_block/reference.mjs'\nimport r_html_block from './rules_block/html_block.mjs'\nimport r_heading from './rules_block/heading.mjs'\nimport r_lheading from './rules_block/lheading.mjs'\nimport r_paragraph from './rules_block/paragraph.mjs'\n\nconst _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  ['table',      r_table,      ['paragraph', 'reference']],\n  ['code',       r_code],\n  ['fence',      r_fence,      ['paragraph', 'reference', 'blockquote', 'list']],\n  ['blockquote', r_blockquote, ['paragraph', 'reference', 'blockquote', 'list']],\n  ['hr',         r_hr,         ['paragraph', 'reference', 'blockquote', 'list']],\n  ['list',       r_list,       ['paragraph', 'reference', 'blockquote']],\n  ['reference',  r_reference],\n  ['html_block', r_html_block, ['paragraph', 'reference', 'blockquote']],\n  ['heading',    r_heading,    ['paragraph', 'reference', 'blockquote']],\n  ['lheading',   r_lheading],\n  ['paragraph',  r_paragraph]\n]\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock () {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() })\n  }\n}\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  let line = startLine\n  let hasEmptyLines = false\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line)\n    if (line >= endLine) { break }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine\n      break\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    const prevLine = state.line\n    let ok = false\n\n    for (let i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false)\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\")\n        }\n        break\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched')\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true\n    }\n\n    line = state.line\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true\n      line++\n      state.line = line\n    }\n  }\n}\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  if (!src) { return }\n\n  const state = new this.State(src, md, env, outTokens)\n\n  this.tokenize(state, state.line, state.lineMax)\n}\n\nParserBlock.prototype.State = StateBlock\n\nexport default ParserBlock\n","// Code block (4 spaces padded)\n\nexport default function code (state, startLine, endLine/*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false }\n\n  let nextLine = startLine + 1\n  let last = nextLine\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++\n      continue\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++\n      last = nextLine\n      continue\n    }\n    break\n  }\n\n  state.line = last\n\n  const token   = state.push('code_block', 'code', 0)\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n'\n  token.map     = [startLine, state.line]\n\n  return true\n}\n","// fences (``` lang, ~~~ lang)\n\nexport default function fence (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (pos + 3 > max) { return false }\n\n  const marker = state.src.charCodeAt(pos)\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false\n  }\n\n  // scan marker length\n  let mem = pos\n  pos = state.skipChars(pos, marker)\n\n  let len = pos - mem\n\n  if (len < 3) { return false }\n\n  const markup = state.src.slice(mem, pos)\n  const params = state.src.slice(pos, max)\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true }\n\n  // search end of block\n  let nextLine = startLine\n  let haveEndMarker = false\n\n  for (;;) {\n    nextLine++\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue\n    }\n\n    pos = state.skipChars(pos, marker)\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos)\n\n    if (pos < max) { continue }\n\n    haveEndMarker = true\n    // found!\n    break\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine]\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0)\n\n  const token   = state.push('fence', 'code', 0)\n  token.info    = params\n  token.content = state.getLines(startLine + 1, nextLine, len, true)\n  token.markup  = markup\n  token.map     = [startLine, state.line]\n\n  return true\n}\n","// Block quotes\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function blockquote (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  const oldLineMax = state.lineMax\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E/* > */) { return false }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true }\n\n  const oldBMarks  = []\n  const oldBSCount = []\n  const oldSCount  = []\n  const oldTShift  = []\n\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const oldParentType = state.parentType\n  state.parentType = 'blockquote'\n  let lastLineEmpty = false\n  let nextLine\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    const isOutdented = state.sCount[nextLine] < state.blkIndent\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      let initial = state.sCount[nextLine] + 1\n      let spaceAfterMarker\n      let adjustTab\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++\n        initial++\n        adjustTab = false\n        spaceAfterMarker = true\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true\n\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++\n          initial++\n          adjustTab = false\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true\n        }\n      } else {\n        spaceAfterMarker = false\n      }\n\n      let offset = initial\n      oldBMarks.push(state.bMarks[nextLine])\n      state.bMarks[nextLine] = pos\n\n      while (pos < max) {\n        const ch = state.src.charCodeAt(pos)\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4\n          } else {\n            offset++\n          }\n        } else {\n          break\n        }\n\n        pos++\n      }\n\n      lastLineEmpty = pos >= max\n\n      oldBSCount.push(state.bsCount[nextLine])\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0)\n\n      oldSCount.push(state.sCount[nextLine])\n      state.sCount[nextLine] = offset - initial\n\n      oldTShift.push(state.tShift[nextLine])\n      state.tShift[nextLine] = pos - state.bMarks[nextLine]\n      continue\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break }\n\n    // Case 3: another tag found.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine])\n        oldBSCount.push(state.bsCount[nextLine])\n        oldTShift.push(state.tShift[nextLine])\n        oldSCount.push(state.sCount[nextLine])\n        state.sCount[nextLine] -= state.blkIndent\n      }\n\n      break\n    }\n\n    oldBMarks.push(state.bMarks[nextLine])\n    oldBSCount.push(state.bsCount[nextLine])\n    oldTShift.push(state.tShift[nextLine])\n    oldSCount.push(state.sCount[nextLine])\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1\n  }\n\n  const oldIndent = state.blkIndent\n  state.blkIndent = 0\n\n  const token_o  = state.push('blockquote_open', 'blockquote', 1)\n  token_o.markup = '>'\n  const lines = [startLine, 0]\n  token_o.map    = lines\n\n  state.md.block.tokenize(state, startLine, nextLine)\n\n  const token_c  = state.push('blockquote_close', 'blockquote', -1)\n  token_c.markup = '>'\n\n  state.lineMax = oldLineMax\n  state.parentType = oldParentType\n  lines[1] = state.line\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (let i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i]\n    state.tShift[i + startLine] = oldTShift[i]\n    state.sCount[i + startLine] = oldSCount[i]\n    state.bsCount[i + startLine] = oldBSCount[i]\n  }\n  state.blkIndent = oldIndent\n\n  return true\n}\n","// Horizontal rule\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function hr (state, startLine, endLine, silent) {\n  const max = state.eMarks[startLine]\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  const marker = state.src.charCodeAt(pos++)\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  let cnt = 1\n  while (pos < max) {\n    const ch = state.src.charCodeAt(pos++)\n    if (ch !== marker && !isSpace(ch)) { return false }\n    if (ch === marker) { cnt++ }\n  }\n\n  if (cnt < 3) { return false }\n\n  if (silent) { return true }\n\n  state.line = startLine + 1\n\n  const token  = state.push('hr', 'hr', 0)\n  token.map    = [startLine, state.line]\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker))\n\n  return true\n}\n","import { isSpace, normalizeReference } from '../common/utils.mjs'\n\nexport default function reference (state, startLine, _endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n  let nextLine = startLine + 1\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false }\n\n  function getNextLine (nextLine) {\n    const endLine = state.lineMax\n\n    if (nextLine >= endLine || state.isEmpty(nextLine)) {\n      // empty line or end of input\n      return null\n    }\n\n    let isContinuation = false\n\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { isContinuation = true }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { isContinuation = true }\n\n    if (!isContinuation) {\n      const terminatorRules = state.md.block.ruler.getRules('reference')\n      const oldParentType = state.parentType\n      state.parentType = 'reference'\n\n      // Some tags can terminate paragraph without empty line.\n      let terminate = false\n      for (let i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true\n          break\n        }\n      }\n\n      state.parentType = oldParentType\n      if (terminate) {\n        // terminated by another block\n        return null\n      }\n    }\n\n    const pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    const max = state.eMarks[nextLine]\n\n    // max + 1 explicitly includes the newline\n    return state.src.slice(pos, max + 1)\n  }\n\n  let str = state.src.slice(pos, max + 1)\n\n  max = str.length\n  let labelEnd = -1\n\n  for (pos = 1; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x5B /* [ */) {\n      return false\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos\n      break\n    } else if (ch === 0x0A /* \\n */) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (ch === 0x5C /* \\ */) {\n      pos++\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        const lineContent = getNextLine(nextLine)\n        if (lineContent !== null) {\n          str += lineContent\n          max = str.length\n          nextLine++\n        }\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  const destRes = state.md.helpers.parseLinkDestination(str, pos, max)\n  if (!destRes.ok) { return false }\n\n  const href = state.md.normalizeLink(destRes.str)\n  if (!state.md.validateLink(href)) { return false }\n\n  pos = destRes.pos\n\n  // save cursor state, we could require to rollback later\n  const destEndPos = pos\n  const destEndLineNo = nextLine\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  const start = pos\n  for (; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  let titleRes = state.md.helpers.parseLinkTitle(str, pos, max)\n  while (titleRes.can_continue) {\n    const lineContent = getNextLine(nextLine)\n    if (lineContent === null) break\n    str += lineContent\n    pos = max\n    max = str.length\n    nextLine++\n    titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes)\n  }\n  let title\n\n  if (pos < max && start !== pos && titleRes.ok) {\n    title = titleRes.str\n    pos = titleRes.pos\n  } else {\n    title = ''\n    pos = destEndPos\n    nextLine = destEndLineNo\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    const ch = str.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n    pos++\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = ''\n      pos = destEndPos\n      nextLine = destEndLineNo\n      while (pos < max) {\n        const ch = str.charCodeAt(pos)\n        if (!isSpace(ch)) { break }\n        pos++\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false\n  }\n\n  const label = normalizeReference(str.slice(1, labelEnd))\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /* istanbul ignore if */\n  if (silent) { return true }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {}\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title, href }\n  }\n\n  state.line = nextLine\n  return true\n}\n","// heading (#, ##, ...)\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function heading (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let ch  = state.src.charCodeAt(pos)\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false }\n\n  // count heading level\n  let level = 1\n  ch = state.src.charCodeAt(++pos)\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++\n    ch = state.src.charCodeAt(++pos)\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false }\n\n  if (silent) { return true }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos)\n  const tmp = state.skipCharsBack(max, 0x23, pos) // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp\n  }\n\n  state.line = startLine + 1\n\n  const token_o  = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup = '########'.slice(0, level)\n  token_o.map    = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = state.src.slice(pos, max).trim()\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  const token_c  = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup = '########'.slice(0, level)\n\n  return true\n}\n","// lheading (---, ===)\n\nexport default function lheading (state, startLine, endLine/*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  const oldParentType = state.parentType\n  state.parentType = 'paragraph' // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0\n  let marker\n  let nextLine = startLine + 1\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      const max = state.eMarks[nextLine]\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos)\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker)\n          pos = state.skipSpaces(pos)\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2)\n            break\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine + 1\n\n  const token_o    = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup   = String.fromCharCode(marker)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line - 1]\n  token_i.children = []\n\n  const token_c    = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup   = String.fromCharCode(marker)\n\n  state.parentType = oldParentType\n\n  return true\n}\n","// Paragraph\n\nexport default function paragraph (state, startLine, endLine) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n  const oldParentType = state.parentType\n  let nextLine = startLine + 1\n  state.parentType = 'paragraph'\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine\n\n  const token_o    = state.push('paragraph_open', 'p', 1)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  state.push('paragraph_close', 'p', -1)\n\n  state.parentType = oldParentType\n\n  return true\n}\n","// Inline parser state\n\nimport Token from '../token.mjs'\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nfunction StateInline (src, md, env, outTokens) {\n  this.src = src\n  this.env = env\n  this.md = md\n  this.tokens = outTokens\n  this.tokens_meta = Array(outTokens.length)\n\n  this.pos = 0\n  this.posMax = this.src.length\n  this.level = 0\n  this.pending = ''\n  this.pendingLevel = 0\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {}\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = []\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = []\n\n  // backtick length => last seen position\n  this.backticks = {}\n  this.backticksScanned = false\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0)\n  token.content = this.pending\n  token.level = this.pendingLevel\n  this.tokens.push(token)\n  this.pending = ''\n  return token\n}\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending()\n  }\n\n  const token = new Token(type, tag, nesting)\n  let token_meta = null\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--\n    this.delimiters = this._prev_delimiters.pop()\n  }\n\n  token.level = this.level\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++\n    this._prev_delimiters.push(this.delimiters)\n    this.delimiters = []\n    token_meta = { delimiters: this.delimiters }\n  }\n\n  this.pendingLevel = this.level\n  this.tokens.push(token)\n  this.tokens_meta.push(token_meta)\n  return token\n}\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  const max = this.posMax\n  const marker = this.src.charCodeAt(start)\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20\n\n  let pos = start\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++ }\n\n  const count = pos - start\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20\n\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n  const isLastWhiteSpace = isWhiteSpace(lastChar)\n  const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n  const left_flanking =\n    !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar)\n  const right_flanking =\n    !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar)\n\n  const can_open  = left_flanking  && (canSplitWord || !right_flanking || isLastPunctChar)\n  const can_close = right_flanking && (canSplitWord || !left_flanking  || isNextPunctChar)\n\n  return { can_open, can_close, length: count }\n}\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token\n\nexport default StateInline\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar (ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\nexport default function text (state, silent) {\n  let pos = state.pos\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++\n  }\n\n  if (pos === state.pos) { return false }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos) }\n\n  state.pos = pos\n\n  return true\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParserInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n","// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i\n\nexport default function linkify (state, silent) {\n  if (!state.md.options.linkify) return false\n  if (state.linkLevel > 0) return false\n\n  const pos = state.pos\n  const max = state.posMax\n\n  if (pos + 3 > max) return false\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false\n\n  const match = state.pending.match(SCHEME_RE)\n  if (!match) return false\n\n  const proto = match[1]\n\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length))\n  if (!link) return false\n\n  let url = link.url\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '')\n\n  const fullUrl = state.md.normalizeLink(url)\n  if (!state.md.validateLink(fullUrl)) return false\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length)\n\n    const token_o = state.push('link_open', 'a', 1)\n    token_o.attrs = [['href', fullUrl]]\n    token_o.markup = 'linkify'\n    token_o.info = 'auto'\n\n    const token_t = state.push('text', '', 0)\n    token_t.content = state.md.normalizeLinkText(url)\n\n    const token_c = state.push('link_close', 'a', -1)\n    token_c.markup = 'linkify'\n    token_c.info = 'auto'\n  }\n\n  state.pos += url.length - proto.length\n  return true\n}\n","// Process escaped chars and hardbreaks\n\nimport { isSpace } from '../common/utils.mjs'\n\nconst ESCAPED = []\n\nfor (let i = 0; i < 256; i++) { ESCAPED.push(0) }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1 })\n\nexport default function escape (state, silent) {\n  let pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false\n  pos++\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false\n\n  let ch1 = state.src.charCodeAt(pos)\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0)\n    }\n\n    pos++\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos)\n      if (!isSpace(ch1)) break\n      pos++\n    }\n\n    state.pos = pos\n    return true\n  }\n\n  let escapedStr = state.src[pos]\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1)\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1]\n      pos++\n    }\n  }\n\n  const origStr = '\\\\' + escapedStr\n\n  if (!silent) {\n    const token = state.push('text_special', '', 0)\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr\n    } else {\n      token.content = origStr\n    }\n\n    token.markup = origStr\n    token.info   = 'escape'\n  }\n\n  state.pos = pos + 1\n  return true\n}\n","// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x7E/* ~ */) { return false }\n\n  const scanned = state.scanDelims(state.pos, true)\n  let len = scanned.length\n  const ch = String.fromCharCode(marker)\n\n  if (len < 2) { return false }\n\n  let token\n\n  if (len % 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch\n    len--\n  }\n\n  for (let i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch + ch\n\n    state.delimiters.push({\n      marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  let token\n  const loneMarkers = []\n  const max = delimiters.length\n\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue\n    }\n\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    token         = state.tokens[startDelim.token]\n    token.type    = 's_open'\n    token.tag     = 's'\n    token.nesting = 1\n    token.markup  = '~~'\n    token.content = ''\n\n    token         = state.tokens[endDelim.token]\n    token.type    = 's_close'\n    token.tag     = 's'\n    token.nesting = -1\n    token.markup  = '~~'\n    token.content = ''\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1)\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop()\n    let j = i + 1\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++\n    }\n\n    j--\n\n    if (i !== j) {\n      token = state.tokens[j]\n      state.tokens[j] = state.tokens[i]\n      state.tokens[i] = token\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n}\n","// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false }\n\n  const scanned = state.scanDelims(state.pos, marker === 0x2A)\n\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0)\n    token.content = String.fromCharCode(marker)\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  const max = delimiters.length\n\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1\n\n    const ch = String.fromCharCode(startDelim.marker)\n\n    const token_o   = state.tokens[startDelim.token]\n    token_o.type    = isStrong ? 'strong_open' : 'em_open'\n    token_o.tag     = isStrong ? 'strong' : 'em'\n    token_o.nesting = 1\n    token_o.markup  = isStrong ? ch + ch : ch\n    token_o.content = ''\n\n    const token_c   = state.tokens[endDelim.token]\n    token_c.type    = isStrong ? 'strong_close' : 'em_close'\n    token_c.tag     = isStrong ? 'strong' : 'em'\n    token_c.nesting = -1\n    token_c.markup  = isStrong ? ch + ch : ch\n    token_c.content = ''\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = ''\n      state.tokens[delimiters[startDelim.end + 1].token].content = ''\n      i--\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n}\n","// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/\n\nexport default function autolink (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  const start = state.pos\n  const max = state.posMax\n\n  for (;;) {\n    if (++pos >= max) return false\n\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch === 0x3C /* < */) return false\n    if (ch === 0x3E /* > */) break\n  }\n\n  const url = state.src.slice(start + 1, pos)\n\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  return false\n}\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nimport { decodeHTML } from 'entities'\nimport { isValidEntityCode, fromCodePoint } from '../common/utils.mjs'\n\nconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i\nconst NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i\n\nexport default function entity (state, silent) {\n  const pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false\n\n  if (pos + 1 >= max) return false\n\n  const ch = state.src.charCodeAt(pos + 1)\n\n  if (ch === 0x23 /* # */) {\n    const match = state.src.slice(pos).match(DIGITAL_RE)\n    if (match) {\n      if (!silent) {\n        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10)\n\n        const token   = state.push('text_special', '', 0)\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD)\n        token.markup  = match[0]\n        token.info    = 'entity'\n      }\n      state.pos += match[0].length\n      return true\n    }\n  } else {\n    const match = state.src.slice(pos).match(NAMED_RE)\n    if (match) {\n      const decoded = decodeHTML(match[0])\n      if (decoded !== match[0]) {\n        if (!silent) {\n          const token   = state.push('text_special', '', 0)\n          token.content = decoded\n          token.markup  = match[0]\n          token.info    = 'entity'\n        }\n        state.pos += match[0].length\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters (delimiters) {\n  const openersBottom = {}\n  const max = delimiters.length\n\n  if (!max) return\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  let headerIdx = 0\n  let lastTokenIdx = -2 // needs any value lower than -1\n  const jumps = []\n\n  for (let closerIdx = 0; closerIdx < max; closerIdx++) {\n    const closer = delimiters[closerIdx]\n\n    jumps.push(0)\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx\n    }\n\n    lastTokenIdx = closer.token\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0\n\n    if (!closer.close) continue\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    /* eslint-disable-next-line no-prototype-builtins */\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1]\n    }\n\n    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)]\n\n    let openerIdx = headerIdx - jumps[headerIdx] - 1\n\n    let newMinOpenerIdx = openerIdx\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      const opener = delimiters[openerIdx]\n\n      if (opener.marker !== closer.marker) continue\n\n      if (opener.open && opener.end < 0) {\n        let isOddMatch = false\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open\n            ? jumps[openerIdx - 1] + 1\n            : 0\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump\n          jumps[openerIdx] = lastJump\n\n          closer.open  = false\n          opener.end   = closerIdx\n          opener.close = false\n          newMinOpenerIdx = -1\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2\n          break\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx\n    }\n  }\n}\n\nexport default function link_pairs (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  processDelimiters(state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters)\n    }\n  }\n}\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateInline from './rules_inline/state_inline.mjs'\n\nimport r_text from './rules_inline/text.mjs'\nimport r_linkify from './rules_inline/linkify.mjs'\nimport r_newline from './rules_inline/newline.mjs'\nimport r_escape from './rules_inline/escape.mjs'\nimport r_backticks from './rules_inline/backticks.mjs'\nimport r_strikethrough from './rules_inline/strikethrough.mjs'\nimport r_emphasis from './rules_inline/emphasis.mjs'\nimport r_link from './rules_inline/link.mjs'\nimport r_image from './rules_inline/image.mjs'\nimport r_autolink from './rules_inline/autolink.mjs'\nimport r_html_inline from './rules_inline/html_inline.mjs'\nimport r_entity from './rules_inline/entity.mjs'\n\nimport r_balance_pairs from './rules_inline/balance_pairs.mjs'\nimport r_fragments_join from './rules_inline/fragments_join.mjs'\n\n// Parser rules\n\nconst _rules = [\n  ['text',            r_text],\n  ['linkify',         r_linkify],\n  ['newline',         r_newline],\n  ['escape',          r_escape],\n  ['backticks',       r_backticks],\n  ['strikethrough',   r_strikethrough.tokenize],\n  ['emphasis',        r_emphasis.tokenize],\n  ['link',            r_link],\n  ['image',           r_image],\n  ['autolink',        r_autolink],\n  ['html_inline',     r_html_inline],\n  ['entity',          r_entity]\n]\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [\n  ['balance_pairs',   r_balance_pairs],\n  ['strikethrough',   r_strikethrough.postProcess],\n  ['emphasis',        r_emphasis.postProcess],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  ['fragments_join',  r_fragments_join]\n]\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline () {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler()\n\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1])\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  const cache = state.cache\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos]\n    return\n  }\n\n  let ok = false\n\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++\n      ok = rules[i](state, true)\n      state.level--\n\n      if (ok) {\n        if (pos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n        break\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax\n  }\n\n  if (!ok) { state.pos++ }\n  cache[pos] = state.pos\n}\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const end = state.posMax\n  const maxNesting = state.md.options.maxNesting\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos\n    let ok = false\n\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false)\n        if (ok) {\n          if (prevPos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n          break\n        }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break }\n      continue\n    }\n\n    state.pending += state.src[state.pos++]\n  }\n\n  if (state.pending) {\n    state.pushPending()\n  }\n}\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens)\n\n  this.tokenize(state)\n\n  const rules = this.ruler2.getRules('')\n  const len = rules.length\n\n  for (let i = 0; i < len; i++) {\n    rules[i](state)\n  }\n}\n\nParserInline.prototype.State = StateInline\n\nexport default ParserInline\n","// Proceess '\\n'\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function newline (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false }\n\n  const pmax = state.pending.length - 1\n  const max = state.posMax\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--\n\n        state.pending = state.pending.slice(0, ws)\n        state.push('hardbreak', 'br', 0)\n      } else {\n        state.pending = state.pending.slice(0, -1)\n        state.push('softbreak', 'br', 0)\n      }\n    } else {\n      state.push('softbreak', 'br', 0)\n    }\n  }\n\n  pos++\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++ }\n\n  state.pos = pos\n  return true\n}\n","// Parse backticks\n\nexport default function backtick (state, silent) {\n  let pos = state.pos\n  const ch = state.src.charCodeAt(pos)\n\n  if (ch !== 0x60/* ` */) { return false }\n\n  const start = pos\n  pos++\n  const max = state.posMax\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++ }\n\n  const marker = state.src.slice(start, pos)\n  const openerLength = marker.length\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker\n    state.pos += openerLength\n    return true\n  }\n\n  let matchEnd = pos\n  let matchStart\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++ }\n\n    const closerLength = matchEnd - matchStart\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        const token = state.push('code_inline', 'code', 0)\n        token.markup = marker\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1')\n      }\n      state.pos = matchEnd\n      return true\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true\n\n  if (!silent) state.pending += marker\n  state.pos += openerLength\n  return true\n}\n","// Process [link](<to> \"stuff\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function link (state, silent) {\n  let code, label, res, ref\n  let href = ''\n  let title = ''\n  let start = state.pos\n  let parseReference = true\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n\n  const oldPos = state.pos\n  const max = state.posMax\n  const labelStart = state.pos + 1\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  let pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str\n        pos = res.pos\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos)\n          if (!isSpace(code) && code !== 0x0A) { break }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true\n    }\n    pos++\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart\n    state.posMax = labelEnd\n\n    const token_o = state.push('link_open', 'a', 1)\n    const attrs = [['href', href]]\n    token_o.attrs  = attrs\n    if (title) {\n      attrs.push(['title', title])\n    }\n\n    state.linkLevel++\n    state.md.inline.tokenize(state)\n    state.linkLevel--\n\n    state.push('link_close', 'a', -1)\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n","// Process ![image](<src> \"title\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function image (state, silent) {\n  let code, content, label, pos, ref, res, title, start\n  let href = ''\n  const oldPos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }\n\n  const labelStart = state.pos + 2\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str\n      pos = res.pos\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n    } else {\n      title = ''\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos\n      return false\n    }\n    pos++\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd)\n\n    const tokens = []\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens\n    )\n\n    const token = state.push('image', 'img', 0)\n    const attrs = [['src', href], ['alt', '']]\n    token.attrs = attrs\n    token.children = tokens\n    token.content = content\n\n    if (title) {\n      attrs.push(['title', title])\n    }\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n","// Process html tags\n\nimport { HTML_TAG_RE } from '../common/html_re.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nfunction isLetter (ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20 // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */)\n}\n\nexport default function html_inline (state, silent) {\n  if (!state.md.options.html) { return false }\n\n  // Check start\n  const max = state.posMax\n  const pos = state.pos\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1)\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false\n  }\n\n  const match = state.src.slice(pos).match(HTML_TAG_RE)\n  if (!match) { return false }\n\n  if (!silent) {\n    const token = state.push('html_inline', '', 0)\n    token.content = match[0]\n\n    if (isLinkOpen(token.content))  state.linkLevel++\n    if (isLinkClose(token.content)) state.linkLevel--\n  }\n  state.pos += match[0].length\n  return true\n}\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nexport default function fragments_join (state) {\n  let curr, last\n  let level = 0\n  const tokens = state.tokens\n  const max = state.tokens.length\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level-- // closing tag\n    tokens[curr].level = level\n    if (tokens[curr].nesting > 0) level++ // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr] }\n\n      last++\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last\n  }\n}\n","import reFactory from './lib/re.mjs'\n\n//\n// Helpers\n//\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1)\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\nfunction isString (obj) { return _class(obj) === '[object String]' }\nfunction isObject (obj) { return _class(obj) === '[object Object]' }\nfunction isRegExp (obj) { return _class(obj) === '[object RegExp]' }\nfunction isFunction (obj) { return _class(obj) === '[object Function]' }\n\nfunction escapeRE (str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') }\n\n//\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n}\n\nfunction isOptionsObj (obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k)\n  }, false)\n}\n\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        )\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length\n      }\n      return 0\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        )\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0 }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0 }\n        return tail.match(self.re.no_http)[0].length\n      }\n      return 0\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        )\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length\n      }\n      return 0\n    }\n  }\n}\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|')\n\nfunction resetScanCache (self) {\n  self.__index__ = -1\n  self.__text_cache__ = ''\n}\n\nfunction createValidator (re) {\n  return function (text, pos) {\n    const tail = text.slice(pos)\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length\n    }\n    return 0\n  }\n}\n\nfunction createNormalizer () {\n  return function (match, self) {\n    self.normalize(match)\n  }\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile (self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__)\n\n  // Define dynamic patterns\n  const tlds = self.__tlds__.slice()\n\n  self.onCompile()\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re)\n  }\n  tlds.push(re.src_xn)\n\n  re.src_tlds = tlds.join('|')\n\n  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i')\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i')\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i')\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i')\n\n  //\n  // Compile each schema\n  //\n\n  const aliases = []\n\n  self.__compiled__ = {} // Reset compiled data\n\n  function schemaError (name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val)\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name]\n\n    // skip disabled methods\n    if (val === null) { return }\n\n    const compiled = { validate: null, link: null }\n\n    self.__compiled__[name] = compiled\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate)\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate\n      } else {\n        schemaError(name, val)\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer()\n      } else {\n        schemaError(name, val)\n      }\n\n      return\n    }\n\n    if (isString(val)) {\n      aliases.push(name)\n      return\n    }\n\n    schemaError(name, val)\n  })\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize\n  })\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() }\n\n  //\n  // Build schema condition\n  //\n  const slist = Object.keys(self.__compiled__)\n    .filter(function (name) {\n      // Filter disabled & fake schemas\n      return name.length > 0 && self.__compiled__[name]\n    })\n    .map(escapeRE)\n    .join('|')\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i')\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig')\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i')\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  )\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self)\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match (self, shift) {\n  const start = self.__index__\n  const end = self.__last_index__\n  const text = self.__text_cache__.slice(start, end)\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema = self.__schema__.toLowerCase()\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index = start + shift\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw = text\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text = text\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url = text\n}\n\nfunction createMatch (self, shift) {\n  const match = new Match(self, shift)\n\n  self.__compiled__[match.schema].normalize(match, self)\n\n  return match\n}\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt (schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options)\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas\n      schemas = {}\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options)\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1\n  this.__last_index__ = -1 // Next scan position\n  this.__schema__ = ''\n  this.__text_cache__ = ''\n\n  this.__schemas__ = assign({}, defaultSchemas, schemas)\n  this.__compiled__ = {}\n\n  this.__tlds__ = tlds_default\n  this.__tlds_replaced__ = false\n\n  this.re = {}\n\n  compile(this)\n}\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add (schema, definition) {\n  this.__schemas__[schema] = definition\n  compile(this)\n  return this\n}\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set (options) {\n  this.__opts__ = assign(this.__opts__, options)\n  return this\n}\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test (text) {\n  // Reset scan cache\n  this.__text_cache__ = text\n  this.__index__ = -1\n\n  if (!text.length) { return false }\n\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search\n    re.lastIndex = 0\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex)\n      if (len) {\n        this.__schema__ = m[2]\n        this.__index__ = m.index + m[1].length\n        this.__last_index__ = m.index + m[0].length + len\n        break\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test)\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = ''\n            this.__index__ = shift\n            this.__last_index__ = ml.index + ml[0].length\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@')\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length\n        next = me.index + me[0].length\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__ = 'mailto:'\n          this.__index__ = shift\n          this.__last_index__ = next\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0\n}\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest (text) {\n  return this.re.pretest.test(text)\n}\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)\n}\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match (text) {\n  const result = []\n  let shift = 0\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift))\n    shift = this.__last_index__\n  }\n\n  // Cut head if cache was used\n  let tail = shift ? text.slice(shift) : text\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift))\n\n    tail = tail.slice(this.__last_index__)\n    shift += this.__last_index__\n  }\n\n  if (result.length) {\n    return result\n  }\n\n  return null\n}\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart (text) {\n  // Reset scan cache\n  this.__text_cache__ = text\n  this.__index__ = -1\n\n  if (!text.length) return null\n\n  const m = this.re.schema_at_start.exec(text)\n  if (!m) return null\n\n  const len = this.testSchemaAt(text, m[2], m[0].length)\n  if (!len) return null\n\n  this.__schema__ = m[2]\n  this.__index__ = m.index + m[1].length\n  this.__last_index__ = m.index + m[0].length + len\n\n  return createMatch(this, 0)\n}\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds (list, keepOld) {\n  list = Array.isArray(list) ? list : [list]\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice()\n    this.__tlds_replaced__ = true\n    compile(this)\n    return this\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n    .sort()\n    .filter(function (el, idx, arr) {\n      return el !== arr[idx - 1]\n    })\n    .reverse()\n\n  compile(this)\n  return this\n}\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize (match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url\n  }\n}\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile () {\n}\n\nexport default LinkifyIt\n","import { Any, Cc, Z, P } from 'uc.micro'\n\nexport default function (opts) {\n  const re = {}\n  opts = opts || {}\n\n  re.src_Any = Any.source\n  re.src_Cc = Cc.source\n  re.src_Z = Z.source\n  re.src_P = P.source\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|')\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|')\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  const text_separators = '[><\\uff5c]'\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?'\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?'\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))'\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n\n          // allow `I'm_king` if no pair found\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\n\n          // google has many dots in \"google search\" links (#66, #81).\n          // github has ... in commit range links,\n          // Restrict to\n          // - english\n          // - percent-encoded\n          // - parts of file path\n          // - params separator\n          // until more examples found.\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' +\n\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---']\n            ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            : '\\\\-+|'\n          ) +\n          // allow `,,,` in paths\n          ',(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `;` if not followed by space-like char\n          ';(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `!!!` in paths, but not at the end\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +\n\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?'\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*'\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}'\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')'\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')'\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/* _root */ + ')' +\n    ')'\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')'\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))'\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator\n\n  //\n  // Main rules\n  //\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))'\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')'\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')'\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')'\n\n  return re\n}\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// Main parser class\n\nimport * as utils from './common/utils.mjs'\nimport * as helpers from './helpers/index.mjs'\nimport Renderer from './renderer.mjs'\nimport ParserCore from './parser_core.mjs'\nimport ParserBlock from './parser_block.mjs'\nimport ParserInline from './parser_inline.mjs'\nimport LinkifyIt from 'linkify-it'\nimport * as mdurl from 'mdurl'\nimport punycode from 'punycode.js'\n\nimport cfg_default from './presets/default.mjs'\nimport cfg_zero from './presets/zero.mjs'\nimport cfg_commonmark from './presets/commonmark.mjs'\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n}\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/\n\nfunction validateLink (url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase()\n\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true\n}\n\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:']\n\nfunction normalizeLink (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed))\n}\n\nfunction normalizeLinkText (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%')\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt (presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options)\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {}\n      presetName = 'default'\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline()\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock()\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore()\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).\n   **/\n  this.renderer = new Renderer()\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt()\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers)\n\n  this.options = {}\n  this.configure(presetName)\n\n  if (options) { this.set(options) }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options)\n  return this\n}\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this\n\n  if (utils.isString(presets)) {\n    const presetName = presets\n    presets = config[presetName]\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name') }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty') }\n\n  if (presets.options) { self.set(presets.options) }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules)\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2)\n      }\n    })\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.enable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed)\n  }\n\n  return this\n}\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.disable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed)\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1))\n  plugin.apply(plugin, args)\n  return this\n}\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String')\n  }\n\n  const state = new this.core.State(src, this, env)\n\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parse(src, env), this.options, env)\n}\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env)\n\n  state.inlineMode = true\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env)\n}\n\nexport default MarkdownIt\n","// markdown-it default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 100\n  },\n\n  components: {\n    core: {},\n    block: {},\n    inline: {}\n  }\n}\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n}\n","// Commonmark default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n}\n","'use strict';\n/**\n * If a pattern matches the token stream,\n * then run transform.\n */\n\nconst utils = require('./utils.js');\n\n/**\n * @param {import('.').Options} options\n * @returns {import('.').CurlyAttrsPattern[]}\n */\nmodule.exports = options => {\n  const __hr = new RegExp('^ {0,3}[-*_]{3,} ?'\n                          + utils.escapeRegExp(options.leftDelimiter)\n                          + '[^' + utils.escapeRegExp(options.rightDelimiter) + ']');\n\n  return ([\n    {\n      /**\n       * ```python {.cls}\n       * for i in range(10):\n       *     print(i)\n       * ```\n       */\n      name: 'fenced code blocks',\n      tests: [\n        {\n          shift: 0,\n          block: true,\n          info: utils.hasDelimiters('end', options)\n        }\n      ],\n      transform: (tokens, i) => {\n        const token = tokens[i];\n        const start = token.info.lastIndexOf(options.leftDelimiter);\n        const attrs = utils.getAttrs(token.info, start, options);\n        utils.addAttrs(attrs, token);\n        token.info = utils.removeDelimiter(token.info, options);\n      }\n    }, {\n      /**\n       * bla `click()`{.c} ![](img.png){.d}\n       *\n       * differs from 'inline attributes' as it does\n       * not have a closing tag (nesting: -1)\n       */\n      name: 'inline nesting 0',\n      tests: [\n        {\n          shift: 0,\n          type: 'inline',\n          children: [\n            {\n              shift: -1,\n              type: (str) => str === 'image' || str === 'code_inline'\n            }, {\n              shift: 0,\n              type: 'text',\n              content: utils.hasDelimiters('start', options)\n            }\n          ]\n        }\n      ],\n      /**\n       * @param {!number} j\n       */\n      transform: (tokens, i, j) => {\n        const token = tokens[i].children[j];\n        const endChar = token.content.indexOf(options.rightDelimiter);\n        const attrToken = tokens[i].children[j - 1];\n        const attrs = utils.getAttrs(token.content, 0, options);\n        utils.addAttrs(attrs, attrToken);\n        if (token.content.length === (endChar + options.rightDelimiter.length)) {\n          tokens[i].children.splice(j, 1);\n        } else {\n          token.content = token.content.slice(endChar + options.rightDelimiter.length);\n        }\n      }\n    }, {\n      /**\n       * | h1 |\n       * | -- |\n       * | c1 |\n       *\n       * {.c}\n       */\n      name: 'tables',\n      tests: [\n        {\n          // let this token be i, such that for-loop continues at\n          // next token after tokens.splice\n          shift: 0,\n          type: 'table_close'\n        }, {\n          shift: 1,\n          type: 'paragraph_open'\n        }, {\n          shift: 2,\n          type: 'inline',\n          content: utils.hasDelimiters('only', options)\n        }\n      ],\n      transform: (tokens, i) => {\n        const token = tokens[i + 2];\n        const tableOpen = utils.getMatchingOpeningToken(tokens, i);\n        const attrs = utils.getAttrs(token.content, 0, options);\n        // add attributes\n        utils.addAttrs(attrs, tableOpen);\n        // remove <p>{.c}</p>\n        tokens.splice(i + 1, 3);\n      }\n    }, {\n      /**\n       * | A | B |\n       * | -- | -- |\n       * | 1 | 2 |\n       *\n       * | C | D |\n       * | -- | -- |\n       *\n       * only `| A | B |` sets the colsnum metadata\n       */\n      name: 'tables thead metadata',\n      tests: [\n        {\n          shift: 0,\n          type: 'tr_close',\n        }, {\n          shift: 1,\n          type: 'thead_close'\n        }, {\n          shift: 2,\n          type: 'tbody_open'\n        }\n      ],\n      transform: (tokens, i) => {\n        const tr = utils.getMatchingOpeningToken(tokens, i);\n        const th = tokens[i - 1];\n        let colsnum = 0;\n        let n = i;\n        while (--n) {\n          if (tokens[n] === tr) {\n            tokens[n - 1].meta = Object.assign({}, tokens[n + 2].meta, { colsnum });\n            break;\n          }\n          colsnum += (tokens[n].level === th.level && tokens[n].type === th.type) >> 0;\n        }\n        tokens[i + 2].meta = Object.assign({}, tokens[i + 2].meta, { colsnum });\n      }\n    }, {\n      /**\n       * | A | B | C | D |\n       * | -- | -- | -- | -- |\n       * | 1 | 11 | 111 | 1111 {rowspan=3} |\n       * | 2 {colspan=2 rowspan=2} | 22 | 222 | 2222 |\n       * | 3 | 33 | 333 | 3333 |\n       */\n      name: 'tables tbody calculate',\n      tests: [\n        {\n          shift: 0,\n          type: 'tbody_close',\n          hidden: false\n        }\n      ],\n      /**\n       * @param {number} i index of the tbody ending\n       */\n      transform: (tokens, i) => {\n        /** index of the tbody beginning */\n        let idx = i - 2;\n        while (idx > 0 && 'tbody_open' !== tokens[--idx].type);\n\n        const calc = tokens[idx].meta.colsnum >> 0;\n        if (calc < 2) { return; }\n\n        const level = tokens[i].level + 2;\n        for (let n = idx; n < i; n++) {\n          if (tokens[n].level > level) { continue; }\n\n          const token = tokens[n];\n          const rows = token.hidden ? 0 : token.attrGet('rowspan') >> 0;\n          const cols = token.hidden ? 0 : token.attrGet('colspan') >> 0;\n\n          if (rows > 1) {\n            let colsnum = calc - (cols > 0 ? cols : 1);\n            for (let k = n, num = rows; k < i, num > 1; k++) {\n              if ('tr_open' == tokens[k].type) {\n                tokens[k].meta = Object.assign({}, tokens[k].meta);\n                if (tokens[k].meta && tokens[k].meta.colsnum) {\n                  colsnum -= 1;\n                }\n                tokens[k].meta.colsnum = colsnum;\n                num--;\n              }\n            }\n          }\n\n          if ('tr_open' == token.type && token.meta && token.meta.colsnum) {\n            const max = token.meta.colsnum;\n            for (let k = n, num = 0; k < i; k++) {\n              if ('td_open' == tokens[k].type) {\n                num += 1;\n              } else if ('tr_close' == tokens[k].type) {\n                break;\n              }\n              num > max && (tokens[k].hidden || hidden(tokens[k]));\n            }\n          }\n\n          if (cols > 1) {\n            /** @type {number[]} index of one row's children */\n            const one = [];\n            /** last index of the row's children */\n            let end = n + 3;\n            /** number of the row's children */\n            let num = calc;\n\n            for (let k = n; k > idx; k--) {\n              if ('tr_open' == tokens[k].type) {\n                num = tokens[k].meta && tokens[k].meta.colsnum || num;\n                break;\n              } else if ('td_open' === tokens[k].type) {\n                one.unshift(k);\n              }\n            }\n\n            for (let k = n + 2; k < i; k++) {\n              if ('tr_close' == tokens[k].type) {\n                end = k;\n                break;\n              } else if ('td_open' == tokens[k].type) {\n                one.push(k);\n              }\n            }\n\n            const off = one.indexOf(n);\n            let real = num - off;\n            real = real > cols ? cols : real;\n            cols > real && token.attrSet('colspan', real + '');\n\n            for (let k = one.slice(num + 1 - calc - real)[0]; k < end; k++) {\n              tokens[k].hidden || hidden(tokens[k]);\n            }\n          }\n        }\n      }\n    }, {\n      /**\n       * *emphasis*{.with attrs=1}\n       */\n      name: 'inline attributes',\n      tests: [\n        {\n          shift: 0,\n          type: 'inline',\n          children: [\n            {\n              shift: -1,\n              nesting: -1  // closing inline tag, </em>{.a}\n            }, {\n              shift: 0,\n              type: 'text',\n              content: utils.hasDelimiters('start', options)\n            }\n          ]\n        }\n      ],\n      /**\n       * @param {!number} j\n       */\n      transform: (tokens, i, j) => {\n        const token = tokens[i].children[j];\n        const content = token.content;\n        const attrs = utils.getAttrs(content, 0, options);\n        const openingToken = utils.getMatchingOpeningToken(tokens[i].children, j - 1);\n        utils.addAttrs(attrs, openingToken);\n        token.content = content.slice(content.indexOf(options.rightDelimiter) + options.rightDelimiter.length);\n      }\n    }, {\n      /**\n       * - item\n       * {.a}\n       */\n      name: 'list softbreak',\n      tests: [\n        {\n          shift: -2,\n          type: 'list_item_open'\n        }, {\n          shift: 0,\n          type: 'inline',\n          children: [\n            {\n              position: -2,\n              type: 'softbreak'\n            }, {\n              position: -1,\n              type: 'text',\n              content: utils.hasDelimiters('only', options)\n            }\n          ]\n        }\n      ],\n      /**\n       * @param {!number} j\n       */\n      transform: (tokens, i, j) => {\n        const token = tokens[i].children[j];\n        const content = token.content;\n        const attrs = utils.getAttrs(content, 0, options);\n        let ii = i - 2;\n        while (tokens[ii - 1] &&\n          tokens[ii - 1].type !== 'ordered_list_open' &&\n          tokens[ii - 1].type !== 'bullet_list_open') { ii--; }\n        utils.addAttrs(attrs, tokens[ii - 1]);\n        tokens[i].children = tokens[i].children.slice(0, -2);\n      }\n    }, {\n      /**\n       * - nested list\n       *   - with double \\n\n       *   {.a} <-- apply to nested ul\n       *\n       * {.b} <-- apply to root <ul>\n       */\n      name: 'list double softbreak',\n      tests: [\n        {\n          // let this token be i = 0 so that we can erase\n          // the <p>{.a}</p> tokens below\n          shift: 0,\n          type: (str) =>\n            str === 'bullet_list_close' ||\n            str === 'ordered_list_close'\n        }, {\n          shift: 1,\n          type: 'paragraph_open'\n        }, {\n          shift: 2,\n          type: 'inline',\n          content: utils.hasDelimiters('only', options),\n          children: (arr) => arr.length === 1\n        }, {\n          shift: 3,\n          type: 'paragraph_close'\n        }\n      ],\n      transform: (tokens, i) => {\n        const token = tokens[i + 2];\n        const content = token.content;\n        const attrs = utils.getAttrs(content, 0, options);\n        const openingToken = utils.getMatchingOpeningToken(tokens, i);\n        utils.addAttrs(attrs, openingToken);\n        tokens.splice(i + 1, 3);\n      }\n    }, {\n      /**\n       * - end of {.list-item}\n       */\n      name: 'list item end',\n      tests: [\n        {\n          shift: -2,\n          type: 'list_item_open'\n        }, {\n          shift: 0,\n          type: 'inline',\n          children: [\n            {\n              position: -1,\n              type: 'text',\n              content: utils.hasDelimiters('end', options)\n            }\n          ]\n        }\n      ],\n      /**\n       * @param {!number} j\n       */\n      transform: (tokens, i, j) => {\n        const token = tokens[i].children[j];\n        const content = token.content;\n        const attrs = utils.getAttrs(content, content.lastIndexOf(options.leftDelimiter), options);\n        utils.addAttrs(attrs, tokens[i - 2]);\n        const trimmed = content.slice(0, content.lastIndexOf(options.leftDelimiter));\n        token.content = last(trimmed) !== ' ' ?\n          trimmed : trimmed.slice(0, -1);\n      }\n    }, {\n      /**\n       * something with softbreak\n       * {.cls}\n       */\n      name: '\\n{.a} softbreak then curly in start',\n      tests: [\n        {\n          shift: 0,\n          type: 'inline',\n          children: [\n            {\n              position: -2,\n              type: 'softbreak'\n            }, {\n              position: -1,\n              type: 'text',\n              content: utils.hasDelimiters('only', options)\n            }\n          ]\n        }\n      ],\n      /**\n       * @param {!number} j\n       */\n      transform: (tokens, i, j) => {\n        const token = tokens[i].children[j];\n        const attrs = utils.getAttrs(token.content, 0, options);\n        // find last closing tag\n        let ii = i + 1;\n        while (tokens[ii + 1] && tokens[ii + 1].nesting === -1) { ii++; }\n        const openingToken = utils.getMatchingOpeningToken(tokens, ii);\n        utils.addAttrs(attrs, openingToken);\n        tokens[i].children = tokens[i].children.slice(0, -2);\n      }\n    }, {\n      /**\n       * horizontal rule --- {#id}\n       */\n      name: 'horizontal rule',\n      tests: [\n        {\n          shift: 0,\n          type: 'paragraph_open'\n        },\n        {\n          shift: 1,\n          type: 'inline',\n          children: (arr) => arr.length === 1,\n          content: (str) => str.match(__hr) !== null,\n        },\n        {\n          shift: 2,\n          type: 'paragraph_close'\n        }\n      ],\n      transform: (tokens, i) => {\n        const token = tokens[i];\n        token.type = 'hr';\n        token.tag = 'hr';\n        token.nesting = 0;\n        const content = tokens[i + 1].content;\n        const start = content.lastIndexOf(options.leftDelimiter);\n        const attrs = utils.getAttrs(content, start, options);\n        utils.addAttrs(attrs, token);\n        token.markup = content;\n        tokens.splice(i + 1, 2);\n      }\n    }, {\n      /**\n       * end of {.block}\n       */\n      name: 'end of block',\n      tests: [\n        {\n          shift: 0,\n          type: 'inline',\n          children: [\n            {\n              position: -1,\n              content: utils.hasDelimiters('end', options),\n              type: (t) => t !== 'code_inline' && t !== 'math_inline'\n            }\n          ]\n        }\n      ],\n      /**\n       * @param {!number} j\n       */\n      transform: (tokens, i, j) => {\n        const token = tokens[i].children[j];\n        const content = token.content;\n        const attrs = utils.getAttrs(content, content.lastIndexOf(options.leftDelimiter), options);\n        let ii = i + 1;\n        do if (tokens[ii] && tokens[ii].nesting === -1) { break; } while (ii++ < tokens.length);\n        const openingToken = utils.getMatchingOpeningToken(tokens, ii);\n        utils.addAttrs(attrs, openingToken);\n        const trimmed = content.slice(0, content.lastIndexOf(options.leftDelimiter));\n        token.content = last(trimmed) !== ' ' ?\n          trimmed : trimmed.slice(0, -1);\n      }\n    }\n  ]);\n};\n\n// get last element of array or string\nfunction last(arr) {\n  return arr.slice(-1)[0];\n}\n\n/**\n * Hidden table's cells and them inline children,\n * specially cast inline's content as empty\n * to prevent that escapes the table's box model\n * @see https://github.com/markdown-it/markdown-it/issues/639\n * @param {import('.').Token} token\n */\nfunction hidden(token) {\n  token.hidden = true;\n  token.children && token.children.forEach(t => (\n    t.content = '',\n    hidden(t),\n    undefined\n  ));\n}\n","/**\n * @typedef {import('.').Token} Token\n * @typedef {import('.').Options} Options\n * @typedef {import('.').AttributePair} AttributePair\n * @typedef {import('.').AllowedAttribute} AllowedAttribute\n * @typedef {import('.').DetectingStrRule} DetectingStrRule\n */\n/**\n * parse {.class #id key=val} strings\n * @param {string} str: string to parse\n * @param {number} start: where to start parsing (including {)\n * @param {Options} options\n * @returns {AttributePair[]}: [['key', 'val'], ['class', 'red']]\n */\nexports.getAttrs = function (str, start, options) {\n  // not tab, line feed, form feed, space, solidus, greater than sign, quotation mark, apostrophe and equals sign\n  const allowedKeyChars = /[^\\t\\n\\f />\"'=]/;\n  const pairSeparator = ' ';\n  const keySeparator = '=';\n  const classChar = '.';\n  const idChar = '#';\n\n  const attrs = [];\n  let key = '';\n  let value = '';\n  let parsingKey = true;\n  let valueInsideQuotes = false;\n\n  // read inside {}\n  // start + left delimiter length to avoid beginning {\n  // breaks when } is found or end of string\n  for (let i = start + options.leftDelimiter.length; i < str.length; i++) {\n    if (str.slice(i, i + options.rightDelimiter.length) === options.rightDelimiter) {\n      if (key !== '') { attrs.push([key, value]); }\n      break;\n    }\n    const char_ = str.charAt(i);\n\n    // switch to reading value if equal sign\n    if (char_ === keySeparator && parsingKey) {\n      parsingKey = false;\n      continue;\n    }\n\n    // {.class} {..css-module}\n    if (char_ === classChar && key === '') {\n      if (str.charAt(i + 1) === classChar) {\n        key = 'css-module';\n        i += 1;\n      } else {\n        key = 'class';\n      }\n      parsingKey = false;\n      continue;\n    }\n\n    // {#id}\n    if (char_ === idChar && key === '') {\n      key = 'id';\n      parsingKey = false;\n      continue;\n    }\n\n    // {value=\"inside quotes\"}\n    if (char_ === '\"' && value === '' && !valueInsideQuotes) {\n      valueInsideQuotes = true;\n      continue;\n    }\n    if (char_ === '\"' && valueInsideQuotes) {\n      valueInsideQuotes = false;\n      continue;\n    }\n\n    // read next key/value pair\n    if ((char_ === pairSeparator && !valueInsideQuotes)) {\n      if (key === '') {\n        // beginning or ending space: { .red } vs {.red}\n        continue;\n      }\n      attrs.push([key, value]);\n      key = '';\n      value = '';\n      parsingKey = true;\n      continue;\n    }\n\n    // continue if character not allowed\n    if (parsingKey && char_.search(allowedKeyChars) === -1) {\n      continue;\n    }\n\n    // no other conditions met; append to key/value\n    if (parsingKey) {\n      key += char_;\n      continue;\n    }\n    value += char_;\n  }\n\n  if (options.allowedAttributes && options.allowedAttributes.length) {\n    const allowedAttributes = options.allowedAttributes;\n\n    return attrs.filter(function (attrPair) {\n      const attr = attrPair[0];\n\n      /**\n       * @param {AllowedAttribute} allowedAttribute\n       */\n      function isAllowedAttribute (allowedAttribute) {\n        return (attr === allowedAttribute\n          || (allowedAttribute instanceof RegExp && allowedAttribute.test(attr))\n        );\n      }\n\n      return allowedAttributes.some(isAllowedAttribute);\n    });\n\n  }\n  return attrs;\n\n};\n\n/**\n * add attributes from [['key', 'val']] list\n * @param {AttributePair[]} attrs: [['key', 'val']]\n * @param {Token} token: which token to add attributes\n * @returns token\n */\nexports.addAttrs = function (attrs, token) {\n  for (let j = 0, l = attrs.length; j < l; ++j) {\n    const key = attrs[j][0];\n    if (key === 'class') {\n      token.attrJoin('class', attrs[j][1]);\n    } else if (key === 'css-module') {\n      token.attrJoin('css-module', attrs[j][1]);\n    } else {\n      token.attrPush(attrs[j]);\n    }\n  }\n  return token;\n};\n\n/**\n * Does string have properly formatted curly?\n *\n * start: '{.a} asdf'\n * end: 'asdf {.a}'\n * only: '{.a}'\n *\n * @param {'start'|'end'|'only'} where to expect {} curly. start, end or only.\n * @param {Options} options\n * @return {DetectingStrRule} Function which testes if string has curly.\n */\nexports.hasDelimiters = function (where, options) {\n\n  if (!where) {\n    throw new Error('Parameter `where` not passed. Should be \"start\", \"end\" or \"only\".');\n  }\n\n  /**\n   * @param {string} str\n   * @return {boolean}\n   */\n  return function (str) {\n    // we need minimum three chars, for example {b}\n    const minCurlyLength = options.leftDelimiter.length + 1 + options.rightDelimiter.length;\n    if (!str || typeof str !== 'string' || str.length < minCurlyLength) {\n      return false;\n    }\n\n    /**\n     * @param {string} curly\n     */\n    function validCurlyLength (curly) {\n      const isClass = curly.charAt(options.leftDelimiter.length) === '.';\n      const isId = curly.charAt(options.leftDelimiter.length) === '#';\n      return (isClass || isId)\n        ? curly.length >= (minCurlyLength + 1)\n        : curly.length >= minCurlyLength;\n    }\n\n    let start, end, slice, nextChar;\n    const rightDelimiterMinimumShift = minCurlyLength - options.rightDelimiter.length;\n    switch (where) {\n    case 'start':\n      // first char should be {, } found in char 2 or more\n      slice = str.slice(0, options.leftDelimiter.length);\n      start = slice === options.leftDelimiter ? 0 : -1;\n      end = start === -1 ? -1 : str.indexOf(options.rightDelimiter, rightDelimiterMinimumShift);\n      // check if next character is not one of the delimiters\n      nextChar = str.charAt(end + options.rightDelimiter.length);\n      if (nextChar && options.rightDelimiter.indexOf(nextChar) !== -1) {\n        end = -1;\n      }\n      break;\n\n    case 'end':\n      // last char should be }\n      start = str.lastIndexOf(options.leftDelimiter);\n      end = start === -1 ? -1 : str.indexOf(options.rightDelimiter, start + rightDelimiterMinimumShift);\n      end = end === str.length - options.rightDelimiter.length ? end : -1;\n      break;\n\n    case 'only':\n      // '{.a}'\n      slice = str.slice(0, options.leftDelimiter.length);\n      start = slice === options.leftDelimiter ? 0 : -1;\n      slice = str.slice(str.length - options.rightDelimiter.length);\n      end = slice === options.rightDelimiter ? str.length - options.rightDelimiter.length : -1;\n      break;\n\n    default:\n      throw new Error(`Unexpected case ${where}, expected 'start', 'end' or 'only'`);\n    }\n\n    return start !== -1 && end !== -1 && validCurlyLength(str.substring(start, end + options.rightDelimiter.length));\n  };\n};\n\n/**\n * Removes last curly from string.\n * @param {string} str\n * @param {Options} options\n */\nexports.removeDelimiter = function (str, options) {\n  const start = escapeRegExp(options.leftDelimiter);\n  const end = escapeRegExp(options.rightDelimiter);\n\n  const curly = new RegExp(\n    '[ \\\\n]?' + start + '[^' + start + end + ']+' + end + '$'\n  );\n  const pos = str.search(curly);\n\n  return pos !== -1 ? str.slice(0, pos) : str;\n};\n\n/**\n * Escapes special characters in string s such that the string\n * can be used in `new RegExp`. For example \"[\" becomes \"\\\\[\".\n *\n * @param {string} s Regex string.\n * @return {string} Escaped string.\n */\nfunction escapeRegExp (s) {\n  return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\nexports.escapeRegExp = escapeRegExp;\n\n/**\n * find corresponding opening block\n * @param {Token[]} tokens\n * @param {number} i\n */\nexports.getMatchingOpeningToken = function (tokens, i) {\n  if (tokens[i].type === 'softbreak') {\n    return false;\n  }\n  // non closing blocks, example img\n  if (tokens[i].nesting === 0) {\n    return tokens[i];\n  }\n\n  const level = tokens[i].level;\n  const type = tokens[i].type.replace('_close', '_open');\n\n  for (; i >= 0; --i) {\n    if (tokens[i].type === type && tokens[i].level === level) {\n      return tokens[i];\n    }\n  }\n\n  return false;\n};\n\n\n/**\n * from https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js\n */\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\n/**\n * @param {string} ch\n * @returns {string}\n */\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\n/**\n * @param {string} str\n * @returns {string}\n */\nexports.escapeHtml = function (str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n};\n","'use strict';\n\nconst patternsConfig = require('./patterns.js');\n\n/**\n * @typedef {import('markdown-it')} MarkdownIt\n *\n * @typedef {import('markdown-it/lib/rules_core/state_core.mjs').default} StateCore\n *\n * @typedef {import('markdown-it/lib/token.mjs').default} Token\n *\n * @typedef {import('markdown-it/lib/token.mjs').Nesting} Nesting\n *\n * @typedef {Object} Options\n * @property {!string} leftDelimiter left delimiter, default is `{`(left curly bracket)\n * @property {!string} rightDelimiter right delimiter, default is `}`(right curly bracket)\n * @property {AllowedAttribute[]} allowedAttributes empty means no limit\n *\n * @typedef {string|RegExp} AllowedAttribute rule of allowed attribute\n *\n * @typedef {[string, string]} AttributePair\n *\n * @typedef {[number, number]} SourceLineInfo\n *\n * @typedef {Object} CurlyAttrsPattern\n * @property {string} name\n * @property {DetectingRule[]} tests\n * @property {(tokens: Token[], i: number, j?: number) => void} transform\n *\n * @typedef {Object} MatchedResult\n * @property {boolean} match true means matched\n * @property {number?} j postion index number of Array<{@link Token}>\n *\n * @typedef {(str: string) => boolean} DetectingStrRule\n *\n * @typedef {Object} DetectingRule rule for testing {@link Token}'s properties\n * @property {number=} shift offset index number of Array<{@link Token}>\n * @property {number=} position fixed index number of Array<{@link Token}>\n * @property {(string | DetectingStrRule)=} type\n * @property {(string | DetectingStrRule)=} tag\n * @property {DetectingRule[]=} children\n * @property {(string | DetectingStrRule)=} content\n * @property {(string | DetectingStrRule)=} markup\n * @property {(string | DetectingStrRule)=} info\n * @property {Nesting=} nesting\n * @property {number=} level\n * @property {boolean=} block\n * @property {boolean=} hidden\n * @property {AttributePair[]=} attrs\n * @property {SourceLineInfo[]=} map\n * @property {any=} meta\n */\n\n/** @type {Options} */\nconst defaultOptions = {\n  leftDelimiter: '{',\n  rightDelimiter: '}',\n  allowedAttributes: []\n};\n\n/**\n * @param {MarkdownIt} md\n * @param {Options=} options_\n */\nmodule.exports = function attributes(md, options_) {\n  let options = Object.assign({}, defaultOptions);\n  options = Object.assign(options, options_);\n\n  const patterns = patternsConfig(options);\n\n  /**\n   * @param {StateCore} state\n   */\n  function curlyAttrs(state) {\n    const tokens = state.tokens;\n\n    for (let i = 0; i < tokens.length; i++) {\n      for (let p = 0; p < patterns.length; p++) {\n        const pattern = patterns[p];\n        let j = null; // position of child with offset 0\n        const match = pattern.tests.every(t => {\n          const res = test(tokens, i, t);\n          if (res.j !== null) { j = res.j; }\n          return res.match;\n        });\n        if (match) {\n          try {\n            pattern.transform(tokens, i, j);\n            if (pattern.name === 'inline attributes' || pattern.name === 'inline nesting 0') {\n              // retry, may be several inline attributes\n              p--;\n            }\n          } catch (error) {\n            // eslint-disable-next-line no-console\n            console.error(`markdown-it-attrs: Error in pattern '${pattern.name}': ${error.message}`);\n            console.error(error.stack);\n          }\n        }\n      }\n    }\n  }\n\n  md.core.ruler.before('linkify', 'curly_attributes', curlyAttrs);\n};\n\n/**\n * Test if t matches token stream.\n *\n * @param {Token[]} tokens\n * @param {number} i\n * @param {DetectingRule} t\n * @returns {MatchedResult}\n */\nfunction test(tokens, i, t) {\n  /** @type {MatchedResult} */\n  const res = {\n    match: false,\n    j: null  // position of child\n  };\n\n  const ii = t.shift !== undefined\n    ? i + t.shift\n    : t.position;\n\n  if (t.shift !== undefined && ii < 0) {\n    // we should never shift to negative indexes (rolling around to back of array)\n    return res;\n  }\n\n  const token = get(tokens, ii);  // supports negative ii\n\n\n  if (token === undefined) { return res; }\n\n  for (const key of Object.keys(t)) {\n    if (key === 'shift' || key === 'position') { continue; }\n\n    if (token[key] === undefined) { return res; }\n\n    if (key === 'children' && isArrayOfObjects(t.children)) {\n      if (token.children.length === 0) {\n        return res;\n      }\n      let match;\n      /** @type {DetectingRule[]} */\n      const childTests = t.children;\n      /** @type {Token[]} */\n      const children = token.children;\n      if (childTests.every(tt => tt.position !== undefined)) {\n        // positions instead of shifts, do not loop all children\n        match = childTests.every(tt => test(children, tt.position, tt).match);\n        if (match) {\n          // we may need position of child in transform\n          const j = last(childTests).position;\n          res.j = j >= 0 ? j : children.length + j;\n        }\n      } else {\n        for (let j = 0; j < children.length; j++) {\n          match = childTests.every(tt => test(children, j, tt).match);\n          if (match) {\n            res.j = j;\n            // all tests true, continue with next key of pattern t\n            break;\n          }\n        }\n      }\n\n      if (match === false) { return res; }\n\n      continue;\n    }\n\n    switch (typeof t[key]) {\n    case 'boolean':\n    case 'number':\n    case 'string':\n      if (token[key] !== t[key]) { return res; }\n      break;\n    case 'function':\n      if (!t[key](token[key])) { return res; }\n      break;\n    case 'object':\n      if (isArrayOfFunctions(t[key])) {\n        const r = t[key].every(tt => tt(token[key]));\n        if (r === false) { return res; }\n        break;\n      }\n    // fall through for objects !== arrays of functions\n    default:\n      throw new Error(`Unknown type of pattern test (key: ${key}). Test should be of type boolean, number, string, function or array of functions.`);\n    }\n  }\n\n  // no tests returned false -> all tests returns true\n  res.match = true;\n  return res;\n}\n\nfunction isArrayOfObjects(arr) {\n  return Array.isArray(arr) && arr.length && arr.every(i => typeof i === 'object');\n}\n\nfunction isArrayOfFunctions(arr) {\n  return Array.isArray(arr) && arr.length && arr.every(i => typeof i === 'function');\n}\n\n/**\n * Get n item of array. Supports negative n, where -1 is last\n * element in array.\n * @param {Token[]} arr\n * @param {number} n\n * @returns {Token=}\n */\nfunction get(arr, n) {\n  return n >= 0 ? arr[n] : arr[arr.length + n];\n}\n\n/**\n * get last element of array, safe - returns {} if not found\n * @param {DetectingRule[]} arr\n * @returns {DetectingRule}\n */\nfunction last(arr) {\n  return arr.slice(-1)[0] || {};\n}\n"],"names":["UNESCAPE_RE","subscript","state","silent","max","posMax","start","pos","src","charCodeAt","found","md","inline","skipToken","content","slice","match","push","markup","replace","sub_plugin","ruler","after","superscript","sup_plugin","decodeCache","decode","string","exclude","defaultChars","cache","i","ch","String","fromCharCode","length","toString","toUpperCase","getDecodeCache","seq","result","l","b1","parseInt","b2","chr","b3","b4","componentChars","encodeCache","encode","keepEscaped","test","getEncodeCache","code","nextCode","encodeURIComponent","format","url","protocol","slashes","auth","hostname","indexOf","port","pathname","search","hash","Url","this","protocolPattern","portPattern","simplePathPattern","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","javascript","slashedProtocol","http","https","ftp","gopher","file","prototype","parse","slashesDenoteHost","lowerProto","hec","rest","trim","split","simplePath","exec","proto","toLowerCase","substr","atSign","hostEnd","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","j","k","validParts","notHost","bit","unshift","join","qm","_a","u","Uint16Array","map","c","decodeMap","Map","fromCodePoint","codePoint","output","CharCodes","BinTrieFlags","EntityDecoderState","DecodingMode","isNumber","ZERO","NINE","isHexadecimalCharacter","UPPER_A","UPPER_F","LOWER_A","LOWER_F","isEntityInAttributeInvalidEnd","EQUALS","UPPER_Z","LOWER_Z","isAsciiAlphaNumeric","EntityDecoder","constructor","decodeTree","emitCodePoint","errors","EntityStart","consumed","treeIndex","excess","decodeMode","Strict","startEntity","write","str","offset","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","addToNumericResult","end","base","digitCount","Math","pow","startIdx","char","emitNumericEntity","lastCp","expectedLength","absenceOfDigitsInNumericCharacterReference","SEMI","get","replaceCodePoint","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","current","valueLength","VALUE_LENGTH","determineBranch","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","ret","decoder","lastIndex","len","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","value","lo","hi","mid","midVal","htmlDecoder","mode","Legacy","restoreDiff","arr","v","n","o","xmlCodeMap","getEscaper","regex","data","lastIdx","index","substring","EntityLevel","EncodingMode","isString","obj","Object","call","_class","codePointAt","_hasOwnProperty","hasOwnProperty","has","object","key","Array","arguments","forEach","source","TypeError","keys","arrayReplaceAt","newElements","isValidEntityCode","surrogate1","surrogate2","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","DIGITAL_ENTITY_TEST_RE","unescapeMd","unescapeAll","escaped","entity","name","decoded","replaceEntityPattern","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","escapeHtml","REGEXP_ESCAPE_RE","escapeRE","isSpace","isWhiteSpace","isPunctChar","isMdAsciiPunct","normalizeReference","lib","mdurl","parseLinkLabel","disableNested","level","marker","prevPos","oldPos","labelEnd","parseLinkDestination","ok","parseLinkTitle","prev_state","can_continue","default_rules","Renderer","rules","code_inline","tokens","idx","options","env","slf","token","renderAttrs","code_block","fence","info","highlighted","langName","langAttrs","highlight","attrIndex","tmpAttrs","attrs","langPrefix","tmpToken","image","renderInlineAsText","children","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","hidden","block","nesting","tag","needLf","nextToken","type","renderInline","render","Ruler","__rules__","__cache__","__find__","__compile__","self","chains","rule","enabled","alt","altName","chain","fn","at","opt","Error","before","beforeName","ruleName","splice","afterName","enable","list","ignoreInvalid","isArray","enableOnly","disable","getRules","chainName","Token","meta","attrPush","attrData","attrSet","attrGet","attrJoin","StateCore","inlineMode","NEWLINES_RE","NULL_RE","isLinkOpen","isLinkClose","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","QUOTE_TEST_RE","QUOTE_RE","replaceAt","process_inlines","stack","thisLevel","OUTER","t","canOpen","canClose","isSingle","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","item","single","openQuote","closeQuote","quotes","_rules","tok","blockTokens","linkify","pretest","htmlLinkLevel","currentToken","links","nodes","lastPos","ln","fullUrl","normalizeLink","validateLink","urlText","schema","normalizeLinkText","token_o","token_t","token_c","blkIdx","typographer","curr","last","Core","process","State","StateBlock","bMarks","eMarks","tShift","sCount","bsCount","blkIndent","line","lineMax","tight","ddIndent","listIndent","parentType","s","indent","indent_found","isEmpty","skipEmptyLines","from","skipSpaces","skipSpacesBack","min","skipChars","skipCharsBack","getLines","begin","keepLastLF","queue","lineIndent","lineStart","first","getLine","escapedSplit","isEscaped","skipBulletListMarker","startLine","skipOrderedListMarker","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","HTML_SEQUENCES","endLine","nextLine","firstCh","secondCh","lineText","columns","aligns","shift","pop","columnCount","oldParentType","terminatorRules","tableLines","token_ho","token_il","tbodyLines","autocompletedCells","terminate","token_tdo","mem","params","haveEndMarker","oldLineMax","oldBMarks","oldBSCount","oldSCount","oldTShift","lastLineEmpty","isOutdented","spaceAfterMarker","adjustTab","initial","oldIndent","lines","tokenize","cnt","isOrdered","markerValue","posAfterMarker","isTerminatingParagraph","Number","markerCharCode","listTokIdx","listLines","prevEmptyEnd","contentStart","indentAfterMarker","itemLines","oldTight","oldListIndent","markTightParagraphs","_endLine","getNextLine","isContinuation","lineContent","destRes","helpers","href","destEndPos","destEndLineNo","title","titleRes","label","references","html","tmp","token_i","ParserBlock","maxNesting","hasEmptyLines","prevLine","outTokens","StateInline","tokens_meta","pending","pendingLevel","delimiters","_prev_delimiters","backticks","backticksScanned","linkLevel","pushPending","token_meta","scanDelims","canSplitWord","count","left_flanking","right_flanking","can_open","can_close","isTerminatorChar","SCHEME_RE","ESCAPED","postProcess","loneMarkers","startDelim","endDelim","scanned","open","close","isStrong","EMAIL_RE","AUTOLINK_RE","DIGITAL_RE","NAMED_RE","processDelimiters","openersBottom","headerIdx","lastTokenIdx","jumps","closerIdx","closer","minOpenerIdx","openerIdx","newMinOpenerIdx","opener","isOddMatch","lastJump","link","matchAtStart","pmax","ws","ch1","escapedStr","ch2","origStr","openerLength","matchStart","matchEnd","closerLength","res","ref","parseReference","labelStart","lc","isLetter","_rules2","ParserInline","ruler2","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","tail","re","src_auth","src_host_port_strict","src_path","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","tlds_default","compile","opts","src_Any","src_Cc","src_Z","src_P","src_ZPCc","src_ZCc","src_pseudo_letter","src_ip4","src_xn","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","tpl_host_fuzzy_test","tpl_email_fuzzy","tpl_link_fuzzy","tpl_link_no_ip_fuzzy","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","email_fuzzy","link_fuzzy","link_no_ip_fuzzy","host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","createValidator","normalize","alias","slist","filter","schema_test","schema_search","schema_at_start","__index__","__text_cache__","resetScanCache","Match","__last_index__","__schema__","raw","createMatch","LinkifyIt","schemas","reduce","acc","add","definition","set","m","ml","me","next","tld_pos","at_pos","testSchemaAt","keepOld","sort","el","reverse","maxInt","regexPunycode","regexNonASCII","regexSeparators","floor","stringFromCharCode","error","RangeError","mapDomain","domain","callback","parts","encoded","array","ucs2decode","counter","extra","basicToDigit","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","baseMinusTMin","input","inputLength","bias","basic","oldi","w","baseMinusT","out","currentValue","basicLength","handledCPCount","handledCPCountPlusOne","q","qMinusT","config","default","components","core","zero","rules2","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","RECODE_HOSTNAME_FOR","parsed","er","MarkdownIt","presetName","renderer","utils","configure","presets","missed","use","plugin","args","apply","parseInline","module","exports","__hr","escapeRegExp","leftDelimiter","rightDelimiter","tests","hasDelimiters","transform","getAttrs","addAttrs","removeDelimiter","endChar","attrToken","tableOpen","getMatchingOpeningToken","tr","th","colsnum","assign","calc","rows","cols","num","one","real","openingToken","position","ii","trimmed","allowedKeyChars","parsingKey","valueInsideQuotes","char_","charAt","allowedAttributes","attrPair","attr","some","allowedAttribute","where","minCurlyLength","rightDelimiterMinimumShift","curly","isClass","isId","validCurlyLength","patternsConfig","undefined","isArrayOfObjects","childTests","every","tt","isArrayOfFunctions","options_","patterns","p","pattern","console","message"],"sourceRoot":""}