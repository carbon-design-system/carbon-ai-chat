{"version":3,"file":"2868.bundle.js","mappings":";iTAoBA,MAAMA,EAAiB,CAACC,EAAAA,GAAMC,EAAAA,IAExBC,EAA6C,CAC/C,CAACC,EAAAA,EAAoBC,QAAS,GAC9B,CAACD,EAAAA,EAAoBE,UAAW,GAChC,CAACF,EAAAA,EAAoBG,MAAO,IAEhC,SAASC,GAAS,SAAEC,EAAQ,UAAEC,EAAS,aAAEC,EAAY,cAAEC,IACnD,MAAMC,GAAOC,EAAAA,EAAAA,MACP,uBAAEC,EAAsB,uBAAEC,IAA2BC,EAAAA,EAAAA,KACrDC,GAAsBC,EAAAA,EAAAA,IAAaC,GAAUA,EAAMF,sBAClDG,EAAYC,IAAiBC,EAAAA,EAAAA,aAC7BC,EAAgBC,IAAqBF,EAAAA,EAAAA,aACrCG,EAAoBC,IAAyBJ,EAAAA,EAAAA,UAAS,GAKvDK,EAAkBC,EAAAA,SAAeC,MAAMrB,GACvCsB,EAAelB,EAAKmB,cAAc,CAAEC,GAAI,kCAAoC,CAAEP,qBAAoBE,oBACxG,OAAIA,GAAmB,EACXC,EAAAA,cAAoB,MAAO,CAAEK,UAAW,uDAAyDzB,GAErGoB,EAAAA,cAAoB,MAAO,CAAEK,UAAW,wBAC5Cb,GAAeQ,EAAAA,cAAoBM,EAAAA,GAAQ,CAAEC,IAAK1B,EAAWC,aAAcA,EAAc0B,QAASrC,EAAgBsC,WAAY,CACtHC,OAAQf,EACRgB,OAAQnB,GACToB,cAAe,OAAQC,aAAcvC,EAA2Ce,GAAsBN,cAbjH,UAA+B,YAAE+B,IAC7BhB,EAAsBgB,EAAc,GACpC/B,IAAgB+B,EACpB,EAYQC,mBAAoBzC,EAA2Ce,GAAsB2B,kBAAmB,GAAIC,QAAQ,GAAQjB,EAAAA,SAAekB,IAAItC,EAAWuC,GAAWnB,EAAAA,cAAoBoB,EAAAA,GAAa,CAAEC,IAAKF,EAAME,IAAKhB,UAAW,gCAAgChB,KAAyB8B,KAChSnB,EAAAA,cAAoB,MAAO,CAAEK,UAAW,mCAAmChB,KACvEW,EAAAA,cAAoB,MAAO,CAAEK,UAAW,oCACpCL,EAAAA,cAAoBsB,EAAAA,IAAQ,CAAEf,IAAKX,EAAmBS,UAAW,sEAAuEkB,KAAMC,EAAAA,GAAeC,MAAO,aAAcvC,GAC9Kc,EAAAA,cAAoB0B,EAAAA,EAAa,OACrC1B,EAAAA,cAAoB,MAAO,CAAEK,UAAW,sCAAwCH,GAChFF,EAAAA,cAAoBsB,EAAAA,IAAQ,CAAEf,IAAKd,EAAeY,UAAW,sEAAuEkB,KAAMC,EAAAA,GAAeC,MAAO,aAActC,GAC1Ka,EAAAA,cAAoB2B,EAAAA,EAAc,SACtD,C","sources":["webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/responseTypes/carousel/Carousel.js"],"sourcesContent":["import ChevronLeft from '@carbon/icons-react/es/ChevronLeft.js';\nimport ChevronRight from '@carbon/icons-react/es/ChevronRight.js';\nimport { Button } from '@carbon/react';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { A11y, Navigation } from 'swiper/modules';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { useLanguagePack } from '../../../hooks/useLanguagePack.js';\nimport { ChatWidthBreakpoint } from '../../../../../types/state/AppState.js';\nimport { ButtonKindEnum } from '../../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst SWIPER_MODULES = [A11y, Navigation];\n// This object holds the left margin value for received messages.\nconst MESSAGE_RECEIVED_LEFT_MARGIN_BY_BREAKPOINT = {\n    [ChatWidthBreakpoint.NARROW]: 16,\n    [ChatWidthBreakpoint.STANDARD]: 56,\n    [ChatWidthBreakpoint.WIDE]: 56,\n};\nfunction Carousel({ children, swiperRef, initialSlide, onSlideChange, }) {\n    const intl = useIntl();\n    const { carousel_prevNavButton, carousel_nextNavButton } = useLanguagePack();\n    const chatWidthBreakpoint = useSelector((state) => state.chatWidthBreakpoint);\n    const [nextButton, setNextButton] = useState();\n    const [previousButton, setPreviousButton] = useState();\n    const [currentSlideNumber, setCurrentSlideNumber] = useState(1);\n    function onSlideChangeInternal({ activeIndex }) {\n        setCurrentSlideNumber(activeIndex + 1);\n        onSlideChange?.(activeIndex);\n    }\n    const totalSlideCount = React.Children.count(children);\n    const currentLabel = intl.formatMessage({ id: \"components_swiper_currentLabel\" }, { currentSlideNumber, totalSlideCount });\n    if (totalSlideCount <= 1) {\n        return (React.createElement(\"div\", { className: \"WACCarouselContainer WACCarouselContainer--oneSlide\" }, children));\n    }\n    return (React.createElement(\"div\", { className: \"WACCarouselContainer\" },\n        nextButton && (React.createElement(Swiper, { ref: swiperRef, initialSlide: initialSlide, modules: SWIPER_MODULES, navigation: {\n                prevEl: previousButton,\n                nextEl: nextButton,\n            }, slidesPerView: \"auto\", spaceBetween: MESSAGE_RECEIVED_LEFT_MARGIN_BY_BREAKPOINT[chatWidthBreakpoint], onSlideChange: onSlideChangeInternal, \n            // These values account for the left and right gutters present in other messages.\n            slidesOffsetBefore: MESSAGE_RECEIVED_LEFT_MARGIN_BY_BREAKPOINT[chatWidthBreakpoint], slidesOffsetAfter: 16, rewind: true }, React.Children.map(children, (child) => (React.createElement(SwiperSlide, { key: child.key, className: `WACCarouselContainer__Slide--${chatWidthBreakpoint}` }, child))))),\n        React.createElement(\"div\", { className: `WACCarouselContainer__Controls--${chatWidthBreakpoint}` },\n            React.createElement(\"div\", { className: \"WACCarouselContainer__Navigation\" },\n                React.createElement(Button, { ref: setPreviousButton, className: \"WACCarouselContainer__NavigationButton WACDirectionHasReversibleSVG\", kind: ButtonKindEnum.GHOST, \"aria-label\": carousel_prevNavButton },\n                    React.createElement(ChevronLeft, null)),\n                React.createElement(\"div\", { className: \"WACCarouselContainer__CurrentLabel\" }, currentLabel),\n                React.createElement(Button, { ref: setNextButton, className: \"WACCarouselContainer__NavigationButton WACDirectionHasReversibleSVG\", kind: ButtonKindEnum.GHOST, \"aria-label\": carousel_nextNavButton },\n                    React.createElement(ChevronRight, null))))));\n}\n\nexport { Carousel as default };\n"],"names":["SWIPER_MODULES","A11y","Navigation","MESSAGE_RECEIVED_LEFT_MARGIN_BY_BREAKPOINT","ChatWidthBreakpoint","NARROW","STANDARD","WIDE","Carousel","children","swiperRef","initialSlide","onSlideChange","intl","useIntl","carousel_prevNavButton","carousel_nextNavButton","useLanguagePack","chatWidthBreakpoint","useSelector","state","nextButton","setNextButton","useState","previousButton","setPreviousButton","currentSlideNumber","setCurrentSlideNumber","totalSlideCount","React","count","currentLabel","formatMessage","id","className","Swiper","ref","modules","navigation","prevEl","nextEl","slidesPerView","spaceBetween","activeIndex","slidesOffsetBefore","slidesOffsetAfter","rewind","map","child","SwiperSlide","key","Button","kind","ButtonKindEnum","GHOST","ChevronLeft","ChevronRight"],"sourceRoot":""}