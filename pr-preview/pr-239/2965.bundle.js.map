{"version":3,"file":"2965.bundle.js","mappings":"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","sources":["webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useUUID.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/carbon/Loading.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/AriaAnnouncerContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/settings.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/UUIDType.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/arrayUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/schema/outputItemToLocalItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/BasePanelComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/actions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hocs/withAriaAnnouncer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/miscUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/homeScreenUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/intlUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/ChatInstanceImpl.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/environmentVariables.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/config/LauncherConfig.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/reducerUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/messaging/History.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/colors.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/styleUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/viewStateUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/events/ChatActionsImpl.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/events/EventBus.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/CustomPanelInstance.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/HistoryService.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/schema/historyToMessages.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/messageServiceUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/MessageService.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/NamespaceService.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/ServiceManager.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/mockStorage.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/UserSessionStorageService.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/customizers.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/agentReducers.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/tourReducerUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/reducers.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/doCreateStore.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/chatEntryFunctions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/Chat.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/loadServices.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/subscriptions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/services/CustomPanelManager.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/aria/AriaAnnouncerProvider.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/launcherUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/Launcher.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/carbon/Tag.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherComplex.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherDesktopContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/animationUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherExtended.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherMobileContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/launcher/LauncherContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useEffectDidUpdate.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/HydrationPanel.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/panels/CustomPanel.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/containers/main/MainWindow.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/utilities/HasAddRemoveClassName.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/containers/App.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/UserDefinedResponsePortalsContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/WriteableElementsPortalsContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/AppContainer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/messaging/LocalMessageItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/utilities/Animation.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/OverlayPanel.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/HideComponentContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/languages/en.json.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/MountChildrenOnDelay.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/resolvablePromise.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/dynamic-imports/dynamic-imports.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/VisuallyHidden.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/browserUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/usePrevious.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/config/ChatHeaderConfig.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderAvatar/src/chatHeaderAvatarElement.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderAvatar/src/chatHeaderAvatarElement.scss.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderAvatar/cds-aichat-chat-header-avatar.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderAvatar/src/chatHeaderAvatar.template.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderAvatar.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderLink/cds-aichat-chat-header-link.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderLink/src/chatHeaderLinkElement.template.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderLink.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderMenu.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderMenuButton.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderMenuItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderMenuItemRadioGroup.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderOverflowMenu.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderTitle/cds-aichat-chat-header-title.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderTitle/src/chatHeaderTitle.template.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/web-components/components/chatHeader/chatHeaderTitle/src/chatHeaderTitle.scss.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/react/components/chatHeader/ChatHeaderTitle.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/header/AISlug.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/header/Header.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/aria/AriaAnnouncerComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/constants.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/homeScreen/HomeScreenHeader.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/languages.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useLanguagePack.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/HideComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/WindowSizeContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/utilities/carbonTypes.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useServiceManager.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/ModalPortalRootContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/uuid.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/aria/AriaLiveMessage.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/domUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/messageUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/util/AnnounceOnMountComponent.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/state/AppState.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/WriteableElement.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/ServiceManagerContext.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/containers/ModalPortal.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/modals/ConfirmModal.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/types/instance/ChatInstance.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/selectors.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/promiseUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/components/header/BotHeader.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/utils/lang/objectUtils.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/schema/inputItemToLocalItem.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/hooks/useAriaAnnouncer.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/store/agentActions.js","webpack://@carbon/ai-chat-examples-demo/../packages/ai-chat/dist/es/chat/shared/contexts/LanguagePackContext.js"],"sourcesContent":["import { useRef } from 'react';\nimport { uuid } from '../utils/lang/uuid.js';\nimport { UUIDType } from '../utils/lang/UUIDType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A hook that returns a UUID that lives for the life of the component.\n */\nfunction useUUID() {\n    const ref = useRef();\n    if (ref.current === undefined) {\n        ref.current = uuid(UUIDType.COMPONENT);\n    }\n    return ref.current;\n}\n\nexport { useUUID };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport '@carbon/web-components/es-custom/components/loading/loading-icon.js';\nimport CarbonLoadingElement from '@carbon/web-components/es-custom/components/loading/loading.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst Loading = createComponent({\n    tagName: \"cds-custom-loading\",\n    elementClass: CarbonLoadingElement,\n    react: React,\n});\n\nexport { Loading as default };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst AriaAnnouncerContext = React.createContext(null);\n\nexport { AriaAnnouncerContext };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst CSS_CLASS_PREFIX = \"cds--aichat\";\nconst WEB_COMPONENT_PREFIX = \"cds-aichat\";\n\nexport { CSS_CLASS_PREFIX, WEB_COMPONENT_PREFIX };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The different types of things we can generate UUIDs for. Our test cases generate sequential IDs instead of random\n * UUIDs to produce deterministic IDs that can be hardcoded in tests and snapshots. To minimize the disruption that\n * changes in these IDs can cause (like if a new ID gets inserted), we divide IDs by type where each type gets its own\n * sequence. The type is set in the highest segment of the sequential IDs that are generated. This enum is only used\n * for testing purposes and has no impact on production code. If you change the values of any of these items, it\n * might break test cases that have IDs hardcoded in them.\n */\nvar UUIDType;\n(function (UUIDType) {\n    UUIDType[UUIDType[\"MISCELLANEOUS\"] = 1] = \"MISCELLANEOUS\";\n    UUIDType[UUIDType[\"LOCAL_MESSAGE\"] = 2] = \"LOCAL_MESSAGE\";\n    UUIDType[UUIDType[\"MESSAGE\"] = 3] = \"MESSAGE\";\n    UUIDType[UUIDType[\"COMPONENT\"] = 4] = \"COMPONENT\";\n    UUIDType[UUIDType[\"USER\"] = 6] = \"USER\";\n    UUIDType[UUIDType[\"DEVICE_ID\"] = 8] = \"DEVICE_ID\";\n    UUIDType[UUIDType[\"FILE\"] = 9] = \"FILE\";\n})(UUIDType || (UUIDType = {}));\n\nexport { UUIDType };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Coerces the given value into an array. If the value is already an array, it is returned as-is. Otherwise it is\n * returned as a new array that contains the value as a single entry.\n *\n * @param value The value that's either an array or should be put into an array.\n */\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n/**\n * Executes an asynchronous \"forEach\" over the given array with the given callback function. The values are executed\n * in series (as opposed to in parallel). The array may not be modified during the loop.\n *\n * @param array The array to execute the loop over.\n * @param callbackFunction The function to call for each value in the array. The return value from the function will\n * be awaited which means if the value is a Promise, the loop will block until the Promise is resolved. The function\n * does not have to return a Promise in which case no waiting will occur.\n */\nasync function asyncForEach(array, callbackFunction) {\n    for (let index = 0; index < array.length; index++) {\n        const value = array[index];\n        // eslint-disable-next-line no-await-in-loop\n        await callbackFunction(value, index, array);\n    }\n}\n/**\n * Finds the last value in the given array that matches according to the provided predicate. The search will\n * begin from the end of the array and continue backwards until a match is found.\n *\n * @param array The array to search through.\n * @param predicate The function used to determine if each value matches.\n * @param startAt The index to start at in the array. Defaults to length -1.\n * @returns Returns the array value that was found to match or undefined if no match was found.\n */\nfunction findLast(array, predicate, startAt) {\n    const lastIndex = findLastIndex(array, predicate);\n    return lastIndex === -1 ? undefined : array[lastIndex];\n}\n/**\n * Finds the last value in the given array that matches according to the provided predicate. The search will\n * begin from the end of the array and continue backwards until a match is found.\n *\n * @param array The array to search through.\n * @param predicate The function used to determine if each value matches.\n * @param startAt The index to start at in the array. Defaults to length -1.\n * @returns Returns the array index that was found to match or -1 if no match was found.\n */\nfunction findLastIndex(array, predicate, startAt) {\n    if (array) {\n        const startingIndex = array.length - 1 ;\n        for (let index = startingIndex; index >= 0; index--) {\n            const value = array[index];\n            if (predicate(value, index, array)) {\n                return index;\n            }\n        }\n    }\n    return -1;\n}\n/**\n * Finds the last value in the given array whose matching object from the given map matches according to the\n * provided predicate. The search will begin from the end of the array and continue backwards until a match is\n * found. This functionality basically works the same as {@link findLast} except that it will retrieve the object\n * from the map for the given id and use the predicate on that object.\n *\n * @param keys The array to search through.\n * @param map The map that contains the objects to look for. The object will be looked up using the key from the\n * provided array.\n * @param predicate The function used to determine if each value matches.\n * @returns Returns the array value that was found to match or undefined if no match was found.\n */\nfunction findLastWithMap(keys, map, predicate) {\n    for (let index = keys.length - 1; index >= 0; index--) {\n        const key = keys[index];\n        const value = map[key];\n        if (predicate(value, index, keys)) {\n            return value;\n        }\n    }\n    return undefined;\n}\n/**\n * Returns the last value of the given array.\n */\nfunction arrayLastValue(array) {\n    return array && array.length ? array[array.length - 1] : null;\n}\n\nexport { arrayLastValue, asArray, asyncForEach, findLast, findLastWithMap };\n","import { MessageResponseTypes, ButtonItemType } from '../../../types/messaging/Messages.js';\nimport { uuid } from '../utils/lang/uuid.js';\nimport { streamItemID, isGridResponseType, isCarouselResponseType, isShowPanelButtonType, isResponseWithNestedItems, isItemSupportedInResponseBody, isCardResponseType, isButtonResponseType, createMessageResponseForItem } from '../utils/messageUtils.js';\nimport { consoleError } from '../utils/miscUtils.js';\nimport { UUIDType } from '../utils/lang/UUIDType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Takes data from the v2 message API ({@link MessageResponse}) and transforms into something usable by WAC\n * ({@link LocalMessageItem}).\n *\n * @param messageItem The individual item from the message to convert.\n * @param fullMessage The message object that came from the server.\n * instance.\n * @param isLatestWelcomeNode Indicates if this message is a new welcome message that has just been shown to the user\n * and isn't a historical welcome message.\n * ID as the message.\n * @param disableFadeAnimation Indicates if the entrance fade animation for the message should be disabled.\n */\nfunction outputItemToLocalItem(messageItem, fullMessage, isLatestWelcomeNode = false, disableFadeAnimation = false) {\n    // If the item comes with a streaming id, use that. Otherwise assign a new id.\n    const id = streamItemID(fullMessage.id, messageItem) || uuid(UUIDType.LOCAL_MESSAGE);\n    // Create the LocalMessage. It will temporarily have the extra \"output\" property it gets from the original\n    // MessageResponse object.\n    const localMessage = {\n        ui_state: {\n            id,\n            needsAnnouncement: !fullMessage.history.from_history,\n            disableFadeAnimation,\n        },\n        item: messageItem,\n        fullMessageID: fullMessage.id,\n    };\n    if (isLatestWelcomeNode) {\n        localMessage.ui_state.isWelcomeResponse = true;\n    }\n    return localMessage;\n}\n/**\n * Creates an empty skeleton of a {@link LocalMessageItem} with the inline_error response type.\n */\nfunction createLocalMessageForInlineError(text) {\n    const messageItem = {\n        response_type: MessageResponseTypes.INLINE_ERROR,\n        text,\n    };\n    return createLocalMessageForItem(messageItem);\n}\n/**\n * Creates an empty skeleton of a {@link LocalMessageItem} with the given item.\n */\nfunction createLocalMessageForItem(messageItem) {\n    const originalMessage = createMessageResponseForItem(messageItem);\n    const localMessage = outputItemToLocalItem(messageItem, originalMessage);\n    return { originalMessage, localMessage };\n}\n/**\n * Loops through the give list of message items to create local message items for each of them. This allows us to reuse\n * the existing ui_state functionality to update nested messages like we currently do with normal messages.\n *\n * @param localMessageItem The local message item to store nested local message items in.\n * @param originalMessage The original message response these nested messages came from.\n * @param fromHistory Indicates if the message was fetched from session history.\n * @param nestedLocalMessageItems A list to add local message items to as they're created.\n * @param allowFooter Determines whether buttons in the footer should render. This allows us to prevent deeply\n * nested buttons from rendering, such as a card with a footer nested in a panel.\n */\nfunction createLocalMessageItemsForNestedMessageItems(localMessageItem, originalMessage, fromHistory, nestedLocalMessageItems, allowFooter) {\n    const { item } = localMessageItem;\n    if (isGridResponseType(item)) {\n        localMessageItem.ui_state.gridLocalMessageItemIDs = item.rows.map((row) => {\n            return row.cells.map((cell) => {\n                const cellLocalMessageItemIDs = [];\n                createLocalMessageItemsForNestedType(\"items\", localMessageItem, cell.items, cellLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, (nestedMessageItem) => isSupportedMessageItemInBody(localMessageItem.item, nestedMessageItem), false // Grids shouldn't allow buttons.\n                );\n                return cellLocalMessageItemIDs;\n            });\n        });\n    }\n    else if (isCarouselResponseType(item)) {\n        localMessageItem.ui_state.itemsLocalMessageItemIDs = [];\n        createLocalMessageItemsForNestedType(\"items\", localMessageItem, item.items, localMessageItem.ui_state.itemsLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, (nestedMessageItem) => isSupportedMessageItemInBody(item, nestedMessageItem), \n        // A carousel as standalone response type should allow buttons. If a carousel is allowed to be nested in the\n        // future, this would be helpful to prevent buttons in it.\n        allowFooter);\n    }\n    else {\n        const bodyItems = item.body || item.panel?.body;\n        if (bodyItems) {\n            localMessageItem.ui_state.bodyLocalMessageItemIDs = [];\n            createLocalMessageItemsForNestedType(\"body\", localMessageItem, bodyItems, localMessageItem.ui_state.bodyLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, (nestedMessageItem) => isSupportedMessageItemInBody(item, nestedMessageItem), \n            // If nested items are being rendered in a panel, the footer should not be allowed.\n            !isShowPanelButtonType(item));\n        }\n        if (!allowFooter) {\n            return;\n        }\n        const footerItems = item.footer || item.panel?.footer;\n        if (footerItems) {\n            localMessageItem.ui_state.footerLocalMessageItemIDs = [];\n            createLocalMessageItemsForNestedType(\"footer\", localMessageItem, footerItems, localMessageItem.ui_state.footerLocalMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, (nestedMessageItem) => isSupportedMessageItemInFooter(item, nestedMessageItem), \n            // A show panel button in a footer may open a panel that itself also has a footer. Nothing else in a footer can\n            // have nested items with footers.\n            !isShowPanelButtonType(item));\n        }\n    }\n}\nfunction createLocalMessageItemsForNestedType(type, localMessageItem, items, nestedMessageItemIDs, originalMessage, fromHistory, nestedLocalMessageItems, isSupported, allowFooter) {\n    items.forEach((nestedMessageItem) => {\n        if (isSupported(nestedMessageItem)) {\n            const nestedLocalMessageItem = outputItemToLocalItem(nestedMessageItem, originalMessage, false, true);\n            nestedMessageItemIDs.push(nestedLocalMessageItem.ui_state.id);\n            nestedLocalMessageItems.push(nestedLocalMessageItem);\n            if (isResponseWithNestedItems(nestedLocalMessageItem.item)) {\n                createLocalMessageItemsForNestedMessageItems(nestedLocalMessageItem, originalMessage, fromHistory, nestedLocalMessageItems, allowFooter);\n            }\n        }\n        else {\n            consoleError(`The \"${localMessageItem.item.response_type}\" response type does not support \"${nestedMessageItem.response_type}\" in \"${type}\" array.`);\n        }\n    });\n}\n/**\n * Determines if the given nested item is allowed to be displayed inside the given root message item body.\n */\nfunction isSupportedMessageItemInBody(rootMessageItem, nestedMessageItem) {\n    switch (rootMessageItem.response_type) {\n        case MessageResponseTypes.CARD:\n            return (!isCardResponseType(nestedMessageItem) &&\n                isItemSupportedInResponseBody(nestedMessageItem));\n        case MessageResponseTypes.CAROUSEL:\n            return isCardResponseType(nestedMessageItem);\n        case MessageResponseTypes.BUTTON:\n            return (rootMessageItem.button_type ===\n                ButtonItemType.SHOW_PANEL &&\n                isItemSupportedInResponseBody(nestedMessageItem));\n        case MessageResponseTypes.GRID:\n            return (!isCardResponseType(nestedMessageItem) &&\n                isItemSupportedInResponseBody(nestedMessageItem));\n        default:\n            return false;\n    }\n}\n/**\n * Determines if the given nested item is allowed to be displayed inside the given root message item footer. Only\n * the button response type should be allowed in the footer. Depending on the root message item, the show_panel\n * button type won't be allowed to render.\n */\nfunction isSupportedMessageItemInFooter(rootMessageItem, nestedMessageItem) {\n    if (isButtonResponseType(nestedMessageItem)) {\n        // The panel response type and show_panel button type should not support the button type \"show_panel\" in the\n        // footer. This is to prevent the user from opening a panel when a panel is already open.\n        if (isShowPanelButtonType(rootMessageItem)) {\n            return !isShowPanelButtonType(nestedMessageItem);\n        }\n        return true;\n    }\n    return false;\n}\n\nexport { createLocalMessageForInlineError, createLocalMessageItemsForNestedMessageItems, outputItemToLocalItem };\n","import FocusTrap from 'focus-trap-react';\nimport React, { useRef, useImperativeHandle } from 'react';\nimport { useSelector } from 'react-redux';\nimport { IS_MOBILE } from '../utils/browserUtils.js';\nimport { Header as HeaderExport } from './header/Header.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is a custom panel that renders external content similar to custom response types.\n */\nfunction BasePanelComponent({ className, children, isOpen, hidePanelHeader, labelBackButton, title, hideBackButton, useAITheme, onClickCloseAndRestart, onClickRestart, ...headerProps }, ref) {\n    const showRestartButton = useSelector((state) => state.config.public.headerConfig?.showRestartButton);\n    const headerRef = useRef();\n    // Reuse the imperative handles from the header.\n    useImperativeHandle(ref, () => headerRef.current);\n    return (React.createElement(FocusTrap, { active: isOpen, focusTrapOptions: {\n            clickOutsideDeactivates: true,\n            returnFocusOnDeactivate: !IS_MOBILE,\n            preventScroll: true,\n        } },\n        React.createElement(\"div\", { className: className },\n            !hidePanelHeader && (React.createElement(HeaderExport, { ...headerProps, ref: headerRef, showRestartButton: showRestartButton, onClickRestart: onClickRestart, onCloseAndRestart: onClickCloseAndRestart, showBackButton: !hideBackButton, labelBackButton: labelBackButton, displayName: title, useAITheme: useAITheme, showCenter: true })),\n            React.createElement(\"div\", { className: \"WACPanelContent\" }, children))));\n}\nconst BasePanelComponentExport = React.memo(React.forwardRef(BasePanelComponent));\n\nexport { BasePanelComponentExport as BasePanelComponent };\n","import { uuid } from '../utils/lang/uuid.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst CHANGE_STATE = \"CHANGE_STATE\";\nconst UPDATE_BOT_NAME = \"UPDATE_BOT_NAME\";\nconst UPDATE_BOT_AVATAR_URL = \"UPDATE_BOT_AVATAR_URL\";\nconst UPDATE_LAUNCHER_AVATAR_URL = \"UPDATE_LAUNCHER_AVATAR_URL\";\nconst UPDATE_MAIN_HEADER_TITLE = \"UPDATE_MAIN_HEADER_TITLE\";\nconst HYDRATE_CHAT = \"HYDRATE_CHAT\";\nconst HYDRATE_MESSAGE_HISTORY = \"HYDRATE_MESSAGE_HISTORY\";\nconst ADD_LOCAL_MESSAGE_ITEM = \"ADD_LOCAL_MESSAGE_ITEM\";\nconst REMOVE_MESSAGES = \"REMOVE_MESSAGES\";\nconst UPDATE_LOCAL_MESSAGE_ITEM = \"UPDATE_LOCAL_MESSAGE_ITEM\";\nconst SET_APP_STATE_VALUE = \"SET_APP_STATE_VALUE\";\nconst ADD_IS_TYPING_COUNTER = \"ADD_IS_TYPING_COUNTER\";\nconst ADD_IS_LOADING_COUNTER = \"ADD_IS_LOADING_COUNTER\";\nconst ADD_IS_HYDRATING_COUNTER = \"ADD_IS_HYDRATING_COUNTER\";\nconst SET_VIEW_STATE = \"SET_VIEW_STATE\";\nconst SET_VIEW_CHANGING = \"SET_VIEW_CHANGING\";\nconst SET_INITIAL_VIEW_CHANGE_COMPLETE = \"SET_INITIAL_VIEW_CHANGE_COMPLETE\";\nconst UPDATE_CSS_VARIABLES = \"UPDATE_CSS_VARIABLES\";\nconst MESSAGE_SET_OPTION_SELECTED = \"MESSAGE_SET_OPTION_SELECTED\";\nconst SET_MESSAGE_UI_PROPERTY = \"SET_MESSAGE_UI_PROPERTY\";\nconst SET_MESSAGE_HISTORY_PROPERTY = \"SET_MESSAGE_HISTORY_PROPERTY\";\nconst MERGE_HISTORY = \"MERGE_HISTORY\";\nconst SET_LAUNCHER_PROPERTY = \"SET_LAUNCHER_PROPERTY\";\nconst SET_LAUNCHER_CONFIG_PROPERTY = \"SET_LAUNCHER_CONFIG_PROPERTY\";\nconst ANNOUNCE_MESSAGE = \"ANNOUNCE_MESSAGE\";\nconst SET_CHAT_MESSAGES_PROPERTY = \"SET_CHAT_MESSAGES_PROPERTY\";\nconst RESTART_CONVERSATION = \"RESTART_CONVERSATION\";\nconst ACCEPTED_DISCLAIMER = \"ACCEPTED_DISCLAIMER\";\nconst ADD_MESSAGE = \"ADD_MESSAGE\";\nconst UPDATE_HOME_SCREEN_CONFIG = \"UPDATE_HOME_SCREEN_CONFIG\";\nconst UPDATE_HAS_SENT_NON_WELCOME_MESSAGE = \"UPDATE_HAS_SENT_NON_WELCOME_MESSAGE\";\nconst UPDATE_PERSISTED_CHAT_STATE = \"UPDATE_PERSISTED_CHAT_STATE\";\nconst SET_TOUR_DATA = \"SET_TOUR_DATA\";\nconst CLEAR_TOUR_DATA = \"CLEAR_TOUR_DATA\";\nconst CHANGE_STEP_IN_TOUR = \"CHANGE_STEP_IN_TOUR\";\nconst SET_HOME_SCREEN_IS_OPEN = \"SET_HOME_SCREEN_IS_OPEN\";\nconst UPDATE_LAUNCHER_CONFIG = \"UPDATE_LAUNCHER_CONFIG\";\nconst UPDATE_MESSAGE = \"UPDATE_MESSAGE\";\nconst SET_LAUNCHER_MINIMIZED = \"SET_LAUNCHER_MINIMIZED\";\nconst CLOSE_IFRAME_PANEL = \"CLOSE_IFRAME_PANEL\";\nconst OPEN_IFRAME_CONTENT = \"OPEN_IFRAME_CONTENT\";\nconst SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN = \"SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN\";\nconst SET_CUSTOM_PANEL_OPTIONS = \"SET_CUSTOM_PANEL_OPTIONS\";\nconst SET_CUSTOM_PANEL_OPEN = \"SET_CUSTOM_PANEL_OPEN\";\nconst TOGGLE_HOME_SCREEN = \"GO_BACK_TO_HOME\";\nconst UPDATE_INPUT_STATE = \"UPDATE_INPUT_STATE\";\nconst SET_IS_BROWSER_PAGE_VISIBLE = \"SET_IS_PAGE_VISIBLE\";\nconst ADD_INPUT_FILE = \"ADD_INPUT_FILE\";\nconst CLEAR_INPUT_FILES = \"CLEAR_INPUT_FILES\";\nconst REMOVE_INPUT_FILE = \"REMOVE_INPUT_FILE\";\nconst REMOVE_LOCAL_MESSAGE_ITEM = \"REMOVE_LOCAL_MESSAGE_ITEM\";\nconst FILE_UPLOAD_INPUT_ERROR = \"FILE_UPLOAD_INPUT_ERROR\";\nconst ADD_NESTED_MESSAGES = \"ADD_NESTED_MESSAGES\";\nconst SET_RESPONSE_PANEL_IS_OPEN = \"SET_RESPONSE_PANEL_IS_OPEN\";\nconst SET_RESPONSE_PANEL_CONTENT = \"SET_PANEL_RESPONSE_CONTENT\";\nconst STREAMING_ADD_CHUNK = \"STREAMING_ADD_CHUNK\";\nconst STREAMING_START = \"STREAMING_START\";\nconst STREAMING_MERGE_HISTORY = \"STREAMING_MERGE_HISTORY\";\nconst ADD_NOTIFICATION = \"ADD_NOTIFICATION\";\nconst REMOVE_ALL_NOTIFICATIONS = \"REMOVE_ALL_NOTIFICATIONS\";\nconst REMOVE_NOTIFICATIONS = \"REMOVE_NOTIFICATIONS\";\nconst UPDATE_CHAT_HEADER_CONFIG = \"UPDATE_CHAT_HEADER_CONFIG\";\nconst UPDATE_MAX_VISIBLE_HEADER_OBJECTS = \"UPDATE_MAX_VISIBLE_HEADER_OBJECTS\";\nconst SET_STOP_STREAMING_BUTTON_VISIBLE = \"SET_STOP_STREAMING_BUTTON_VISIBLE\";\nconst SET_STOP_STREAMING_BUTTON_DISABLED = \"SET_STOP_STREAMING_BUTTON_DISABLED\";\nconst SET_STREAM_ID = \"SET_STREAM_ID\";\nconst UPDATE_MAIN_HEADER_AVATAR = \"UPDATE_MAIN_HEADER_AVATAR\";\nconst actions = {\n    /**\n     * Allows you to change any portion of the app state.\n     */\n    changeState(partialState) {\n        // Using \"UnknownAction\" here seems to be required or our dts bundler blows up on this with a \"this node exceeds the\n        // maximum length\" error.\n        return { type: CHANGE_STATE, partialState };\n    },\n    chatWasHydrated() {\n        return { type: HYDRATE_CHAT };\n    },\n    hydrateMessageHistory(messageHistory) {\n        return { type: HYDRATE_MESSAGE_HISTORY, messageHistory };\n    },\n    removeMessages(messageIDs) {\n        return { type: REMOVE_MESSAGES, messageIDs };\n    },\n    restartConversation() {\n        return {\n            type: RESTART_CONVERSATION,\n        };\n    },\n    /**\n     * Adds the given message item to the message list. If the message item is already in the list, it will not be\n     * added again and will be left at its current position (unless addAfterID is provided) but the contents of the\n     * message will be replaced with the new item.\n     *\n     * @param messageItem The message item to add or replaced.\n     * @param message The full message the item belongs to.\n     * @param addMessage Indicates if the full message should also be added to the store along with the item.\n     * @param addAfterID Indicates if the message item should be inserted immediately after another item that may\n     * already be in the list. If this value is not provided, the item will be inserted at the end of the list (if it\n     * does not already exist in the list).\n     */\n    addLocalMessageItem(messageItem, message, addMessage, addAfterID) {\n        return {\n            type: ADD_LOCAL_MESSAGE_ITEM,\n            messageItem,\n            message,\n            addMessage,\n            addAfterID,\n        };\n    },\n    /**\n     * Adds the given message to the message list. This may also re-order any existing message items that are already\n     * visible due to being received from previous streaming chunks.\n     */\n    addMessage(message) {\n        return { type: ADD_MESSAGE, message };\n    },\n    updateLocalMessageItem(messageItem) {\n        return { type: UPDATE_LOCAL_MESSAGE_ITEM, messageItem };\n    },\n    updateMessage(message) {\n        return { type: UPDATE_MESSAGE, message };\n    },\n    messageSetOptionSelected(messageID, sentMessage) {\n        return {\n            type: MESSAGE_SET_OPTION_SELECTED,\n            messageID,\n            sentMessage,\n        };\n    },\n    updatePersistedChatState(chatState) {\n        return {\n            type: UPDATE_PERSISTED_CHAT_STATE,\n            chatState,\n        };\n    },\n    setTourData(newActiveTourMessageID) {\n        return {\n            type: SET_TOUR_DATA,\n            newActiveTourMessageID,\n        };\n    },\n    clearTourData() {\n        return {\n            type: CLEAR_TOUR_DATA,\n        };\n    },\n    changeStepInTour(newStepNumber) {\n        return {\n            type: CHANGE_STEP_IN_TOUR,\n            newStepNumber,\n        };\n    },\n    updateHasSentNonWelcomeMessage(hasSentNonWelcomeMessage) {\n        return {\n            type: UPDATE_HAS_SENT_NON_WELCOME_MESSAGE,\n            hasSentNonWelcomeMessage,\n        };\n    },\n    setAppStateValue(key, value) {\n        return {\n            type: SET_APP_STATE_VALUE,\n            key,\n            value,\n        };\n    },\n    addIsTypingCounter(addToIsTyping) {\n        return {\n            type: ADD_IS_TYPING_COUNTER,\n            addToIsTyping,\n        };\n    },\n    addIsLoadingCounter(addToIsLoading) {\n        return {\n            type: ADD_IS_LOADING_COUNTER,\n            addToIsLoading,\n        };\n    },\n    addIsHydratingCounter(addToIsHydrating) {\n        return {\n            type: ADD_IS_HYDRATING_COUNTER,\n            addToIsHydrating,\n        };\n    },\n    updateBotName(name) {\n        return { type: UPDATE_BOT_NAME, name };\n    },\n    updateMainHeaderTitle(title) {\n        return { type: UPDATE_MAIN_HEADER_TITLE, title };\n    },\n    updateBotAvatarURL(url) {\n        return { type: UPDATE_BOT_AVATAR_URL, url };\n    },\n    updateCSSVariables(variables, publicVars, whiteLabelVariables) {\n        return {\n            type: UPDATE_CSS_VARIABLES,\n            variables,\n            publicVars,\n            whiteLabelVariables,\n        };\n    },\n    updateHomeScreenConfig(homeScreenConfig) {\n        return { type: UPDATE_HOME_SCREEN_CONFIG, homeScreenConfig };\n    },\n    setViewState(viewState) {\n        return { type: SET_VIEW_STATE, viewState };\n    },\n    setViewChanging(viewChanging) {\n        return { type: SET_VIEW_CHANGING, viewChanging };\n    },\n    setInitialViewChangeComplete(changeComplete) {\n        return { type: SET_INITIAL_VIEW_CHANGE_COMPLETE, changeComplete };\n    },\n    /**\n     * Sets the give property of the {@link LocalMessageUIState} associated with the message of the given ID to the\n     * given value.\n     *\n     * @param localMessageID The ID of the message to update.\n     * @param propertyName The name of the property to update.\n     * @param propertyValue The value to set on the property.\n     */\n    setMessageUIProperty(localMessageID, propertyName, propertyValue) {\n        return {\n            type: SET_MESSAGE_UI_PROPERTY,\n            localMessageID,\n            propertyName,\n            propertyValue,\n        };\n    },\n    /**\n     * Sets the value of one of the properties of {@link PersistedLauncherState}.\n     */\n    setLauncherProperty(propertyName, propertyValue) {\n        return { type: SET_LAUNCHER_PROPERTY, propertyName, propertyValue };\n    },\n    setLauncherConfigProperty(propertyName, propertyValue, launcherType) {\n        return {\n            type: SET_LAUNCHER_CONFIG_PROPERTY,\n            propertyName,\n            propertyValue,\n            launcherType,\n        };\n    },\n    /**\n     * Sets the give property of the {@link MessageHistory} associated with the message of the given ID to the given\n     * value.\n     *\n     * @param messageID The ID of the message to update.\n     * @param propertyName The name of the property to update.\n     * @param propertyValue The value to set on the property.\n     */\n    setMessageHistoryProperty(messageID, propertyName, propertyValue) {\n        return {\n            type: SET_MESSAGE_HISTORY_PROPERTY,\n            messageID,\n            propertyName,\n            propertyValue,\n        };\n    },\n    /**\n     * Merges the given object into the history for the given message.\n     */\n    mergeMessageHistory(messageID, history) {\n        return { type: MERGE_HISTORY, messageID, history };\n    },\n    setMessageErrorState(messageID, errorState) {\n        return actions.setMessageHistoryProperty(messageID, \"error_state\", errorState);\n    },\n    /**\n     * Marks the given message to indicate that it has been announced and doesn't need to be announced again.\n     */\n    setMessageWasAnnounced(messageID) {\n        return actions.setMessageUIProperty(messageID, \"needsAnnouncement\", false);\n    },\n    /**\n     * Sets the given message as the current accessibility announcement so that it will immediately be read by a\n     * screen reader.\n     */\n    announceMessage(message) {\n        return { type: ANNOUNCE_MESSAGE, message };\n    },\n    /**\n     * Sets the property on one of the {@link ChatMessagesState} values.\n     */\n    setChatMessagesStateProperty(propertyName, propertyValue) {\n        return { type: SET_CHAT_MESSAGES_PROPERTY, propertyName, propertyValue };\n    },\n    /**\n     * Add a notification to the state.\n     */\n    addNotification(notification) {\n        const notificationID = uuid();\n        return { type: ADD_NOTIFICATION, notificationID, notification };\n    },\n    /**\n     * Remove notifications using the given ids.\n     */\n    removeNotifications({ groupID, notificationID, }) {\n        return { type: REMOVE_NOTIFICATIONS, groupID, notificationID };\n    },\n    /**\n     * Remove all notifications from the state.\n     */\n    removeAllNotifications() {\n        return { type: REMOVE_ALL_NOTIFICATIONS };\n    },\n    /**\n     * Sets the disclaimer state for the current domain to true.\n     */\n    acceptDisclaimer() {\n        return { type: ACCEPTED_DISCLAIMER };\n    },\n    /**\n     * For toggling Home Screen open state.\n     */\n    setHomeScreenIsOpen(isOpen) {\n        return { type: SET_HOME_SCREEN_IS_OPEN, isOpen };\n    },\n    updateLauncherConfig(launcherConfig) {\n        return { type: UPDATE_LAUNCHER_CONFIG, launcherConfig };\n    },\n    setLauncherMinimized() {\n        return { type: SET_LAUNCHER_MINIMIZED };\n    },\n    closeIFramePanel() {\n        return { type: CLOSE_IFRAME_PANEL };\n    },\n    setIFrameContent(messageItem) {\n        return { type: OPEN_IFRAME_CONTENT, messageItem };\n    },\n    setViewSourcePanelIsOpen(isOpen, citationItem, relatedSearchResult) {\n        return {\n            type: SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN,\n            isOpen,\n            citationItem,\n            relatedSearchResult,\n        };\n    },\n    setCustomPanelConfigOptions(options) {\n        return { type: SET_CUSTOM_PANEL_OPTIONS, options };\n    },\n    setCustomPanelOpen(isOpen) {\n        return { type: SET_CUSTOM_PANEL_OPEN, isOpen };\n    },\n    /**\n     * Switches between the bot and home screen views.\n     */\n    toggleHomeScreen() {\n        return { type: TOGGLE_HOME_SCREEN };\n    },\n    /**\n     * Updates the state of the input field.\n     */\n    updateInputState(newState, isInputToAgent) {\n        return { type: UPDATE_INPUT_STATE, newState, isInputToAgent };\n    },\n    /**\n     * Changes the values that indicates whether the browser page is visible.\n     */\n    setIsBrowserPageVisible(isVisible) {\n        return { type: SET_IS_BROWSER_PAGE_VISIBLE, isVisible };\n    },\n    /**\n     * Adds a new file to the input area for uploaded.\n     */\n    addInputFile(file, isInputToAgent) {\n        return { type: ADD_INPUT_FILE, file, isInputToAgent };\n    },\n    /**\n     * Removes a file attachment from the upload attachments area.\n     */\n    removeFileUpload(fileID, isInputToAgent) {\n        return { type: REMOVE_INPUT_FILE, fileID, isInputToAgent };\n    },\n    /**\n     * Removes the local message item with the given ID from the message list.\n     */\n    removeLocalMessageItem(localMessageItemID) {\n        return { type: REMOVE_LOCAL_MESSAGE_ITEM, localMessageItemID };\n    },\n    /**\n     * Updates the input area to indicate that a file upload is in error.\n     */\n    fileUploadInputError(fileID, errorMessage, isInputToAgent) {\n        return {\n            type: FILE_UPLOAD_INPUT_ERROR,\n            fileID,\n            errorMessage,\n            isInputToAgent,\n        };\n    },\n    /**\n     * Removes all the files from the input area.\n     */\n    clearInputFiles(isInputToAgent) {\n        return { type: CLEAR_INPUT_FILES, isInputToAgent };\n    },\n    addNestedMessages(localMessageItems) {\n        return { type: ADD_NESTED_MESSAGES, localMessageItems };\n    },\n    setResponsePanelIsOpen(isOpen) {\n        return { type: SET_RESPONSE_PANEL_IS_OPEN, isOpen };\n    },\n    setResponsePanelContent(localMessageItem, isMessageForInput = false) {\n        return {\n            type: SET_RESPONSE_PANEL_CONTENT,\n            localMessageItem,\n            isMessageForInput,\n        };\n    },\n    /**\n     * Adds a message to the store to begin the streaming process.\n     */\n    streamingStart(messageID) {\n        return { type: STREAMING_START, messageID };\n    },\n    /**\n     * Merges the given message history object into an existing message object.\n     */\n    streamingMergeHistory(messageID, history) {\n        return { type: STREAMING_MERGE_HISTORY, messageID, history };\n    },\n    /**\n     * Adds a new chunk of a streaming response to an existing message.\n     */\n    streamingAddChunk(fullMessageID, chunkItem, isCompleteItem, disableFadeAnimation) {\n        return {\n            type: STREAMING_ADD_CHUNK,\n            fullMessageID,\n            chunkItem,\n            isCompleteItem,\n            disableFadeAnimation,\n        };\n    },\n    updateChatHeaderConfig(chatHeaderConfig) {\n        return { type: UPDATE_CHAT_HEADER_CONFIG, chatHeaderConfig };\n    },\n    setMaxVisibleHeaderObjects(maxTotal) {\n        return { type: UPDATE_MAX_VISIBLE_HEADER_OBJECTS, maxTotal };\n    },\n    setStopStreamingButtonVisible(isVisible) {\n        return { type: SET_STOP_STREAMING_BUTTON_VISIBLE, isVisible };\n    },\n    setStopStreamingButtonDisabled(isDisabled) {\n        return { type: SET_STOP_STREAMING_BUTTON_DISABLED, isDisabled };\n    },\n    setStreamID(currentStreamID) {\n        return { type: SET_STREAM_ID, currentStreamID };\n    },\n    updateMainHeaderAvatar(config) {\n        return { type: UPDATE_MAIN_HEADER_AVATAR, config };\n    },\n};\n\nexport { ACCEPTED_DISCLAIMER, ADD_INPUT_FILE, ADD_IS_HYDRATING_COUNTER, ADD_IS_LOADING_COUNTER, ADD_IS_TYPING_COUNTER, ADD_LOCAL_MESSAGE_ITEM, ADD_MESSAGE, ADD_NESTED_MESSAGES, ADD_NOTIFICATION, ANNOUNCE_MESSAGE, CHANGE_STATE, CHANGE_STEP_IN_TOUR, CLEAR_INPUT_FILES, CLEAR_TOUR_DATA, CLOSE_IFRAME_PANEL, FILE_UPLOAD_INPUT_ERROR, HYDRATE_CHAT, HYDRATE_MESSAGE_HISTORY, MERGE_HISTORY, MESSAGE_SET_OPTION_SELECTED, OPEN_IFRAME_CONTENT, REMOVE_ALL_NOTIFICATIONS, REMOVE_INPUT_FILE, REMOVE_LOCAL_MESSAGE_ITEM, REMOVE_MESSAGES, REMOVE_NOTIFICATIONS, RESTART_CONVERSATION, SET_APP_STATE_VALUE, SET_CHAT_MESSAGES_PROPERTY, SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN, SET_CUSTOM_PANEL_OPEN, SET_CUSTOM_PANEL_OPTIONS, SET_HOME_SCREEN_IS_OPEN, SET_INITIAL_VIEW_CHANGE_COMPLETE, SET_IS_BROWSER_PAGE_VISIBLE, SET_LAUNCHER_CONFIG_PROPERTY, SET_LAUNCHER_MINIMIZED, SET_LAUNCHER_PROPERTY, SET_MESSAGE_HISTORY_PROPERTY, SET_MESSAGE_UI_PROPERTY, SET_RESPONSE_PANEL_CONTENT, SET_RESPONSE_PANEL_IS_OPEN, SET_STOP_STREAMING_BUTTON_DISABLED, SET_STOP_STREAMING_BUTTON_VISIBLE, SET_STREAM_ID, SET_TOUR_DATA, SET_VIEW_CHANGING, SET_VIEW_STATE, STREAMING_ADD_CHUNK, STREAMING_MERGE_HISTORY, STREAMING_START, TOGGLE_HOME_SCREEN, UPDATE_BOT_AVATAR_URL, UPDATE_BOT_NAME, UPDATE_CHAT_HEADER_CONFIG, UPDATE_CSS_VARIABLES, UPDATE_HAS_SENT_NON_WELCOME_MESSAGE, UPDATE_HOME_SCREEN_CONFIG, UPDATE_INPUT_STATE, UPDATE_LAUNCHER_AVATAR_URL, UPDATE_LAUNCHER_CONFIG, UPDATE_LOCAL_MESSAGE_ITEM, UPDATE_MAIN_HEADER_AVATAR, UPDATE_MAIN_HEADER_TITLE, UPDATE_MAX_VISIBLE_HEADER_OBJECTS, UPDATE_MESSAGE, UPDATE_PERSISTED_CHAT_STATE, actions as default };\n","import React, { useContext } from 'react';\nimport { AriaAnnouncerContext } from '../contexts/AriaAnnouncerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a high order component that will inject a {@link AriaAnnouncerFunctionType} in to a component.\n */\nfunction withAriaAnnouncer(Component) {\n    // Tell forwardRef: “I forward a ref of type unknown,\n    // and I expect props = OuterProps”\n    const Wrapped = React.forwardRef((props, ref) => {\n        const ariaAnnouncer = useContext(AriaAnnouncerContext);\n        return (React.createElement(Component, { ...props, ref: ref, ariaAnnouncer: ariaAnnouncer }));\n    });\n    // for better DevTools names:\n    Wrapped.displayName = `withAriaAnnouncer(${Component.displayName || Component.name || \"Component\"})`;\n    return Wrapped;\n}\n\nexport { withAriaAnnouncer };\n","import { WA_CONSOLE_PREFIX } from './constants.js';\nimport { resolveOrTimeout } from './lang/promiseUtils.js';\nimport { OnErrorType } from '../../../types/config/PublicConfig.js';\nimport { FileStatusValue } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A global flag to indicate if we want to show debug messages in the browser console. This is generally set from\n * {@link PublicConfig.debug}.\n */\nlet enableDebugLog = false;\n/**\n * A global flag to indicate if we want to show stack trace debug messages in the browser console. This is generally set\n * from {@link PublicConfig.debugStackTraces}.\n */\nlet enableDebugStackTracesLog = false;\n/**\n * A simple utility to send a message to the console log but only id debug logging is enabled.\n */\nfunction debugLog(message, ...args) {\n    if (enableDebugLog) {\n        console.log(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n    }\n}\n/**\n * A simple utility to send a message to the console log but only if debug stack traces logging is enabled.\n */\nfunction debugStackTrace(message, ...args) {\n    if (enableDebugStackTracesLog) {\n        const stack = new Error('This is not an error; it is a stack trace used for debugging purposes. It is enabled by the \"debugStackTraces: true\" configuration option.');\n        debugLog(message, stack, ...args);\n    }\n    else {\n        debugLog(message, ...args);\n    }\n}\n/**\n * A simple utility to send an error message to the console log.\n */\nfunction consoleError(message, ...args) {\n    console.error(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n}\n/**\n * A simple utility to send an error message to the console log.\n */\nfunction consoleLog(message, ...args) {\n    console.log(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n}\n/**\n * A simple utility to send a message to the console log.\n */\nfunction consoleDebug(message, ...args) {\n    console.debug(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n}\n/**\n * A simple utility to send an warning message to the console log.\n */\nfunction consoleWarn(message, ...args) {\n    console.warn(`${WA_CONSOLE_PREFIX} ${message}`, ...args);\n}\n/**\n * Sets a global flag to indicate if we want to show debug messages in the browser console. This is generally set from\n * {@link PublicConfig.debug}.\n */\nfunction setEnableDebugLog(debug) {\n    enableDebugLog = debug;\n}\n/**\n * Sets a global flag to indicate if we want to show debug stack trace messages in the browser console. This is\n * generally set from {@link PublicConfig.debugStackTraces}.\n */\nfunction setEnableDebugStackTracesLog(debug) {\n    enableDebugStackTracesLog = debug;\n}\n/**\n * Indicates if the global flag to indicate if we want to show debug messages in the browser console is enabled.\n */\nfunction isEnableDebugLog() {\n    return enableDebugLog;\n}\n/**\n * Safely returns the text from the given fetch response or undefined if there is an error. This will also impose a\n * timeout on getting the text\n */\nasync function safeFetchTextWithTimeout(response) {\n    try {\n        if (response) {\n            return resolveOrTimeout(response.text(), 2000, \"Getting response text\");\n        }\n    }\n    catch (error) {\n        consoleError(\"Error getting fetch text\", error);\n    }\n    return undefined;\n}\n/**\n * Returns a {@link OnErrorData} that represents an error that occurred while rendering a component.\n */\nfunction createDidCatchErrorData(component, error, errorInfo, isCatastrophicError) {\n    return {\n        errorType: OnErrorType.RENDER,\n        message: `${component}.componentDidCatch`,\n        otherData: {\n            error,\n            errorInfo,\n        },\n        catastrophicErrorType: isCatastrophicError,\n    };\n}\n/**\n * This function will calculate and return the necessary top padding percentage value that will help render a media\n * player with a responsive aspect ratio.\n */\nfunction getResponsiveElementPaddingValue(baseHeight = 180) {\n    return `${100 / (320 / baseHeight)}%`;\n}\n/**\n * Indicates if the given file is valid for uploading. The file must still be in the edit step and it must not\n * contain an error.\n */\nfunction isValidForUpload(upload) {\n    return upload.status === FileStatusValue.EDIT && !upload.isError;\n}\n/**\n * Calls the given onError function.\n */\nfunction callOnError(onError, data) {\n    if (onError) {\n        try {\n            onError(data);\n        }\n        catch (error) {\n            consoleError(\"Error calling onError\", error);\n        }\n    }\n}\nfunction getBotName(useAITheme, config) {\n    let botName;\n    if (useAITheme) {\n        botName = \"AI\";\n    }\n    else {\n        botName = config.public.botName || \"watsonx\";\n    }\n    return botName;\n}\n\nexport { callOnError, consoleDebug, consoleError, consoleLog, consoleWarn, createDidCatchErrorData, debugLog, debugStackTrace, getBotName, getResponsiveElementPaddingValue, isEnableDebugLog, isValidForUpload, safeFetchTextWithTimeout, setEnableDebugLog, setEnableDebugStackTracesLog };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Returns a copy of the given config, but removes any starters that are empty.\n */\nfunction withoutEmptyStarters(config) {\n    let newConfig = config;\n    if (config?.starters?.buttons?.length) {\n        newConfig = {\n            allow_return: true,\n            ...config,\n            starters: {\n                ...config.starters,\n                buttons: config.starters.buttons.filter((button) => Boolean(button.label?.trim())),\n            },\n        };\n        if (!newConfig?.starters?.buttons?.length) {\n            // If we end up with no starters, then turn them off.\n            newConfig.starters.is_on = false;\n        }\n    }\n    return newConfig;\n}\n\nexport { withoutEmptyStarters };\n","import { createIntl } from 'react-intl';\nimport actions from '../store/actions.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A simple utility function to set the intl object on the given service manager.\n */\nfunction setIntl(serviceManager, locale, messages) {\n    serviceManager.intl = createIntl({ locale, messages });\n    serviceManager.store.dispatch(actions.setAppStateValue(\"languagePack\", messages));\n    serviceManager.store.dispatch(actions.setAppStateValue(\"locale\", locale));\n}\n\nexport { setIntl };\n","import dayjs from 'dayjs';\nimport cloneDeep from 'lodash-es/cloneDeep.js';\nimport actions from './store/actions.js';\nimport { selectInputState } from './store/selectors.js';\nimport '../../types/state/AppState.js';\nimport { withoutEmptyStarters } from './utils/homeScreenUtils.js';\nimport { loadLocale, loadLanguagePack } from './utils/languages.js';\nimport { consoleDebug, debugLog, consoleError, consoleWarn } from './utils/miscUtils.js';\nimport { ViewChangeReason, MessageSendSource } from '../../types/events/eventBusTypes.js';\nimport { setIntl } from './utils/intlUtils.js';\nimport { ViewType } from '../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This class contains the started instance of the Chat widget. It is created once all the dependencies\n * have been loaded such as the React components, language files and styling information. This is the public interface\n * that the host page will interact with to control the application and is what is returned after the \"start\" function\n * has been called.\n */\n/**\n * Creates an instance of the public assistant chat. This value is what is returned to the host page after the chat\n * has been started and this instance is what the host page can use to send requests and get information from the\n * widget.\n *\n * The only values that should be returned in this object are values that may be accessible to customer code.\n */\nfunction createChatInstance({ serviceManager, callRender, }) {\n    // A flag to keep track if the instance has already been rendered.\n    let wasRendered = false;\n    function getMainWindow() {\n        return {\n            addClassName: (name) => serviceManager.mainWindow?.addClassName(name),\n            removeClassName: (name) => serviceManager.mainWindow?.removeClassName(name),\n        };\n    }\n    function getMessageInput() {\n        return {\n            getHTMLElement: () => serviceManager.mainWindow?.getMessageInput()?.getHTMLElement(),\n            setValue: (value) => serviceManager.mainWindow?.getMessageInput()?.setValue(value),\n            setEnableEnterKey: (value) => serviceManager.mainWindow?.getMessageInput()?.setEnableEnterKey(value),\n            addChangeListener: (listener) => serviceManager.mainWindow\n                ?.getMessageInput()\n                ?.addChangeListener(listener),\n            removeChangeListener: (listener) => serviceManager.mainWindow\n                ?.getMessageInput()\n                ?.removeChangeListener(listener),\n        };\n    }\n    function getHomeScreenInput() {\n        return {\n            getHTMLElement: () => serviceManager.mainWindow?.getHomeScreenInput()?.getHTMLElement(),\n            setValue: (value) => serviceManager.mainWindow?.getHomeScreenInput()?.setValue(value),\n            setEnableEnterKey: (value) => serviceManager.mainWindow\n                ?.getHomeScreenInput()\n                ?.setEnableEnterKey(value),\n            addChangeListener: (listener) => serviceManager.mainWindow\n                ?.getHomeScreenInput()\n                ?.addChangeListener(listener),\n            removeChangeListener: (listener) => serviceManager.mainWindow\n                ?.getHomeScreenInput()\n                ?.removeChangeListener(listener),\n        };\n    }\n    let instance = {\n        render: () => {\n            if (wasRendered) {\n                consoleError(\"The render function has already been called!\");\n                return Promise.resolve(instance);\n            }\n            wasRendered = true;\n            return callRender();\n        },\n        on: (handlers) => {\n            serviceManager.eventBus.on(handlers);\n            return instance;\n        },\n        off: (handlers) => {\n            serviceManager.eventBus.off(handlers);\n            return instance;\n        },\n        once: (handlers) => {\n            serviceManager.eventBus.once(handlers);\n            return instance;\n        },\n        updateLanguagePack: (newPack) => {\n            debugLog(\"Called instance.updateLanguagePack\", newPack);\n            return serviceManager.actions.updateLanguagePack(newPack);\n        },\n        updateLocale: (newLocale) => {\n            debugLog(\"Called instance.updateLocale\", newLocale);\n            // Get date formatting for locale.\n            const localePromise = loadLocale(newLocale);\n            const languagePackPromise = loadLanguagePack(serviceManager.store.getState().languagePack);\n            return Promise.all([localePromise, languagePackPromise]).then(([localePack, languagePack]) => {\n                // Update Redux with new values for language, locale, and messages.\n                dayjs.locale(localePack);\n                setIntl(serviceManager, localePack.name, languagePack);\n                serviceManager.messageService.pendingLocale = true;\n                serviceManager.messageService.localeIsExplicit = true;\n            });\n        },\n        updateCSSVariables: (variables, whiteLabelVariables) => {\n            debugLog(\"Called instance.updateCSSVariables\", variables);\n            return serviceManager.actions.updateCSSVariables(variables, whiteLabelVariables);\n        },\n        send: async (message, options) => {\n            debugLog(\"Called instance.send\", message, options);\n            if (selectInputState(serviceManager.store.getState()).isReadonly) {\n                throw new Error(\"You are unable to send messages in read only mode.\");\n            }\n            return serviceManager.actions.send(message, MessageSendSource.INSTANCE_SEND, options);\n        },\n        doAutoScroll: (options = {}) => {\n            debugLog(\"Called instance.doAutoScroll\", options);\n            serviceManager.mainWindow?.doAutoScroll?.(options);\n        },\n        destroy: () => {\n            debugLog(\"Called instance.destroy\");\n            // Trigger an unmounting of all the components.\n            serviceManager.store.dispatch(actions.setAppStateValue(\"isDestroyed\", true));\n            serviceManager.container?.remove();\n            instance = undefined;\n        },\n        updateAssistantInputFieldVisibility: (isVisible) => {\n            debugLog(\"Called instance.updateAssistantInputFieldVisibility\", isVisible);\n            serviceManager.store.dispatch(actions.updateInputState({ fieldVisible: isVisible }, false));\n        },\n        updateInputIsDisabled: (isDisabled) => {\n            debugLog(\"Called instance.updateInputIsDisabled\", isDisabled);\n            serviceManager.store.dispatch(actions.updateInputState({ isReadonly: isDisabled }, false));\n        },\n        updateBotUnreadIndicatorVisibility: (isVisible) => {\n            debugLog(\"Called instance.updateBotUnreadIndicatorVisibility\", isVisible);\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"showUnreadIndicator\", isVisible));\n        },\n        changeView: async (newView) => {\n            debugLog(\"Called instance.changeView\", newView);\n            let issueWithNewView = false;\n            if (!wasRendered) {\n                consoleError(`You tried to call \"changeView\" without ever having called the \"render\" method. There is no view to change!`);\n                issueWithNewView = true;\n            }\n            const viewTypeValues = Object.values(ViewType);\n            if (typeof newView === \"string\") {\n                if (!viewTypeValues.includes(newView)) {\n                    consoleError(`You tried to change the view but the view you specified is not a valid view name. Please use` +\n                        ` the valid view names; ${viewTypeValues.join(\", \")}.`);\n                    issueWithNewView = true;\n                }\n            }\n            else if (typeof newView === \"object\") {\n                Object.keys(newView).forEach((key) => {\n                    if (!viewTypeValues.includes(key)) {\n                        // If an item in the newView object does not match any of the supported view types then log an error.\n                        consoleError(`You tried to change the state of multiple views by providing an object, however you included the key` +\n                            ` \"${key}\" within the object which is not a valid view name. Please use the valid view names; ` +\n                            `${viewTypeValues.join(\", \")}.`);\n                        issueWithNewView = true;\n                    }\n                });\n            }\n            else {\n                consoleError(\"You tried to change the view but the view you provided was not a string or an object. You can either change\" +\n                    ' to one of the supported views by providing a string, ex. \"launcher\", \"mainWindow\", or \"tour\". Or you can' +\n                    ' change the state of multiple views by providing an object, ex. { \"launcher\": true, \"mainWindow\": false,' +\n                    ' \"tour\": true }. Please use one of these supported options.');\n                issueWithNewView = true;\n            }\n            if (!issueWithNewView) {\n                // If there are no major issues then try to change the view to the newView.\n                await serviceManager.actions.changeView(newView, {\n                    viewChangeReason: ViewChangeReason.CALLED_CHANGE_VIEW,\n                });\n            }\n        },\n        addNotification: (notification) => {\n            consoleWarn(\"This method is deprecated. Please use instance.notifications.addNotification() instead.\");\n            serviceManager.actions.addNotification(notification);\n        },\n        notifications: {\n            addNotification: (notification) => {\n                debugLog(\"Called instance.addNotification\", notification);\n                serviceManager.actions.addNotification(notification);\n            },\n            removeNotifications: (groupID) => {\n                debugLog(\"Called instance.removeNotifications\", groupID);\n                serviceManager.actions.removeNotification(groupID);\n            },\n            removeAllNotifications: () => {\n                debugLog(\"Called instance.removeAllNotifications\");\n                serviceManager.actions.removeAllNotifications();\n            },\n        },\n        updateMainHeaderTitle: (title) => {\n            debugLog(\"Called instance.updateMainHeaderTitle\", title);\n            if (!title) {\n                title = null;\n            }\n            serviceManager.actions.updateMainHeaderTitle(title);\n        },\n        updateHomeScreenConfig: (homeScreenConfig) => {\n            debugLog(\"Called instance.updateHomeScreenConfig\", homeScreenConfig);\n            const homeScreenConfigClone = cloneDeep(homeScreenConfig);\n            const isAIThemeEnabled = serviceManager.store.getState().theme.useAITheme;\n            if (isAIThemeEnabled) {\n                if (homeScreenConfig?.background) {\n                    // If the AI theme is enabled and the user is trying to change the home screen background then log a warning\n                    // and ignore / remove the updates for the background. This is following the same behavior as\n                    // updateCSSVariables which logs a warning and ignores updates for variables not supported in the AI theme.\n                    consoleWarn(\"The home screen background can not be changed when the AI theme is enabled.\");\n                    delete homeScreenConfigClone.background;\n                }\n            }\n            serviceManager.actions.updateHomeScreenConfig(withoutEmptyStarters(homeScreenConfigClone));\n        },\n        getState: () => serviceManager.actions.getPublicWebChatState(),\n        writeableElements: createWriteableElementsProxy(serviceManager),\n        scrollToMessage: (messageID, animate) => {\n            debugLog(\"Called instance.scrollToMessage\", messageID, animate);\n            serviceManager.mainWindow?.doScrollToMessage(messageID, animate);\n        },\n        updateLauncherConfig: (config) => serviceManager.actions.updateLauncherConfig(config),\n        customPanels: serviceManager.customPanelManager,\n        updateCustomMenuOptions: (options) => {\n            debugLog(\"Called instance.updateCustomMenuOptions\", options);\n            serviceManager.store.dispatch(actions.setAppStateValue(\"customMenuOptions\", options));\n        },\n        restartConversation: async () => {\n            debugLog(\"Called instance.restartConversation\");\n            return serviceManager.actions.restartConversation();\n        },\n        agentEndConversation: () => {\n            debugLog(\"Called instance.agentEndConversation\");\n            consoleWarn(`The instance.agentEndConversation method is deprecated. Use instance.serviceDesk.endConversation instead.`);\n            return serviceManager.actions.agentEndConversation(false);\n        },\n        updateIsTypingCounter(direction) {\n            debugLog(\"Called instance.updateIsTypingCounter\", direction);\n            const { store } = serviceManager;\n            if (direction === \"increase\") {\n                store.dispatch(actions.addIsTypingCounter(1));\n            }\n            else if (direction === \"decrease\") {\n                if (store.getState().botMessageState.isTypingCounter <= 0) {\n                    consoleError(\"You cannot decrease the typing counter when it is already <= 0\");\n                    return;\n                }\n                store.dispatch(actions.addIsTypingCounter(-1));\n            }\n            else {\n                consoleError(`[updateIsTypingCounter] Invalid direction: ${direction}. Valid values are \"increase\" and \"decrease\".`);\n            }\n        },\n        updateIsLoadingCounter(direction) {\n            debugLog(\"Called instance.updateIsLoadingCounter\", direction);\n            const { store } = serviceManager;\n            if (direction === \"increase\") {\n                store.dispatch(actions.addIsLoadingCounter(1));\n            }\n            else if (direction === \"decrease\") {\n                if (store.getState().botMessageState.isLoadingCounter <= 0) {\n                    consoleError(\"You cannot decrease the loading counter when it is already <= 0\");\n                    return;\n                }\n                store.dispatch(actions.addIsLoadingCounter(-1));\n            }\n            else {\n                consoleError(`[updateIsLoadingCounter] Invalid direction: ${direction}. Valid values are \"increase\" and \"decrease\".`);\n            }\n        },\n        updateIsChatLoadingCounter(direction) {\n            debugLog(\"Called instance.updateIsChatLoadingCounter\", direction);\n            const { store } = serviceManager;\n            if (direction === \"increase\") {\n                store.dispatch(actions.addIsHydratingCounter(1));\n            }\n            else if (direction === \"decrease\") {\n                if (store.getState().botMessageState.isHydratingCounter <= 0) {\n                    consoleError(\"You cannot decrease the hydrating counter when it is already <= 0\");\n                    return;\n                }\n                store.dispatch(actions.addIsHydratingCounter(-1));\n            }\n            else {\n                consoleError(`[updateIsChatLoadingCounter] Invalid direction: ${direction}. Valid values are \"increase\" and \"decrease\".`);\n            }\n        },\n        updateHeaderConfig: (config) => {\n            const configCopy = cloneDeep(config);\n            serviceManager.store.dispatch(actions.updateChatHeaderConfig(configCopy));\n        },\n        updateMainHeaderAvatar: (config) => {\n            serviceManager.store.dispatch(actions.updateMainHeaderAvatar(config));\n        },\n        updateBotName: (name) => serviceManager.actions.updateBotName(name),\n        updateBotAvatarURL: (url) => serviceManager.actions.updateBotAvatarURL(url),\n        elements: {\n            getMainWindow,\n            getMessageInput,\n            getHomeScreenInput,\n        },\n        tours: {\n            startTour: async (message) => {\n                debugLog(\"Called instance.tours.startTour\", message);\n                await serviceManager.actions.send(message, MessageSendSource.START_TOUR_METHOD, { skipTourCard: true });\n            },\n            endTour: async () => {\n                debugLog(\"Called instance.tours.endTour\");\n                serviceManager.actions.endTour({\n                    viewChangeReason: ViewChangeReason.CALLED_END_TOUR,\n                });\n            },\n            goToNextStep: async () => {\n                debugLog(\"Called instance.tours.goToNextStep\");\n                serviceManager.actions.changeStepInTour({ nextStep: true });\n            },\n            goToStep: async (stepId) => {\n                debugLog(\"Called instance.tours.goToStep\", stepId);\n                serviceManager.actions.goToSpecificTourStep(stepId);\n            },\n        },\n        messaging: {\n            addMessage: (message, options = {}) => {\n                debugLog(\"Called instance.messaging.addMessage\", message, options);\n                serviceManager.messageService.messageLoadingManager.end();\n                return serviceManager.actions.receive(message, options?.isLatestWelcomeNode ?? false, null, {\n                    disableFadeAnimation: options?.disableFadeAnimation,\n                });\n            },\n            addMessageChunk: async (chunk, options = {}) => {\n                debugLog(\"Called instance.messaging.addMessageChunk\", chunk, options);\n                serviceManager.messageService.messageLoadingManager.end();\n                await serviceManager.actions.receiveChunk(chunk, null, options);\n            },\n            removeMessages: async (messageIDs) => {\n                debugLog(\"Called instance.messaging.removeMessages\", messageIDs);\n                return serviceManager.actions.removeMessages(messageIDs);\n            },\n            clearConversation: () => {\n                debugLog(\"Called instance.messaging.clearConversation\");\n                return serviceManager.actions.restartConversation({\n                    skipHydration: true,\n                    endAgentConversation: false,\n                    fireEvents: false,\n                });\n            },\n            insertHistory: (messages) => {\n                debugLog(\"Called instance.messaging.insertHistory\", messages);\n                return serviceManager.actions.insertHistory(messages);\n            },\n        },\n        requestFocus: () => {\n            debugLog(\"Called instance.requestFocus\");\n            serviceManager.appWindow?.requestFocus();\n        },\n        serviceDesk: {\n            endConversation: () => {\n                debugLog(\"Called instance.serviceDesk.endConversation\");\n                return serviceManager.actions.agentEndConversation(false);\n            },\n            updateIsSuspended: async (isSuspended) => {\n                debugLog(\"Called instance.serviceDesk.updateIsSuspended\", isSuspended);\n                return serviceManager.actions.agentUpdateIsSuspended(isSuspended);\n            },\n        },\n    };\n    if (serviceManager.store.getState().config.public.debug) {\n        consoleDebug(\"[ChatInstanceImpl] Created chat instance\", instance);\n    }\n    return instance;\n}\n/**\n * Returns a proxy object of type WriteableElements that Deb will use to send set her custom content and should only\n * fire amplitude events once.\n */\nfunction createWriteableElementsProxy(serviceManager) {\n    const elementSet = new Set();\n    const handler = {\n        get(target, element) {\n            if (!elementSet.has(element)) {\n                elementSet.add(element);\n            }\n            return target[element];\n        },\n    };\n    return new Proxy(serviceManager.writeableElements, handler);\n}\n\nexport { createChatInstance };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/* eslint-disable prefer-destructuring */\nconst NODE_ENV = \"production\";\nconst VERSION = \"0.3.3\";\n\nexport { NODE_ENV, VERSION };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * In the future we may want different types of notification messages, for example one of them will be a\n * text_notification.\n *\n * @category Config\n */\nvar NotificationType;\n(function (NotificationType) {\n    NotificationType[\"TEXT_NOTIFICATION\"] = \"text_notification\";\n})(NotificationType || (NotificationType = {}));\n// The array of timeouts that will dictate the amount of intervals the bounce animation should play for the launcher.\nconst BOUNCING_ANIMATION_TIMEOUTS = [15000, 60000];\n// The amount of time until the entrance animation is automatically triggered for either launcher.\nconst TIME_TO_ENTRANCE_ANIMATION_START = 15000;\n\nexport { BOUNCING_ANIMATION_TIMEOUTS, NotificationType, TIME_TO_ENTRANCE_ANIMATION_START };\n","import isEqual from 'lodash-es/isEqual.js';\nimport { VERSION } from '../environmentVariables.js';\nimport { NotificationType, TIME_TO_ENTRANCE_ANIMATION_START } from '../../../types/config/LauncherConfig.js';\nimport { DEFAULT_CUSTOM_PANEL_ID } from '../utils/constants.js';\nimport { deepFreeze } from '../utils/lang/objectUtils.js';\nimport '../../../types/utilities/carbonTypes.js';\nimport { CarbonTheme } from '../../../types/config/PublicConfig.js';\nimport { CornersType } from '../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Miscellaneous utilities to help in reducers.\n */\nconst DEFAULT_LAUNCHER = {\n    config: {\n        is_on: true,\n        mobile: {\n            is_on: true,\n            title: \"\",\n            time_to_expand: TIME_TO_ENTRANCE_ANIMATION_START,\n            new_expand_time: false,\n            time_to_reduce: 10000,\n            notification_type: NotificationType.TEXT_NOTIFICATION,\n        },\n        desktop: {\n            is_on: true,\n            title: \"\",\n            new_expand_time: false,\n            time_to_expand: TIME_TO_ENTRANCE_ANIMATION_START,\n            notification_type: NotificationType.TEXT_NOTIFICATION,\n        },\n    },\n};\ndeepFreeze(DEFAULT_LAUNCHER);\nconst DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS = {\n    title: null,\n    hideBackButton: false,\n    hidePanelHeader: false,\n    disableAnimation: false,\n};\ndeepFreeze(DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS);\nconst DEFAULT_CUSTOM_PANEL_STATE = {\n    isOpen: false,\n    panelID: DEFAULT_CUSTOM_PANEL_ID,\n    options: DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS,\n};\ndeepFreeze(DEFAULT_CUSTOM_PANEL_STATE);\nconst DEFAULT_IFRAME_PANEL_STATE = {\n    isOpen: false,\n    messageItem: null,\n};\ndeepFreeze(DEFAULT_IFRAME_PANEL_STATE);\nconst DEFAULT_CITATION_PANEL_STATE = {\n    isOpen: false,\n    citationItem: null,\n};\ndeepFreeze(DEFAULT_CITATION_PANEL_STATE);\nconst DEFAULT_TOUR_STATE = {\n    activeTourStepItems: null,\n};\ndeepFreeze(DEFAULT_TOUR_STATE);\nconst DEFAULT_MESSAGE_PANEL_STATE = {\n    isOpen: false,\n    localMessageItem: null,\n    isMessageForInput: false,\n};\ndeepFreeze(DEFAULT_MESSAGE_PANEL_STATE);\nconst VIEW_STATE_ALL_CLOSED = {\n    launcher: false,\n    mainWindow: false,\n    tour: false,\n};\ndeepFreeze(VIEW_STATE_ALL_CLOSED);\nconst VIEW_STATE_LAUNCHER_OPEN = {\n    launcher: true,\n    mainWindow: false,\n    tour: false,\n};\ndeepFreeze(VIEW_STATE_LAUNCHER_OPEN);\nconst VIEW_STATE_MAIN_WINDOW_OPEN = {\n    mainWindow: true,\n    launcher: false,\n    tour: false,\n};\ndeepFreeze(VIEW_STATE_MAIN_WINDOW_OPEN);\nconst DEFAULT_PERSISTED_TO_BROWSER = {\n    chatState: {\n        version: VERSION,\n        disclaimersAccepted: {},\n        homeScreenState: {\n            isHomeScreenOpen: false,\n            showBackToBot: false,\n        },\n        hasSentNonWelcomeMessage: false,\n        persistedTourState: {\n            activeTourID: null,\n            activeTourCurrentStepIndex: null,\n        },\n        agentState: {\n            isConnected: false,\n            isSuspended: false,\n            agentProfiles: {},\n        },\n    },\n    launcherState: {\n        wasLoadedFromBrowser: false,\n        version: VERSION,\n        viewState: VIEW_STATE_ALL_CLOSED,\n        activeTour: false,\n        showUnreadIndicator: false,\n        mobileLauncherIsExtended: false,\n        mobileLauncherWasReduced: false,\n        mobileLauncherDisableBounce: false,\n        desktopLauncherIsExpanded: false,\n        desktopLauncherWasMinimized: false,\n        bounceTurn: 1,\n        hasSentNonWelcomeMessage: false,\n    },\n};\ndeepFreeze(DEFAULT_PERSISTED_TO_BROWSER);\nconst DEFAULT_CHAT_MESSAGES_STATE = {\n    localMessageIDs: [],\n    messageIDs: [],\n    isTypingCounter: 0,\n    isLoadingCounter: 0,\n    isHydratingCounter: 0,\n    isScrollAnchored: false,\n};\ndeepFreeze(DEFAULT_CHAT_MESSAGES_STATE);\nconst DEFAULT_MESSAGE_STATE = {\n    allMessageItemsByID: {},\n    allMessagesByID: {},\n    botMessageState: {\n        ...DEFAULT_CHAT_MESSAGES_STATE,\n    },\n};\ndeepFreeze(DEFAULT_MESSAGE_STATE);\nconst DEFAULT_INPUT_STATE = () => ({\n    fieldVisible: true,\n    isReadonly: false,\n    files: [],\n    allowFileUploads: false,\n    allowMultipleFileUploads: false,\n    allowedFileUploadTypes: null,\n    stopStreamingButtonState: {\n        currentStreamID: null,\n        isVisible: false,\n        isDisabled: false,\n    },\n});\nconst DEFAULT_AGENT_STATE = {\n    isConnecting: false,\n    isReconnecting: false,\n    numUnreadMessages: 0,\n    fileUploadInProgress: false,\n    showScreenShareRequest: false,\n    isScreenSharing: false,\n    isAgentTyping: false,\n    inputState: DEFAULT_INPUT_STATE(),\n};\ndeepFreeze(DEFAULT_AGENT_STATE);\nconst DEFAULT_THEME_STATE = {\n    carbonTheme: CarbonTheme.G10,\n    useAITheme: false,\n    corners: CornersType.ROUND,\n};\ndeepFreeze(DEFAULT_THEME_STATE);\nconst DEFAULT_LAYOUT_STATE = {\n    showFrame: true,\n    hasContentMaxWidth: true,\n};\ndeepFreeze(DEFAULT_LAYOUT_STATE);\n/**\n * Determines the {@link AnnounceMessage} to show based on a potential change in the visibility of the widget. If the\n * widget is either opened or closed, an announcement should be made and this will set that announcement. If the state\n * of the widget hasn't changed, this will return the current announcement unchanged.\n *\n * @param previousState The previous state of the application.\n * @param newViewState Indicates the widgets new view state.\n */\nfunction calcAnnouncementForWidgetOpen(previousState, newViewState) {\n    if (isEqual(previousState.persistedToBrowserStorage.launcherState.viewState, newViewState)) {\n        // No change in the view state so return the current announcement.\n        return previousState.announceMessage;\n    }\n    // The view has changed so show the appropriate message.\n    // TODO TOUR: I18N. This will need to be updated before ga. For now the announcement only cares if the main window is\n    // opened. If the tour is opened, the announcement will be that the window is closed.\n    return {\n        messageID: newViewState.mainWindow\n            ? \"window_ariaWindowOpened\"\n            : \"window_ariaWindowClosed\",\n    };\n}\n/**\n * Returns a new state that has the {@link ChatMessagesState} modified for the given chat type with the new properties.\n * If the chat state is for a thread, then the thread that is currently being viewed will be modified.\n */\nfunction applyBotMessageState(state, newState) {\n    return {\n        ...state,\n        botMessageState: {\n            ...state.botMessageState,\n            ...newState,\n        },\n    };\n}\nfunction handleViewStateChange(state, viewState) {\n    // If the main window is opened and the page is visible, mark any unread messages as read.\n    let { agentState } = state;\n    let { showUnreadIndicator } = state.persistedToBrowserStorage.launcherState;\n    if (viewState.mainWindow && state.isBrowserPageVisible) {\n        if (agentState.numUnreadMessages !== 0) {\n            agentState = {\n                ...agentState,\n                numUnreadMessages: 0,\n            };\n        }\n        showUnreadIndicator = false;\n    }\n    return {\n        ...state,\n        announceMessage: calcAnnouncementForWidgetOpen(state, viewState),\n        agentState,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            launcherState: {\n                ...state.persistedToBrowserStorage.launcherState,\n                viewState,\n                showUnreadIndicator,\n            },\n        },\n    };\n}\nfunction setHomeScreenOpenState(state, isOpen, showBackToBot) {\n    if (showBackToBot === undefined) {\n        showBackToBot =\n            state.persistedToBrowserStorage.chatState.homeScreenState.showBackToBot;\n    }\n    return {\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                homeScreenState: {\n                    ...state.persistedToBrowserStorage.chatState.homeScreenState,\n                    isHomeScreenOpen: isOpen,\n                    showBackToBot,\n                },\n            },\n        },\n    };\n}\n/**\n * Sets the give property of the {@link LocalMessageUIState} associated with the message of the given ID to the\n * given value.\n *\n * @param state The current state to change.\n * @param localMessageID The ID of the message to update.\n * @param propertyName The name of the property to update.\n * @param propertyValue The value to set on the property.\n */\nfunction applyLocalMessageUIState(state, localMessageID, propertyName, propertyValue) {\n    const oldMessage = state.allMessageItemsByID[localMessageID];\n    if (oldMessage) {\n        return {\n            ...state,\n            allMessageItemsByID: {\n                ...state.allMessageItemsByID,\n                [localMessageID]: {\n                    ...oldMessage,\n                    ui_state: {\n                        ...oldMessage.ui_state,\n                        [propertyName]: propertyValue,\n                    },\n                },\n            },\n        };\n    }\n    return state;\n}\n/**\n * Adds the given full message to the redux store. This will add it global to the global map as well as add the\n * id to the specific chat type.\n */\nfunction applyFullMessage(state, message) {\n    // Add the original message to the global map.\n    const newState = {\n        ...state,\n        allMessagesByID: {\n            ...state.allMessagesByID,\n            [message.id]: message,\n        },\n    };\n    // Now add the full message ID to the specific ChatMessagesState but only if it's a new message.\n    if (!state.allMessagesByID[message.id]) {\n        const currentMessageIDs = state.botMessageState.messageIDs;\n        const newMessageIDs = [...currentMessageIDs, message.id];\n        return applyBotMessageState(newState, { messageIDs: newMessageIDs });\n    }\n    return newState;\n}\n\nexport { DEFAULT_AGENT_STATE, DEFAULT_CHAT_MESSAGES_STATE, DEFAULT_CITATION_PANEL_STATE, DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS, DEFAULT_CUSTOM_PANEL_STATE, DEFAULT_IFRAME_PANEL_STATE, DEFAULT_INPUT_STATE, DEFAULT_LAUNCHER, DEFAULT_LAYOUT_STATE, DEFAULT_MESSAGE_PANEL_STATE, DEFAULT_MESSAGE_STATE, DEFAULT_PERSISTED_TO_BROWSER, DEFAULT_THEME_STATE, DEFAULT_TOUR_STATE, VIEW_STATE_ALL_CLOSED, VIEW_STATE_LAUNCHER_OPEN, VIEW_STATE_MAIN_WINDOW_OPEN, applyBotMessageState, applyFullMessage, applyLocalMessageUIState, handleViewStateChange, setHomeScreenOpenState };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Denotes the type of note.\n *\n * @category Messaging\n */\nvar NoteType;\n(function (NoteType) {\n    /**\n     * Represents the history of the conversation. The only type currently used by Web chat client.\n     */\n    NoteType[\"HISTORY\"] = \"HISTORY\";\n    /**\n     * Arbitrary text or/and image to presented to the human agent.\n     */\n    NoteType[\"MESSAGE\"] = \"MESSAGE\";\n    /**\n     * An non multi-turn Answer.\n     */\n    NoteType[\"ANSWER\"] = \"ANSWER\";\n    /**\n     * A multi-turn suggestion that an agent can approve or reject.\n     */\n    NoteType[\"FLOW\"] = \"FLOW\";\n    /**\n     * An error message to be presented to the human agent.\n     */\n    NoteType[\"ERROR\"] = \"ERROR\";\n})(NoteType || (NoteType = {}));\n\nexport { NoteType };\n","import { gray100, white } from '../../../node_modules/@carbon/colors/es/index.js';\nimport Color from 'color';\nimport { consoleError } from './miscUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A set of utilities for manipulating colors.\n */\n// The minimum allowed contrast for accessibility rules.\nconst MIN_CONTRAST = 4.5;\n/**\n * Converts the given hexadecimal formatted color string into an array with the red, blue and green components\n * separated. This function requires the string to be either a 3 or 6 digit hexadecimal code with a leading hash\n * mark. It does not validate that the string is in the proper format.\n */\nfunction hexCodeToRGB(color) {\n    if (color.length === 7) {\n        const red = color.substring(1, 3);\n        const blue = color.substring(3, 5);\n        const green = color.substring(5, 7);\n        return [parseInt(red, 16), parseInt(blue, 16), parseInt(green, 16)];\n    }\n    if (color.length === 4) {\n        const red = color.substring(1, 2);\n        const blue = color.substring(2, 3);\n        const green = color.substring(3, 4);\n        return [\n            parseInt(red + red, 16),\n            parseInt(blue + blue, 16),\n            parseInt(green + green, 16),\n        ];\n    }\n    consoleError(`Unsupported color code: \"${color}\"`);\n    return [0, 0, 0];\n}\n/**\n * Calculates the contrast ratio between the two colors. Contrast values can range from 1 to 21. A value of 4.5 is\n * considered the minimum between a foreground and background color to meet accessibility guidelines.\n *\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nfunction calculateContrast(color1, color2) {\n    const rgb1 = hexCodeToRGB(color1);\n    const rgb2 = hexCodeToRGB(color2);\n    const luminance1 = calculateRelativeLuminance(rgb1);\n    const luminance2 = calculateRelativeLuminance(rgb2);\n    let contrast;\n    if (luminance1 > luminance2) {\n        contrast = (luminance1 + 0.05) / (luminance2 + 0.05);\n    }\n    else {\n        contrast = (luminance2 + 0.05) / (luminance1 + 0.05);\n    }\n    return contrast;\n}\n/**\n * Calculates the relative luminance of the given color (provided as separate RGB values).\n *\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nfunction calculateRelativeLuminance([r8, g8, b8]) {\n    const rRGB = r8 / 255;\n    const gRGB = g8 / 255;\n    const bRGB = b8 / 255;\n    const R = rRGB <= 0.03928 ? rRGB / 12.92 : ((rRGB + 0.055) / 1.055) ** 2.4;\n    const G = gRGB <= 0.03928 ? gRGB / 12.92 : ((gRGB + 0.055) / 1.055) ** 2.4;\n    const B = bRGB <= 0.03928 ? bRGB / 12.92 : ((bRGB + 0.055) / 1.055) ** 2.4;\n    const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    return luminance;\n}\n/**\n * Returns either a white or a black color to use as the text color on a background of the given background color.\n * This will ensure that the text color chosen is of sufficient contrast.\n */\nfunction whiteOrBlackText(background) {\n    return calculateContrast(gray100, background) >= MIN_CONTRAST\n        ? gray100\n        : white;\n}\n/**\n * Adjust a given color's lightness by a specified number of percentage points.\n */\nfunction adjustLightness(token, shift) {\n    const original = Color(token).hsl().object();\n    return Color({ ...original, l: original.l + shift })\n        .round()\n        .hex()\n        .toLowerCase();\n}\n\nexport { MIN_CONTRAST, adjustLightness, calculateContrast, hexCodeToRGB, whiteOrBlackText };\n","import { white, gray100, gray10, blue60, gray80 } from '../../../node_modules/@carbon/colors/es/index.js';\nimport { whiteOrBlackText, adjustLightness, calculateContrast, MIN_CONTRAST, hexCodeToRGB } from './colors.js';\nimport { WA_CONSOLE_PREFIX } from './constants.js';\nimport { CarbonTheme } from '../../../types/config/PublicConfig.js';\nimport { CarbonThemeClassNames } from '../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains utility functions to process CSS for Carbon AI chat. It deals with things like transforming Object Maps\n * of CSS variables into CSS and properly injecting default Carbon colors into CSS variables.\n */\n// The prefix that is added to each CSS variable in the application.\nconst CSS_VAR_PREFIX = \"--cds-\";\nconst CSS_CHAT_PREFIX = \"chat-\";\n// Regex to determine a 3 or 6 digit hexadecimal color\nconst HEXADECIMAL_REGEX = /#([a-f0-9]{3}){1,2}\\b/i;\n// Some carbon colors need to be overridden in order to support our theming options. Map the overrides for the light\n// themes here.\nconst INTERNAL_OVERRIDES_LIGHT_THEME_MAP = {\n    // In light themes make the quick action chat buttons black since the default link blue may not match the users theme.\n    \"$chat-button\": \"#000000\",\n    \"$chat-button-text-hover\": \"#525252\",\n};\n// Some carbon colors need to be overridden in order to support our theming options. Map the overrides for the dark\n// themes here.\nconst INTERNAL_OVERRIDES_DARK_THEME_MAP = {\n    // In dark themes make the quick action chat buttons white since the default light link blue may not match the users\n    // theme.\n    \"$chat-button\": \"#ffffff\",\n    \"$chat-button-text-hover\": \"#f4f4f4\",\n};\n/**\n * Converts the given map of CSS variable into a string that is formatted for inserting into a style tag.\n */\nfunction convertCSSVariablesToString(cssVariables) {\n    // First convert the variables to a CSS string.\n    const pieces = Object.keys(cssVariables).map((key) => {\n        const value = cssVariables[key];\n        if (value === undefined) {\n            return \"\";\n        }\n        const fullName = key.startsWith(\"$\")\n            ? `${CSS_VAR_PREFIX}${key.replace(/^\\$/, \"\")}`\n            : `${CSS_VAR_PREFIX}${CSS_CHAT_PREFIX}${key}`;\n        return `${fullName}:${value};`;\n    });\n    let cssVariablesString = \"\";\n    const allValues = pieces.join(\"\");\n    const prefix = \"\";\n    if (allValues.length > 0) {\n        // Including a namespace in the styles allows us to support multiple widgets on the same page without their styles\n        // conflicting.\n        const rule = `${prefix}.WACContainer .cds--white, ${prefix}.WACContainer .cds--g10, ${prefix}.WACContainer .cds--g90, ${prefix}.WACContainer .cds--g100`;\n        cssVariablesString = `${rule}${`, :host`}{${allValues}}`;\n    }\n    return cssVariablesString;\n}\n/**\n * This will generate a set of CSS variables that will overwrite the default values based on the customizations that\n * are specified in the given remote config.\n *\n * @param whiteLabelVariables The set of customized styles.\n * @param carbonTheme The Carbon theme that is being used.\n */\nfunction remoteStylesToCSSVars(whiteLabelVariables, carbonTheme) {\n    const cssOverrides = {};\n    const primaryColor = whiteLabelVariables[\"BASE-primary-color\"];\n    const secondaryColor = whiteLabelVariables[\"BASE-secondary-color\"];\n    const accentColor = whiteLabelVariables[\"BASE-accent-color\"];\n    if (primaryColor) {\n        cssOverrides[\"PRIMARY-color\"] = primaryColor;\n        cssOverrides[\"PRIMARY-color-text\"] = whiteOrBlackText(primaryColor);\n        cssOverrides[\"PRIMARY-color-hover\"] = adjustLightness(primaryColor, -8);\n        cssOverrides[\"PRIMARY-color-active\"] = adjustLightness(primaryColor, -10);\n        // We need to calculate the focus color for the buttons in the header. The focus color for the white and g10\n        // themes is the same as the accent color. For g90 and g100, the focus color is white.\n        const useAccentColor = accentColor || blue60;\n        const tryFocusColor = carbonTheme === CarbonTheme.G90 || carbonTheme === CarbonTheme.G100\n            ? white\n            : useAccentColor;\n        let useFocusColor;\n        if (calculateContrast(primaryColor, tryFocusColor) >= MIN_CONTRAST) {\n            // The default color works fine.\n            useFocusColor = tryFocusColor;\n        }\n        else if (tryFocusColor !== useAccentColor &&\n            calculateContrast(primaryColor, useAccentColor) >= MIN_CONTRAST) {\n            // The default doesn't work so let's try the accent.\n            useFocusColor = useAccentColor;\n        }\n        else if (tryFocusColor !== white &&\n            calculateContrast(primaryColor, white) >= MIN_CONTRAST) {\n            // The accent doesn't work, so let's try white.\n            useFocusColor = white;\n        }\n        else {\n            // If white doesn't work, then gray100 will.\n            useFocusColor = gray100;\n        }\n        if (useFocusColor !== tryFocusColor) {\n            cssOverrides[\"PRIMARY-color-focus\"] = useFocusColor;\n        }\n    }\n    if (secondaryColor) {\n        cssOverrides[\"SECONDARY-color\"] = secondaryColor;\n        cssOverrides[\"SECONDARY-color-text\"] = whiteOrBlackText(secondaryColor);\n    }\n    else if (carbonTheme === CarbonTheme.G90 ||\n        carbonTheme === CarbonTheme.G100) {\n        // We don't like the default Carbon color for the sent text bubble in the g90 and g100 color themes.\n        cssOverrides[\"SECONDARY-color\"] = `var(${CSS_VAR_PREFIX}layer-02)`;\n        cssOverrides[\"SECONDARY-color-text\"] = `var(${CSS_VAR_PREFIX}text-primary);`;\n    }\n    if (accentColor) {\n        const colorMap = ACCENT_COLOR_MAPS[carbonTheme];\n        // The custom color basically corresponds to Blue 60 are we will replace all the occurrences of Blue 60 with\n        // that custom color. For the other shades of blue, we will calculate a relative color from the custom color and\n        // replace those colors with this calculated color.\n        const accentBlue20 = adjustLightness(accentColor, 40);\n        const accentBlue60Hover = adjustLightness(accentColor, -8);\n        const accentBlue80 = adjustLightness(accentColor, -20);\n        fillValues(cssOverrides, colorMap.blue20, accentBlue20);\n        fillValues(cssOverrides, colorMap.blue60, accentColor);\n        fillValues(cssOverrides, colorMap.blue60Hover, accentBlue60Hover);\n        fillValues(cssOverrides, colorMap.blue80, accentBlue80);\n        // Update the launcher variables with the appropriate accent colors for the button states.\n        cssOverrides[\"LAUNCHER-color-background\"] = accentColor;\n        cssOverrides[\"LAUNCHER-color-background-hover\"] = accentBlue60Hover;\n        cssOverrides[\"LAUNCHER-color-background-active\"] = accentBlue80;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-background\"] = accentColor;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-hover\"] = accentBlue60Hover;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-active\"] = accentBlue80;\n        cssOverrides[\"ACCENT-color\"] = accentColor;\n        const accentColorRGB = hexCodeToRGB(accentColor);\n        cssOverrides[\"ACCENT-color-r\"] = accentColorRGB[0].toString();\n        cssOverrides[\"ACCENT-color-g\"] = accentColorRGB[1].toString();\n        cssOverrides[\"ACCENT-color-b\"] = accentColorRGB[2].toString();\n        // The ghost button text color defaults to $link-01 but since we've decided to not override $link-01, we need to\n        // change the color of the ghost button separately.\n        cssOverrides[\"ACCENT-color-ghost-text\"] = accentColor;\n        // Now figure out what font color would go with a background color that's \"Blue 60\".\n        const accentColorBW = whiteOrBlackText(accentColor);\n        cssOverrides[\"ACCENT-color-text\"] = accentColorBW;\n        cssOverrides[\"ACCENT-color-background-hover\"] = accentBlue60Hover;\n        cssOverrides[\"ACCENT-color-background-active\"] = accentBlue80;\n        // Update the launcher variables with the appropriate BW colors.\n        cssOverrides[\"LAUNCHER-color-focus-border\"] = accentColorBW;\n        cssOverrides[\"LAUNCHER-color-avatar\"] = accentColorBW;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-text\"] = accentColorBW;\n        cssOverrides[\"LAUNCHER-EXPANDED-MESSAGE-color-focus-border\"] =\n            accentColorBW;\n        cssOverrides[\"LAUNCHER-MOBILE-color-text\"] = accentColorBW;\n        // This color is either black or white and is based on the contrast difference with the accent color. Its primary use\n        // is the color of button on top of the accent color.\n        cssOverrides[\"ACCENT-color-bw\"] = accentColorBW;\n        // When ACCENT-color-bw is used as a button color we need a hover and active color.\n        cssOverrides[\"ACCENT-color-bw-hover\"] = adjustLightness(accentColorBW, -8);\n        // The active color is a little darker than the hover color.\n        cssOverrides[\"ACCENT-color-bw-active\"] = adjustLightness(accentColorBW, -10);\n        // Also need an inverse of ACCENT-color-bw so that we can have accessible text within our bw buttons.\n        cssOverrides[\"ACCENT-color-bw-inverse\"] =\n            accentColorBW === gray100 ? white : gray100;\n        // Need a slightly more gray version of the bw accent color.\n        cssOverrides[\"ACCENT-color-bw-gray\"] =\n            accentColorBW === gray100 ? gray80 : gray10;\n        // A slightly darker or lighter accent color (darker if the accent color was already dark, lighter if it was already\n        // light). Used for the launcher experiments where we only have one accent color but really need two.\n        cssOverrides[\"ACCENT-color-pastel\"] =\n            accentColorBW === gray100\n                ? adjustLightness(accentColor, 20)\n                : adjustLightness(accentColor, -15);\n    }\n    return cssOverrides;\n}\n/**\n * This structure maintains a map for each of the named colors in Carbon that are a shade of blue. When the tooling\n * specifies a custom accent color, we will replace all occurrences of Blue 60 in each of the Carbon color themes\n * with that accent color as well as appropriate adjustments of the accent color for each of the shades of blue.\n *\n * Note: to preserve the color of links as their default Carbon colors, $link-01 and $inverse-link are excluded from\n * these maps.\n */\nconst ACCENT_COLOR_MAPS = {\n    white: {\n        blue20: [\"$highlight\"],\n        blue60: [\n            \"$background-brand\",\n            \"$interactive\",\n            \"$border-interactive\",\n            \"$button-primary\",\n            \"$button-tertiary\",\n            \"$icon-interactive\",\n            \"$focus\",\n        ],\n        blue60Hover: [\"$button-primary-hover\", \"$button-tertiary-hover\"],\n        blue80: [\"$button-primary-active\", \"$button-tertiary-active\"],\n    },\n    g10: {\n        blue20: [\"$highlight\"],\n        blue60: [\n            \"$background-brand\",\n            \"$interactive\",\n            \"$border-interactive\",\n            \"$button-primary\",\n            \"$button-tertiary\",\n            \"$icon-interactive\",\n            \"$focus\",\n        ],\n        blue60Hover: [\"$button-primary-hover\", \"$button-tertiary-hover\"],\n        blue80: [\"$button-primary-active\", \"$button-tertiary-active\"],\n    },\n    g90: {\n        blue20: [],\n        blue60: [\n            \"$background-brand\",\n            \"$interactive\",\n            \"$border-interactive\",\n            \"$button-primary\",\n            \"$button-tertiary\",\n            \"$focus-inverse\",\n        ],\n        blue60Hover: [\"$button-primary-hover\", \"$button-tertiary-hover\"],\n        blue80: [\"$button-primary-active\", \"$highlight\", \"$button-tertiary-active\"],\n    },\n    g100: {\n        blue20: [],\n        blue60: [\n            \"$background-brand\",\n            \"$interactive\",\n            \"$border-interactive\",\n            \"$button-primary\",\n            \"$button-tertiary\",\n            \"$focus-inverse\",\n        ],\n        blue60Hover: [\"$button-primary-hover\", \"$button-tertiary-hover\"],\n        blue80: [\"$button-primary-active\", \"$highlight\", \"$button-tertiary-active\"],\n    },\n};\n/**\n * Sets the given value for each property of the given set of names in the given map.\n *\n * @param styles The set of styles that need to be replaced.\n * @param propertyNames The names of the styles to replace.\n * @param value The value to replace each of the styles with.\n */\nfunction fillValues(styles, propertyNames, value) {\n    propertyNames.forEach((propertyName) => {\n        styles[propertyName] = value;\n    });\n}\n/**\n * This function will merge the CSS variables from the public and remote configurations. Any variables in the public\n * configuration will override values in the remote configuration. Any values in the remote configuration that are\n * the empty string will be ignored.\n */\nfunction mergeCSSVariables(publicVars, whiteLabelVariables, carbonTheme, useAITheme) {\n    carbonTheme = carbonTheme || CarbonTheme.G10;\n    useAITheme = useAITheme || false;\n    publicVars = publicVars || {};\n    const internalOverrides = createInternalCSSOverridesMap(carbonTheme, useAITheme);\n    const result = { ...internalOverrides, ...publicVars };\n    Object.entries(result).forEach(([key, value]) => {\n        // Variables starting with \"$\" are carbon theme tokens and should all be colors\n        if (key.startsWith(\"$\") && !value.match(HEXADECIMAL_REGEX)) {\n            console.warn(`${WA_CONSOLE_PREFIX} You tried to call \"updateCSSVariables\" with an invalid value for \"${key}\": \"${publicVars[key]}\". You must use hexadecimal values for colors.`);\n            // Delete color values that are not in hexadecimal format to ensure we can use them in methods in ./colors.\n            delete result[key];\n        }\n    });\n    const remoteVars = remoteStylesToCSSVars(whiteLabelVariables || {}, carbonTheme);\n    Object.entries(remoteVars).forEach(([key, value]) => {\n        if (value !== \"\" && publicVars[key] === undefined) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\n/**\n * This function replaces the default carbon colors for some specific scss variables. After this function is called the\n * public and remote values in mergeCSSVariables can override whatever is set here.\n */\nfunction createInternalCSSOverridesMap(carbonTheme, useAITheme) {\n    let internalOverridesMap = {};\n    if (!useAITheme) {\n        // Some carbon colors need to be overridden in order to support our theming options (when the user isn't using the\n        // AI theme). For now these overrides only apply to the quick action chat buttons since their carbon default, link\n        // blue, may not match the users theme. But this could be extended to other overrides in the future.\n        if ([CarbonTheme.G10, CarbonTheme.WHITE].includes(carbonTheme)) {\n            // In light themes make the quick action chat buttons black.\n            internalOverridesMap = {\n                ...internalOverridesMap,\n                ...INTERNAL_OVERRIDES_LIGHT_THEME_MAP,\n            };\n        }\n        else if ([CarbonTheme.G90, CarbonTheme.G100].includes(carbonTheme)) {\n            // In dark themes make the quick action chat buttons white.\n            internalOverridesMap = {\n                ...internalOverridesMap,\n                ...INTERNAL_OVERRIDES_DARK_THEME_MAP,\n            };\n        }\n    }\n    return internalOverridesMap;\n}\n// Given a themeState determine which classNames should be used on the \"WACContainer--render\" element.\nfunction getThemeClassNames(themeState) {\n    let themeClassnames;\n    switch (themeState?.carbonTheme) {\n        case CarbonTheme.WHITE:\n            themeClassnames = CarbonThemeClassNames.WHITE;\n            break;\n        case CarbonTheme.G10:\n            themeClassnames = CarbonThemeClassNames.G10;\n            break;\n        case CarbonTheme.G90:\n            themeClassnames = CarbonThemeClassNames.G90;\n            break;\n        case CarbonTheme.G100:\n            themeClassnames = CarbonThemeClassNames.G100;\n            break;\n        default:\n            themeClassnames = CarbonThemeClassNames.G10;\n            break;\n    }\n    if (themeState?.useAITheme) {\n        themeClassnames += \" WAC--aiTheme\";\n    }\n    return themeClassnames;\n}\n\nexport { convertCSSVariablesToString, getThemeClassNames, mergeCSSVariables };\n","import { VIEW_STATE_ALL_CLOSED } from '../store/reducerUtils.js';\nimport { consoleError } from './miscUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Take a newView, either in string format or as a partial {@link ViewState}, and combine it with the current viewState\n * to form a complete view state that is then returned.\n */\nfunction constructViewState(newView, appState) {\n    const { viewState } = appState.persistedToBrowserStorage.launcherState;\n    // Start with the existing view state.\n    let newViewState;\n    // Depending on the type of newView go through different steps to construct a new viewState.\n    if (typeof newView === \"string\") {\n        // If the newView is of type string then set all the views to false except for the view of the provided string\n        // which should be true.\n        newViewState = { ...VIEW_STATE_ALL_CLOSED, [newView]: true };\n    }\n    else {\n        // If the newView is not a string then merge the newView with the existing viewState. This will cause any views\n        // provided in newView to overwrite the existing view state, while preserving the view state of any views not\n        // included in the newView.\n        newViewState = { ...viewState, ...newView };\n    }\n    return newViewState;\n}\n/**\n * Take a viewState and validate that it makes sense against other pieces of state. For example, we only want to show a\n * tour if there is a tour to be shown. If the validation fails then false will be returned, otherwise true will be.\n */\nfunction validateViewState(viewState, appState) {\n    const { activeTour } = appState.persistedToBrowserStorage.launcherState;\n    if (viewState.tour && !activeTour) {\n        // If the new viewState is supposed to show a tour, but there is no active tour, then log an error and return false.\n        consoleError(\"Error changing the view. The new view was supposed to show a tour however there is no active tour to show.\" +\n            \" Changing the view has been canceled.\");\n        return false;\n    }\n    return true;\n}\n\nexport { constructViewState, validateViewState };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport isEqual from 'lodash-es/isEqual.js';\nimport merge from 'lodash-es/merge.js';\nimport inputItemToLocalItem from '../schema/inputItemToLocalItem.js';\nimport { outputItemToLocalItem, createLocalMessageItemsForNestedMessageItems } from '../schema/outputItemToLocalItem.js';\nimport { AgentsOnlineStatus } from '../../../types/config/ServiceDeskConfig.js';\nimport actions from '../store/actions.js';\nimport { agentUpdateIsSuspended } from '../store/agentActions.js';\nimport { DEFAULT_PERSISTED_TO_BROWSER, VIEW_STATE_LAUNCHER_OPEN } from '../store/reducerUtils.js';\nimport '../../../types/state/AppState.js';\nimport { NoteType } from '../../../types/messaging/History.js';\nimport { arrayLastValue, asyncForEach } from '../utils/lang/arrayUtils.js';\nimport { deepFreeze } from '../utils/lang/objectUtils.js';\nimport { sleep } from '../utils/lang/promiseUtils.js';\nimport { uuid } from '../utils/lang/uuid.js';\nimport { createWelcomeRequest, isLiveAgentMessage, isRequest, createMessageRequestForText, addDefaultsToMessage, isResponse, createMessageResponseForText, isStreamCompleteItem, isStreamPartialItem, isStreamFinalResponse, renderAsUserDefinedMessage, isResponseWithNestedItems, streamItemID, isPause, isConnectToAgent, hasTourUserDefinedType, hasServiceDesk, isChannelTransferToAgent, isTyping } from '../utils/messageUtils.js';\nimport { debugLog, isEnableDebugLog, consoleError, consoleWarn, callOnError } from '../utils/miscUtils.js';\nimport { resolvablePromise } from '../utils/resolvablePromise.js';\nimport { mergeCSSVariables } from '../utils/styleUtils.js';\nimport { constructViewState, validateViewState } from '../utils/viewStateUtils.js';\nimport { MessageResponseTypes } from '../../../types/messaging/Messages.js';\nimport { BusEventType, MessageSendSource, TourStartReason, MainWindowCloseReason, ViewChangeReason, MainWindowOpenReason } from '../../../types/events/eventBusTypes.js';\nimport { OnErrorType } from '../../../types/config/PublicConfig.js';\nimport { setIntl } from '../utils/intlUtils.js';\nimport { UUIDType } from '../utils/lang/UUIDType.js';\nimport { ViewType } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst VALID_PUBLIC_VARS_IN_AI_THEME_LIST = [\n    \"BASE-height\",\n    \"BASE-max-height\",\n    \"BASE-width\",\n    \"BASE-z-index\",\n];\nconst VALID_PUBLIC_VARS_IN_AI_THEME_SET = new Set(VALID_PUBLIC_VARS_IN_AI_THEME_LIST);\nconst UPDATE_CSS_VARS_AI_THEME_WARNING_MESSAGE = `[updateCSSVariables] The AI theme is enabled and only ${VALID_PUBLIC_VARS_IN_AI_THEME_LIST.join(\", \")} can be updated.`;\n/**\n * This class is responsible for handling various \"actions\" that the system can perform including actions that can\n * be initiated by custom code running in the host page and is an implementation of the public interface to the widget.\n */\nclass ChatActionsImpl {\n    constructor(serviceManager) {\n        /**\n         * Indicates if we are currently hydrating (the Promise above is unresolved).\n         */\n        this.hydrating = false;\n        /**\n         * Indicates if a restart is currently in progress.\n         */\n        this.restarting = false;\n        /**\n         * Indicates if Carbon AI chat has been hydrated at least once. This is used when a rehydration occurs so that we avoid\n         * performing certain operations more than once.\n         */\n        this.alreadyHydrated = false;\n        /**\n         * Queue of received chunks.\n         */\n        this.chunkQueue = [];\n        this.serviceManager = serviceManager;\n    }\n    /**\n     * Fetch welcome node and (if applicable) history store.\n     *\n     * @param alternateWelcomeRequest Indicates if a different message should be used as a message requesting the\n     * welcome node. This message behaves a little differently from the welcome node in that it's assumed that this\n     * message is actively needed. It will bypass the home screen if it is enabled and it was always append this\n     * message to the end of any session history that is retrieved.\n     * @param alternateWelcomeRequestSource The source of the alternate welcome message.\n     * @param alternateOptions The send to send along with the alternate welcome request.\n     */\n    async hydrateChat(alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions) {\n        // Make sure we only fire this event once after the thread that actually does the hydration is finished.\n        let fireReady = false;\n        try {\n            if (!this.hydrationPromise) {\n                this.hydrating = true;\n                this.hydrationPromise = this.doHydrateChat(alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions);\n                fireReady = true;\n            }\n            await this.hydrationPromise;\n        }\n        finally {\n            this.hydrating = false;\n        }\n        if (fireReady) {\n            await this.serviceManager.fire({ type: BusEventType.CHAT_READY });\n        }\n    }\n    /**\n     * Fetch welcome node and (if applicable) history.\n     *\n     * @param alternateWelcomeRequest Indicates if a different message should be used as a message requesting the\n     * welcome node. This message behaves a little differently from the welcome node in that it's assumed that this\n     * message is actively needed. It will bypass the home screen if it is enabled and it was always append this\n     * message to the end of any session history that is retrieved.\n     * @param alternateWelcomeRequestSource The source of the alternate welcome message.\n     * @param alternateOptions The options to send along with the alternate welcome request.\n     */\n    async doHydrateChat(alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions) {\n        debugLog(\"Hydrating Carbon AI chat\", alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions);\n        // Load the history and main config but only if it's the first time we are hydrating.\n        let history;\n        const { serviceManager } = this;\n        serviceManager.store.dispatch(actions.addIsHydratingCounter(1));\n        if (!this.alreadyHydrated) {\n            history = await this.serviceManager.historyService.loadHistory();\n            if (serviceManager.humanAgentService) {\n                // Once we've got the main config which contains the details for connecting to a service desk, we can\n                // initialize the human agent service.\n                debugLog(\"Initializing the human agent service\");\n                await serviceManager.humanAgentService.initialize();\n            }\n            else {\n                debugLog(\"No service desk integrations present\");\n            }\n        }\n        const { config } = serviceManager.store.getState();\n        if (!history) {\n            if (!alternateWelcomeRequest) {\n                const state = serviceManager.store.getState();\n                if (state.homeScreenConfig?.is_on) {\n                    // If no history was loaded, there are no messages already sent, and there is a home screen,\n                    // then we need to show the home screen.\n                    serviceManager.store.dispatch(actions.setHomeScreenIsOpen(true));\n                }\n                else if (!config.public.messaging?.skipWelcome) {\n                    // If no history was loaded, there are no messages already sent, and there is no home screen, then we need\n                    // to fetch the welcome node. We use returnBeforeStreaming to ensure that we don't get stuck in the\n                    // loading state if the welcome message happens to return a streaming response.\n                    await serviceManager.actions.send(createWelcomeRequest(), MessageSendSource.WELCOME_REQUEST, { returnBeforeStreaming: true }, true);\n                }\n            }\n        }\n        else {\n            // Need to populate the history in redux (specifically botMessageState) before creating elements for custom\n            // responses. createElementsForUserDefinedResponse() fires a userDefinedResponse event where users may choose\n            // to call instance.updateHistoryUserDefined(messageID, data). That instance function will fail to save user\n            // data if the messageID provided can't be found in the botMessageState array. So we need to hydrate that\n            // state before firing userDefinedResponse events.\n            serviceManager.store.dispatch(actions.hydrateMessageHistory(history.messageHistory));\n            await this.createElementsForUserDefinedResponses(history.messageHistory);\n            // If the latest message is a panel response type, we should open it.\n            if (history.latestPanelLocalMessageItem) {\n                this.openResponsePanel(history.latestPanelLocalMessageItem, true);\n            }\n        }\n        if (alternateWelcomeRequest) {\n            // If there was an alternate welcome request, we always want to send it and bypass the home screen.\n            serviceManager.store.dispatch(actions.setHomeScreenIsOpen(false));\n            await serviceManager.actions.send(alternateWelcomeRequest, alternateWelcomeRequestSource, alternateOptions, true);\n        }\n        // After both history and welcome are loaded indicate we've got everything.\n        serviceManager.store.dispatch(actions.chatWasHydrated());\n        serviceManager.store.dispatch(actions.addIsHydratingCounter(-1));\n        if (history) {\n            const lastMessageID = arrayLastValue(history.messageHistory.botMessageState.localMessageIDs);\n            const lastMessage = history.messageHistory.allMessageItemsByID[lastMessageID];\n            const lastOriginalMessage = history.messageHistory.allMessagesByID[lastMessage?.fullMessageID];\n            if (!isLiveAgentMessage(lastMessage) && isRequest(lastOriginalMessage)) {\n                // If the last message in history is a request that means that the user left the page before we received the\n                // response and the response is actually still being calculated. In this case we want to \"reconnect\" to the\n                // back-end so that we can receive the response when it becomes available. To do that all we have to do is\n                // resend the original request. But we don't want the resend to appear in the message list (because it is\n                // already there).\n                serviceManager.messageService.resendMessage(lastOriginalMessage, lastMessage.ui_state.id);\n            }\n        }\n        // Note, we're not waiting for the human agent service to handle the hydration. It may start an asynchronous\n        // process to reconnect the user to an agent but that is considered separate from the main hydration.\n        const allowReconnect = config.public.serviceDesk.allowReconnect ?? true;\n        this.serviceManager?.humanAgentService?.handleHydration(allowReconnect, Boolean(history));\n        this.alreadyHydrated = true;\n    }\n    getPublicWebChatState() {\n        const state = this.serviceManager.store.getState();\n        const { persistedToBrowserStorage } = state;\n        const { chatState, launcherState } = persistedToBrowserStorage;\n        const publicWebChatState = {\n            isConnectedWithHumanAgent: chatState.agentState.isConnected,\n            isWebChatOpen: launcherState.viewState.mainWindow,\n            isConnectingWithHumanAgent: state.agentState.isConnecting,\n            isHomeScreenOpen: chatState.homeScreenState.isHomeScreenOpen,\n            isDebugEnabled: isEnableDebugLog(),\n            hasUserSentMessage: chatState.hasSentNonWelcomeMessage,\n            isTourActive: launcherState.activeTour,\n            viewState: { ...launcherState.viewState },\n            serviceDesk: {\n                isConnected: chatState.agentState.isConnected,\n                isConnecting: state.agentState.isConnecting,\n                isSuspended: chatState.agentState.isSuspended ?? false,\n            },\n            locale: this.serviceManager.store.getState().locale,\n            intl: this.serviceManager.intl,\n        };\n        return publicWebChatState;\n    }\n    /**\n     * Calls the send function but catches any errors and logs them to avoid us having any uncaught exceptions thrown\n     * to the browser.\n     */\n    async sendWithCatch(message, source, options = {}, ignoreHydration = false) {\n        try {\n            await this.send(message, source, options, ignoreHydration);\n        }\n        catch (error) {\n            consoleError(\"An error occurred sending the message\", error);\n        }\n    }\n    /**\n     * Sends the given message to the assistant on the remote server. This will result in a \"pre:send\" and \"send\" event\n     * being fired on the event bus. The returned promise will resolve once a response has received and processed and\n     * both the \"pre:receive\" and \"receive\" events have fired. It will reject when too many errors have occurred and\n     * the system gives up retrying.\n     *\n     * @param message The message to send.\n     * @param source The source of the message.\n     * @param options Options for the sent message.\n     * @param ignoreHydration Indicates if this function should not check to see if the Carbon AI chat is hydrated before\n     * performing send.\n     */\n    async send(message, source, options = {}, ignoreHydration = false) {\n        const messageRequest = typeof message === \"string\"\n            ? createMessageRequestForText(message)\n            : message;\n        // If the home screen is open, we want to close it as soon as a message is sent. Note that this will also apply\n        // if the Carbon AI chat hasn't been opened yet.\n        if (this.serviceManager.store.getState().persistedToBrowserStorage.chatState\n            .homeScreenState.isHomeScreenOpen) {\n            this.serviceManager.store.dispatch(actions.setHomeScreenIsOpen(false));\n        }\n        // If the response panel is open, it should be closed on every message sent.\n        if (this.serviceManager.store.getState().responsePanelState.isOpen) {\n            this.serviceManager.store.dispatch(actions.setResponsePanelIsOpen(false));\n        }\n        if (this.hydrationPromise || ignoreHydration) {\n            if (!ignoreHydration) {\n                // If hydration has already started, then make sure to wait for it to finish.\n                await this.hydrationPromise;\n            }\n            await this.doSend(messageRequest, source, options);\n        }\n        else {\n            // If no hydration has started, then we need to start the hydration and use this message as the alternate for\n            // the welcome node.\n            await this.hydrateChat(messageRequest, source, options);\n        }\n    }\n    /**\n     * Sends the given message to the assistant on the remote server. This will result in a \"pre:send\" and \"send\" event\n     * being fired on the event bus. The returned promise will resolve once a response has received and processed and\n     * both the \"pre:receive\" and \"receive\" events have fired. It will reject when too many errors have occurred and\n     * the system gives up retrying.\n     *\n     * @param message The message to send.\n     * @param source The source of the message.\n     * @param options Options for sending the message.\n     */\n    async doSend(message, source, options = {}) {\n        const { store } = this.serviceManager;\n        addDefaultsToMessage(message);\n        // Grab the original text before it can be modified by a pre:send handler.\n        const originalUserText = message.history?.label || message.input.text;\n        // If the options object instructs us to create a silent message, update the history object to respect the silent\n        // setting. This means that the message will not show in the UI, but will be sent to the API.\n        if (options.silent) {\n            message.history.silent = true;\n        }\n        const localMessage = inputItemToLocalItem(message, originalUserText);\n        // If history.silent is set to true, we don't add the message to the redux store as we do not want to show it.\n        // Likewise, in schema/historyToMessages, if the message is coming from the history store, we do not add it to redux\n        // either.\n        if (!message.history.silent) {\n            store.dispatch(actions.addLocalMessageItem(localMessage, message, true));\n        }\n        else {\n            store.dispatch(actions.addMessage(message));\n        }\n        // This message is coming from an option/suggestion response type, and we need to let the previous message that\n        // displayed the options which item should be marked in state as selected.\n        if (options.setValueSelectedForMessageID) {\n            store.dispatch(actions.messageSetOptionSelected(options.setValueSelectedForMessageID, message));\n        }\n        // Now freeze the message so nobody can mess with it since that object came from outside. We'll then create a\n        // clone of this message so that it may be modifiable by a pre:send listener when the message is ready to be\n        // sent (which may happen later if other messages are in the queue). We'll have to replace our store object once\n        // that happens.\n        deepFreeze(message);\n        await this.serviceManager.messageService.send(cloneDeep(message), source, localMessage.ui_state.id, options);\n    }\n    /**\n     * Instructs the widget to process the given message as an incoming message received from the assistant. This will\n     * fire a \"pre:receive\" event immediately and a \"receive\" event after the event has been processed by the widget.\n     * This method completes when all message items have been processed (including the time delay that may be introduced\n     * by a pause).\n     *\n     * @param message A v2 message API Response object.\n     * @param isLatestWelcomeNode Indicates if this message is a new welcome message that has just been shown to the user\n     * and isn't a historical welcome message.\n     * @param requestMessage The optional {@link MessageRequest} that this response is a response to.\n     * @param requestOptions The options that were included when the request was sent.\n     */\n    async receive(message, isLatestWelcomeNode = false, requestMessage, requestOptions) {\n        const { restartCount: initialRestartCount } = this.serviceManager;\n        // Received messages should be given an id if they don't have one.\n        if (!message.id) {\n            message.id = uuid(UUIDType.MESSAGE);\n        }\n        const preReceiveEvent = {\n            type: BusEventType.PRE_RECEIVE,\n            data: message,\n        };\n        // Fire the pre:receive event. User code is allowed to modify the message at this point.\n        await this.serviceManager.fire(preReceiveEvent);\n        if (initialRestartCount !== this.serviceManager.restartCount) {\n            // If a restart occurred during the await above, we need to exit.\n            return;\n        }\n        if (!isLatestWelcomeNode) {\n            this.serviceManager.store.dispatch(actions.updateHasSentNonWelcomeMessage(true));\n        }\n        if (initialRestartCount !== this.serviceManager.restartCount) {\n            // If a restart occurred during the await above, we need to exit.\n            return;\n        }\n        const { languagePack } = this.serviceManager.store.getState();\n        if (isResponse(message)) {\n            // Even though processMessageResponse is an async function we do not await it in case a pause response type is\n            // being processed. If we waited for the function to finished when a pause response type is being processed there\n            // would be a pause before firing the receive event lower down, which would be incorrect since we have actually\n            // received the event.\n            this.processMessageResponse(message, isLatestWelcomeNode, requestMessage, false, requestOptions).catch((error) => {\n                consoleError(\"Error processing the message response\", error);\n            });\n        }\n        else {\n            const inlineError = createMessageResponseForText(languagePack.errors_singleMessage, message.thread_id, MessageResponseTypes.INLINE_ERROR);\n            this.receive(inlineError, false);\n        }\n        // Now freeze the message so nobody can mess with it since that object came from outside.\n        deepFreeze(message);\n        // Don't fire with the cloned message since we don't want to let anyone mess with it.\n        await this.serviceManager.fire({\n            type: BusEventType.RECEIVE,\n            data: message,\n        });\n    }\n    /**\n     * Removes the messages with the given IDs from the chat view.\n     */\n    async removeMessages(messageIDs) {\n        this.serviceManager.store.dispatch(actions.removeMessages(messageIDs));\n    }\n    /**\n     * Inserts the given messages into the chat window as part of the chat history. This will fire the history:begin\n     * and history:end events.\n     */\n    async insertHistory(messages) {\n        // Note: there is currently a gap here. If this is called with a partial list of messages that include\n        // \"update_history\" event messages to add updates to messages not also in this list, then they will not update\n        // correctly. I'm going to wait to see how this functionality shakes out and see if this is really going to end\n        // up being necessary.\n        // If we're inserting more history into a chat that already has messages, we want to preserve the relative\n        // scroll position of the existing messages from the bottom.\n        const scrollBottom = this.serviceManager.mainWindow?.getMessagesScrollBottom();\n        const state = this.serviceManager.store.getState();\n        // TODO: This doesn't work right if this is called more than once.\n        const notes = {\n            notes: [{ type: NoteType.HISTORY, body: messages }],\n        };\n        const history = await this.serviceManager.historyService.loadHistory(notes);\n        // Merge the existing state on top of the new state (with the current state taking precedence over anything\n        // that that's in the inserted state).\n        const currentAppStateMessages = {\n            allMessageItemsByID: state.allMessageItemsByID,\n            allMessagesByID: state.allMessagesByID,\n            botMessageState: state.botMessageState,\n        };\n        const newAppStateMessages = merge({}, history.messageHistory, currentAppStateMessages);\n        // Now make sure the message arrays are merged correctly.\n        newAppStateMessages.botMessageState.messageIDs = [\n            ...history.messageHistory.botMessageState.messageIDs,\n            ...currentAppStateMessages.botMessageState.messageIDs,\n        ];\n        newAppStateMessages.botMessageState.localMessageIDs = [\n            ...history.messageHistory.botMessageState.localMessageIDs,\n            ...currentAppStateMessages.botMessageState.localMessageIDs,\n        ];\n        this.serviceManager.store.dispatch(actions.hydrateMessageHistory(newAppStateMessages));\n        await this.createElementsForUserDefinedResponses(history.messageHistory);\n        // Restore the scroll position.\n        this.serviceManager.mainWindow?.doAutoScroll({\n            scrollToBottom: scrollBottom,\n        });\n    }\n    /**\n     * Receives a chunk from a stream.\n     */\n    async receiveChunk(chunk, messageID, options = {}) {\n        const chunkPromise = resolvablePromise();\n        this.chunkQueue.push({ chunk, messageID, options, chunkPromise });\n        if (this.chunkQueue.length === 1) {\n            this.processChunkQueue();\n        }\n        return chunkPromise;\n    }\n    async processChunkQueue() {\n        const { chunk, options, chunkPromise } = this.chunkQueue[0];\n        let { messageID } = this.chunkQueue[0];\n        const isCompleteItem = isStreamCompleteItem(chunk);\n        const isPartialItem = isStreamPartialItem(chunk);\n        const { store } = this.serviceManager;\n        const isStopGeneratingVisible = store.getState().botInputState.stopStreamingButtonState.isVisible;\n        if (isPartialItem) {\n            const streamingData = chunk.partial_item.streaming_metadata;\n            if (streamingData.cancellable && !isStopGeneratingVisible) {\n                store.dispatch(actions.setStopStreamingButtonVisible(true));\n            }\n        }\n        if (isCompleteItem || isPartialItem) {\n            if (!messageID) {\n                messageID = chunk.streaming_metadata.response_id;\n            }\n            if (!store.getState().allMessagesByID[messageID]) {\n                store.dispatch(actions.streamingStart(messageID));\n            }\n            const item = chunk.partial_item ||\n                chunk.complete_item;\n            store.dispatch(actions.streamingAddChunk(messageID, item, isCompleteItem, options.disableFadeAnimation ?? true));\n            if (chunk.partial_response?.history) {\n                if (Object.keys(chunk.partial_response).length > 1) {\n                    throw new Error(`The partial_response object only supports the \"history\" property.`);\n                }\n                store.dispatch(actions.streamingMergeHistory(messageID, chunk.partial_response?.history));\n            }\n            // Now make sure to handle any user_defined response items in the chunk.\n            await this.handleUserDefinedResponseItemsChunk(messageID, chunk, item);\n        }\n        else if (isStreamFinalResponse(chunk)) {\n            // Note that while this function is called from the streaming handler in the MessageService, the final_response\n            // path here is not taken. The MessageService uses the processSuccess path instead after the stream is\n            // complete. This path is only taken by custom code calling the public receiveChunk method.\n            this.receive(chunk.final_response, options.isLatestWelcomeNode, null, {\n                disableFadeAnimation: true,\n            });\n        }\n        if ((isCompleteItem || isStreamFinalResponse(chunk)) &&\n            isStopGeneratingVisible) {\n            // Once a complete or final response is received, reset the visible and disabled states for the \"stop streaming\"\n            // button.\n            store.dispatch(actions.setStopStreamingButtonDisabled(false));\n            store.dispatch(actions.setStopStreamingButtonVisible(false));\n        }\n        this.chunkQueue.shift();\n        chunkPromise.doResolve();\n        if (this.chunkQueue[0]) {\n            this.processChunkQueue();\n        }\n    }\n    /**\n     * Creates the HTML element for a user defined response and adds it to the registry (if it does not already exist).\n     */\n    getOrCreateUserDefinedElement(messageItemID) {\n        let userDefinedItem = this.serviceManager.userDefinedElementRegistry.get(messageItemID);\n        if (!userDefinedItem) {\n            userDefinedItem = {\n                element: document.createElement(\"div\"),\n                slotName: `slot-user-defined-${uuid()}`,\n            };\n            userDefinedItem.element.setAttribute(\"slot\", userDefinedItem.slotName);\n            this.serviceManager.userDefinedElementRegistry.set(messageItemID, userDefinedItem);\n        }\n        return userDefinedItem;\n    }\n    /**\n     * If the given message should be rendered as a user defined message, this will create a host element for the message\n     * and fire the {@link BusEventType.USER_DEFINED_RESPONSE} event so that the event listeners can attach whatever they\n     * want to the host element.\n     */\n    async handleUserDefinedResponseItems(localMessage, originalMessage) {\n        if (renderAsUserDefinedMessage(localMessage.item)) {\n            let element;\n            let slotName;\n            if (!localMessage.item.user_defined?.silent) {\n                // If the message is silent, don't create a host element for it since it's not going to be rendered.\n                ({ element, slotName } = this.getOrCreateUserDefinedElement(localMessage.ui_state.id));\n            }\n            const userDefinedResponseEvent = {\n                type: BusEventType.USER_DEFINED_RESPONSE,\n                data: {\n                    message: localMessage.item,\n                    fullMessage: originalMessage,\n                    element,\n                    slot: slotName,\n                    fullWidth: false,\n                },\n            };\n            await this.serviceManager.fire(userDefinedResponseEvent);\n            if (userDefinedResponseEvent.data.fullWidth) {\n                this.serviceManager.store.dispatch(actions.setMessageUIProperty(localMessage.ui_state.id, \"fullWidth\", true));\n            }\n        }\n        else if (isResponseWithNestedItems(localMessage.item)) {\n            const { itemsLocalMessageItemIDs, bodyLocalMessageItemIDs, footerLocalMessageItemIDs, gridLocalMessageItemIDs, } = localMessage.ui_state;\n            const { allMessageItemsByID } = this.serviceManager.store.getState();\n            /**\n             * Will attempt to create an element for the custom response using the provided local message id.\n             */\n            const createElementForNestedUserDefinedResponse = (localMessageItemID) => {\n                const nestedLocalMessage = allMessageItemsByID[localMessageItemID];\n                return this.handleUserDefinedResponseItems(nestedLocalMessage, originalMessage);\n            };\n            if (gridLocalMessageItemIDs?.length) {\n                await asyncForEach(gridLocalMessageItemIDs, (row) => asyncForEach(row, (cell) => asyncForEach(cell, (itemID) => createElementForNestedUserDefinedResponse(itemID))));\n            }\n            if (itemsLocalMessageItemIDs?.length) {\n                await asyncForEach(itemsLocalMessageItemIDs, createElementForNestedUserDefinedResponse);\n            }\n            if (bodyLocalMessageItemIDs?.length) {\n                await asyncForEach(bodyLocalMessageItemIDs, createElementForNestedUserDefinedResponse);\n            }\n            if (footerLocalMessageItemIDs?.length) {\n                await asyncForEach(footerLocalMessageItemIDs, createElementForNestedUserDefinedResponse);\n            }\n        }\n    }\n    /**\n     * If the given message should be rendered as a user defined message, this will create a host element for the message\n     * and fire the {@link BusEventType.CHUNK_USER_DEFINED_RESPONSE} event so that the event listeners can attach whatever\n     * they want to the host element.\n     *\n     * Note, this function does not currently support nested items inside the chunk.\n     */\n    async handleUserDefinedResponseItemsChunk(messageID, chunk, messageItem) {\n        if (renderAsUserDefinedMessage(messageItem)) {\n            const { store } = this.serviceManager;\n            const itemID = streamItemID(messageID, messageItem);\n            let element;\n            let slotName;\n            if (!messageItem.user_defined?.silent) {\n                // If the message is silent, don't create a host element for it since it's not going to be rendered.\n                ({ element, slotName } = this.getOrCreateUserDefinedElement(itemID));\n            }\n            const userDefinedResponseEvent = {\n                type: BusEventType.CHUNK_USER_DEFINED_RESPONSE,\n                data: {\n                    messageItem,\n                    chunk,\n                    element,\n                    slot: slotName,\n                    fullWidth: false,\n                },\n            };\n            await this.serviceManager.fire(userDefinedResponseEvent);\n            if (store.getState().allMessageItemsByID[itemID].ui_state.fullWidth !==\n                userDefinedResponseEvent.data.fullWidth) {\n                store.dispatch(actions.setMessageUIProperty(itemID, \"fullWidth\", userDefinedResponseEvent.data.fullWidth));\n            }\n        }\n    }\n    /**\n     * Takes each item in the appropriate output array and dispatches correct actions. We may want to look into\n     * turning this into a formal queue as the pause response_type may cause us to lose correct order in fast\n     * conversations.\n     *\n     * @param fullMessage A v2 message API Response object.\n     * @param isLatestWelcomeNode If it is a new welcome node, we want to pass that data along.\n     * @param requestMessage The optional {@link MessageRequest} that this response is a response to.\n     * @param isProvidedFromTransfer Indicates that the message was provided from a channel transfer.\n     * @param requestOptions The options that were included when the request was sent.\n     */\n    async processMessageResponse(fullMessage, isLatestWelcomeNode, requestMessage, isProvidedFromTransfer, requestOptions = {}) {\n        const { store } = this.serviceManager;\n        const { config } = store.getState();\n        const initialRestartCount = this.serviceManager.restartCount;\n        const output = fullMessage.output.generic;\n        fullMessage.request_id = requestMessage?.id;\n        addDefaultsToMessage(fullMessage);\n        store.dispatch(actions.addMessage(fullMessage));\n        // The ID of the previous (visible) message item that was added to the store. When adding new items from the\n        // response, this is used to ensure that each item is added in the right position.\n        let previousItemID = null;\n        // Need a regular for loop to allow for the await below.\n        for (let index = 0; index < output.length &&\n            initialRestartCount === this.serviceManager.restartCount; index++) {\n            const messageItem = output[index];\n            if (messageItem) {\n                const pause = isPause(messageItem);\n                const agent = isConnectToAgent(messageItem);\n                const tour = hasTourUserDefinedType(messageItem);\n                const localMessageItem = outputItemToLocalItem(messageItem, fullMessage, isLatestWelcomeNode, requestOptions.disableFadeAnimation);\n                // If the message item is a tour and the tour card is supposed to be skipped then start the tour now.\n                if (tour &&\n                    (requestOptions.skipTourCard || messageItem.user_defined?.skip_card)) {\n                    // Determine the reason the tour is starting. If the startTour method was used and skip_card is true then the\n                    // method being used will take priority.\n                    const startTourReason = requestOptions.skipTourCard\n                        ? TourStartReason.START_TOUR_METHOD\n                        : TourStartReason.SKIP_CARD;\n                    // Determine the reason the view is changing.\n                    const { viewState } = store.getState().persistedToBrowserStorage.launcherState;\n                    if (viewState.mainWindow) {\n                        // If the mainWindow is visible then use the MainWindowCloseReasons and fire the window:close events. If the\n                        // startTour method was used and skip_card is true then the method being used will take priority.\n                        const mainWindowCloseReason = requestOptions.skipTourCard\n                            ? MainWindowCloseReason.CALLED_START_TOUR\n                            : MainWindowCloseReason.TOUR_SKIP_CARD;\n                        // No need to await startTour() here since there is nothing else in this function that is dependent on\n                        // startTours completion.\n                        this.startTour(localMessageItem, startTourReason, {\n                            mainWindowCloseReason,\n                        }).catch((error) => {\n                            consoleError(\"Error starting the tour\", error);\n                        });\n                    }\n                    else {\n                        // If the mainWindow is not visible then use the ViewChangeReasons and do not fire the window:close events.\n                        // If the startTour method was used and skip_card is true then the method being used will take priority.\n                        const viewChangeReason = requestOptions.skipTourCard\n                            ? ViewChangeReason.CALLED_START_TOUR\n                            : ViewChangeReason.TOUR_SKIP_CARD;\n                        // No need to await startTour() here since there is nothing else in this function that is dependent on\n                        // startTours completion.\n                        this.startTour(localMessageItem, startTourReason, {\n                            viewChangeReason,\n                        }).catch((error) => {\n                            consoleError(\"Error starting the tour\", error);\n                        });\n                    }\n                }\n                else if (!tour && requestOptions.skipTourCard) {\n                    // If instance.startTour() was used but a tour response was not received then log an error.\n                    consoleError(\"The message response received was not a tour, so the tour card was not skipped nor was a tour started by the startTour() call.\");\n                }\n                const nestedLocalMessageItems = [];\n                createLocalMessageItemsForNestedMessageItems(localMessageItem, fullMessage, false, nestedLocalMessageItems, true);\n                store.dispatch(actions.addNestedMessages(nestedLocalMessageItems));\n                if (agent && isResponse(fullMessage)) {\n                    // For the \"connect_to_agent\" response, we need to determine the agents' availability before we can\n                    // continue to process the message items. Let's increment the typing counter while we're waiting for a\n                    // result from areAnyAgentsOnline.\n                    store.dispatch(actions.addIsTypingCounter(1));\n                    // Determine if the CTA card should display a service desk error.\n                    if (!hasServiceDesk(config)) {\n                        // Report this error.\n                        const message = 'Web chat received a \"connect_to_agent\" message but there is no service desk configured. Check your chat configuration.';\n                        this.errorOccurred({\n                            errorType: OnErrorType.INTEGRATION_ERROR,\n                            message,\n                        });\n                        // Make sure this state is reflected in history.\n                        store.dispatch(actions.setMessageHistoryProperty(localMessageItem.fullMessageID, \"agent_no_service_desk\", true));\n                    }\n                    // eslint-disable-next-line no-await-in-loop\n                    const agentAvailability = await this.serviceManager.humanAgentService?.checkAreAnyAgentsOnline(fullMessage);\n                    // If a restart occurred while waiting for the agents online check, then skip the processing below.\n                    if (initialRestartCount === this.serviceManager.restartCount) {\n                        // Update the value in the redux store.\n                        store.dispatch(actions.setMessageHistoryProperty(localMessageItem.fullMessageID, \"agent_availability\", agentAvailability));\n                        let shouldAutoRequestAgent = false;\n                        // If this transfer to agent message was provided from a transfer, the agent card should make an auto request\n                        // on behalf of the user. It's possible to receive a transfer to agent response from Carbon AI chat if the response\n                        // types are not provided the \"channels\" attribute, so this check exists to make sure we only add\n                        // shouldAutoRequestAgent if the agent response was provided from a transfer as opposed to a regular message\n                        // request.\n                        if (isProvidedFromTransfer) {\n                            shouldAutoRequestAgent = isChannelTransferToAgent(fullMessage);\n                        }\n                        // If configured, then auto-connect right now.\n                        if (config.public.serviceDesk?.skipConnectAgentCard) {\n                            shouldAutoRequestAgent = true;\n                        }\n                        // Decrement the typing counter to get rid of the pause.\n                        store.dispatch(actions.addIsTypingCounter(-1));\n                        if (shouldAutoRequestAgent &&\n                            agentAvailability === AgentsOnlineStatus.ONLINE) {\n                            this.serviceManager.humanAgentService.startChat(localMessageItem, fullMessage);\n                        }\n                    }\n                }\n                if (pause) {\n                    const showIsTyping = isTyping(messageItem);\n                    if (showIsTyping) {\n                        store.dispatch(actions.addIsTypingCounter(1));\n                    }\n                    // If this message is a pause, then just sleep for the pause duration before continuing. We don't actually\n                    // render anything for this message since it's really an instruction so we won't create a LocalMessage for\n                    // it and it won't be added to the redux store.\n                    // eslint-disable-next-line no-await-in-loop\n                    await sleep(messageItem.time);\n                    if (showIsTyping &&\n                        initialRestartCount === this.serviceManager.restartCount) {\n                        store.dispatch(actions.addIsTypingCounter(-1));\n                    }\n                }\n                else {\n                    // In order to ensure that the addMessages get called in correct order, we need to add an `await` here to\n                    // pause further processing until this one is sent.\n                    // eslint-disable-next-line no-await-in-loop\n                    await this.handleUserDefinedResponseItems(localMessageItem, fullMessage);\n                    if (!localMessageItem.item.user_defined?.silent &&\n                        initialRestartCount === this.serviceManager.restartCount) {\n                        this.serviceManager.store.dispatch(actions.addLocalMessageItem(localMessageItem, fullMessage, false, previousItemID));\n                        previousItemID = localMessageItem.ui_state.id;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Opens the response panel using the provided local message item to render the content in the panel.\n     */\n    openResponsePanel(localMessageItem, isMessageForInput) {\n        this.serviceManager.store.dispatch(actions.setResponsePanelContent(localMessageItem, isMessageForInput));\n        this.serviceManager.store.dispatch(actions.setResponsePanelIsOpen(true));\n    }\n    /**\n     * Inserts a locally created {@link MessageResponse} message into the message system.\n     */\n    async insertLocalMessageResponse(message) {\n        message.id = uuid(UUIDType.MESSAGE);\n        await this.processMessageResponse(message, false, null, false, {});\n    }\n    /**\n     * Updates the language pack in use by the widget. This will merge in the provided language pack with the existing\n     * one, leaving any missing keys unchanged.\n     */\n    updateLanguagePack(changes) {\n        const { languagePack, locale } = this.serviceManager.store.getState();\n        const messages = {\n            ...languagePack,\n            ...changes,\n        };\n        setIntl(this.serviceManager, locale, messages);\n    }\n    /**\n     * Adds a new notification to be shown in the UI.\n     */\n    addNotification(notification) {\n        this.serviceManager.store.dispatch(actions.addNotification(notification));\n    }\n    /**\n     * Removes a notification with the provided groupId.\n     */\n    removeNotification(groupID) {\n        this.serviceManager.store.dispatch(actions.removeNotifications({ groupID }));\n    }\n    /**\n     * Removes all notifications.\n     */\n    removeAllNotifications() {\n        this.serviceManager.store.dispatch(actions.removeAllNotifications());\n    }\n    /**\n     * This updates the map that can be used to override the values for CSS variables in the application. Each key of the\n     * map is the name of a variable (without the \"--cds-chat-\" prefix) and the value is whatever the value of\n     * the variable should be set at. The values in the provided map will be merged with any variables that may already be defined in\n     * the public config which allows this function to update only the specific variables desired.\n     *\n     * @param publicVars A map of CSS variables. Each key of the map is the name of a variable (without the\n     * \"--cds-chat-\" prefix) and the value is whatever the value of the variable should be set at.\n     * @param whiteLabelVariables The set of variables for white labeling. These\n     * are not directly set as CSS variables but go through a translation process first that turns them into CSS\n     * variables.\n     */\n    updateCSSVariables(publicVars, whiteLabelVariables = {}) {\n        const { store } = this.serviceManager;\n        const { theme } = store.getState();\n        const { carbonTheme, useAITheme } = theme;\n        // If the AI theme is enabled, only a set amount of public variables should be allowed.\n        if (useAITheme) {\n            const usePublicVars = publicVars;\n            publicVars = {};\n            whiteLabelVariables = {};\n            usePublicVars &&\n                Object.entries(usePublicVars).forEach(([variable]) => {\n                    if (VALID_PUBLIC_VARS_IN_AI_THEME_SET.has(variable)) {\n                        publicVars[variable] = usePublicVars[variable];\n                    }\n                    else {\n                        consoleWarn(UPDATE_CSS_VARS_AI_THEME_WARNING_MESSAGE);\n                    }\n                });\n        }\n        else {\n            // Merge css variables in config objects with those passed into this function.\n            publicVars = {\n                ...publicVars,\n            };\n            whiteLabelVariables = {\n                ...whiteLabelVariables,\n            };\n        }\n        const allVariables = mergeCSSVariables(publicVars, whiteLabelVariables, carbonTheme, useAITheme);\n        store.dispatch(actions.updateCSSVariables(allVariables, publicVars, whiteLabelVariables));\n    }\n    /**\n     * Updates the bot name used in, amongst other places, as the default for the title in the header bar of the chat\n     * widget when AI theme is off. We use this method currently only when in WYSIWYG mode in the tooling configuration\n     * page.\n     *\n     * @param name A new name for the bot.\n     */\n    updateBotName(name) {\n        this.serviceManager.store.dispatch(actions.updateBotName(name));\n    }\n    /**\n     * Public method to update the title of the main bot header. This would be used instead of the botName if it is\n     * defined.\n     */\n    updateMainHeaderTitle(title) {\n        this.serviceManager.store.dispatch(actions.updateMainHeaderTitle(title));\n    }\n    /**\n     * Updates the bot avatar in the header bar of the chat widget. We use this method currently only when in WYSIWYG mode\n     * in the tooling configuration page.\n     *\n     * @param url A new avatar image url for the bot.\n     */\n    updateBotAvatarURL(url) {\n        this.serviceManager.store.dispatch(actions.updateBotAvatarURL(url));\n    }\n    /**\n     * Updates the currently active homeScreenConfig. Currently only used in tooling to show live updates when editing web\n     * chat configuration.\n     */\n    updateHomeScreenConfig(homeScreenConfig) {\n        this.serviceManager.store.dispatch(actions.updateHomeScreenConfig(homeScreenConfig));\n    }\n    /**\n     * Updates the current state of the launcher.\n     */\n    updateLauncherConfig(launcherConfig) {\n        this.serviceManager.store.dispatch(actions.updateLauncherConfig(launcherConfig));\n    }\n    /**\n     * Construct the newViewState from the newView provided. Fire the view:pre:change and view:change events, as well as\n     * window:pre:open, window:open, or window:pre:close, window:close if instructed to do so. If the view change isn't\n     * canceled by the events then change the view. If the main window or tour are open after changing the view, and\n     * doNotHydrate isn't true and the chat is not already hydrated, then hydrate the chat.\n     */\n    async changeView(newView, reason, tryHydrating = true, forceViewChange = false) {\n        const { store } = this.serviceManager;\n        const { viewState } = store.getState().persistedToBrowserStorage.launcherState;\n        // Build the new viewState object.\n        let newViewState = constructViewState(newView, store.getState());\n        if (!validateViewState(newViewState, store.getState())) {\n            // If the newViewState had an issue and was unable to be verified then do not change the view.\n            return viewState;\n        }\n        if (!isEqual(newViewState, viewState) || forceViewChange) {\n            // If the newViewState is different from the current viewState, or the viewChange is being forced to happen, fire\n            // the view:change events and change which views are visible.\n            await this.fireViewChangeEventsAndChangeView(newViewState, reason);\n            // Check and see if the chat should be hydrated.\n            newViewState =\n                store.getState().persistedToBrowserStorage.launcherState.viewState;\n            if (tryHydrating &&\n                (newViewState.mainWindow || newViewState.tour) &&\n                !store.getState().isHydrated) {\n                // If it's ok to hydrate, the main window or tour are now visible, and the chat isn't hydrated, then hydrate\n                // the chat. Since this function is only responsible for changing the view don't await hydrateChat(), instead\n                // let hydrateChat complete on its own time.\n                this.hydrateChat().catch((error) => {\n                    consoleError(\"Error hydrating the chat\", error);\n                });\n            }\n        }\n        // Return the newViewState. This could be the same as the original viewState if there was no difference between the\n        // original viewState and the proposed newViewState, or it could be an updated viewState. The updated viewState\n        // could be what was originally sent to fireViewChangeEventsAndChangeView, or it could be a viewState that has been\n        // modified by Deb during the view:pre:change event.\n        return newViewState;\n    }\n    /**\n     * Fire the \"view:pre:change\" and \"view:change\" events. This will return a boolean to indicate if the process was\n     * cancelled and the view should remain unchanged. If the view change isn't canceled by the events then this will\n     * switch to the newViewState that's been provided. This method is private to force the use of the changeView method\n     * above as an entry point to this method.\n     *\n     * @returns True to indicate that the view was changed. False indicates the view change was cancelled.\n     */\n    async fireViewChangeEventsAndChangeView(newViewState, reason) {\n        const { store } = this.serviceManager;\n        if (store.getState().viewChanging) {\n            // If the view is already in the middle of changing then throw an error.\n            throw new Error(\"The view may not be changed while a view change event is already running. Please make sure to resolve any promises from these events.\");\n        }\n        store.dispatch(actions.setViewChanging(true));\n        const { viewState } = store.getState().persistedToBrowserStorage.launcherState;\n        // If we have a mainWindowOpenReason or mainWindowCloseReason then this viewChangeReason will be determined lower down.\n        const { viewChangeReason } = reason;\n        // Freeze the previous viewState since we don't want to allow Deb to modify it.\n        const oldViewState = deepFreeze(viewState);\n        try {\n            // Create the view:pre:change event and fire it.\n            const preViewChangeEvent = {\n                type: BusEventType.VIEW_PRE_CHANGE,\n                reason: viewChangeReason,\n                oldViewState,\n                newViewState,\n                cancelViewChange: false,\n            };\n            await this.serviceManager.fire(preViewChangeEvent);\n            if (preViewChangeEvent.cancelViewChange) {\n                // If the view changing was canceled in the event then log a message and don't change the view.\n                debugLog(\"The view changing was cancelled by a view:pre:change event.\");\n                return;\n            }\n            // Validate the view state returned from the view:pre:change event.\n            if (!validateViewState(preViewChangeEvent.newViewState, store.getState())) {\n                // If the view state had an issue and was unable to be verified then do not change the view.\n                return;\n            }\n            // If there were no issues with the new view state then use it.\n            newViewState = preViewChangeEvent.newViewState;\n            // Actually change the viewState in store.\n            store.dispatch(actions.setViewState(deepFreeze(newViewState)));\n            // Create the view:change event and fire it.\n            const viewChangeEvent = {\n                type: BusEventType.VIEW_CHANGE,\n                reason: viewChangeReason,\n                oldViewState,\n                newViewState,\n                cancelViewChange: false,\n            };\n            await this.serviceManager.fire(viewChangeEvent);\n            if (viewChangeEvent.cancelViewChange) {\n                // If the view changing was canceled in the event then log a message and switch the viewState back to what it was\n                // originally.\n                store.dispatch(actions.setViewState(oldViewState));\n                debugLog(\"The view changing was cancelled by a view:change event.\");\n                return;\n            }\n            // Validate the view state returned from the view:change event.\n            if (!validateViewState(viewChangeEvent.newViewState, store.getState())) {\n                // If the view state had an issue and was unable to be verified then switch the viewState back to what it was\n                // originally.\n                store.dispatch(actions.setViewState(oldViewState));\n                return;\n            }\n            // If there were no issues with the new view state then use it.\n            newViewState = viewChangeEvent.newViewState;\n            // Actually change the viewState in store for the last time.\n            store.dispatch(actions.setViewState(deepFreeze(newViewState)));\n        }\n        finally {\n            store.dispatch(actions.setViewChanging(false));\n        }\n    }\n    /**\n     * To start the tour save all the new tour data in store, fire the view:change events (as well as the window:close\n     * events if the main window is open), and then switch to the tour view. If the view:change events are successful then\n     * fire the tour:start and tour:step events as well.\n     */\n    async startTour(message, startTourReason, changeViewReason) {\n        // Save all the new tour info in store.\n        this.serviceManager.store.dispatch(actions.setTourData(message.fullMessageID));\n        // Fire the appropriate events and try to open the tour.\n        const newViewState = await this.changeView(ViewType.TOUR, changeViewReason);\n        if (newViewState.tour) {\n            // If the tour is now visible then fire the tour:start event.\n            await this.serviceManager.fire({\n                type: BusEventType.TOUR_START,\n                reason: startTourReason,\n            });\n            // Then fire the tour:step event with the first steps info.\n            await this.serviceManager.fire({\n                type: BusEventType.TOUR_STEP,\n                step: this.serviceManager.store.getState().tourState\n                    .activeTourStepItems[0],\n            });\n        }\n    }\n    /**\n     * To end the tour fire the view:change events and switch to the launcher. If the view:change events are successful\n     * then clear all the tour data from store.\n     */\n    async endTour(reason) {\n        const { viewState } = this.serviceManager.store.getState().persistedToBrowserStorage\n            .launcherState;\n        let newViewState = viewState;\n        if (viewState.tour) {\n            // If a tour is open then change to the launcher.\n            newViewState = await this.changeView(ViewType.LAUNCHER, reason);\n        }\n        if (!newViewState.tour) {\n            // If the tour is no longer visible or wasn't visible then clear the tour data.\n            this.serviceManager.store.dispatch(actions.clearTourData());\n            return true;\n        }\n        // If changeView didn't hide the tour, then the tour data was not cleared, so return false.\n        return false;\n    }\n    /**\n     * Look for the provided stepId string within the tour step items. If a step with a matching step_id is found then\n     * move to that step within the tour.\n     */\n    goToSpecificTourStep(stepId) {\n        const { activeTourStepItems } = this.serviceManager.store.getState().tourState;\n        // Find the index of the step with a step_id string matching the provided stepId.\n        const newStepIndex = activeTourStepItems.findIndex((stepItem) => stepItem.step_id === stepId);\n        if (newStepIndex) {\n            // If a matching step is found then change to that step in the tour.\n            this.changeStepInTour({ newStepIndex });\n        }\n        else {\n            // If a matching step is not found then log an error and don't change the tour step.\n            consoleError(`No step with the id \"${stepId}\" was found within the current tour. As a result, goToTourStep() did not change the current tour step.`);\n        }\n    }\n    /**\n     * Change the tour step, either to a specific step, the next step, or the previous step. After changing the step send\n     * a tour:step event.\n     */\n    async changeStepInTour(changeStepOptions) {\n        const { store } = this.serviceManager;\n        const { activeTourStepItems } = store.getState().tourState;\n        const { activeTourCurrentStepIndex } = store.getState().persistedToBrowserStorage.chatState.persistedTourState;\n        // Get the new default step number if there is one.\n        let { newStepIndex } = changeStepOptions;\n        if (changeStepOptions.nextStep) {\n            newStepIndex = activeTourCurrentStepIndex + 1;\n        }\n        else if (changeStepOptions.previousStep) {\n            newStepIndex = activeTourCurrentStepIndex - 1;\n        }\n        // Change to the new step in the tour.\n        store.dispatch(actions.changeStepInTour(newStepIndex));\n        // Get the new step number from store in case the number that was provided had been out of bounds for the step array.\n        const actualNewStepIndex = store.getState().persistedToBrowserStorage.chatState.persistedTourState\n            .activeTourCurrentStepIndex;\n        if (actualNewStepIndex === newStepIndex) {\n            // Fire the tour step event with the new step info.\n            await this.serviceManager.fire({\n                type: BusEventType.TOUR_STEP,\n                step: activeTourStepItems[actualNewStepIndex],\n            });\n        }\n        else {\n            consoleWarn(\"The tour tried to change to a step that was out of bounds for the step array, so no step change was made.\");\n        }\n    }\n    /**\n     * Fires an error event to notify listeners that an error occurred.\n     *\n     * @param error Details about the error or the error object.\n     */\n    errorOccurred(error) {\n        consoleError(\"An error has occurred\", error);\n        if (error.catastrophicErrorType) {\n            this.serviceManager.store.dispatch(actions.setAppStateValue(\"catastrophicErrorType\", error.catastrophicErrorType));\n        }\n        callOnError(this.serviceManager.additionalChatParameters.onError, error);\n    }\n    /**\n     * Restarts the conversation with the assistant. This does not make any changes to a conversation with a human agent.\n     * This will clear all the current assistant messages from the main bot view and cancel any outstanding messages.\n     * This will also clear any active tour data and re-show the input field if it was hidden. Lastly, this will clear\n     * the current assistant session which will force a new session to start on the next message.\n     */\n    async restartConversation(options = {}) {\n        const { skipHydration = false, endAgentConversation = true, fireEvents = true, } = options;\n        debugLog(\"Restarting conversation\");\n        if (this.restarting) {\n            consoleWarn(\"You cannot restart a conversation while a previous restart is still pending.\");\n            return;\n        }\n        this.restarting = true;\n        try {\n            const { serviceManager } = this;\n            const { store } = serviceManager;\n            if (fireEvents) {\n                await serviceManager.fire({\n                    type: BusEventType.PRE_RESTART_CONVERSATION,\n                });\n            }\n            serviceManager.restartCount++;\n            if (this.hydrating) {\n                await this.hydrationPromise;\n            }\n            const currentState = store.getState();\n            const { persistedToBrowserStorage } = currentState;\n            const { viewState } = persistedToBrowserStorage.launcherState;\n            // If we're connected to an agent, we need to end the agent chat.\n            const { isConnecting } = currentState.agentState;\n            const { isConnected } = currentState.persistedToBrowserStorage.chatState.agentState;\n            if ((isConnected || isConnecting) && endAgentConversation) {\n                await serviceManager.humanAgentService.endChat(true, false, false);\n            }\n            if (viewState.tour) {\n                // If a tour is open then try to open the main window. Specify not to hydrate the chat because hydration is\n                // planned to happen after restart:conversation has fired below. We don't need to clear the tour data in store\n                // since the restartConversation redux action will do that.\n                await this.serviceManager.actions.changeView(ViewType.MAIN_WINDOW, {\n                    mainWindowOpenReason: MainWindowOpenReason.CALLED_RESTART_CONVERSATION,\n                }, false);\n            }\n            this.serviceManager.instance.updateAssistantInputFieldVisibility(true);\n            this.serviceManager.messageService.cancelAllMessageRequests();\n            store.dispatch(actions.restartConversation());\n            if (!skipHydration) {\n                // Clear this promise in case the restart event below triggers another hydration.\n                this.hydrationPromise = null;\n            }\n            if (fireEvents) {\n                await serviceManager.fire({ type: BusEventType.RESTART_CONVERSATION });\n            }\n            if (this.hydrating) {\n                await this.hydrationPromise;\n            }\n            if (!skipHydration && !serviceManager.store.getState().isHydrated) {\n                // Trigger re-hydration.\n                this.hydrationPromise = null;\n                if (store.getState().persistedToBrowserStorage.launcherState.viewState\n                    .mainWindow) {\n                    await serviceManager.actions.hydrateChat();\n                }\n            }\n            else {\n                store.dispatch(actions.chatWasHydrated());\n            }\n        }\n        finally {\n            this.restarting = false;\n        }\n    }\n    /**\n     * Remove any record of the current session from the browser.\n     *\n     * @param keepOpenState If we are destroying the session to restart the chat this can be used to preserve if the web\n     * chat is open.\n     */\n    async destroySession(keepOpenState) {\n        const { store } = this.serviceManager;\n        const { persistedToBrowserStorage } = store.getState();\n        const originalViewState = persistedToBrowserStorage.launcherState.viewState;\n        const newPersistedToBrowserStorage = cloneDeep(DEFAULT_PERSISTED_TO_BROWSER);\n        if (keepOpenState) {\n            // If we want to keep the open state then copy it from browser storage.\n            newPersistedToBrowserStorage.launcherState.viewState = originalViewState;\n            if (originalViewState.tour) {\n                // If a tour was previously open then change the viewState to close the tour and open the main window instead.\n                newPersistedToBrowserStorage.launcherState.viewState = {\n                    ...originalViewState,\n                    tour: false,\n                    mainWindow: true,\n                };\n            }\n        }\n        else {\n            // If we don't want to keep the open state then set the launcher to be open.\n            newPersistedToBrowserStorage.launcherState.viewState =\n                VIEW_STATE_LAUNCHER_OPEN;\n        }\n        this.serviceManager.messageService.cancelAllMessageRequests();\n        this.serviceManager.userSessionStorageService.clearLauncherSession();\n        this.serviceManager.userSessionStorageService.clearChatSession();\n        this.serviceManager.store.dispatch(actions.setAppStateValue(\"persistedToBrowserStorage\", newPersistedToBrowserStorage));\n    }\n    /**\n     * Ends the conversation with a human agent. This does not request confirmation from the user first. If the user\n     * is not connected or connecting to a human agent, this function has no effect. You can determine if the user is\n     * connected or connecting by calling {@link ChatInstance.getState}. Note that this function\n     * returns a Promise that only resolves when the conversation has ended. This includes after the\n     * {@link BusEventType.AGENT_PRE_END_CHAT} and {@link BusEventType.AGENT_END_CHAT} events have been fired and\n     * resolved.\n     */\n    agentEndConversation(endedByUser) {\n        return this.serviceManager.humanAgentService.endChat(endedByUser);\n    }\n    /**\n     * Sets the suspended state for an agent conversation. A conversation can be suspended or un-suspended only if the\n     * user is currently connecting or connected to an agent. If a conversation is suspended, then messages from the user\n     * will no longer be routed to the service desk and incoming messages from the service desk will not be displayed. In\n     * addition, the current connection status with an agent will not be shown.\n     */\n    agentUpdateIsSuspended(isSuspended) {\n        this.serviceManager.store.dispatch(agentUpdateIsSuspended(isSuspended));\n    }\n    /**\n     * Creates the custom response elements for all the messages in the given set. This is used in particular when\n     * loading a list of messages from history.\n     */\n    async createElementsForUserDefinedResponses(messages) {\n        await asyncForEach(Object.values(messages.allMessageItemsByID), (localMessage) => {\n            const originalMessage = messages.allMessagesByID[localMessage.fullMessageID];\n            return this.handleUserDefinedResponseItems(localMessage, originalMessage);\n        });\n    }\n}\n\nexport { ChatActionsImpl };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport { asyncForEach, asArray } from '../utils/lang/arrayUtils.js';\nimport { debugStackTrace, consoleError, consoleLog, consoleWarn, isEnableDebugLog, debugLog } from '../utils/miscUtils.js';\nimport { resolvablePromise } from '../utils/resolvablePromise.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is our event bus. It takes subscriptions to events and attaches handlers that are called when\n * the event is fired.\n */\nconst HANDLER_NOT_FUNCTION = \"The event handler is not a function.\";\nclass EventBus {\n    constructor() {\n        /**\n         * This is a map of all the event handlers by type with the map key being the type of event (e.g. \"send\").\n         */\n        this.handlersByType = new Map();\n        /**\n         * This set is used to keep track of which events are currently running. This is to prevent the same event from\n         * running more than once at the same time. This check is only performed on asynchronous events and does not cover\n         * the \"*\" event.\n         */\n        this.eventsTypesRunning = new Set();\n        /**\n         * The current number of async events that are currently running.\n         */\n        this.eventsRunningCount = 0;\n    }\n    /**\n     * Fires the given event and notifiers all listeners for this event type. All event listeners that listen for all\n     * (\"*\") events will also be notified. Events will be fired in the order in which they were registered.\n     *\n     * @param busEvent A single event.\n     * @param instance The current instance of the Carbon AI chat that is passed to the event handlers\n     */\n    async fire(busEvent, instance) {\n        logEvent(\"Before fire\", busEvent);\n        const { type } = busEvent;\n        if (!type) {\n            throw new Error(`Attempted to fire an event with no type! ${JSON.stringify(busEvent)}`);\n        }\n        function wrappedHandler(handler) {\n            const result = handler(busEvent, instance);\n            if (result && !(result instanceof Promise)) {\n                consoleWarn(`An event handler for event ${type} returned a non-promise. This might be a mistake.`, result);\n            }\n            return result;\n        }\n        if (this.eventsTypesRunning.has(type)) {\n            throw new Error(`An event of type ${type} is already running. Please make sure that you have resolved the Promises for any earlier events that were fired.`);\n        }\n        try {\n            this.eventsRunningCount++;\n            try {\n                this.eventsTypesRunning.add(type);\n                // Run all the handlers for the given type.\n                const handlersForType = this.handlersByType.get(type);\n                if (handlersForType && handlersForType.length) {\n                    // Copy the array in case it's modified by an event handler.\n                    const handlersCopy = handlersForType.slice();\n                    await asyncForEach(handlersCopy, wrappedHandler);\n                }\n            }\n            finally {\n                this.eventsTypesRunning.delete(type);\n            }\n        }\n        finally {\n            this.eventsRunningCount--;\n            if (this.waitForEmptyPromise && this.eventsRunningCount === 0) {\n                // If waitForEmpty is waiting for all the events to finish and we've just finished the last one, then let it\n                // know.\n                this.waitForEmptyPromise.doResolve();\n            }\n        }\n        logEvent(\"After fire\", busEvent);\n    }\n    /**\n     * Fires the given event and notifiers all listeners for this event type. All event listeners that listen for all\n     * (\"*\") events will also be notified. Events will be fired in the order in which they were registered. This\n     * function fires the events synchronously.\n     *\n     * @param busEvent A single event.\n     * @param instance The current instance of the Carbon AI chat that is passed to the event handlers\n     */\n    fireSync(busEvent, instance) {\n        logEvent(\"Before fire\", busEvent);\n        const { type } = busEvent;\n        // Run all the handlers for the given type.\n        const handlersForType = this.handlersByType.get(type);\n        if (handlersForType && handlersForType.length) {\n            // Copy the array in case it's modified by an event handler.\n            const handlersCopy = handlersForType.slice();\n            handlersCopy.forEach((handler) => handler(busEvent, instance));\n        }\n        logEvent(\"After fire\", busEvent);\n    }\n    /**\n     * This function will wait for all executing async events to finish. If any new events are fired while this\n     * function is waiting, it will wait for those as well.\n     */\n    async waitForEmpty() {\n        if (this.eventsRunningCount === 0) {\n            return;\n        }\n        if (!this.waitForEmptyPromise) {\n            this.waitForEmptyPromise = resolvablePromise();\n        }\n        await this.waitForEmptyPromise;\n        this.waitForEmptyPromise = null;\n    }\n    /**\n     * Adds the given event handler as a listener for events of the given type.\n     *\n     * @param handlers The handler or handlers along with the event type to start listening for events.\n     * @returns The instance for method chaining.\n     */\n    on(handlers) {\n        const data = asArray(handlers);\n        data.forEach(({ type, handler }) => {\n            if (!type) {\n                throw new Error(`Attempted to listen to an event with no type: \"${type}\"!`);\n            }\n            if (typeof handler === \"function\") {\n                if (!this.handlersByType.has(type)) {\n                    this.handlersByType.set(type, []);\n                }\n                const handlersForType = this.handlersByType.get(type);\n                debugStackTrace(`[EventBus] Adding ${type} event handler`, handler);\n                handlersForType.push(handler);\n            }\n            else {\n                consoleError(HANDLER_NOT_FUNCTION, handler);\n            }\n        });\n        return this;\n    }\n    /**\n     * Removes an event listener that was previously added via {@link on} or {@link once}.\n     *\n     * @param handlers The handler or handlers along with the event type to stop listening for events.\n     * @returns The instance for method chaining.\n     */\n    off(handlers) {\n        const data = asArray(handlers);\n        data.forEach(({ type, handler }) => {\n            const handlersForType = this.handlersByType.get(type);\n            if (handlersForType) {\n                if (handler) {\n                    const index = handlersForType.indexOf(handler);\n                    if (index !== -1) {\n                        const removed = handlersForType.splice(index, 1);\n                        debugStackTrace(`[EventBus] Removing ${type} event handlers`, removed);\n                    }\n                }\n                else {\n                    // If no handler is specified, unsubscribe all the handlers.\n                    debugStackTrace(`[EventBus] Removing all ${type} event handlers`);\n                    this.handlersByType.set(type, []);\n                }\n            }\n        });\n        return this;\n    }\n    /**\n     * Adds the given event handler as a listener for events of the given type. After the first event is handled, this\n     * handler will automatically be removed.\n     *\n     * @param handlers The handler or handlers along with the event type to start listening for an event.\n     * @returns The instance for method chaining.\n     */\n    once(handlers) {\n        const data = asArray(handlers);\n        data.forEach(({ type, handler }) => {\n            if (typeof handler === \"function\") {\n                const onceHandler = (event, instance) => {\n                    this.off({ type, handler: onceHandler });\n                    return handler(event, instance);\n                };\n                this.on({ type, handler: onceHandler });\n            }\n            else {\n                consoleError(HANDLER_NOT_FUNCTION, handler);\n            }\n        });\n        return this;\n    }\n    /**\n     * Outputs debug information for all of the currently registered event bus listeners.\n     */\n    logListeners() {\n        this.handlersByType.forEach((listeners, type) => {\n            console.group(`Event ${type} (${listeners.length})`);\n            listeners.forEach((listener) => {\n                consoleLog(\"Listener\", listener);\n            });\n            console.groupEnd();\n        });\n    }\n    clear() {\n        this.handlersByType.clear();\n        return this;\n    }\n}\n/**\n * Outputs the given event to the console.\n */\nfunction logEvent(message, busEvent) {\n    if (isEnableDebugLog()) {\n        // If this object is modified after we log it, the output may not actually show the original value so making a\n        // copy ensure we see the actual value that it had at this moment.\n        const eventCopy = cloneDeep(busEvent);\n        debugLog(`[EventBus] ${message}`, eventCopy);\n    }\n}\n\nexport { EventBus };\n","import actions from '../store/actions.js';\nimport { DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS } from '../store/reducerUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This function takes in the service manager to help create a custom panel instance. The panel instance is created\n * using a function instead of a class because a private property at runtime can still be accessible. The service\n * manager is passed in instead made a private property.\n */\nfunction createCustomPanelInstance(serviceManager) {\n    const customPanelInstance = {\n        open(options = DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS) {\n            const { store } = serviceManager;\n            store.dispatch(actions.setCustomPanelConfigOptions(options));\n            store.dispatch(actions.setCustomPanelOpen(true));\n        },\n        close() {\n            serviceManager.store.dispatch(actions.setCustomPanelOpen(false));\n        },\n    };\n    return Object.freeze(customPanelInstance);\n}\n\nexport { createCustomPanelInstance };\n","import { notesToLoadedHistory } from '../schema/historyToMessages.js';\nimport actions from '../store/actions.js';\nimport '../../../types/state/AppState.js';\nimport { NoteType } from '../../../types/messaging/History.js';\nimport { consoleError } from '../utils/miscUtils.js';\nimport { MainWindowOpenReason } from '../../../types/events/eventBusTypes.js';\nimport { ViewType } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This service is responsible for loading conversation history data.\n */\nclass HistoryService {\n    constructor(serviceManager) {\n        this.serviceManager = serviceManager;\n    }\n    /**\n     * Fetch from history store. If no history is found (no session or the session has expired), this will return null.\n     */\n    async loadHistory(useHistory) {\n        const state = this.serviceManager.store.getState();\n        const { config, persistedToBrowserStorage } = state;\n        const publicConfig = config.public;\n        const { viewState } = persistedToBrowserStorage.launcherState;\n        try {\n            let resultData;\n            if (useHistory) {\n                resultData = useHistory;\n            }\n            else if (publicConfig.messaging?.customLoadHistory) {\n                const items = await publicConfig.messaging.customLoadHistory(this.serviceManager.instance);\n                // The \"author\" property is not currently included in our public NoteItem type. Web chat does not use it.\n                const note = {\n                    type: NoteType.HISTORY,\n                    body: items,\n                };\n                resultData = { notes: [note] };\n            }\n            if (resultData) {\n                // If there is result data then grab the notes array, transform it into a LoadedHistory, and return it.\n                const historyNotes = resultData?.notes;\n                return notesToLoadedHistory(historyNotes, this.serviceManager);\n            }\n            if (viewState.tour) {\n                // If there is no resultData, and a tour was open then try to open the main window. Specify not to hydrate the\n                // chat because we're already in the middle of hydrating. This is done below the above checks for a sessionID,\n                // since it's possible the sessionID will not exist while the viewState still does. If this happened it would\n                // cause the tour to stay stuck open, with no content to show, which we don't want.\n                await this.serviceManager.actions.changeView(ViewType.MAIN_WINDOW, { mainWindowOpenReason: MainWindowOpenReason.SESSION_HISTORY }, false);\n                // Clear the tour state, regardless if changeView was successful or not, since there is no tour data to be\n                // shown. This is done instead of calling serviceManager.actions.endTour() because this scenario is a little\n                // more complicated than the generic endTour scenario.\n                this.serviceManager.store.dispatch(actions.clearTourData());\n            }\n        }\n        catch (error) {\n            consoleError(\"An error occurred while attempting to load the conversation history\", error);\n        }\n        return null;\n    }\n}\n\nexport { HistoryService };\n","import { DEFAULT_MESSAGE_STATE, DEFAULT_CHAT_MESSAGES_STATE } from '../store/reducerUtils.js';\nimport { MessageErrorState } from '../../../types/messaging/LocalMessageItem.js';\nimport { NoteType } from '../../../types/messaging/History.js';\nimport '../utils/constants.js';\nimport { findLast } from '../utils/lang/arrayUtils.js';\nimport { deepFreeze } from '../utils/lang/objectUtils.js';\nimport { isResponse, isRequest, isPause, isResponseWithNestedItems, THREAD_ID_MAIN, isOptionItem, isDateResponseType, isEventRequest } from '../utils/messageUtils.js';\nimport inputItemToLocalItem from './inputItemToLocalItem.js';\nimport { outputItemToLocalItem, createLocalMessageItemsForNestedMessageItems } from './outputItemToLocalItem.js';\nimport { BusEventType } from '../../../types/events/eventBusTypes.js';\nimport { FileStatusValue } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Given an array of every received and sent message, change to correct data format. Eventually, this is going to\n * have to work with paginated data.\n *\n * Note that this function also has side effects because it fires history events as it is processing the loaded history.\n *\n * @param notes An array of the {@link Note} objects returned from the history store.\n * @param serviceManager A reference to the {@link ServiceManager}.\n */\nasync function notesToLoadedHistory(notes, serviceManager) {\n    // Create an empty version of our state and the final result object.\n    const allLocalMessagesByID = {};\n    const allMessagesByID = {};\n    const loadingState = {\n        serviceManager,\n        allMessages: [],\n        allMessagesByID,\n        allLocalMessagesByID,\n        threadMessagesByThreadID: {},\n        responsesByRequestID: {},\n        relatedMessageByID: {},\n        localMessagesByOriginalMessageID: {},\n        lastThreadID: null,\n        loadedHistory: {\n            messageHistory: {\n                allMessageItemsByID: allLocalMessagesByID,\n                allMessagesByID,\n                botMessageState: null,\n            },\n            latestTransferToAgentResponse: null,\n            latestPanelLocalMessageItem: null,\n        }};\n    // First locate all the messages from history we need.\n    await notesToMessages(notes, loadingState);\n    if (!loadingState.allMessages.length) {\n        // If we have the latest transfer to agent response and no other message, it means session history is disabled, and\n        // we only have this response to render.\n        if (loadingState.loadedHistory.latestTransferToAgentResponse) {\n            return {\n                ...loadingState.loadedHistory,\n                messageHistory: DEFAULT_MESSAGE_STATE,\n            };\n        }\n        // If we didn't actually find any messages, just return null to indicate that. This will trigger the widget to\n        // get fetch the welcome node.\n        return null;\n    }\n    // Generate the LocalMessage objects for the messages and divide into threads.\n    createLocalMessages(loadingState);\n    // Create the ChatMessagesState that correspond to each of the threads.\n    createChatStates(loadingState);\n    // Locate the most recent welcome node and mark it as such.\n    markIsLatestWelcomeNode(loadingState);\n    // Find all the options and suggestions and figure out which, if any, options the user chose.\n    markSelectedOptions(loadingState);\n    // Note: We need to consider if we should clone the LocalMessage objects that get put into multiple threads\n    // (namely the first and last message in a thread that's also added to the main thread). If anything attempts to\n    // modify the ui_state value in those messages, it will affect both. Right now the only time that happens is the\n    // property for doing a11y announcements but since that property isn't active for historical messages, we don't\n    // really have to do this now. This is a bit of a landmine I'm leaving here for now so sorry :-). To do the clone\n    // the only thing that needs to be different is the ID.\n    return loadingState.loadedHistory;\n}\n/**\n * Converts the given list of {@link Note} objects into a flat list of all the message objects to process.\n */\nasync function notesToMessages(notes, loadingState) {\n    const { allMessages, allMessagesByID, responsesByRequestID, relatedMessageByID, serviceManager, localMessagesByOriginalMessageID, } = loadingState;\n    if (!notes?.length) {\n        return;\n    }\n    // Find all the messages from history.\n    notes.forEach((note) => {\n        if (note.type === NoteType.HISTORY) {\n            const sessionHistory = note.body;\n            const pushAndPrepareMessage = (historyItem) => {\n                const { message } = historyItem;\n                if (!isEventRequest(message) &&\n                    (isRequest(message) || isResponse(message))) {\n                    addMessage(message, loadingState, historyItem);\n                }\n            };\n            sessionHistory.forEach(pushAndPrepareMessage);\n        }\n    });\n    // We need to do a little more processing on all the events now. We iterate backwards just to make it easier to\n    // remove items.\n    for (let index = allMessages.length - 1; index >= 0; index--) {\n        const message = allMessages[index];\n        if (message.history?.file_upload_status === FileStatusValue.UPLOADING) {\n            // If a file upload was in the middle of uploading and the user left before it was complete, we need to mark\n            // it as complete and also display it as an error.\n            message.history.file_upload_status = FileStatusValue.COMPLETE;\n            message.history.error_state = MessageErrorState.FAILED;\n        }\n        if (isResponse(message) && message.history.silent) {\n            // If we find a message response that was silent, we need to actually throw it away. We treat these like\n            // messages that were never actually received. This is currently only used for hiding the responses we get on\n            // a 3rd strike from suggestions.\n            allMessages.splice(index, 1);\n            delete allMessagesByID[message.id];\n        }\n        else {\n            localMessagesByOriginalMessageID[message.id] = [];\n            if (isResponse(message) && message.request_id) {\n                responsesByRequestID[message.request_id] = message;\n            }\n            if (message.history.relatedMessageID) {\n                relatedMessageByID[message.history.relatedMessageID] = message;\n            }\n        }\n    }\n    if (!allMessages.length) {\n        // If we didn't find any messages, then return right now.\n        return;\n    }\n    // Freeze the array so the listeners can't mess with it.\n    Object.freeze(allMessages);\n    // Fire the event that says we're loading from history. The messages are allowed to be modified at this point.\n    const beginEvent = {\n        type: BusEventType.HISTORY_BEGIN,\n        messages: allMessages,\n    };\n    await serviceManager.eventBus.fire(beginEvent, serviceManager.instance);\n    // The message is not allowed to be modified so freeze it.\n    allMessages.forEach(deepFreeze);\n    // Fire the event that says we're done loading from history.\n    await serviceManager.eventBus.fire({ type: BusEventType.HISTORY_END, messages: allMessages }, serviceManager.instance);\n}\n/**\n * Adds the given message to the messages lists.\n */\nfunction addMessage(message, loadingState, historyItem) {\n    // Make sure the message has the timestamp that was generated by the service and not the potentially\n    // client generated timestamp it originally had.\n    message.history = message.history || {};\n    message.history.from_history = true;\n    message.history.timestamp = new Date(historyItem.time).getTime();\n    if (message.thread_id !== THREAD_ID_MAIN) {\n        loadingState.lastThreadID = message.thread_id;\n    }\n    loadingState.allMessagesByID[message.id] = message;\n    loadingState.allMessages.push(message);\n}\n/**\n * Creates all the {@link LocalMessageItem} objects that correspond to all the {@link GenericItem} values in all the\n * given message requests and responses.\n */\nfunction createLocalMessages(loadingState) {\n    const { allMessages, allLocalMessagesByID, localMessagesByOriginalMessageID, } = loadingState;\n    allMessages.forEach((message) => {\n        if (isRequest(message)) {\n            if (!message.history?.silent) {\n                const text = message.history?.label || message.input.text;\n                const localMessage = inputItemToLocalItem(message, text);\n                localMessagesByOriginalMessageID[message.id].push(localMessage);\n                allLocalMessagesByID[localMessage.ui_state.id] = localMessage;\n            }\n        }\n        else {\n            const items = getResponseItems(message);\n            if (items?.length) {\n                items.forEach((messageItem) => {\n                    // Pause messages should be ignored when loaded from history. We should also ignore any messages that aren't\n                    // targeted for the chat channel.\n                    if (!isPause(messageItem)) {\n                        const localMessage = outputItemToLocalItem(messageItem, message, false);\n                        if (isResponseWithNestedItems(localMessage.item)) {\n                            const nestedLocalMessageItems = [];\n                            createLocalMessageItemsForNestedMessageItems(localMessage, message, true, nestedLocalMessageItems, true);\n                            nestedLocalMessageItems.forEach((localMessageItem) => {\n                                const localMessageID = localMessageItem.ui_state.id;\n                                loadingState.loadedHistory.messageHistory.allMessageItemsByID[localMessageID] = localMessageItem;\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        addMessageToThread(message, loadingState);\n    });\n}\n/**\n * Returns all the generic items for the given message either if it's a message response or a local response.\n */\nfunction getResponseItems(message) {\n    if (isResponse(message)) {\n        return message.output.generic;\n    }\n    return null;\n}\n/**\n * Adds the given message to the given thread. If the message is the first message in its thread, it will also be\n * added to the main thread.\n */\nfunction addMessageToThread(message, loadingState) {\n    // Messages from the server may have a thread ID if a multi-turn has started. Make sure anything that's not an\n    // agent thread is put into the main thread.\n    const { threadMessagesByThreadID } = loadingState;\n    let thread = threadMessagesByThreadID[THREAD_ID_MAIN];\n    if (!thread) {\n        thread = [];\n        threadMessagesByThreadID[THREAD_ID_MAIN] = thread;\n    }\n    thread.push(message);\n}\n/**\n * Creates all of the {@link ChatMessagesState} objects that all the appropriate threads.\n */\nfunction createChatStates(loadingState) {\n    const { loadedHistory, threadMessagesByThreadID, localMessagesByOriginalMessageID, } = loadingState;\n    loadedHistory.messageHistory.botMessageState = toChatMessageState(threadMessagesByThreadID[THREAD_ID_MAIN], localMessagesByOriginalMessageID);\n}\n/**\n * Creates a {@link ChatMessagesState} for the given array of local messages.\n */\nfunction toChatMessageState(messages, localMessagesByFullMessageID) {\n    const localMessageIDs = [];\n    const messageIDs = [];\n    if (messages) {\n        messages.forEach((message) => {\n            messageIDs.push(message.id);\n            localMessagesByFullMessageID[message.id].forEach((localMessage) => {\n                localMessageIDs.push(localMessage.ui_state.id);\n            });\n        });\n    }\n    return {\n        ...DEFAULT_CHAT_MESSAGES_STATE,\n        localMessageIDs,\n        messageIDs,\n    };\n}\n/**\n * Checks if most recent input is a request for a welcome node. If it is, it marks the response ui_state as\n * isLatestWelcomeNode.\n */\nfunction markIsLatestWelcomeNode(loadingState) {\n    const { responsesByRequestID, threadMessagesByThreadID, localMessagesByOriginalMessageID, } = loadingState;\n    const mainThreadMessages = threadMessagesByThreadID[THREAD_ID_MAIN];\n    // Look for the most recent welcome message.\n    const welcomeRequest = findLast(mainThreadMessages, (message) => isRequest(message) && message.history.is_welcome_request);\n    if (welcomeRequest) {\n        // See if we have a response to this request and if so, mark it.\n        const welcomeResponse = responsesByRequestID[welcomeRequest.id];\n        if (welcomeResponse) {\n            localMessagesByOriginalMessageID[welcomeResponse.id].forEach((localMessage) => {\n                localMessage.ui_state.isWelcomeResponse = true;\n            });\n        }\n    }\n}\n/**\n * Goes through all the messages looking for the option and suggestion responses. For each of those, this will\n * look to see if there's a related message request where the user chose one of the options and then marks the\n * option or suggestion with the value that was chosen.\n */\nfunction markSelectedOptions({ allMessages, relatedMessageByID, localMessagesByOriginalMessageID, }) {\n    allMessages.forEach((message) => {\n        if (isResponse(message)) {\n            localMessagesByOriginalMessageID[message.id].forEach((localMessage) => {\n                if (isOptionItem(localMessage.item)) {\n                    // This is an option response. Let's see if another message said it's related to this\n                    // message in which case, that other message should tell us which option the user chose.\n                    const relatedRequest = relatedMessageByID[message.id];\n                    if (isRequest(relatedRequest)) {\n                        localMessage.ui_state.optionSelected = relatedRequest;\n                    }\n                }\n                else if (isDateResponseType(localMessage)) {\n                    const relatedRequest = relatedMessageByID[message.id];\n                    if (isRequest(relatedRequest)) {\n                        localMessage.ui_state.originalUserText =\n                            relatedRequest.history.label;\n                    }\n                }\n            });\n        }\n    });\n}\n\nexport { notesToLoadedHistory };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A class that manages if the message is taking to long to load. Allows you to identify if behaviors for if a request\n * exceeds an amount of time to timeout or exceeds an amount of time to not show a loading indicator.\n */\nclass MessageLoadingManager {\n    /**\n     * Start the counters.\n     *\n     * @param onExceededMaxSilentLoading The callback to call if the call exceeds the max loading time.\n     * @param onEnd The callback when .end() is called. If .end() is called with .end(boolean), that will be passed.\n     * @param onTimeout The callback if the timer times out and we should error out the message.\n     * @param msMaxSilentLoading The amount of time in MS we wait before showing a progress bar.\n     * @param msMaxAttempt The max amount of time that has passed before we give up.\n     */\n    start(onExceededMaxSilentLoading, onEnd, onTimeout, msMaxSilentLoading, msMaxAttempt) {\n        this.hasExceededMaxSilentLoading = false;\n        this.onEnd = onEnd;\n        this.onSilentLoading = setTimeout(() => {\n            this.hasExceededMaxSilentLoading = true;\n            onExceededMaxSilentLoading();\n        }, msMaxSilentLoading);\n        this.onMaxAttempt = setTimeout(() => {\n            onTimeout();\n        }, msMaxAttempt);\n    }\n    /**\n     * Called when message succeeds/fails the loading manager is no longer needed. Calls this.end and resets the class.\n     */\n    end() {\n        if (this.onMaxAttempt) {\n            clearTimeout(this.onMaxAttempt);\n        }\n        if (this.onSilentLoading) {\n            clearTimeout(this.onSilentLoading);\n        }\n        if (this.onEnd) {\n            this.onEnd(this.hasExceededMaxSilentLoading);\n        }\n        this.hasExceededMaxSilentLoading = null;\n        this.onEnd = null;\n    }\n}\n\nexport { MessageLoadingManager };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport inputItemToLocalItem from '../schema/inputItemToLocalItem.js';\nimport { createLocalMessageForInlineError } from '../schema/outputItemToLocalItem.js';\nimport actions from '../store/actions.js';\nimport { MessageErrorState } from '../../../types/messaging/LocalMessageItem.js';\nimport { deepFreeze } from '../utils/lang/objectUtils.js';\nimport { MessageLoadingManager } from '../utils/messageServiceUtils.js';\nimport { getLastBotResponseWithContext, THREAD_ID_MAIN } from '../utils/messageUtils.js';\nimport { debugLog, consoleError, safeFetchTextWithTimeout } from '../utils/miscUtils.js';\nimport { resolvablePromise } from '../utils/resolvablePromise.js';\nimport { MessageInputType } from '../../../types/messaging/Messages.js';\nimport { MessageSendSource, BusEventType } from '../../../types/events/eventBusTypes.js';\nimport { OnErrorType } from '../../../types/config/PublicConfig.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// Time in ms between retry attempts.\nconst MS_BETWEEN_RETRIES = [1000, 3000, 5000];\n// The maximum amount of time we allow retries to take place. If we pass this time limit, we throw an error, stop\n// retrying, and move on to the next item in the queue. 120 seconds is the longest Cerberus allows for, so we'll\n// set this a little higher than that.\nconst MS_MAX_ATTEMPT = 150 * 1000;\n// The maximum amount of time we allow to pass before the error indicator becomes visible.\nconst MS_MAX_SILENT_ERROR = 6000;\n// The maximum amount of time we allow to pass before the loading indicator becomes visible.\nconst MS_MAX_SILENT_LOADING = 4000;\n// Types of different retry behaviors. SILENT will retry without letting the end user know we are retrying, VISIBLE will\n// show the user that we are retrying.\nvar RetryType;\n(function (RetryType) {\n    RetryType[RetryType[\"SILENT\"] = 1] = \"SILENT\";\n    RetryType[RetryType[\"VISIBLE\"] = 2] = \"VISIBLE\";\n})(RetryType || (RetryType = {}));\nclass MessageService {\n    constructor(serviceManager, publicConfig) {\n        /**\n         * The value indicates that there is a pending locale change that needs to be sent to the assistant on the next\n         * message request.\n         */\n        this.pendingLocale = false;\n        /**\n         * Indicates if the locale has been explicitly set by the host page. This is used to ensure we only send a locale\n         * to the assistant when it has been explicitly set.\n         */\n        this.localeIsExplicit = false;\n        this.serviceManager = serviceManager;\n        this.messageLoadingManager = new MessageLoadingManager();\n        this.queue = {\n            waiting: [],\n            current: null,\n        };\n        const timeoutOverride = publicConfig.messaging?.messageTimeoutSecs;\n        this.timeoutMS = timeoutOverride ? timeoutOverride * 1000 : MS_MAX_ATTEMPT;\n    }\n    /**\n     * Process a response from assistant with 200 response code, send and return the messageResponse.\n     *\n     * @param current The current item in the send queue.\n     * @param received JSON output from v2 API.\n     */\n    async processSuccess(current, received) {\n        const { requestOptions, isProcessed } = current;\n        const isWelcomeNode = Boolean(current.message.history.is_welcome_request);\n        // If this message was already invalidated, don't do anything.\n        if (isProcessed) {\n            return;\n        }\n        // Clear any error state that may be associated with the message.\n        this.setMessageErrorState(current, MessageErrorState.NONE);\n        // After updating the error state get the message from the pendingRequest since it has potentially been updated by\n        // setting the error state.\n        const { message } = current;\n        // Do all the normal things for our general message requests, however for event messages we skip this.\n        if (received) {\n            if (message.input.message_type !== MessageInputType.EVENT) {\n                if (!isWelcomeNode) {\n                    this.messageLoadingManager.end();\n                }\n                received.history = received.history || {};\n                received.history.timestamp = received.history.timestamp || Date.now();\n                current.trackData.lastRequestTime =\n                    Date.now() - current.timeLastRequest;\n                current.trackData.totalRequestTime =\n                    Date.now() - current.timeFirstRequest;\n                // Send receive event.\n                await this.serviceManager.actions.receive(received, isWelcomeNode, message, requestOptions);\n            }\n            this.messageLoadingManager.end();\n        }\n        if (current.isProcessed) {\n            // If the response has already been processed (perhaps the message was cancelled) then stop processing.\n            return;\n        }\n        // Resolve the promise that lets the original caller who sent the message know that the message has been sent\n        // successfully.\n        {\n            current.sendMessagePromise.doResolve();\n            current.isProcessed = true;\n        }\n        this.moveToNextQueueItem();\n    }\n    /**\n     * Adds an inline error message to the list.\n     */\n    addErrorMessage() {\n        const { store } = this.serviceManager;\n        const errorMessage = store.getState().languagePack.errors_singleMessage;\n        const { originalMessage, localMessage } = createLocalMessageForInlineError(errorMessage);\n        store.dispatch(actions.addLocalMessageItem(localMessage, originalMessage, true));\n    }\n    /**\n     * This function is used to resend a message that had been previously sent, but for which we never received a\n     * response. The below will resend the message so we can wait for the response once it is available.\n     */\n    async resendMessage(message, localMessageID) {\n        await this.send(cloneDeep(message), MessageSendSource.HYDRATE_RESEND, localMessageID, {\n            skipQueue: true,\n            silent: true,\n        });\n    }\n    /**\n     * Send to the assistant API, IF we are inside the window to show an error, also update the error state on the\n     * message.\n     */\n    sendToAssistantAndUpdateErrorState(current) {\n        // If this message was already invalidated, don't do anything.\n        if (current.isProcessed) {\n            return;\n        }\n        this.sendToAssistant(current);\n        const now = Date.now();\n        const msSinceStarted = now - current.timeFirstRequest;\n        const isSilentErrorWindow = MS_MAX_SILENT_ERROR > msSinceStarted;\n        const type = isSilentErrorWindow ? RetryType.SILENT : RetryType.VISIBLE;\n        if (type === RetryType.VISIBLE) {\n            // Once we've hit the visible retry state, we need to mark the message as retrying and we need to mark all\n            // the other messages that are still waiting as waiting.\n            this.setMessageErrorState(current, MessageErrorState.RETRYING);\n            this.queue.waiting.forEach((waitingMessage) => {\n                this.setMessageErrorState(waitingMessage, MessageErrorState.WAITING);\n            });\n        }\n    }\n    /**\n     * Process a message returned from assistant with non-200 error code. This function will attempt to retry the request\n     * up to the length of RETRY_BEHAVIOR. If more than we require more retires than that, we fail the message.\n     *\n     * @param pendingRequest The current item in the send queue.\n     * @param resultText The raw result text or error message (if any) returned from the request.\n     * @param allowRetry Indicates if a retry is permitted.\n     */\n    async processError(pendingRequest, resultText, allowRetry) {\n        const { message, timeFirstRequest, timeLastRequest, tryCount, isProcessed, trackData, requestOptions, } = pendingRequest;\n        // If we got a 400 response code for a welcome message and it contains the \"no skills\" message, we should just\n        // stop now and put the widget into a general error state.\n        const isWelcome = message.history.is_welcome_request;\n        const now = Date.now();\n        const msSinceStarted = now - timeFirstRequest;\n        // We are still in the \"allow attempts\" window if we have not exceeded the total amount of time allowed and if\n        // we have not exceeded the number of retries allowed.\n        const isInAttemptWindow = this.timeoutMS > msSinceStarted && tryCount < MS_BETWEEN_RETRIES.length;\n        // If this message was already invalidated, don't do anything.\n        if (isProcessed) {\n            return;\n        }\n        trackData.lastRequestTime = Date.now() - timeLastRequest;\n        trackData.totalRequestTime = Date.now() - timeFirstRequest;\n        if (isInAttemptWindow && allowRetry) {\n            // This is the general/unknown error case. Pause before trying again.\n            trackData.numErrors++;\n            const retryDelay = MS_BETWEEN_RETRIES[pendingRequest.tryCount++];\n            setTimeout(() => {\n                this.sendToAssistantAndUpdateErrorState(pendingRequest);\n            }, retryDelay);\n        }\n        else {\n            // Show a catastrophic error if we are just starting out.\n            let catastrophicErrorType = false;\n            if (isWelcome) {\n                catastrophicErrorType = true;\n            }\n            else if (requestOptions.silent) {\n                // If we are in the middle of a two-step response or the message that was sent was silent, we have to throw an\n                // error manually since there isn't any user message to reference.\n                this.addErrorMessage();\n            }\n            this.serviceManager.actions.errorOccurred({\n                errorType: OnErrorType.MESSAGE_COMMUNICATION,\n                message: \"An error occurred sending a message\",\n                otherData: resultText,\n                catastrophicErrorType,\n            });\n            this.rejectFinalErrorOnMessage(pendingRequest, resultText);\n        }\n    }\n    /**\n     * If we are no longer going to retry sending a message, we call this function to mark the message as failed.\n     */\n    rejectFinalErrorOnMessage(pendingRequest, resultText = \"An undefined error occurred trying to send your message.\") {\n        const { sendMessagePromise } = pendingRequest;\n        // At this point we've either failed too many times or we failed right away while trying to load the welcome node.\n        this.setMessageErrorState(pendingRequest, MessageErrorState.FAILED);\n        // After updating the error state get the message from the pendingRequest since it has potentially been updated by\n        // setting the error state.\n        const { message } = pendingRequest;\n        // No need to call this if it's an event message or a welcome node request.\n        if (pendingRequest === this.queue.current &&\n            message.input.message_type !== MessageInputType.EVENT &&\n            !message.history.is_welcome_request) {\n            this.messageLoadingManager.end();\n        }\n        // Reject the promise that lets the original caller who sent the message know that the message failed to be sent.\n        sendMessagePromise.doReject(new Error(resultText));\n        pendingRequest.isProcessed = true;\n        if (pendingRequest === this.queue.current) {\n            // Move on to next item in queue.\n            this.moveToNextQueueItem();\n        }\n    }\n    /**\n     * Sends the message to watsonx Assistant Backend. Returns \"any\" in the error case.\n     *\n     * @param current The current item in the send queue.\n     */\n    async sendToAssistant(current) {\n        const { store } = this.serviceManager;\n        const state = store.getState();\n        const { customSendMessage } = state.config.public.messaging;\n        current.timeLastRequest = Date.now();\n        if (current.isProcessed) {\n            return;\n        }\n        try {\n            // We may update the timezone and locale on this message so we need to clone it and then update the store with\n            // the new object.\n            const message = cloneDeep(current.message);\n            current.message = message;\n            store.dispatch(actions.updateMessage(message));\n            const controller = new AbortController();\n            current.sendMessageController = controller;\n            debugLog(\"Called customSendMessage\", message);\n            await customSendMessage(message, { signal: controller.signal }, this.serviceManager.instance);\n            await this.processSuccess(current, null);\n        }\n        catch (error) {\n            consoleError(\"An error occurred while sending a message\", error);\n            const resultText = (error &&\n                (typeof error === \"string\" ? error : JSON.stringify(error))) ||\n                \"There was an unidentified error.\";\n            this.processError(current, resultText, !customSendMessage);\n        }\n    }\n    /**\n     * If there are items in the send queue, will grab the zero index item and send it to the assistant back-end via\n     * this.sendToAssistant.\n     */\n    async runQueueIfReady() {\n        if (!this.queue.current && this.queue.waiting.length > 0) {\n            const { eventBus, store } = this.serviceManager;\n            this.clearCurrentQueueItem();\n            this.queue.current = this.queue.waiting.shift();\n            const { current } = this.queue;\n            const { message, source } = current;\n            const state = store.getState();\n            const { config } = store.getState();\n            const { public: publicConfig } = config;\n            current.timeFirstRequest = Date.now();\n            // Do all the normal things for our general messageRequests, however for event messages we skip this.\n            if (message.input.message_type !== MessageInputType.EVENT) {\n                const lastResponse = getLastBotResponseWithContext(state);\n                if (lastResponse) {\n                    message.thread_id = THREAD_ID_MAIN;\n                }\n                // Welcome node fetching gets the spinner instead of the progress bar.\n                if (!message.history.is_welcome_request) {\n                    const LOADING_INDICATOR_TIMER = !publicConfig.messaging?.messageLoadingIndicatorTimeoutSecs &&\n                        publicConfig.messaging?.messageLoadingIndicatorTimeoutSecs !== 0\n                        ? MS_MAX_SILENT_LOADING\n                        : publicConfig.messaging.messageLoadingIndicatorTimeoutSecs *\n                            1000;\n                    this.messageLoadingManager.start(() => {\n                        this.serviceManager.store.dispatch(actions.addIsLoadingCounter(1));\n                    }, (didExceedMaxLoading) => {\n                        if (didExceedMaxLoading) {\n                            this.serviceManager.store.dispatch(actions.addIsLoadingCounter(-1));\n                        }\n                    }, () => {\n                        this.cancelMessageRequestByID(message.id, true);\n                    }, LOADING_INDICATOR_TIMER, this.timeoutMS);\n                }\n                if (current.isProcessed) {\n                    // This message was cancelled.\n                    return;\n                }\n                // Grab the original text before it can be modified by a pre:send handler.\n                const originalUserText = message.history?.label || message.input.text;\n                // Fire the pre:send event. User code is allowed to modify the message at this point. If this takes longer than MS_MAX_SILENT_LOADING\n                // we show a loading state.\n                await eventBus.fire({\n                    type: BusEventType.PRE_SEND,\n                    data: message,\n                    source,\n                }, this.serviceManager.instance);\n                if (current.isProcessed) {\n                    // This message was cancelled.\n                    return;\n                }\n                // We now want to update the store with whatever edits have been made to the message.\n                const localMessage = inputItemToLocalItem(message, originalUserText, current.localMessageID);\n                // If history.silent is set to true, we don't add the message to the redux store as we do not want to show it, so\n                // we don't need to update it here either.\n                if (!message.history.silent) {\n                    store.dispatch(actions.updateLocalMessageItem(localMessage));\n                    store.dispatch(actions.updateMessage(message));\n                }\n                deepFreeze(message);\n                await eventBus.fire({ type: BusEventType.SEND, data: message, source }, this.serviceManager.instance);\n            }\n            this.sendToAssistant(current);\n        }\n    }\n    /**\n     * Add a new message to the message queue.\n     *\n     * @param message A new message to add to the message queue.\n     @param source The source of the message.\n     * @param localMessageID The ID of the {@link LocalMessageItem} created from the current request.\n     * @param sendMessagePromise A promise that we will resolve or reject if the message is sent.\n     * @param requestOptions The options that were included when the request was sent.\n     */\n    addToMessageQueue(message, source, localMessageID, sendMessagePromise, requestOptions = {}) {\n        const newPendingMessage = {\n            localMessageID,\n            message,\n            sendMessagePromise,\n            requestOptions: requestOptions || {},\n            timeFirstRequest: 0,\n            timeLastRequest: 0,\n            trackData: {\n                numErrors: 0,\n                lastRequestTime: 0,\n                totalRequestTime: 0,\n            },\n            tryCount: 0,\n            isProcessed: false,\n            source,\n        };\n        this.queue.waiting.push(newPendingMessage);\n        // If the current message has entered the retrying state, then we need to update the new message to put it into\n        // the waiting state.\n        if (this.queue.current) {\n            if (message.history?.error_state === MessageErrorState.RETRYING) {\n                this.setMessageErrorState(newPendingMessage, MessageErrorState.WAITING);\n            }\n        }\n    }\n    /**\n     * Performs any finishes steps necessary to complete the current queue item.\n     */\n    clearCurrentQueueItem() {\n        if (this.queue.current) {\n            this.queue.current = null;\n        }\n    }\n    /**\n     * Move to next step in queue.\n     */\n    moveToNextQueueItem() {\n        this.clearCurrentQueueItem();\n        this.runQueueIfReady();\n    }\n    /**\n     * Changes the error state for the message with the given id and makes an a11y announcement if appropriate.\n     */\n    setMessageErrorState(pendingRequest, errorState) {\n        const { message } = pendingRequest;\n        // Find the current state for the message. Note that we want to look up the current state from the store which\n        // might be different from the message object we originally sent.\n        const { allMessagesByID } = this.serviceManager.store.getState();\n        // Update the error state if it's changed (but don't try to change an undefined state to NONE).\n        const messageToUpdate = allMessagesByID[message.id];\n        if (messageToUpdate) {\n            const currentState = messageToUpdate.history?.error_state;\n            const errorSame = currentState === errorState ||\n                (errorState === MessageErrorState.NONE && !currentState);\n            if (!errorSame) {\n                // Figure out what announcement we need to make. Note that we don't announce changes in to the WAITING state.\n                let announceMessageID;\n                // eslint-disable-next-line default-case\n                switch (errorState) {\n                    case MessageErrorState.FAILED: {\n                        announceMessageID = \"errors_ariaMessageFailed\";\n                        break;\n                    }\n                }\n                // Announce the change if necessary.\n                if (announceMessageID) {\n                    this.serviceManager.store.dispatch(actions.announceMessage({ messageID: announceMessageID }));\n                }\n                this.serviceManager.store.dispatch(actions.setMessageErrorState(message.id, errorState));\n                // After updating store get the updated message back from store and use it within the messageService. If we\n                // don't get the updated message back within the message service we could try to save an updated version of this\n                // message in store in the future but the copy within this service will be out of date.\n                const { allMessagesByID } = this.serviceManager.store.getState();\n                pendingRequest.message = allMessagesByID[message.id];\n            }\n        }\n    }\n    /**\n     * Send a message to watsonx Assistant back-end. Returns \"any\" in the error case.\n     *\n     * @param message Takes an object in the shape of a v2 message API Send object. See\n     * [Docs](https://cloud.ibm.com/apidocs/assistant-v2#send-user-input-to-assistant).\n     * @param source The source of the message.\n     * @param localMessageID The ID of the {@link LocalMessageItem} created from the current request.\n     * @param requestOptions The options that were included when the request was sent.\n     */\n    send(message, source, localMessageID, requestOptions) {\n        message.history.timestamp = message.history.timestamp || Date.now();\n        // The messageService does different things based off the message type so lets make sure one exists.\n        message.input = message.input || {};\n        message.input.message_type =\n            message.input.message_type || MessageInputType.TEXT;\n        // Create a Promise that the caller can wait on that we'll resolve if/when the message is finally successfully sent\n        // to the assistant. This gets resolved or rejected in this.processSuccess or this.processError respectively.\n        const sendMessagePromise = resolvablePromise();\n        // Add our new message to the queue and kick off the queue.\n        this.addToMessageQueue(message, source, localMessageID, sendMessagePromise, requestOptions);\n        this.runQueueIfReady();\n        // Return the promise that is either successfully resolve or rejected in this.processSuccess or this.processError.\n        return sendMessagePromise;\n    }\n    /**\n     * Cancels all message requests including any that are running now and any that are waiting in the queue.\n     */\n    cancelAllMessageRequests() {\n        while (this.queue.waiting.length) {\n            this.cancelMessageRequestByID(this.queue.waiting[0].message.id, false);\n        }\n        if (this.queue.current) {\n            this.cancelMessageRequestByID(this.queue.current.message.id, false);\n            this.clearCurrentQueueItem();\n        }\n    }\n    /**\n     * Cancel a message given an ID. Can be a message in process or one that is waiting to be processed.\n     */\n    async cancelMessageRequestByID(messageID, logError) {\n        let pendingRequest;\n        if (this.queue.current?.message.id === messageID) {\n            pendingRequest = this.queue.current;\n        }\n        else {\n            const index = this.queue.waiting.findIndex((item) => item.message.id === messageID);\n            if (index !== -1) {\n                pendingRequest = this.queue.waiting[index];\n                this.queue.waiting.splice(index, 1);\n            }\n        }\n        if (pendingRequest) {\n            const { lastResponse, sendMessageController } = pendingRequest;\n            // If someone is using customMessageSend, we let them know they should abort the request.\n            sendMessageController?.abort(\"Message was cancelled\");\n            this.rejectFinalErrorOnMessage(pendingRequest, \"Message was cancelled\");\n            if (logError) {\n                this.serviceManager.actions.errorOccurred({\n                    errorType: OnErrorType.MESSAGE_COMMUNICATION,\n                    message: \"Message was cancelled\",\n                    otherData: await safeFetchTextWithTimeout(lastResponse),\n                });\n            }\n        }\n    }\n}\n\nexport { MessageService as default };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nclass NamespaceService {\n    constructor(namespace) {\n        this.originalName = namespace;\n        this.attributeSafe = namespace;\n        this.suffix = getSuffix(namespace);\n    }\n}\n/**\n * From a given namespace, generate a unique token safe to be used as a suffix to a classname or attribute.\n * If no namespace provided, returns an empty string.\n */\nfunction getSuffix(namespace) {\n    const computedName = computeNamespaceName(namespace);\n    return computedName?.length ? `--${namespace}` : \"\";\n}\n/**\n * Given a namespace, trims and returns. If no namespace provided, returns an empty string.\n */\nfunction computeNamespaceName(namespace) {\n    return namespace ? namespace.trim() : \"\";\n}\n\nexport { NamespaceService };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a global class responsible for managing and providing access to references of \"services\" in the application.\n * Services should not hold references to each other but rather should always use the service manager to access\n * other services. This will allow for services to be created lazily and to support circular dependencies.\n */\nclass ServiceManager {\n    constructor() {\n        /**\n         * This is a registry of the elements that act as the hosts for custom responses. The key of the map is the ID of\n         * the message and the value is an object with the Element created by the widget that was provided to event listeners that they\n         * can attach their own elements to. These elements are attached to the appropriate React component when rendered. Optionally, this\n         * object can also include a slotName for when rendering the element into a slot when shadowRoot is enabled.\n         */\n        this.userDefinedElementRegistry = new Map();\n        /**\n         * Indicates the number of times that a restart has occurred. This can be used by various asynchronous operations to\n         * determine if a restart occurred during the operation and if the results should be ignored.\n         */\n        this.restartCount = 0;\n    }\n    /**\n     * Convenience functions for firing events on the event bus.\n     */\n    async fire(busEvent) {\n        return this.eventBus.fire(busEvent, this.instance);\n    }\n}\n\nexport { ServiceManager };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// This file is a mock of the localStorage API. In IE11 when developing on localhost, we can get access denied errors.\n// This is just a small fallback for that use case.\nlet innerStorage = {};\nconst storage = {\n    getItem(key) {\n        return innerStorage[key];\n    },\n    setItem(key, value) {\n        innerStorage[key] = value;\n    },\n    removeItem(key) {\n        delete innerStorage[key];\n    },\n    length: Object.keys(innerStorage).length,\n    clear() {\n        innerStorage = {};\n    },\n    key(index) {\n        return Object.keys(innerStorage)[index];\n    },\n};\n\nexport { storage as default };\n","import { VERSION } from '../environmentVariables.js';\nimport { IS_SESSION_STORAGE } from '../utils/browserUtils.js';\nimport { consoleError } from '../utils/miscUtils.js';\nimport storage$1 from './mockStorage.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This module is responsible for managing the storage of persisted session data. This way if a user\n * navigates to a new page, the state of the window, thread and other UI state items will remain in tact.\n */\n// We use sessionStorage instead of localStorage to not have to have a public cookie policy that must be accepted in EU.\nconst storage = IS_SESSION_STORAGE()\n    ? window.sessionStorage\n    : storage$1;\nclass UserSessionStorageService {\n    constructor(serviceManager) {\n        this.serviceManager = serviceManager;\n        this.prefix = `CARBON_CHAT_SESSION${this.serviceManager?.namespace?.suffix || \"\"}`;\n    }\n    /**\n     * Get the session object.\n     */\n    loadChatSession() {\n        try {\n            const chatSessionString = storage.getItem(this.getChatSessionKey());\n            const chatSession = chatSessionString\n                ? JSON.parse(chatSessionString)\n                : null;\n            // If the saved session is from a previous version of Carbon AI chat, we just throw it away to avoid having to deal with\n            // having to make sure these sessions are backwards compatible.\n            if (chatSession?.version === VERSION) {\n                return chatSession;\n            }\n            this.clearChatSession();\n            return null;\n        }\n        catch (error) {\n            this.clearChatSession();\n            return null;\n        }\n    }\n    /**\n     * Get the session object.\n     */\n    loadLauncherSession() {\n        try {\n            const launcherSessionString = storage.getItem(this.getLauncherSessionKey());\n            const launcherSession = launcherSessionString\n                ? JSON.parse(launcherSessionString)\n                : null;\n            // If the saved session is from a previous version of Carbon AI chat, we just throw it away to avoid having to deal with\n            // having to make sure these sessions are backwards compatible.\n            if (launcherSession?.version === VERSION) {\n                launcherSession.wasLoadedFromBrowser = true;\n                return launcherSession;\n            }\n            this.clearLauncherSession();\n            return null;\n        }\n        catch (error) {\n            this.clearLauncherSession();\n            return null;\n        }\n    }\n    /**\n     * Set a new version of the user based session.\n     */\n    persistChatSession(session) {\n        try {\n            storage.setItem(this.getChatSessionKey(), JSON.stringify(session));\n        }\n        catch (error) {\n            consoleError(\"Error in persistChatSession\", error);\n        }\n    }\n    /**\n     * Set a new version of the user based session.\n     */\n    persistLauncherSession(session) {\n        try {\n            storage.setItem(this.getLauncherSessionKey(), JSON.stringify(session));\n        }\n        catch (error) {\n            consoleError(\"Error in persistLauncherSession\", error);\n        }\n    }\n    /**\n     * Remove the given session from storage.\n     */\n    clearChatSession() {\n        try {\n            storage.removeItem(this.getChatSessionKey());\n        }\n        catch (error) {\n            consoleError(\"Error in clearChatSession\", error);\n        }\n    }\n    /**\n     * Remove the given session from storage.\n     */\n    clearLauncherSession() {\n        try {\n            storage.removeItem(this.getLauncherSessionKey());\n        }\n        catch (error) {\n            consoleError(\"Error in clearLauncherSession\", error);\n        }\n    }\n    /**\n     * Returns the sessionStorage key for the session id for the given user.\n     */\n    getChatSessionKey() {\n        return this.prefix;\n    }\n    /**\n     * Returns the sessionStorage key for the session id for the given user.\n     */\n    getLauncherSessionKey() {\n        return this.prefix;\n    }\n}\n\nexport { UserSessionStorageService };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains customizer functions for lodash utility functions that accept them.\n */\n/**\n * Returns the new array value which will replace the current value since we don't want both values to get merged.\n */\nfunction replaceCurrentArrayValue(currentValue, newValue) {\n    if (Array.isArray(newValue)) {\n        return newValue;\n    }\n    // Let the method itself handle merging non-array values.\n    return undefined;\n}\n\nexport { replaceCurrentArrayValue };\n","import { HA_END_CHAT, HA_UPDATE_FILE_UPLOAD_IN_PROGRESS, HA_SET_IS_SCREEN_SHARING, HA_UPDATE_CAPABILITIES, HA_SET_AGENT_LEFT_CHAT, HA_UPDATE_IS_TYPING, HA_UPDATE_IS_SUSPENDED, HA_SET_PERSISTED_STATE, HA_SET_AGENT_JOINED, HA_SET_SHOW_SCREEN_SHARE_REQUEST, HA_SET_AGENT_AVAILABILITY, HA_SET_IS_RECONNECTING, HA_SET_IS_CONNECTING } from './agentActions.js';\nimport { applyLocalMessageUIState } from './reducerUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Redux reducers for human agent actions.\n */\nconst agentReducers = {\n    [HA_SET_IS_CONNECTING]: (state, action) => {\n        const { isConnecting, localMessageID } = action;\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                isConnecting,\n                activeLocalMessageID: localMessageID,\n                // When connecting, clear any unread messages from a previous conversation.\n                numUnreadMessages: isConnecting\n                    ? 0\n                    : state.agentState.numUnreadMessages,\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    agentState: {\n                        ...state.persistedToBrowserStorage.chatState.agentState,\n                        isSuspended: isConnecting\n                            ? state.persistedToBrowserStorage.chatState.agentState.isSuspended\n                            : false,\n                    },\n                },\n            },\n        };\n    },\n    [HA_SET_IS_RECONNECTING]: (state, action) => {\n        const { isReconnecting } = action;\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                isReconnecting,\n            },\n        };\n    },\n    [HA_SET_AGENT_AVAILABILITY]: (state, action) => {\n        if (!state.agentState.isConnecting) {\n            // If the agent is not currently connecting, just ignore the availability update.\n            return state;\n        }\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                availability: state.agentState.isConnecting\n                    ? action.availability\n                    : null,\n            },\n        };\n    },\n    [HA_SET_SHOW_SCREEN_SHARE_REQUEST]: (state, { showRequest }) => {\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                showScreenShareRequest: showRequest,\n            },\n        };\n    },\n    [HA_SET_AGENT_JOINED]: (state, action) => {\n        const agentProfiles = {\n            ...state.persistedToBrowserStorage.chatState.agentState.agentProfiles,\n        };\n        const { agentProfile } = action;\n        if (agentProfile) {\n            agentProfiles[agentProfile.id] = agentProfile;\n        }\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                isConnecting: false,\n                isReconnecting: false,\n                availability: null,\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    agentState: {\n                        ...state.persistedToBrowserStorage.chatState.agentState,\n                        isConnected: true,\n                        agentProfile,\n                        agentProfiles,\n                    },\n                },\n            },\n        };\n    },\n    [HA_SET_PERSISTED_STATE]: (state, action) => ({\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                agentState: {\n                    ...state.persistedToBrowserStorage.chatState.agentState,\n                    serviceDeskState: action.state,\n                },\n            },\n        },\n    }),\n    [HA_UPDATE_IS_SUSPENDED]: (state, action) => {\n        if (!state.agentState.isConnecting &&\n            !state.persistedToBrowserStorage.chatState.agentState.isConnected) {\n            // If the user is not connecting or connected to an agent, then we can't update the suspended state.\n            return state;\n        }\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    agentState: {\n                        ...state.persistedToBrowserStorage.chatState.agentState,\n                        isSuspended: action.isSuspended,\n                    },\n                },\n            },\n        };\n    },\n    [HA_UPDATE_IS_TYPING]: (state, action) => {\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                isAgentTyping: action.isTyping,\n            },\n        };\n    },\n    [HA_SET_AGENT_LEFT_CHAT]: (state) => \n    // Remove the agent's profile and typing indicator.\n    ({\n        ...state,\n        botMessageState: {\n            ...state.botMessageState,\n        },\n        agentState: {\n            ...state.agentState,\n            isAgentTyping: false,\n        },\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                agentState: {\n                    ...state.persistedToBrowserStorage.chatState.agentState,\n                    agentProfile: null,\n                },\n            },\n        },\n    }),\n    [HA_UPDATE_CAPABILITIES]: (state, action) => {\n        const newInputState = {\n            ...state.agentState.inputState,\n            ...action.capabilities,\n        };\n        if (!newInputState.allowFileUploads) {\n            newInputState.files = [];\n        }\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                inputState: newInputState,\n            },\n        };\n    },\n    [HA_SET_IS_SCREEN_SHARING]: (state, { isSharing }) => ({\n        ...state,\n        agentState: {\n            ...state.agentState,\n            isScreenSharing: isSharing,\n        },\n    }),\n    [HA_UPDATE_FILE_UPLOAD_IN_PROGRESS]: (state, action) => ({\n        ...state,\n        agentState: {\n            ...state.agentState,\n            fileUploadInProgress: action.fileUploadInProgress,\n        },\n    }),\n    [HA_END_CHAT]: (state) => {\n        // Update the UI state of the current CTA message to indicate that chat was ended.\n        let newState = applyLocalMessageUIState(state, state.agentState.activeLocalMessageID, \"wasAgentChatEnded\", true);\n        // End the chat.\n        newState = {\n            ...newState,\n            agentState: {\n                ...newState.agentState,\n                isConnecting: false,\n                isReconnecting: false,\n                availability: null,\n                activeLocalMessageID: null,\n                isAgentTyping: false,\n                inputState: {\n                    ...newState.agentState.inputState,\n                    isReadonly: false,\n                },\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    agentState: {\n                        ...state.persistedToBrowserStorage.chatState.agentState,\n                        isConnected: false,\n                        isSuspended: false,\n                        agentProfile: null,\n                    },\n                },\n            },\n        };\n        return newState;\n    },\n};\n\nexport { agentReducers };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * When the message history is being hydrated and there was an active tour, or when starting a tour, populate the tour\n * step items. If the message with the tour data can not be found, or there is no activeTourID, clear all the existing\n * tour data.\n */\nfunction populateTourStepItems(state) {\n    const { activeTourID } = state.persistedToBrowserStorage.chatState.persistedTourState;\n    if (activeTourID) {\n        // If there's an activeTourID find the originalMessage that contains a localMessage that triggered the current\n        // active tour.\n        const originalMessage = state.allMessagesByID[activeTourID];\n        // Find the GenericItem within the originalMessage that has the active tour data.\n        const tourMessageItem = originalMessage?.output?.generic?.find((message) => Boolean(message.user_defined?.steps));\n        if (tourMessageItem) {\n            // Populate the tourState now that we have the active tour data.\n            return {\n                ...state,\n                tourState: {\n                    ...state.tourState,\n                    activeTourStepItems: tourMessageItem.user_defined?.steps,\n                },\n            };\n        }\n    }\n    // If the message with the tour data can not be found, or there is no activeTourID, clear all the existing tour data.\n    return clearTourState(state);\n}\n/**\n * Clear all tour state.\n */\nfunction clearTourState(state) {\n    return {\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                persistedTourState: {\n                    activeTourID: null,\n                    activeTourCurrentStepIndex: null,\n                },\n            },\n            launcherState: {\n                ...state.persistedToBrowserStorage.launcherState,\n                activeTour: false,\n            },\n        },\n        tourState: {\n            ...state.tourState,\n            activeTourStepItems: null,\n        },\n    };\n}\n\nexport { clearTourState, populateTourStepItems };\n","import merge from 'lodash-es/merge.js';\nimport mergeWith from 'lodash-es/mergeWith.js';\nimport { outputItemToLocalItem } from '../schema/outputItemToLocalItem.js';\nimport '../utils/constants.js';\nimport { replaceCurrentArrayValue } from '../utils/customizers.js';\nimport { streamItemID, isResponse, isRequest } from '../utils/messageUtils.js';\nimport { UPDATE_MAIN_HEADER_AVATAR, SET_STREAM_ID, SET_STOP_STREAMING_BUTTON_DISABLED, SET_STOP_STREAMING_BUTTON_VISIBLE, UPDATE_MAX_VISIBLE_HEADER_OBJECTS, UPDATE_CHAT_HEADER_CONFIG, STREAMING_ADD_CHUNK, STREAMING_MERGE_HISTORY, STREAMING_START, SET_RESPONSE_PANEL_CONTENT, SET_RESPONSE_PANEL_IS_OPEN, ADD_NESTED_MESSAGES, FILE_UPLOAD_INPUT_ERROR, CLEAR_INPUT_FILES, REMOVE_ALL_NOTIFICATIONS, REMOVE_NOTIFICATIONS, ADD_NOTIFICATION, REMOVE_LOCAL_MESSAGE_ITEM, REMOVE_INPUT_FILE, ADD_INPUT_FILE, SET_IS_BROWSER_PAGE_VISIBLE, UPDATE_INPUT_STATE, CHANGE_STEP_IN_TOUR, CLEAR_TOUR_DATA, SET_TOUR_DATA, SET_CUSTOM_PANEL_OPTIONS, SET_CUSTOM_PANEL_OPEN, SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN, CLOSE_IFRAME_PANEL, OPEN_IFRAME_CONTENT, SET_LAUNCHER_MINIMIZED, SET_CHAT_MESSAGES_PROPERTY, SET_LAUNCHER_CONFIG_PROPERTY, SET_LAUNCHER_PROPERTY, UPDATE_LAUNCHER_CONFIG, TOGGLE_HOME_SCREEN, SET_HOME_SCREEN_IS_OPEN, ACCEPTED_DISCLAIMER, ANNOUNCE_MESSAGE, MERGE_HISTORY, SET_MESSAGE_HISTORY_PROPERTY, SET_MESSAGE_UI_PROPERTY, UPDATE_HOME_SCREEN_CONFIG, UPDATE_CSS_VARIABLES, UPDATE_MAIN_HEADER_TITLE, UPDATE_LAUNCHER_AVATAR_URL, UPDATE_BOT_AVATAR_URL, UPDATE_BOT_NAME, SET_INITIAL_VIEW_CHANGE_COMPLETE, SET_VIEW_CHANGING, SET_VIEW_STATE, UPDATE_HAS_SENT_NON_WELCOME_MESSAGE, UPDATE_PERSISTED_CHAT_STATE, SET_APP_STATE_VALUE, ADD_IS_HYDRATING_COUNTER, ADD_IS_LOADING_COUNTER, ADD_IS_TYPING_COUNTER, MESSAGE_SET_OPTION_SELECTED, ADD_MESSAGE, UPDATE_MESSAGE, UPDATE_LOCAL_MESSAGE_ITEM, REMOVE_MESSAGES, ADD_LOCAL_MESSAGE_ITEM, HYDRATE_MESSAGE_HISTORY, RESTART_CONVERSATION, HYDRATE_CHAT, CHANGE_STATE } from './actions.js';\nimport { agentReducers } from './agentReducers.js';\nimport { setHomeScreenOpenState, applyFullMessage, applyBotMessageState, applyLocalMessageUIState, handleViewStateChange, DEFAULT_CUSTOM_PANEL_STATE, DEFAULT_CITATION_PANEL_STATE, DEFAULT_IFRAME_PANEL_STATE } from './reducerUtils.js';\nimport { clearTourState, populateTourStepItems } from './tourReducerUtils.js';\nimport { AgentMessageType } from '../../../types/messaging/Messages.js';\nimport { FileStatusValue, LauncherType } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The set of agent message types that should be excluded on the unread agent message count.\nconst EXCLUDE_AGENT_UNREAD = new Set([\n    AgentMessageType.USER_ENDED_CHAT,\n    AgentMessageType.CHAT_WAS_ENDED,\n    AgentMessageType.RELOAD_WARNING,\n]);\nconst reducers = {\n    [CHANGE_STATE]: (state, action) => merge({}, state, action.partialState),\n    [HYDRATE_CHAT]: (state) => ({\n        ...state,\n        isHydrated: true,\n    }),\n    [RESTART_CONVERSATION]: (state) => {\n        let newState = {\n            ...state,\n            botMessageState: {\n                ...state.botMessageState,\n                localMessageIDs: [],\n                messageIDs: [],\n                isTypingCounter: 0,\n                isScrollAnchored: false,\n            },\n            allMessageItemsByID: {},\n            allMessagesByID: {},\n            iFramePanelState: {\n                ...DEFAULT_IFRAME_PANEL_STATE,\n            },\n            viewSourcePanelState: {\n                ...DEFAULT_CITATION_PANEL_STATE,\n            },\n            customPanelState: {\n                ...DEFAULT_CUSTOM_PANEL_STATE,\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    homeScreenState: {\n                        ...state.persistedToBrowserStorage.chatState.homeScreenState,\n                        showBackToBot: false,\n                    },\n                },\n            },\n            isHydrated: false,\n            catastrophicErrorType: null,\n        };\n        // Clear the tour state on restart.\n        newState = clearTourState(newState);\n        if (newState.homeScreenConfig.is_on) {\n            newState = setHomeScreenOpenState(newState, true);\n        }\n        return newState;\n    },\n    // TODO: Need session history test case for setting the alternate suggestions values\n    [HYDRATE_MESSAGE_HISTORY]: (state, action) => {\n        let newState = {\n            ...state,\n            ...action.messageHistory,\n        };\n        // If there's an active tour then use the new state with message history to populate the tour state.\n        if (state.persistedToBrowserStorage.chatState.persistedTourState.activeTourID) {\n            newState = populateTourStepItems(newState);\n        }\n        return newState;\n    },\n    [ADD_LOCAL_MESSAGE_ITEM]: (state, action) => {\n        const { messageItem, message, addMessage, addAfterID } = action;\n        const { id } = messageItem.ui_state;\n        // If we receive back a silent message, we don't want to add to the store.\n        const isSilent = message.history.silent;\n        let newState = state;\n        if (addMessage) {\n            newState = applyFullMessage(newState, message);\n        }\n        const currentIndex = newState.botMessageState.localMessageIDs.findIndex((existingID) => existingID === id);\n        const newLocalMessageIDs = [...newState.botMessageState.localMessageIDs];\n        let insertAtIndex = currentIndex;\n        if (currentIndex !== -1) {\n            // Remove the ID from the array. We may insert it back at this index.\n            newLocalMessageIDs.splice(currentIndex, 1);\n        }\n        else {\n            // By default, insert the new ID at the end.\n            insertAtIndex = newLocalMessageIDs.length;\n        }\n        // If an \"addAfterID\" was provided, use that to determine where to put this new ID.\n        if (addAfterID) {\n            const afterIDIndex = newLocalMessageIDs.findIndex((existingID) => existingID === addAfterID);\n            if (afterIDIndex !== -1) {\n                insertAtIndex = afterIDIndex + 1;\n            }\n        }\n        // Insert the ID.\n        newLocalMessageIDs.splice(insertAtIndex, 0, id);\n        if (!isSilent) {\n            newState = {\n                ...newState,\n                allMessageItemsByID: {\n                    ...newState.allMessageItemsByID,\n                    [id]: messageItem,\n                },\n                botMessageState: {\n                    ...newState.botMessageState,\n                    localMessageIDs: newLocalMessageIDs,\n                },\n            };\n            if (newState.persistedToBrowserStorage.chatState.homeScreenState\n                .isHomeScreenOpen) {\n                // When a message has been sent, we don't want the home screen open anymore.\n                newState = setHomeScreenOpenState(newState, false);\n            }\n            const isBotMessage = !messageItem.item.agent_message_type;\n            const isMainWindowOpen = state.persistedToBrowserStorage.launcherState.viewState.mainWindow;\n            if (!isBotMessage && (!isMainWindowOpen || !state.isBrowserPageVisible)) {\n                // This message is with an agent, and it occurred while the main window was closed or the page is not\n                // visible, so it may need to be counted as an unread message.\n                const fromAgent = !isRequest(message);\n                if (fromAgent &&\n                    !EXCLUDE_AGENT_UNREAD.has(messageItem.item.agent_message_type)) {\n                    // If this message came from an agent, then add one to the unread count, but not if it's one of the excluded\n                    // types.\n                    newState = {\n                        ...newState,\n                        agentState: {\n                            ...newState.agentState,\n                            numUnreadMessages: newState.agentState.numUnreadMessages + 1,\n                        },\n                    };\n                }\n            }\n        }\n        return newState;\n    },\n    [REMOVE_MESSAGES]: (state, { messageIDs }) => {\n        const idsSet = new Set(messageIDs);\n        const newAllMessages = { ...state.allMessagesByID };\n        const newAllMessageItems = { ...state.allMessageItemsByID };\n        // Remove all the message IDs from the message list.\n        const newMessageIDs = state.botMessageState.messageIDs.filter((messageID) => !idsSet.has(messageID));\n        // Remove all the message items from the items list for items that are part of one of the messages being\n        // removed. Also remove the matching items from the map.\n        const newMessageItemsIDs = state.botMessageState.localMessageIDs.filter((messageItemID) => {\n            const messageItem = newAllMessageItems[messageItemID];\n            const removeItem = idsSet.has(messageItem?.fullMessageID);\n            if (removeItem) {\n                delete newAllMessageItems[messageItemID];\n            }\n            return !removeItem;\n        });\n        // Remove the message objects from the map.\n        messageIDs.forEach((messageID) => {\n            delete newAllMessages[messageID];\n        });\n        const newState = {\n            ...state,\n            allMessagesByID: newAllMessages,\n            allMessageItemsByID: newAllMessageItems,\n            botMessageState: {\n                ...state.botMessageState,\n                messageIDs: newMessageIDs,\n                localMessageIDs: newMessageItemsIDs,\n            },\n        };\n        return newState;\n    },\n    [UPDATE_LOCAL_MESSAGE_ITEM]: (state, action) => {\n        const { messageItem } = action;\n        return {\n            ...state,\n            allMessageItemsByID: {\n                ...state.allMessageItemsByID,\n                [messageItem.ui_state.id]: messageItem,\n            },\n        };\n    },\n    [UPDATE_MESSAGE]: (state, action) => {\n        const { message } = action;\n        return {\n            ...state,\n            allMessagesByID: {\n                ...state.allMessagesByID,\n                [message.id]: message,\n            },\n        };\n    },\n    [ADD_MESSAGE]: (state, action) => {\n        const { message } = action;\n        const messageID = message.id;\n        let newState = state;\n        if (isResponse(message)) {\n            // For message responses, we need to re-order any items that may already be present in the store if they had\n            // been added during a previous stream. We're going to use the following algorithm.\n            //\n            // 1. Locate the first item already in the list. This will be the insertion point for the re-ordered items.\n            // 2. Remove all existing items from the list.\n            // 3. Insert the new items back into the list at the insertion point but only items that were previously in\n            //    the list.\n            //\n            // Example: if we've got response 1 with items 1.1 and 1.2, response 2 with items 2.1, 2.2, 2.3, and response 3\n            // with 3.1. We start with.\n            //\n            //  [1.1, 1.2, 2.1, 2.2, 2.3, 3.1]\n            //\n            // Now, we \"re-add\" message 2 expect that we 2.1 and 2.2 are reversed in order and 2.3 and 2.4 is going to be\n            // added ([2.2, 2.1, 2.4]).\n            //\n            // 1. The first item is \"2.1\" at index 2.\n            // 2. Remove all items for response 2 giving us [1.1, 1.2, 3.1]\n            // 3. Insert 2.1 and 2.2 (those were the only items we already had) back in the list at index 2 in the new order.\n            //    item 2.4 will be inserted later as an individual item.\n            //\n            // Result: [1.1, 1.2, 2.2, 2.1, 3.1]\n            // Get the ordered list of the new items. Only items with a stream ID can be re-ordered at this point.\n            const itemIDsInNewMessage = [];\n            message.output.generic.forEach((item) => {\n                const id = streamItemID(messageID, item);\n                if (id) {\n                    itemIDsInNewMessage.push(id);\n                }\n            });\n            const newAllMessageItemsByID = { ...state.allMessageItemsByID };\n            const existingItemIDs = [];\n            let firstFoundIndex;\n            // Remove all the existing items for this message. Also keep track of where the first one was found.\n            const newLocalMessageIDs = state.botMessageState.localMessageIDs.filter((itemID, index) => {\n                const item = state.allMessageItemsByID[itemID];\n                const isItemInMessage = item.fullMessageID === messageID;\n                if (isItemInMessage) {\n                    if (firstFoundIndex === undefined) {\n                        firstFoundIndex = index;\n                    }\n                    if (!itemIDsInNewMessage.includes(itemID)) {\n                        // If this item is not in the new message, then remove the whole item object.\n                        delete newAllMessageItemsByID[itemID];\n                    }\n                    else {\n                        // Otherwise, this item will may get re-inserted back into the list (if it still exists).\n                        existingItemIDs.push(itemID);\n                    }\n                }\n                // Keep the item if it's not in the new message.\n                return !isItemInMessage;\n            });\n            // Now insert the message items back into the list at the right spot, but only the items we already had.\n            if (existingItemIDs.length) {\n                const itemIDsToInsert = itemIDsInNewMessage.filter((itemID) => existingItemIDs.includes(itemID));\n                if (itemIDsToInsert.length) {\n                    newLocalMessageIDs.splice(firstFoundIndex, 0, ...itemIDsToInsert);\n                }\n            }\n            newState = {\n                ...newState,\n                allMessageItemsByID: newAllMessageItemsByID,\n                botMessageState: {\n                    ...newState.botMessageState,\n                    localMessageIDs: newLocalMessageIDs,\n                },\n            };\n        }\n        return applyFullMessage(newState, message);\n    },\n    [MESSAGE_SET_OPTION_SELECTED]: (state, action) => {\n        const newMessagesByID = {\n            ...state.allMessageItemsByID,\n        };\n        newMessagesByID[action.messageID] = {\n            ...state.allMessageItemsByID[action.messageID],\n            ui_state: {\n                ...state.allMessageItemsByID[action.messageID].ui_state,\n                optionSelected: action.sentMessage,\n            },\n        };\n        return {\n            ...state,\n            allMessageItemsByID: newMessagesByID,\n        };\n    },\n    [ADD_IS_TYPING_COUNTER]: (state, action) => {\n        return {\n            ...state,\n            botMessageState: {\n                ...state.botMessageState,\n                isTypingCounter: Math.max(state.botMessageState.isTypingCounter + action.addToIsTyping, 0),\n            },\n        };\n    },\n    [ADD_IS_LOADING_COUNTER]: (state, action) => {\n        return {\n            ...state,\n            botMessageState: {\n                ...state.botMessageState,\n                isLoadingCounter: Math.max(state.botMessageState.isLoadingCounter + action.addToIsLoading, 0),\n            },\n        };\n    },\n    [ADD_IS_HYDRATING_COUNTER]: (state, action) => {\n        return {\n            ...state,\n            botMessageState: {\n                ...state.botMessageState,\n                isHydratingCounter: Math.max(state.botMessageState.isHydratingCounter + action.addToIsHydrating, 0),\n            },\n        };\n    },\n    [SET_APP_STATE_VALUE]: (state, action) => ({\n        ...state,\n        [action.key]: action.value,\n    }),\n    [UPDATE_PERSISTED_CHAT_STATE]: (state, action) => ({\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                ...action.chatState,\n            },\n        },\n    }),\n    [UPDATE_HAS_SENT_NON_WELCOME_MESSAGE]: (state, action) => {\n        if (state.persistedToBrowserStorage.chatState.hasSentNonWelcomeMessage ===\n            action.hasSentNonWelcomeMessage) {\n            return state;\n        }\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    hasSentNonWelcomeMessage: action.hasSentNonWelcomeMessage,\n                },\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    hasSentNonWelcomeMessage: action.hasSentNonWelcomeMessage,\n                },\n            },\n        };\n    },\n    [SET_VIEW_STATE]: (state, action) => {\n        return handleViewStateChange(state, action.viewState);\n    },\n    [SET_VIEW_CHANGING]: (state, action) => ({\n        ...state,\n        viewChanging: action.viewChanging,\n    }),\n    [SET_INITIAL_VIEW_CHANGE_COMPLETE]: (state, action) => ({\n        ...state,\n        initialViewChangeComplete: action.changeComplete,\n    }),\n    [UPDATE_BOT_NAME]: (state, action) => {\n        return {\n            ...state,\n            botName: action.name,\n            headerDisplayName: state.theme.useAITheme\n                ? state.headerDisplayName\n                : action.name,\n        };\n    },\n    [UPDATE_BOT_AVATAR_URL]: (state, action) => ({\n        ...state,\n        botAvatarURL: action.url,\n    }),\n    [UPDATE_LAUNCHER_AVATAR_URL]: (state, action) => ({\n        ...state,\n        launcher: {\n            ...state.launcher,\n            config: {\n                ...state.launcher.config,\n                mobile: {\n                    ...state.launcher.config.mobile,\n                    avatar_url_override: action.source,\n                },\n                desktop: {\n                    ...state.launcher.config.desktop,\n                    avatar_url_override: action.source,\n                },\n            },\n        },\n    }),\n    [UPDATE_MAIN_HEADER_TITLE]: (state, action) => ({\n        ...state,\n        headerDisplayName: action.title,\n    }),\n    [UPDATE_CSS_VARIABLES]: (state, action) => {\n        const { config } = state;\n        const { variables } = action;\n        // Update css variables in app config with merged css variables.\n        const newConfig = {\n            public: {\n                ...config.public,\n            },\n        };\n        return {\n            ...state,\n            // This is modifying the original config objects. We may need to hold a reference to the original at some point.\n            config: newConfig,\n            cssVariableOverrides: variables,\n        };\n    },\n    // Right now we just merge here. When we understand home screen enough to open up these values to a developer,\n    // we will probably want to split this reducer into individual parts.\n    [UPDATE_HOME_SCREEN_CONFIG]: (state, action) => {\n        // background_gradient is deprecated. When it's removed the following config manipulation function can be removed\n        // and the merge in this reducer can go back to using action.homeScreenConfig for the new value instead of\n        // newHomeScreenConfig.\n        const newHomeScreenConfig = action.homeScreenConfig;\n        return {\n            ...state,\n            homeScreenConfig: mergeWith({}, state.homeScreenConfig, newHomeScreenConfig, replaceCurrentArrayValue),\n        };\n    },\n    [SET_MESSAGE_UI_PROPERTY]: (state, action) => {\n        return applyLocalMessageUIState(state, action.localMessageID, action.propertyName, action.propertyValue);\n    },\n    [SET_MESSAGE_HISTORY_PROPERTY]: (state, action) => {\n        const { messageID, propertyName, propertyValue } = action;\n        const oldMessage = state.allMessagesByID[messageID];\n        if (oldMessage) {\n            return {\n                ...state,\n                allMessagesByID: {\n                    ...state.allMessagesByID,\n                    [messageID]: {\n                        ...oldMessage,\n                        history: {\n                            ...oldMessage.history,\n                            [propertyName]: propertyValue,\n                        },\n                    },\n                },\n            };\n        }\n        return state;\n    },\n    [MERGE_HISTORY]: (state, action) => {\n        const oldMessage = state.allMessagesByID[action.messageID];\n        if (oldMessage) {\n            return {\n                ...state,\n                allMessagesByID: {\n                    ...state.allMessagesByID,\n                    [action.messageID]: {\n                        ...oldMessage,\n                        history: merge({}, oldMessage.history, action.history),\n                    },\n                },\n            };\n        }\n        return state;\n    },\n    [ANNOUNCE_MESSAGE]: (state, action) => ({\n        ...state,\n        announceMessage: action.message,\n    }),\n    [ACCEPTED_DISCLAIMER]: (state) => ({\n        ...state,\n        persistedToBrowserStorage: {\n            ...state.persistedToBrowserStorage,\n            chatState: {\n                ...state.persistedToBrowserStorage.chatState,\n                disclaimersAccepted: {\n                    ...state.persistedToBrowserStorage.chatState.disclaimersAccepted,\n                    [window.location.hostname]: true,\n                },\n            },\n        },\n    }),\n    [SET_HOME_SCREEN_IS_OPEN]: (state, { isOpen }) => setHomeScreenOpenState(state, isOpen),\n    [TOGGLE_HOME_SCREEN]: (state) => setHomeScreenOpenState(state, !state.persistedToBrowserStorage.chatState.homeScreenState\n        .isHomeScreenOpen, true),\n    [UPDATE_LAUNCHER_CONFIG]: (state, action) => {\n        const newConfig = merge({}, state.launcher.config, action.launcherConfig);\n        return {\n            ...state,\n            launcher: {\n                ...state.launcher,\n                config: newConfig,\n            },\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    desktopLauncherIsExpanded: newConfig.is_on && newConfig.desktop.is_on\n                        ? state.persistedToBrowserStorage.launcherState\n                            .desktopLauncherIsExpanded\n                        : false,\n                    mobileLauncherIsExtended: newConfig.is_on && newConfig.mobile.is_on\n                        ? state.persistedToBrowserStorage.launcherState\n                            .mobileLauncherIsExtended\n                        : false,\n                },\n            },\n        };\n    },\n    [SET_LAUNCHER_PROPERTY]: (state, action) => {\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    [action.propertyName]: action.propertyValue,\n                },\n            },\n        };\n    },\n    [SET_LAUNCHER_CONFIG_PROPERTY]: (state, action) => {\n        const newState = {\n            ...state,\n            launcher: {\n                ...state.launcher,\n                config: {\n                    ...state.launcher.config,\n                },\n            },\n        };\n        if (!action.launcherType || action.launcherType === LauncherType.DESKTOP) {\n            newState.launcher.config.desktop = {\n                ...state.launcher.config.desktop,\n                [action.propertyName]: action.propertyValue,\n            };\n        }\n        if (!action.launcherType || action.launcherType === LauncherType.MOBILE) {\n            newState.launcher.config.mobile = {\n                ...state.launcher.config.mobile,\n                [action.propertyName]: action.propertyValue,\n            };\n        }\n        return newState;\n    },\n    [SET_CHAT_MESSAGES_PROPERTY]: (state, action) => {\n        return applyBotMessageState(state, {\n            [action.propertyName]: action.propertyValue,\n        });\n    },\n    [SET_LAUNCHER_MINIMIZED]: (state) => {\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    desktopLauncherIsExpanded: false,\n                    desktopLauncherWasMinimized: true,\n                },\n            },\n        };\n    },\n    [OPEN_IFRAME_CONTENT]: (state, { messageItem }) => {\n        return {\n            ...state,\n            iFramePanelState: {\n                ...state.iFramePanelState,\n                messageItem,\n                isOpen: true,\n            },\n            announceMessage: {\n                messageID: \"iframe_ariaOpenedPanel\",\n            },\n        };\n    },\n    [CLOSE_IFRAME_PANEL]: (state) => {\n        return {\n            ...state,\n            iFramePanelState: {\n                ...state.iFramePanelState,\n                isOpen: false,\n            },\n            announceMessage: {\n                messageID: \"iframe_ariaClosedPanel\",\n            },\n        };\n    },\n    [SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN]: (state, action) => {\n        return {\n            ...state,\n            viewSourcePanelState: {\n                ...state.viewSourcePanelState,\n                citationItem: action.citationItem,\n                relatedSearchResult: action.relatedSearchResult,\n                isOpen: action.isOpen,\n            },\n        };\n    },\n    [SET_CUSTOM_PANEL_OPEN]: (state, action) => {\n        return {\n            ...state,\n            customPanelState: {\n                ...state.customPanelState,\n                isOpen: action.isOpen,\n            },\n        };\n    },\n    [SET_CUSTOM_PANEL_OPTIONS]: (state, action) => {\n        return {\n            ...state,\n            customPanelState: {\n                ...state.customPanelState,\n                options: action.options,\n            },\n        };\n    },\n    [SET_TOUR_DATA]: (state, action) => {\n        const newStateWithPersistedTourData = {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    persistedTourState: {\n                        activeTourID: action.newActiveTourMessageID,\n                        activeTourCurrentStepIndex: 0,\n                    },\n                },\n                launcherState: {\n                    ...state.persistedToBrowserStorage.launcherState,\n                    activeTour: true,\n                },\n            },\n        };\n        return populateTourStepItems(newStateWithPersistedTourData);\n    },\n    [CLEAR_TOUR_DATA]: (state) => {\n        return clearTourState(state);\n    },\n    [CHANGE_STEP_IN_TOUR]: (state, action) => {\n        return {\n            ...state,\n            persistedToBrowserStorage: {\n                ...state.persistedToBrowserStorage,\n                chatState: {\n                    ...state.persistedToBrowserStorage.chatState,\n                    persistedTourState: {\n                        ...state.persistedToBrowserStorage.chatState.persistedTourState,\n                        activeTourCurrentStepIndex: Math.max(Math.min(action.newStepNumber, state.tourState.activeTourStepItems.length - 1), 0),\n                    },\n                },\n            },\n        };\n    },\n    [UPDATE_INPUT_STATE]: (state, action) => {\n        const currentInputState = getInputState(state, action.isInputToAgent);\n        const newInputState = {\n            ...currentInputState,\n            ...action.newState,\n        };\n        const newState = applyInputState(state, newInputState, action.isInputToAgent);\n        return newState;\n    },\n    [SET_IS_BROWSER_PAGE_VISIBLE]: (state, action) => {\n        // If the page becomes visible while the main window is open, then clear the number of unread messages.\n        let numUnreadMessages;\n        const isMainWindowOpen = state.persistedToBrowserStorage.launcherState.viewState.mainWindow;\n        if (isMainWindowOpen && action.isVisible) {\n            numUnreadMessages = 0;\n        }\n        else {\n            numUnreadMessages = state.agentState.numUnreadMessages;\n        }\n        return {\n            ...state,\n            isBrowserPageVisible: action.isVisible,\n            agentState: {\n                ...state.agentState,\n                numUnreadMessages,\n            },\n        };\n    },\n    [ADD_INPUT_FILE]: (state, { file, isInputToAgent }) => {\n        const currentInputState = getInputState(state, isInputToAgent);\n        return applyInputState(state, {\n            ...currentInputState,\n            files: [...currentInputState.files, file],\n        }, isInputToAgent);\n    },\n    [REMOVE_INPUT_FILE]: (state, { fileID, isInputToAgent }) => {\n        const currentInputState = getInputState(state, isInputToAgent);\n        const newUploads = [...currentInputState.files];\n        const index = newUploads.findIndex((file) => file.id === fileID);\n        if (index !== -1) {\n            newUploads.splice(index, 1);\n        }\n        return applyInputState(state, {\n            ...currentInputState,\n            files: newUploads,\n        }, isInputToAgent);\n    },\n    [REMOVE_LOCAL_MESSAGE_ITEM]: (state, { localMessageItemID }) => {\n        const newLocalMessageIDs = state.botMessageState.localMessageIDs.filter((id) => id !== localMessageItemID);\n        const allMessageItemsByID = {\n            ...state.allMessageItemsByID,\n        };\n        if (allMessageItemsByID[localMessageItemID]) {\n            delete allMessageItemsByID[localMessageItemID];\n        }\n        return {\n            ...state,\n            allMessageItemsByID,\n            botMessageState: {\n                ...state.botMessageState,\n                localMessageIDs: newLocalMessageIDs,\n            },\n        };\n    },\n    [ADD_NOTIFICATION]: (state, { notification, notificationID, }) => {\n        return {\n            ...state,\n            notifications: state.notifications.concat({\n                id: notificationID,\n                notification,\n            }),\n        };\n    },\n    [REMOVE_NOTIFICATIONS]: (state, { groupID, notificationID }) => {\n        return {\n            ...state,\n            notifications: state.notifications.filter((notification) => {\n                if (notificationID) {\n                    return notification.id !== notificationID;\n                }\n                return notification.notification.groupID !== groupID;\n            }),\n        };\n    },\n    [REMOVE_ALL_NOTIFICATIONS]: (state) => {\n        return {\n            ...state,\n            notifications: [],\n        };\n    },\n    [CLEAR_INPUT_FILES]: (state, { isInputToAgent }) => {\n        const currentInputState = getInputState(state, isInputToAgent);\n        return applyInputState(state, {\n            ...currentInputState,\n            files: [],\n        }, isInputToAgent);\n    },\n    [FILE_UPLOAD_INPUT_ERROR]: (state, { fileID, errorMessage, isInputToAgent, }) => {\n        const currentInputSate = getInputState(state, isInputToAgent);\n        const newUploads = [...currentInputSate.files];\n        const index = newUploads.findIndex((file) => file.id === fileID);\n        if (index !== -1) {\n            newUploads[index] = {\n                ...newUploads[index],\n                isError: true,\n                errorMessage,\n                status: FileStatusValue.COMPLETE,\n            };\n        }\n        return applyInputState(state, {\n            ...currentInputSate,\n            files: newUploads,\n        }, isInputToAgent);\n    },\n    [ADD_NESTED_MESSAGES]: (state, { localMessageItems }) => {\n        const allMessageItemsByID = { ...state.allMessageItemsByID };\n        localMessageItems.forEach((localMessageItem) => {\n            allMessageItemsByID[localMessageItem.ui_state.id] = localMessageItem;\n        });\n        return {\n            ...state,\n            allMessageItemsByID,\n        };\n    },\n    [SET_RESPONSE_PANEL_IS_OPEN]: (state, { isOpen }) => {\n        return {\n            ...state,\n            responsePanelState: {\n                ...state.responsePanelState,\n                isOpen,\n            },\n        };\n    },\n    [SET_RESPONSE_PANEL_CONTENT]: (state, { localMessageItem, isMessageForInput, }) => {\n        return {\n            ...state,\n            responsePanelState: {\n                ...state.responsePanelState,\n                localMessageItem,\n                isMessageForInput,\n            },\n        };\n    },\n    [STREAMING_START]: (state, { messageID }) => {\n        // Add an empty placeholder where we will start adding the streaming chunks as they come in.\n        const streamIntoResponse = {\n            id: messageID,\n            output: {\n                generic: [],\n            },\n            history: {\n                timestamp: Date.now(),\n            },\n        };\n        return applyFullMessage(state, streamIntoResponse);\n    },\n    [STREAMING_MERGE_HISTORY]: (state, { messageID, history, }) => {\n        const existingMessage = state.allMessagesByID[messageID];\n        const newMessage = merge({}, existingMessage, { history });\n        if (existingMessage) {\n            return {\n                ...state,\n                allMessagesByID: {\n                    ...state.allMessagesByID,\n                    [messageID]: newMessage,\n                },\n            };\n        }\n        return state;\n    },\n    [STREAMING_ADD_CHUNK]: (state, { chunkItem, fullMessageID, isCompleteItem, disableFadeAnimation, }) => {\n        const message = state.allMessagesByID[fullMessageID];\n        // This might be undefined if we haven't seen this item before.\n        const localItemID = streamItemID(fullMessageID, chunkItem);\n        const existingLocalMessageItem = state.allMessageItemsByID[localItemID];\n        let { localMessageIDs } = state.botMessageState;\n        let newItem;\n        if (!existingLocalMessageItem) {\n            // This is a new item we haven't seen before. We will need the response type to know what to with this item which\n            // should always be available in the first chunk. We will then need to add this item to the store so it'll appear.\n            newItem = outputItemToLocalItem(chunkItem, message, false);\n            newItem.ui_state.needsAnnouncement = false;\n            newItem.ui_state.disableFadeAnimation = disableFadeAnimation;\n            newItem.ui_state.isIntermediateStreaming = true;\n            if (isCompleteItem) {\n                newItem.ui_state.streamingState = { chunks: [], isDone: true };\n            }\n            else {\n                newItem.ui_state.streamingState = {\n                    chunks: [chunkItem],\n                    isDone: false,\n                };\n            }\n            localMessageIDs = [...localMessageIDs, localItemID];\n            if (!newItem.item.response_type) {\n                throw new Error(`New chunk item does not have a response_type: ${JSON.stringify(chunkItem)}`);\n            }\n        }\n        else if (isCompleteItem) {\n            // This is a complete item.\n            newItem = outputItemToLocalItem(chunkItem, message, false);\n            newItem.ui_state.needsAnnouncement = false;\n            newItem.ui_state.disableFadeAnimation = disableFadeAnimation;\n            newItem.ui_state.streamingState = { chunks: [], isDone: true };\n        }\n        else {\n            // This is a new chunk on an existing item. We need to merge it with the existing item and add the new chunk.\n            newItem = {\n                ...existingLocalMessageItem,\n                ui_state: {\n                    ...existingLocalMessageItem?.ui_state,\n                    streamingState: {\n                        ...existingLocalMessageItem?.ui_state.streamingState,\n                        chunks: [\n                            ...(existingLocalMessageItem?.ui_state.streamingState?.chunks ||\n                                []),\n                            chunkItem,\n                        ],\n                    },\n                },\n            };\n        }\n        return {\n            ...state,\n            allMessageItemsByID: {\n                ...state.allMessageItemsByID,\n                [localItemID]: newItem,\n            },\n            botMessageState: {\n                ...state.botMessageState,\n                localMessageIDs,\n            },\n        };\n    },\n    [UPDATE_CHAT_HEADER_CONFIG]: (state, { chatHeaderConfig }) => {\n        return {\n            ...state,\n            chatHeaderState: {\n                ...state.chatHeaderState,\n                config: {\n                    ...state.chatHeaderState.config,\n                    ...chatHeaderConfig,\n                },\n            },\n        };\n    },\n    [UPDATE_MAX_VISIBLE_HEADER_OBJECTS]: (state, { maxTotal }) => {\n        return {\n            ...state,\n            chatHeaderState: {\n                ...state.chatHeaderState,\n                maxVisibleHeaderObjects: maxTotal,\n            },\n        };\n    },\n    [SET_STOP_STREAMING_BUTTON_VISIBLE]: (state, { isVisible }) => {\n        return {\n            ...state,\n            botInputState: {\n                ...state.botInputState,\n                stopStreamingButtonState: {\n                    ...state.botInputState.stopStreamingButtonState,\n                    isVisible,\n                },\n            },\n        };\n    },\n    [SET_STOP_STREAMING_BUTTON_DISABLED]: (state, { isDisabled }) => {\n        return {\n            ...state,\n            botInputState: {\n                ...state.botInputState,\n                stopStreamingButtonState: {\n                    ...state.botInputState.stopStreamingButtonState,\n                    isDisabled,\n                },\n            },\n        };\n    },\n    [SET_STREAM_ID]: (state, { currentStreamID }) => {\n        return {\n            ...state,\n            botInputState: {\n                ...state.botInputState,\n                stopStreamingButtonState: {\n                    ...state.botInputState.stopStreamingButtonState,\n                    currentStreamID,\n                },\n            },\n        };\n    },\n    [UPDATE_MAIN_HEADER_AVATAR]: (state, { config }) => {\n        return {\n            ...state,\n            headerAvatarConfig: config,\n        };\n    },\n};\n/**\n * Applies a change to the current input state. This will determine which input state should be updated based on whether\n * the user is connected to an agent or not.\n */\nfunction applyInputState(state, newInputState, isInputToAgent) {\n    if (isInputToAgent) {\n        return {\n            ...state,\n            agentState: {\n                ...state.agentState,\n                inputState: newInputState,\n            },\n        };\n    }\n    return {\n        ...state,\n        botInputState: newInputState,\n    };\n}\n/**\n * Returns the given input state.\n */\nfunction getInputState(state, isInputToAgent) {\n    return isInputToAgent ? state.agentState.inputState : state.botInputState;\n}\n// Merge in the other reducers.\nObject.assign(reducers, agentReducers);\n\nexport { reducers };\n","import merge from 'lodash-es/merge.js';\nimport { createStore } from 'redux';\nimport { NODE_ENV } from '../environmentVariables.js';\nimport { IS_PHONE } from '../utils/browserUtils.js';\nimport '../utils/constants.js';\nimport { withoutEmptyStarters } from '../utils/homeScreenUtils.js';\nimport { getBotName } from '../utils/miscUtils.js';\nimport { mergeCSSVariables } from '../utils/styleUtils.js';\nimport { reducers } from './reducers.js';\nimport { DEFAULT_THEME_STATE, VIEW_STATE_MAIN_WINDOW_OPEN, VIEW_STATE_LAUNCHER_OPEN, DEFAULT_LAUNCHER, DEFAULT_PERSISTED_TO_BROWSER, DEFAULT_INPUT_STATE, DEFAULT_MESSAGE_STATE, VIEW_STATE_ALL_CLOSED, DEFAULT_TOUR_STATE, DEFAULT_MESSAGE_PANEL_STATE, DEFAULT_CUSTOM_PANEL_STATE, DEFAULT_CITATION_PANEL_STATE, DEFAULT_IFRAME_PANEL_STATE, DEFAULT_AGENT_STATE, DEFAULT_LAYOUT_STATE } from './reducerUtils.js';\nimport '../../../types/instance/apiTypes.js';\nimport enLanguagePack from '../../languages/en.json.js';\nimport { CornersType } from '../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction doCreateStore(config, serviceManager) {\n    // Determine the value for useAITheme.\n    let useAITheme;\n    if (config.public.themeConfig?.useAITheme !== undefined) {\n        // If a value is set in the public config then use that.\n        useAITheme = config.public.themeConfig?.useAITheme;\n    }\n    else {\n        // If neither config is setting a value than use the default.\n        useAITheme = DEFAULT_THEME_STATE.useAITheme;\n    }\n    // The theme state uses a default for each property which can be overridden by the public config if specified. If a\n    // value for the property is not specified in the public config, then the default can be overridden by the remote\n    // config.\n    const themeState = {\n        carbonTheme: config.public.themeConfig?.carbonTheme || DEFAULT_THEME_STATE.carbonTheme,\n        useAITheme,\n        corners: getThemeCornersType(config),\n    };\n    const botName = getBotName(themeState.useAITheme, config);\n    const initialState = {\n        ...DEFAULT_MESSAGE_STATE,\n        notifications: [],\n        botInputState: {\n            ...DEFAULT_INPUT_STATE(),\n            isReadonly: config.public.isReadonly,\n            fieldVisible: !config.public.isReadonly,\n        },\n        agentState: { ...DEFAULT_AGENT_STATE },\n        botName,\n        headerDisplayName: useAITheme ? null : botName,\n        botAvatarURL: config.public.botAvatarURL || null,\n        headerAvatarConfig: null,\n        chatWidthBreakpoint: null,\n        chatWidth: null,\n        chatHeight: null,\n        // Any IBM set variables will override variables coming from remote. We keep this in redux so we can track the\n        // current state of the theming variables as they are updated and merged at different times.\n        cssVariableOverrides: mergeCSSVariables({}, {}, themeState.carbonTheme, themeState.useAITheme),\n        isHydrated: false,\n        // The language pack will start as English. If a different language pack is provided or updated, it will be\n        // merged in with a redux action.\n        languagePack: enLanguagePack,\n        locale: \"en\",\n        config,\n        originalConfig: config,\n        suspendScrollDetection: false,\n        homeScreenConfig: withoutEmptyStarters({}),\n        persistedToBrowserStorage: {\n            ...DEFAULT_PERSISTED_TO_BROWSER,\n            chatState: {\n                ...DEFAULT_PERSISTED_TO_BROWSER.chatState,\n                homeScreenState: {\n                    ...DEFAULT_PERSISTED_TO_BROWSER.chatState.homeScreenState,\n                },\n            },\n        },\n        launcher: merge({}, DEFAULT_LAUNCHER, {\n            config: merge({}, {}, {\n                mobile: {},\n            }, { is_on: config.public.showLauncher }),\n        }),\n        iFramePanelState: DEFAULT_IFRAME_PANEL_STATE,\n        viewSourcePanelState: DEFAULT_CITATION_PANEL_STATE,\n        isDestroyed: false,\n        customPanelState: DEFAULT_CUSTOM_PANEL_STATE,\n        viewChanging: false,\n        initialViewChangeComplete: false,\n        targetViewState: \n        // If openChatByDefault is set to true then the Carbon AI chat should open automatically. This value will be overridden\n        // by session history if a session exists. This overwriting is intentional since we only want openChatByDefault to\n        // open the main window the first time the chat loads for a user.\n        config.public.openChatByDefault\n            ? VIEW_STATE_MAIN_WINDOW_OPEN\n            : VIEW_STATE_LAUNCHER_OPEN,\n        responsePanelState: DEFAULT_MESSAGE_PANEL_STATE,\n        customMenuOptions: null,\n        tourState: DEFAULT_TOUR_STATE,\n        isBrowserPageVisible: true,\n        showNonHeaderBackgroundCover: false,\n        theme: themeState,\n        layout: getLayoutState(config),\n        chatHeaderState: {\n            config: null,\n            maxVisibleHeaderObjects: 0,\n        },\n    };\n    // Go pre-fill the launcher state from session storage if it exists.\n    const sessionStorageLauncherState = serviceManager.userSessionStorageService?.loadLauncherSession();\n    if (sessionStorageLauncherState) {\n        // Use the viewState from session storage as the targetViewState. Note, this overwrites the value that was set for\n        // targetViewState above, which took into account if openChatByDefault is true. This overwriting is intentional\n        // since we only want those openChatByDefault to open the main window the first time the chat loads for a user.\n        // After doCreateStore is finished Chat.startInternal() will try to change the view to this\n        // targetViewState.\n        initialState.targetViewState = sessionStorageLauncherState.viewState;\n        // In order to keep the initial view state as the default view state we need to change the session storage\n        // view state to the default before replacing the launcher state with the session storage state.\n        sessionStorageLauncherState.viewState = VIEW_STATE_ALL_CLOSED;\n        // Replace the launcher state with the session storage state.\n        initialState.persistedToBrowserStorage.launcherState =\n            sessionStorageLauncherState;\n    }\n    const enhancer = config.public.debug || NODE_ENV === \"development\"\n        ? window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__({\n                name: \"CarbonAIChat\",\n                instanceId: `Chat${serviceManager.namespace.suffix}`,\n            })\n        : undefined;\n    return createStore(reducerFunction, initialState, enhancer);\n}\n/**\n * Returns the corner type for the Carbon AI chat widget.\n */\nfunction getThemeCornersType(config) {\n    if (getLayoutState(config).showFrame === false ||\n        IS_PHONE ||\n        config.public.themeConfig?.corners === CornersType.SQUARE) {\n        return CornersType.SQUARE;\n    }\n    return DEFAULT_THEME_STATE.corners;\n}\nfunction getLayoutState(config) {\n    if (config.public.themeConfig?.useAITheme) {\n        return {\n            showFrame: config.public.layout?.showFrame ?? true,\n            hasContentMaxWidth: config.public.layout?.hasContentMaxWidth ?? true,\n        };\n    }\n    return merge({}, DEFAULT_LAYOUT_STATE, config.public.layout);\n}\n/**\n * This is the global reducer for the redux store. It will use the map of reducers from the \"reducers\" array to map\n * the action type to the sub-reducer for that specific action.\n */\nfunction reducerFunction(state, action) {\n    return action && reducers[action.type]\n        ? reducers[action.type](state, action)\n        : state;\n}\n\nexport { doCreateStore };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport { consoleDebug, consoleWarn } from './utils/miscUtils.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst DEFAULT_PUBLIC_CONFIG = {\n    openChatByDefault: false,\n    showLauncher: true,\n    shouldTakeFocusIfOpensAutomatically: true,\n    serviceDesk: {},\n    messaging: {},\n    themeConfig: {\n        useAITheme: true,\n    },\n};\n/**\n * Create new Carbon AI chat instance.\n *\n * @param pagePublicConfig The public config options object that came from the page.\n * @param chatConstructorPromise A promise that resolves with the WatsonAssistantChat class. This can either be a\n * script tab with some onload handlers, or could be an import() statement. Because of our use of MFEs, we are\n * currently limited to the former.\n * @param render Function to pass into Chat class to call instead of render function.\n * @returns Promise object that resolves with your new instance. See [./instance.md](./instance.md).\n */\nasync function instantiateWidget(pagePublicConfig, chatConstructorPromise, render, element) {\n    const config = cloneDeep(pagePublicConfig);\n    if (!config.messaging?.customSendMessage) {\n        throw new Error(`You must set messaging.customSendMessage in your configuration object.`);\n    }\n    if (config?.debug) {\n        consoleDebug(\"[ChatEntry] Called instantiateWidget\", config);\n    }\n    if (document.location.protocol !== \"https:\") {\n        consoleWarn('Your page is not running with \"https\"; your data will not be sent  securely.');\n    }\n    if (document.compatMode !== \"CSS1Compat\") {\n        consoleWarn('Your page is running in quirks mode; you may experience layout issues with the chat. Add \"<!DOCTYPE html>\" to the page to run in standards mode.');\n    }\n    // Extract the extra properties from the page config we don't want to put in to the redux store.\n    const { onError, ...publicConfig } = config;\n    const Chat = await chatConstructorPromise(publicConfig);\n    const additionalChatParameters = {\n        onError,\n        render,\n    };\n    return new Chat(publicConfig, element, additionalChatParameters);\n}\n\nexport { DEFAULT_PUBLIC_CONFIG, instantiateWidget };\n","import dayjs from 'dayjs';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat.js';\nimport isEqual from 'lodash-es/isEqual.js';\nimport merge from 'lodash-es/merge.js';\nimport { createChatInstance } from './ChatInstanceImpl.js';\nimport { createServiceManager } from './loadServices.js';\nimport actions from './store/actions.js';\nimport { VIEW_STATE_ALL_CLOSED } from './store/reducerUtils.js';\nimport { loadLanguagePack, loadLocale } from './utils/languages.js';\nimport { hasServiceDesk } from './utils/messageUtils.js';\nimport { consoleDebug, consoleError } from './utils/miscUtils.js';\nimport { DEFAULT_PUBLIC_CONFIG } from './chatEntryFunctions.js';\nimport { MainWindowOpenReason, ViewChangeReason } from '../../types/events/eventBusTypes.js';\nimport { setIntl } from './utils/intlUtils.js';\nimport { loadHAA } from '../dynamic-imports/dynamic-imports.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// Dayjs is a date library similar to moment, but that allows you to compose how much functionality you need. Here we\n// add the ability to add strings in the format of a given locale.\ndayjs.extend(LocalizedFormat);\nclass Chat {\n    /**\n     * Create new Carbon AI chat instance.\n     *\n     * @param publicConfigProvided The public config provided by the user.\n     * @param customHostElement The host element into which to render the widget. This is provided in the original public\n     * config from the host page.\n     * @param additionalChatParametersProvided An object with values important to Carbon AI chat that are separate from the\n     * external configs\n     */\n    constructor(publicConfigProvided, customHostElement, additionalChatParametersProvided) {\n        if (publicConfigProvided?.debug) {\n            consoleDebug(\"Constructed chat widget\", publicConfigProvided);\n        }\n        // Make a clone of the public config so we don't get messed up if someone modifies this object outside of our\n        // control. Also add in any default values that might be missing.\n        const publicConfig = merge({}, DEFAULT_PUBLIC_CONFIG, publicConfigProvided);\n        this.additionalChatParameters = additionalChatParametersProvided || {};\n        // Note that because redux objects are immutable (which we ensured with the clone above), we can set the public\n        // and publicOriginal values to the same object. If the public value is changed, a new object will be created.\n        this.appConfig = {\n            public: publicConfig,\n        };\n        this.customHostElement = customHostElement;\n    }\n    /**\n     * Starts the chat widget. This will return a promise that resolves to an instance of the started widget that can\n     * be used by the host page to interact with the widget.\n     */\n    async start() {\n        try {\n            const result = await this.startInternal();\n            return result.instance;\n        }\n        catch (error) {\n            consoleError(\"There was an error starting your chat\", error);\n            return null;\n        }\n    }\n    /**\n     * Starts the chat widget. This will return a promise that resolves to an instance of the started widget that can\n     * be used by the host page to interact with the widget. This internal version of the function also provides\n     * access to helper objects that were constructed at the same time as the chat instance.\n     */\n    async startInternal() {\n        // Check if integration has a service desk configured in the tooling. If they do, we will use it with\n        // connect_to_agent response_type.\n        const doesHaveServiceDesk = hasServiceDesk(this.appConfig);\n        this.serviceManager = await createServiceManager(this.appConfig, this.additionalChatParameters);\n        // Asynchronously load all of the various dependencies that the Carbon AI chat depends on.\n        const [languagePack, localePack, render, createHumanAgentService] = await Promise.all([\n            loadLanguagePack(this.serviceManager.store.getState().languagePack),\n            loadLocale(this.serviceManager.store.getState().locale),\n            Promise.resolve(this.additionalChatParameters.render),\n            doesHaveServiceDesk\n                ? loadHAA()\n                : Promise.resolve(null),\n        ]);\n        this.serviceManager.customHostElement = this.customHostElement;\n        if (createHumanAgentService) {\n            // We'll create the service now but we can't initialize it until we load the service desk information\n            // from the remote config.\n            this.serviceManager.humanAgentService = createHumanAgentService(this.serviceManager);\n        }\n        // Update Redux with new values for language, locale, and messages.\n        setIntl(this.serviceManager, localePack.name, languagePack);\n        // Tell dayjs to globally use the locale.\n        dayjs.locale(localePack);\n        // Here we render the application. If the tour or main window are supposed to be open then we will hydrate the\n        // chat if sessionHistory is enabled, or fetch the welcome node if it's disabled.\n        const reallyRenderAndReturnInstance = async () => {\n            // Render the React application.\n            await render({ serviceManager: this.serviceManager });\n            const initialState = this.serviceManager.store.getState();\n            const { wasLoadedFromBrowser } = initialState.persistedToBrowserStorage.launcherState;\n            const { targetViewState } = initialState;\n            const { openChatByDefault } = initialState.config.public;\n            if (targetViewState.mainWindow) {\n                // If the main window is supposed to be open (because openChatByDefault was set to true, or because the\n                // viewState, in session storage, said that the main window was previously open) then fire the open:window\n                // and view:change events, and try to change the view and hydrate the chat. The default event reason will be\n                // session_history.\n                let mainWindowOpenReason = MainWindowOpenReason.SESSION_HISTORY;\n                if (openChatByDefault && !wasLoadedFromBrowser) {\n                    // If openChatByDefault is true, and this is a new session, then the window:open reason will be\n                    // open_by_default and the view:change reason will be webChatDefault.\n                    mainWindowOpenReason = MainWindowOpenReason.OPEN_BY_DEFAULT;\n                }\n                await this.serviceManager.actions.changeView(targetViewState, {\n                    mainWindowOpenReason,\n                });\n            }\n            else {\n                // If a tour and/or the launcher are supposed to be open, or nothing is supposed to be open, then only fire\n                // the view:change events and try to change the view.\n                const viewChangeReason = ViewChangeReason.WEB_CHAT_LOADED;\n                // If a tour is supposed to be open then try to hydrate the chat.\n                const tryHydrating = targetViewState.tour;\n                // If nothing is supposed to be open then force the view:change events to fire. Since the default viewState\n                // is all views closed, and the targetViewState is all views closed, changeView would see two equal\n                // viewStates and not bother trying to fire the events unless forced to.\n                const forceViewChange = isEqual(targetViewState, VIEW_STATE_ALL_CLOSED);\n                await this.serviceManager.actions.changeView(targetViewState, { viewChangeReason }, tryHydrating, forceViewChange);\n            }\n            // Lastly set the initialViewChangeComplete so that the launcher and other components can begin their\n            // animations if they're visible.\n            this.serviceManager.store.dispatch(actions.setInitialViewChangeComplete(true));\n            return this.serviceManager.instance;\n        };\n        // As part of the view change work a bug was exposed where someone calling openWindow, closeWindow, or\n        // toggleOpen, immediately after calling instance.render() (and without waiting for render to finish), would\n        // trigger viewChange to throw an error because it was in the middle of changing the view to set the view to the\n        // targetViewState and couldn't accept another view change request at that time. The solution is to force the\n        // instance.openWindow, instance.closeWindow, and instance.toggleOpen functions to wait for this renderPromise\n        // to complete before allowing them to try and trigger a view change. This can be removed when the deprecated\n        // window methods and events are removed.\n        const renderAndReturnInstance = () => {\n            const promise = reallyRenderAndReturnInstance();\n            this.serviceManager.renderPromise = promise;\n            return promise;\n        };\n        // Create the \"started\" instance of the widget.\n        this.serviceManager.instance = createChatInstance({\n            serviceManager: this.serviceManager,\n            callRender: renderAndReturnInstance,\n        });\n        return {\n            instance: this.serviceManager.instance,\n            serviceManager: this.serviceManager,\n        };\n    }\n}\n\nexport { Chat as default };\n","import { ChatActionsImpl } from './events/ChatActionsImpl.js';\nimport { EventBus } from './events/EventBus.js';\nimport { createCustomPanelManager } from './services/CustomPanelManager.js';\nimport { HistoryService } from './services/HistoryService.js';\nimport MessageService from './services/MessageService.js';\nimport { NamespaceService } from './services/NamespaceService.js';\nimport { ServiceManager } from './services/ServiceManager.js';\nimport { UserSessionStorageService } from './services/UserSessionStorageService.js';\nimport { doCreateStore } from './store/doCreateStore.js';\nimport { copyToSessionStorage, createHandleWindowTitle } from './store/subscriptions.js';\nimport './utils/constants.js';\nimport { setEnableDebugLog, setEnableDebugStackTracesLog } from './utils/miscUtils.js';\nimport { setIntl } from './utils/intlUtils.js';\nimport { WriteableElementName } from '../../types/instance/ChatInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains the code needed to bootstrap all the shared services in Carbon AI chat. Services are used to hold\n * functions that are used throughout the application that need access to the current instance of the Carbon AI chat.\n */\nasync function createServiceManager(appConfig, additionalChatParameters) {\n    const publicConfig = appConfig.public;\n    const serviceManager = new ServiceManager();\n    // Create all the services we will be using.\n    serviceManager.additionalChatParameters = additionalChatParameters;\n    serviceManager.namespace = new NamespaceService(publicConfig.namespace);\n    serviceManager.userSessionStorageService = new UserSessionStorageService(serviceManager);\n    serviceManager.actions = new ChatActionsImpl(serviceManager);\n    serviceManager.eventBus = new EventBus();\n    serviceManager.store = doCreateStore(appConfig, serviceManager);\n    serviceManager.historyService = new HistoryService(serviceManager);\n    serviceManager.messageService = new MessageService(serviceManager, publicConfig);\n    serviceManager.store.subscribe(copyToSessionStorage(serviceManager));\n    if (!publicConfig.disableWindowTitleChanges) {\n        serviceManager.store.subscribe(createHandleWindowTitle(serviceManager));\n    }\n    serviceManager.customPanelManager = createCustomPanelManager(serviceManager);\n    setIntl(serviceManager, serviceManager.store.getState().locale, serviceManager.store.getState().languagePack);\n    // Create all custom elements for Deb.\n    serviceManager.writeableElements = {\n        [WriteableElementName.AI_TOOLTIP_AFTER_DESCRIPTION_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.WELCOME_NODE_BEFORE_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.HEADER_BOTTOM_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.BEFORE_INPUT_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.HOME_SCREEN_HEADER_BOTTOM_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.HOME_SCREEN_AFTER_STARTERS_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.HOME_SCREEN_BEFORE_INPUT_ELEMENT]: document.createElement(\"div\"),\n        [WriteableElementName.CUSTOM_PANEL_ELEMENT]: document.createElement(\"div\"),\n    };\n    if (publicConfig.debug) {\n        setEnableDebugLog(true);\n    }\n    if (publicConfig.debugStackTraces) {\n        setEnableDebugStackTracesLog(true);\n    }\n    return serviceManager;\n}\n\nexport { createServiceManager };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The amount of time to delay after displaying \"New message\" in the window title before it changes to \"(n) Original\n// message\".\nconst UNREAD_COUNT_TITLE_TIME = 10000;\n/**\n * Copies persistedToBrowserStorage to the session history.\n */\nfunction copyToSessionStorage(serviceManager) {\n    let previousPersistedToBrowserStorage = serviceManager.store.getState().persistedToBrowserStorage;\n    return () => {\n        const { persistedToBrowserStorage } = serviceManager.store.getState();\n        const persistChatSession = previousPersistedToBrowserStorage !== persistedToBrowserStorage;\n        if (persistChatSession) {\n            previousPersistedToBrowserStorage = persistedToBrowserStorage;\n            serviceManager.userSessionStorageService.persistChatSession(persistedToBrowserStorage.chatState);\n            serviceManager.userSessionStorageService.persistLauncherSession(persistedToBrowserStorage.launcherState);\n        }\n    };\n}\n/**\n * This creates a subscription that listens for changes to unread live agent messages and updates the window title\n * as appropriate to show the user that messages are unread.\n */\nfunction createHandleWindowTitle(serviceManager) {\n    const { store } = serviceManager;\n    let originalTitle;\n    let changeTitleTimer;\n    let previousState = store.getState();\n    return () => {\n        const state = store.getState();\n        const { agentState } = store.getState();\n        const { numUnreadMessages } = agentState;\n        if (numUnreadMessages !== previousState.agentState.numUnreadMessages) {\n            if (!numUnreadMessages) {\n                // Nothing unread anymore so reset the window title.\n                clearTimeout(changeTitleTimer);\n                if (originalTitle) {\n                    window.document.title = originalTitle;\n                    originalTitle = null;\n                }\n            }\n            else {\n                // A new message has appeared so change the title to \"New Message\" and then set a timer to change it to a\n                // version that has \"(n)\" in it.\n                clearTimeout(changeTitleTimer);\n                if (!originalTitle) {\n                    originalTitle = window.document.title;\n                }\n                window.document.title = state.languagePack.agent_newMessage;\n                changeTitleTimer = setTimeout(() => {\n                    window.document.title = `(${numUnreadMessages}) ${originalTitle}`;\n                }, UNREAD_COUNT_TITLE_TIME);\n            }\n        }\n        previousState = state;\n    };\n}\n\nexport { copyToSessionStorage, createHandleWindowTitle };\n","import { DEFAULT_CUSTOM_PANEL_ID } from '../utils/constants.js';\nimport { createCustomPanelInstance } from './CustomPanelInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This function takes in the service manager to help create a custom panel manager. The panel manager is created\n * using a function instead of a class because a private property at runtime can still be accessible. Instead of\n * creating a private panels property we create the variable within the scope of the function.\n */\nfunction createCustomPanelManager(serviceManger) {\n    // A panels object holding all created panels. In the future if we ever support multiple panels, Deb would be able to\n    // populate this object.\n    const panels = {\n        [DEFAULT_CUSTOM_PANEL_ID]: createCustomPanelInstance(serviceManger),\n    };\n    return Object.freeze({\n        getPanel() {\n            return panels[DEFAULT_CUSTOM_PANEL_ID];\n        },\n    });\n}\n\nexport { createCustomPanelManager };\n","import React, { useRef, useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { AriaAnnouncerContext } from '../../contexts/AriaAnnouncerContext.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport { AriaAnnouncerComponent } from './AriaAnnouncerComponent.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is responsible for providing a context that gives access to the component we use to perform aria\n * announcements. It will also listen for changes in {@link AppState.announceMessage} and triggers the announcements\n * of that.\n */\nfunction AriaAnnouncerProvider(props) {\n    const intl = useIntl();\n    const { store } = useServiceManager();\n    const announcerRef = useRef();\n    const announcerFunction = useCallback((value) => {\n        // It's possible for some component to try to do an announcement before this component has actually been mounted\n        // (because it's later in the DOM). If that happens, then we need to delay the announcement a bit.\n        if (!announcerRef.current) {\n            setTimeout(() => announcerRef.current.announceValue(value));\n        }\n        else {\n            announcerRef.current.announceValue(value);\n        }\n    }, []);\n    const previousAnnounceMessageRef = useRef();\n    useEffect(() => {\n        // This effect will register a listener on the store that watches for changes in the announceMessage property\n        // and when it changes, it will issue an announcement request on the announcer component.\n        const unsubscribe = store.subscribe(() => {\n            const currentAnnounceMessage = store.getState().announceMessage;\n            if (currentAnnounceMessage !== previousAnnounceMessageRef.current) {\n                announcerFunction(currentAnnounceMessage);\n                previousAnnounceMessageRef.current = currentAnnounceMessage;\n            }\n        });\n        return unsubscribe;\n    }, [store, announcerFunction]);\n    return (React.createElement(AriaAnnouncerContext.Provider, { value: announcerFunction },\n        props.children,\n        React.createElement(AriaAnnouncerComponent, { intl: intl, ref: announcerRef })));\n}\n\nexport { AriaAnnouncerProvider };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Returns the aria-label string from the provided language pack for the launcher button based on the open and view\n * state.\n */\nfunction getLauncherButtonAriaLabel(languagePack, isLauncherHidden, isTourActive) {\n    if (isTourActive) {\n        return isLauncherHidden\n            ? languagePack.launcher_isTourOpen\n            : languagePack.launcher_isTourClosed;\n    }\n    return isLauncherHidden\n        ? languagePack.launcher_isOpen\n        : languagePack.launcher_isClosed;\n}\n\nexport { getLauncherButtonAriaLabel };\n","import AiLaunch from '@carbon/icons-react/es/AiLaunch.js';\nimport ArrowUpLeft from '@carbon/icons-react/es/ArrowUpLeft.js';\nimport ChatLaunch from '@carbon/icons-react/es/ChatLaunch.js';\nimport { Button } from '@carbon/react';\nimport cx from 'classnames';\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { useSelector } from 'react-redux';\nimport { doFocusRef } from '../../utils/domUtils.js';\nimport { getLauncherButtonAriaLabel } from './launcherUtils.js';\nimport { ButtonKindEnum } from '../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/* eslint-disable react/no-danger */\nfunction Launcher(props, ref) {\n    const { onToggleOpen, languagePack, unreadAgentCount, intl, serviceManager, showUnreadIndicator, className, tabIndex, launcherHidden, activeTour, } = props;\n    const launcherAvatarURL = useSelector((state) => state.theme.useAITheme\n        ? undefined\n        : state.launcher.config.desktop.avatar_url_override);\n    const useAITheme = useSelector((state) => state.theme.useAITheme);\n    /**\n     * A React ref to the button in this component.\n     */\n    const buttonRef = React.createRef();\n    useImperativeHandle(ref, () => ({\n        /**\n         * This is a function that will request that focus be moved to the button. This request for focus is normally\n         * triggered within App.tsx.\n         */\n        requestFocus: () => {\n            doFocusRef(buttonRef);\n        },\n    }));\n    let ariaLabel = getLauncherButtonAriaLabel(languagePack, launcherHidden, activeTour);\n    if (unreadAgentCount !== 0) {\n        ariaLabel += `. ${intl.formatMessage({ id: \"icon_ariaUnreadMessages\" }, { count: unreadAgentCount })}`;\n    }\n    let launcherAvatar = useAITheme ? (React.createElement(AiLaunch, { size: 24, className: \"WACLauncher_svg\" })) : (React.createElement(ChatLaunch, { size: 24, className: \"WACLauncher__svg\" }));\n    if (launcherAvatarURL) {\n        launcherAvatar = (React.createElement(\"img\", { className: \"WACLauncher__Avatar\", src: launcherAvatarURL, alt: \"\", \"aria-hidden\": true }));\n    }\n    /**\n     * Renders the corresponding variation of the launcher button.\n     */\n    return (React.createElement(\"div\", { className: cx(\"WACLauncher__ButtonContainer\", \"WACLauncher__ButtonContainer--round\", className, {\n            \"WACLauncher__ButtonContainer--hidden\": launcherHidden,\n        }) },\n        React.createElement(Button, { \"aria-label\": ariaLabel, className: cx(\"WACLauncher__Button\", {\n                WACLauncher__TourButton: activeTour,\n            }), id: `WACLauncher__Button${serviceManager.namespace.suffix}`, kind: ButtonKindEnum.PRIMARY, type: \"button\", onClick: onToggleOpen, ref: buttonRef, tabIndex: tabIndex },\n            activeTour ? (React.createElement(ArrowUpLeft, { size: 24, className: \"WACLauncher__svg\" })) : (launcherAvatar),\n            (unreadAgentCount !== 0 || showUnreadIndicator) && (React.createElement(\"div\", { className: \"WAC__countIndicator\" }, unreadAgentCount !== 0 ? unreadAgentCount : \"\")))));\n}\nconst LauncherExport = forwardRef(Launcher);\n\nexport { LauncherExport as Launcher };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport CarbonTagElement from '@carbon/web-components/es-custom/components/tag/tag.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst Tag = createComponent({\n    tagName: \"cds-custom-tag\",\n    elementClass: CarbonTagElement,\n    react: React,\n});\n\nexport { Tag as default };\n","import Close from '@carbon/icons-react/es/Close.js';\nimport Tag from '../../../react/carbon/Tag.js';\nimport cx from 'classnames';\nimport React from 'react';\nimport { Launcher as LauncherExport } from './Launcher.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction LauncherComplex(props) {\n    const { serviceManager, languagePack, intl, launcherConfig, launcherComplexRef, launcherRef, onOpen, onMinimize, unreadAgentCount, showUnreadIndicator, desktopLauncherIsExpanded, launcherHidden, activeTour, className, } = props;\n    const { launcher_desktopGreeting, launcher_closeButton, launcher_ariaIsExpanded, } = languagePack;\n    function getLauncherContent() {\n        // Use the title from the launcher config.\n        if (launcherConfig.desktop.title) {\n            return launcherConfig.desktop.title;\n        }\n        // If there is nothing set in the launcher config then use our own default.\n        return launcher_desktopGreeting;\n    }\n    /**\n     * Renders the complex variation of the launcher.\n     */\n    return (React.createElement(\"div\", { className: cx(\"WACLauncher__ButtonContainer\", \"WACLauncherComplex__Container\", className, {\n            \"WACLauncher__ButtonContainer--hidden\": launcherHidden,\n        }), ref: launcherComplexRef },\n        React.createElement(\"button\", { className: \"WACLauncherComplex__ContentButton\", type: \"button\", onClick: onOpen, disabled: !desktopLauncherIsExpanded },\n            React.createElement(\"div\", { className: cx(\"WACWidget__textEllipsis\", {\n                    WACLauncherComplex__Text: !launcherHidden,\n                }) }, getLauncherContent())),\n        React.createElement(LauncherExport, { serviceManager: serviceManager, languagePack: languagePack, intl: intl, ref: launcherRef, onToggleOpen: onOpen, className: \"WACLauncherComplex__SmallLauncherContainer\", unreadAgentCount: unreadAgentCount, showUnreadIndicator: showUnreadIndicator, launcherHidden: launcherHidden, activeTour: activeTour }),\n        React.createElement(Tag, { className: \"WACLauncher__CloseButton\", \"aria-label\": launcher_ariaIsExpanded, onClick: onMinimize, disabled: !desktopLauncherIsExpanded },\n            React.createElement(\"div\", { className: \"WACLauncher__CloseButtonInnerWrapper\" },\n                React.createElement(Close, { className: \"WACLauncher__CloseButtonIcon\" }),\n                launcher_closeButton))));\n}\n\nexport { LauncherComplex };\n","import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { useOnMount } from '../../hooks/useOnMount.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport actions from '../../store/actions.js';\nimport { BOUNCING_ANIMATION_TIMEOUTS } from '../../../../types/config/LauncherConfig.js';\nimport { Launcher as LauncherExport } from './Launcher.js';\nimport { LauncherComplex } from './LauncherComplex.js';\nimport { LauncherType } from '../../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The amount of time it takes the desktop launcher to minimize.\nconst TIME_FOR_MINIMIZE_ANIMATION = 400;\n// The amount of time it takes the launcher to bounce.\nconst TIME_FOR_BOUNCE_ANIMATION = 500;\nconst LauncherDesktopContainer = (props) => {\n    const { launcherRef, onDoToggle, requestFocus, launcherHidden, activeTour } = props;\n    const serviceManager = useServiceManager();\n    const languagePack = useLanguagePack();\n    const intl = useIntl();\n    const browserLauncherState = useSelector((state) => state.persistedToBrowserStorage.launcherState);\n    const { desktopLauncherWasMinimized, desktopLauncherIsExpanded, bounceTurn, showUnreadIndicator, viewState, } = browserLauncherState;\n    const launcherState = useSelector((state) => state.launcher);\n    const launcherConfig = launcherState.config;\n    const { time_to_expand, new_expand_time } = launcherConfig.desktop;\n    const isExpandedLauncherEnabled = launcherConfig.desktop.is_on;\n    const unreadAgentCount = useSelector((state) => state.agentState.numUnreadMessages);\n    const [smallLauncherClassName, setSmallLauncherClassName] = useState(\"\");\n    const [complexLauncherClassName, setComplexLauncherClassName] = useState(\"\");\n    const launcherComplexRef = useRef();\n    const launcherHiddenRef = useRef();\n    launcherHiddenRef.current = launcherHidden;\n    const animateOnceVisible = useRef(false);\n    const bounceTurnRef = useRef();\n    bounceTurnRef.current = bounceTurn;\n    const animationStartTimerRef = useRef();\n    const animationFinishedTimerRef = useRef();\n    const firstBounceAnimationStartTimerRef = useRef();\n    const firstBounceAnimationFinishedTimerRef = useRef();\n    const secondBounceAnimationStartTimerRef = useRef();\n    const secondBounceAnimationFinishedTimerRef = useRef();\n    /**\n     * Measure the height of the complex launcher and set it as a css variable so that the expand animation can move the\n     * greeting message the right distance.\n     */\n    const determineLauncherHeight = useCallback(() => {\n        // In order to move the small launcher up a dynamic distance depending on the amount of content in the launcher we\n        // need to measure the height of the launcher and use that as a variable within the launcher expanding animation.\n        const expandedLauncherHeight = `${launcherComplexRef.current?.offsetHeight}px`;\n        if (launcherComplexRef.current?.style?.setProperty) {\n            launcherComplexRef.current.style.setProperty(\"--cds-chat-LAUNCHER-desktop-expanded-height\", expandedLauncherHeight);\n        }\n    }, []);\n    /**\n     * If the launcher isn't open then expand the launcher.\n     */\n    const startExpandLauncher = useCallback(() => {\n        // Because these timeouts for the expand animation are triggered within useOnMount the value for launcherHidden will\n        // be the same as its initial value when this component mounted and this useOnMount function was created. In order\n        // to check against the up-to-date value we need to keep a ref up to date that stores the new value. This works\n        // because the pointer to the ref existed when the useOnMount function was created, then the value of the\n        // ref.current has been updated on each render to match the current value. If we tried to use an object to keep\n        // track of the current value instead of a ref then a new object with a different pointer would be created each\n        // render, and this useOnMount function would only be aware of the object that existed on the first render.\n        // We are no longer checking if the launcher has been minimized here since our instance methods are supposed to\n        // allow the user to pop up a new greeting message even if one has already been minimized.\n        if (!launcherHiddenRef.current) {\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"desktopLauncherIsExpanded\", true));\n            // Determine the height of the complex launcher.\n            determineLauncherHeight();\n            // Add the className for the intro animation.\n            setComplexLauncherClassName(\"WACLauncherComplex__Container--introAnimation\");\n        }\n    }, [determineLauncherHeight, serviceManager.store]);\n    /**\n     * Set two timers, one to begin to expand animation on the launcher, the other to fire an event when the expand\n     * animation finishes.\n     */\n    const setExpandAnimationTimers = useCallback(() => {\n        // Timer to switch to launcherComplex which will trigger an expand animation and allow focus on the content button and\n        // close button.\n        animationStartTimerRef.current = setTimeout(() => {\n            startExpandLauncher();\n        }, time_to_expand);\n    }, [time_to_expand, startExpandLauncher]);\n    /**\n     * Clear the existing expand animation timers.\n     */\n    const clearExpandAnimationTimers = useCallback(() => {\n        clearTimeout(animationStartTimerRef.current);\n        clearTimeout(animationFinishedTimerRef.current);\n    }, []);\n    /**\n     * If the launcher isn't open then bounce the launcher.\n     */\n    const startBounceAnimation = useCallback(() => {\n        if (!launcherHiddenRef.current) {\n            // Add the bounce animation class to the launcher.\n            setSmallLauncherClassName(\"WACLauncher__ButtonContainer--bounceAnimation\");\n        }\n    }, []);\n    /**\n     * Once the launcher has finished bouncing send an event and increment the bounce turn so the user doesn't see that\n     * same bounce again on the next page change or reload.\n     */\n    const finishBounceAnimation = useCallback(() => {\n        if (!launcherHiddenRef.current) {\n            // Change the launcher animation class from bounce to noAnimation.\n            setSmallLauncherClassName(\"WACLauncher__ButtonContainer--noAnimation\");\n            // Increment the bounce turn counter, so we know where to pick up from if the page is reloaded/changed.\n            bounceTurnRef.current++;\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"bounceTurn\", bounceTurnRef.current));\n        }\n    }, [serviceManager.store]);\n    /**\n     * Start the timers to show the bounce animation on the launcher and to send a track event when the animation\n     * finishes. If the user hasn't seen any bounce animations yet then 4 timers are started, one set is responsible for a\n     * bounce at 15s, the next set will be responsible for a bounce 60s later. If the user has already seen the bounce at\n     * 15s, and this is the next page load, then timers are only needed for a bounce animation 60s from now.\n     */\n    const setBounceAnimationTimers = useCallback(() => {\n        if (bounceTurnRef.current === 1) {\n            // If there have not been any bounce animations yet then set a timer for 15s from now for the first bounce.\n            firstBounceAnimationStartTimerRef.current = setTimeout(() => {\n                startBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[0]);\n            // After the first bounce is done remove the animation className and send a tracking event.\n            firstBounceAnimationFinishedTimerRef.current = setTimeout(() => {\n                finishBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[0] + TIME_FOR_BOUNCE_ANIMATION);\n            // Set another timer for 60s after the first bounce has completed to show a second bounce.\n            secondBounceAnimationStartTimerRef.current = setTimeout(() => {\n                startBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[0] + BOUNCING_ANIMATION_TIMEOUTS[1]);\n            // After the second bounce is done remove the animation className and send a tracking event.\n            secondBounceAnimationFinishedTimerRef.current = setTimeout(() => {\n                finishBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[0] + BOUNCING_ANIMATION_TIMEOUTS[1] + TIME_FOR_BOUNCE_ANIMATION);\n        }\n        else if (bounceTurnRef.current === 2) {\n            // If there has already been a bounce animation then set a timer for 60s from now for the second bounce.\n            secondBounceAnimationStartTimerRef.current = setTimeout(() => {\n                startBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[1]);\n            // After the second bounce is done remove the animation className and send a tracking event.\n            secondBounceAnimationFinishedTimerRef.current = setTimeout(() => {\n                finishBounceAnimation();\n            }, BOUNCING_ANIMATION_TIMEOUTS[1] + TIME_FOR_BOUNCE_ANIMATION);\n        }\n    }, [finishBounceAnimation, startBounceAnimation]);\n    /**\n     * Clear the existing bounce animation timers.\n     */\n    const clearBounceAnimationTimers = useCallback(() => {\n        clearTimeout(firstBounceAnimationStartTimerRef.current);\n        clearTimeout(firstBounceAnimationFinishedTimerRef.current);\n        clearTimeout(secondBounceAnimationStartTimerRef.current);\n        clearTimeout(secondBounceAnimationFinishedTimerRef.current);\n    }, []);\n    /**\n     * Clear the expand and bounce timers and set the launcher state to minimized and bounce turn 3. This way if the page\n     * is reloaded the launcher will behave as if it has already been opened and won't try and show a greeting.\n     */\n    const setDefaultLauncherState = useCallback(() => {\n        // Clear to expand timers and set the launcher to minimized so that it will stay minimized on page change/reload.\n        clearExpandAnimationTimers();\n        serviceManager.store.dispatch(actions.setLauncherMinimized());\n        // Clear the bounce timers and set the bounce turn to 3 so that no more bounces will occur after page\n        // change/reload.\n        clearBounceAnimationTimers();\n        serviceManager.store.dispatch(actions.setLauncherProperty(\"bounceTurn\", 3));\n        // If the launcher was planning on animating once visible then we should no longer do that.\n        animateOnceVisible.current = false;\n        setSmallLauncherClassName(\"WACLauncher__ButtonContainer--noAnimation\");\n    }, [\n        clearBounceAnimationTimers,\n        clearExpandAnimationTimers,\n        serviceManager.store,\n    ]);\n    useOnMount(() => {\n        if (desktopLauncherIsExpanded) {\n            // If the launcher is already expanded then it must have been expanded on a previous page load so a simpler\n            // animation should be shown.\n            // Because of the view change work all views now start hidden. If we try to run determineLauncherHeight while the\n            // launcher is hidden we would get incorrect results since LauncherComplex changes it's height by adding and\n            // removing classNames, when the launcher is visible, that effect the size of the text. We also need to wait to\n            // add the animation class until the launcher is visible, otherwise the animation will start before the user can\n            // see the launcher. For these reasons we simply set a ref to true that is used in combination with\n            // viewState.launcher lower down to appropriately calculate the height and add the className once the launcher is\n            // actually visible.\n            animateOnceVisible.current = true;\n        }\n        else if (!desktopLauncherWasMinimized && isExpandedLauncherEnabled) {\n            // If the launcher hasn't been minimized and isn't expanded then start the timers to expand the launcher.\n            setExpandAnimationTimers();\n            return () => {\n                clearExpandAnimationTimers();\n            };\n        }\n        else if (desktopLauncherWasMinimized && bounceTurn !== 3) {\n            // If the launcher was previously minimized, and we haven't preformed the bounce animation twice then we want to\n            // continue the bounce animations on whatever step we were on.\n            setBounceAnimationTimers();\n            return () => {\n                clearBounceAnimationTimers();\n            };\n        }\n        return undefined;\n    });\n    // If the launcher is now visible, and we intended to show a simple animation when the launcher mounted, now is the time\n    // to do it since the user can now see the launcher. This will not run again until the page is reloaded since we\n    // currently don't unmount the launcher when its not visible, instead we just hide it with css.\n    useEffect(() => {\n        if (viewState.launcher && animateOnceVisible.current) {\n            // Determine the height of the complex launcher.\n            determineLauncherHeight();\n            // Add the className for the simple intro animation.\n            setComplexLauncherClassName(\"WACLauncherComplex__Container--simpleAnimation\");\n            animateOnceVisible.current = false;\n        }\n    }, [determineLauncherHeight, viewState.launcher]);\n    // If the main window or tour have been opened then clear all timers and set the launcher state as if it had been\n    // clicked open. This is to protect against scenarios where the main window or tour are opened using other methods\n    // besides clicking on the launcher.\n    useEffect(() => {\n        if (viewState.mainWindow || viewState.tour) {\n            // Clear timers and update launcher state so that no more greeting messages or bounces occur.\n            setDefaultLauncherState();\n        }\n    }, [viewState, setDefaultLauncherState]);\n    // If the launcher time_to_expand changes then we need to clear the existing timers and start new ones with the new\n    // time.\n    useEffect(() => {\n        if (new_expand_time) {\n            // End any bounce animation timers that may have been in progress, but do not reset the bounce turns counter.\n            // Instead, the user will continue on whatever bounce turn they left off on (15s or 60s) after they've minimized\n            // the new greeting message and refreshed the page.\n            clearBounceAnimationTimers();\n            clearExpandAnimationTimers();\n            setExpandAnimationTimers();\n            serviceManager.store.dispatch(actions.setLauncherConfigProperty(\"new_expand_time\", false, LauncherType.DESKTOP));\n        }\n    }, [\n        animationFinishedTimerRef,\n        animationStartTimerRef,\n        new_expand_time,\n        setExpandAnimationTimers,\n        clearExpandAnimationTimers,\n        clearBounceAnimationTimers,\n        serviceManager.store,\n    ]);\n    // If the launcher title has changed then we need to recalculate the height and update the styles.\n    const prevLauncherTitle = usePrevious(launcherConfig.desktop.title);\n    useEffect(() => {\n        // The check at the end that makes sure one of the two values is truthy has been added to stop this from running\n        // when prevLauncherTitle was undefined and launcherConfig.desktop.title was an empty string.\n        if (prevLauncherTitle !== launcherConfig.desktop.title &&\n            (launcherConfig.desktop.title || prevLauncherTitle)) {\n            determineLauncherHeight();\n        }\n    }, [determineLauncherHeight, launcherConfig, prevLauncherTitle]);\n    const onMinimize = useCallback(() => {\n        setComplexLauncherClassName(\"WACLauncherComplex__Container--closeAnimation\");\n        // Wait for the minimize animation to finish before switching back to the original launcher.\n        setTimeout(() => {\n            // Remove the animation class from the small launcher so that it doesn't try and animate in when we make this\n            // switch.\n            setSmallLauncherClassName(\"WACLauncher__ButtonContainer--noAnimation\");\n            serviceManager.store.dispatch(actions.setLauncherMinimized());\n            // Let the component re-render before moving focus.\n            setTimeout(requestFocus);\n        }, TIME_FOR_MINIMIZE_ANIMATION);\n    }, [requestFocus, serviceManager.store]);\n    const onOpen = useCallback(() => {\n        // Clear timers and update launcher state so that no more greeting messages or bounces occur.\n        setDefaultLauncherState();\n        onDoToggle();\n    }, [onDoToggle, setDefaultLauncherState]);\n    let launcher;\n    if (desktopLauncherIsExpanded) {\n        launcher = (React.createElement(LauncherComplex, { serviceManager: serviceManager, languagePack: languagePack, intl: intl, launcherComplexRef: launcherComplexRef, launcherRef: launcherRef, launcherConfig: launcherConfig, onOpen: onOpen, onMinimize: onMinimize, unreadAgentCount: unreadAgentCount, showUnreadIndicator: showUnreadIndicator, desktopLauncherIsExpanded: desktopLauncherIsExpanded, launcherHidden: launcherHidden, activeTour: activeTour, className: complexLauncherClassName }));\n    }\n    else {\n        launcher = (React.createElement(LauncherExport, { serviceManager: serviceManager, languagePack: languagePack, intl: intl, ref: launcherRef, onToggleOpen: onOpen, unreadAgentCount: unreadAgentCount, showUnreadIndicator: showUnreadIndicator, className: smallLauncherClassName, launcherHidden: launcherHidden, activeTour: activeTour }));\n    }\n    return launcher;\n};\n\nexport { LauncherDesktopContainer };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Triggers an animation event by temporarily adding the given classname to the given element. When the animation is\n * finished, the classname will be removed.\n *\n * The end of the animation can be determined a number of ways. If no additional arguments are specified, an\n * animation listener is added to the event and as soon as the first animation is finished, that counts as the end\n * of animations. You can also specify the name of an animation that will trigger the end of the animation. This can\n * be useful if you have multiple animations that run in sequence. Or lastly, you can simply specify a time duration.\n *\n * Keep in mind that the animation events bubble so if there are animations running on child elements, those will\n * trigger the events on this element.\n *\n * @param element This element to trigger the animation on.\n * @param className The name of the class to add and later remove from the element.\n * @param endAnimationNameOrDelay The name of an animation to indicate when the animation is finished or a number\n * indicating the duration in milliseconds to wait before ending the animation.\n * @param endAnimationCallback An optional callback that can be called when the animation is finished.\n */\nfunction animateWithClass(element, className, endAnimationNameOrDelay, endAnimationCallback) {\n    if (element) {\n        element.classList.add(className);\n        if (typeof endAnimationNameOrDelay === \"number\") {\n            setTimeout(() => {\n                element.classList.remove(className);\n                if (endAnimationCallback) {\n                    endAnimationCallback();\n                }\n            }, endAnimationNameOrDelay);\n        }\n        else {\n            const listener = (event) => {\n                if (!endAnimationNameOrDelay ||\n                    event.animationName === endAnimationNameOrDelay) {\n                    element.removeEventListener(\"animationend\", listener);\n                    element.removeEventListener(\"animationcancel\", listener);\n                    element.classList.remove(className);\n                    if (endAnimationCallback) {\n                        endAnimationCallback();\n                    }\n                }\n            };\n            element.addEventListener(\"animationend\", listener);\n            element.addEventListener(\"animationcancel\", listener);\n        }\n    }\n}\n/**\n * Uses the provided element to play the given animation after each amount of time in the given timeouts array.\n *\n * @param element The element to apply the provided animation class to.\n * @param animation The animation class to play after the provided number of timeouts.\n * @param timeouts An array of timeouts that determines how long to wait before playing the animation. The first\n * timeout will be set immediately and a listener will wait for the animation to end before moving to the next timeout.\n * @param options Options with helper functions that fire throughout the lifecycle of the recurring animations.\n *\n * @returns endAnimation A function that will stop playing the provided animation when called.\n */\nfunction setAnimationTimeouts(element, animation, timeouts, options) {\n    const { startingIndex, beforeAll, afterAll, beforeEach, afterEach } = options;\n    // The index of the current timeout value to start off on in the array.\n    let index = startingIndex || 0;\n    // Determines if the animation should be prevented from playing.\n    let terminate = false;\n    // The ID of the setTimeout function.\n    let timeoutID = null;\n    /**\n     * This will recursively play the provided animation class on the provided element after the amount of time specified\n     * in the timeouts array.\n     */\n    function playAnimation() {\n        // Call beforeAll immediately after this function is called.\n        if (beforeAll && index === 0) {\n            beforeAll();\n        }\n        // If the index equals the total number of values in the array, we are outside the scope of the array and have\n        // completed the animations.\n        const isComplete = index === timeouts.length;\n        if (!isComplete && !terminate) {\n            // Capture the timeout ID so we can clear it when needed.\n            timeoutID = setTimeout(setAnimationListener, timeouts[index]);\n        }\n        else if (isComplete && afterAll) {\n            afterAll();\n        }\n    }\n    /**\n     * Handles replaying the animation on the element using the next timeout in the array and resetting the element\n     * to it's original state to prepare for the next animation.\n     */\n    function replayAnimation() {\n        if (afterEach) {\n            afterEach();\n        }\n        // Move onto the next timeout in the array.\n        index++;\n        // Remove this event listener so that it doesn't get fired again.\n        element.removeEventListener(\"animationend\", replayAnimation);\n        // Remove the animation class since it has ended.\n        element.classList.remove(animation);\n        // Attempt to replay the animation.\n        playAnimation();\n    }\n    /**\n     * Handles playing and replaying the animation on the provided element.\n     */\n    function setAnimationListener() {\n        if (beforeEach) {\n            beforeEach();\n        }\n        // Begin the process to play the animation.\n        element.addEventListener(\"animationend\", replayAnimation);\n        element.classList.add(animation);\n    }\n    playAnimation();\n    /**\n     * The callback function that will stop the recurring animation.\n     */\n    return () => {\n        // Prevent the animation from playing/replaying.\n        terminate = true;\n        clearTimeout(timeoutID);\n        // Remove the animation class in case it's still applied and the event listener.\n        element.classList.remove(animation);\n        element.removeEventListener(\"animationend\", replayAnimation);\n    };\n}\n\nexport { animateWithClass, setAnimationTimeouts };\n","import ArrowUpLeft from '@carbon/icons-react/es/ArrowUpLeft.js';\nimport ChatLaunch from '@carbon/icons-react/es/ChatLaunch.js';\nimport { Button } from '@carbon/react';\nimport cx from 'classnames';\nimport React, { forwardRef, useState, useRef, useImperativeHandle, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useAriaAnnouncer } from '../../hooks/useAriaAnnouncer.js';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { animateWithClass } from '../../utils/animationUtils.js';\nimport { IS_MOBILE } from '../../utils/browserUtils.js';\nimport { doFocusRef } from '../../utils/domUtils.js';\nimport { getLauncherButtonAriaLabel } from './launcherUtils.js';\nimport { ButtonKindEnum } from '../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst MAX_EXTENDED_LAUNCHER_WIDTH = 400;\n/**\n * A new mobile specific launcher experiment that extends its width to the left and transitions between home screen\n * starters with a fade animation.\n */\nfunction LauncherExtended(props, ref) {\n    const { unreadAgentCount, showUnreadIndicator, serviceManager, launcherConfig, isExtended, playExtendAnimation, onToggleOpen, onSwipeRight, onReduceEnd, className, launcherHidden, activeTour, } = props;\n    const ariaAnnouncer = useAriaAnnouncer();\n    const languagePack = useLanguagePack();\n    const intl = useIntl();\n    const launcherAvatarURL = useSelector((state) => state.theme.useAITheme\n        ? undefined\n        : state.launcher.config.mobile.avatar_url_override);\n    const [animateExtendedState, setAnimateExtendedState] = useState(playExtendAnimation);\n    const [showGreetingMessage, setShowGreetingMessage] = useState(false);\n    const prevIsExtended = usePrevious(isExtended);\n    const buttonRef = useRef();\n    const extendedContainerRef = useRef();\n    const greetingMessageRef = useRef();\n    const textHolderRef = useRef();\n    // The touch coordinates captured when the user touched the launcher.\n    const touchStartRef = useRef({\n        touchStartX: null,\n        touchStartY: null,\n    });\n    const shouldReduceExtendedLauncher = !isExtended && prevIsExtended;\n    const extendWithAnimation = isExtended && animateExtendedState;\n    const extendWithoutAnimation = isExtended && !animateExtendedState;\n    const launcherGreetingMessage = launcherConfig.mobile.title || languagePack.launcher_mobileGreeting;\n    let ariaLabel = getLauncherButtonAriaLabel(languagePack, launcherHidden, activeTour);\n    if (unreadAgentCount !== 0) {\n        ariaLabel += `. ${intl.formatMessage({ id: \"icon_ariaUnreadMessages\" }, { count: unreadAgentCount })}`;\n    }\n    let launcherAvatar = React.createElement(ChatLaunch, { size: 24, className: \"WACLauncher__svg\" });\n    if (launcherAvatarURL) {\n        // eslint-disable-next-line jsx-a11y/alt-text\n        launcherAvatar = (React.createElement(\"img\", { className: \"WACLauncher__Avatar\", src: launcherAvatarURL, \"aria-hidden\": true, alt: \"\" }));\n    }\n    useImperativeHandle(ref, () => ({\n        requestFocus: () => {\n            doFocusRef(buttonRef);\n        },\n        launcherContainerElement: () => {\n            return extendedContainerRef.current;\n        },\n    }));\n    // This effect handles calculating the launcher's extended width. If the greeting message ends up changing, this\n    // should also re-calculate it.\n    useEffect(() => {\n        const textHolderElement = textHolderRef.current;\n        const greetingMessageElement = greetingMessageRef.current;\n        const extendedContainerElement = extendedContainerRef.current;\n        calculateAndSetMaxExtendedLauncherWidth(textHolderElement, greetingMessageElement, extendedContainerElement);\n    }, [ariaAnnouncer, extendWithoutAnimation, launcherGreetingMessage]);\n    // This handles displaying the greeting message and setting up the touch event listeners to reduce the extended\n    // launcher when in the extended state. If the launcher is reducing, the greeting message will be hidden and the\n    // launcher state will be update in session storage to reflect the reduced state.\n    useEffect(() => {\n        if (isExtended) {\n            // Fade in and announce the greeting message if the \"extend\" animation is played.\n            if (animateExtendedState) {\n                doFadeAnimationForElements({ fadeInElement: greetingMessageRef.current, fadeInTime: 300 }, () => {\n                    setAnimateExtendedState(false);\n                });\n            }\n            else {\n                // Only un-hide the greeting message.\n                setShowGreetingMessage(true);\n            }\n            // If the launcher is prevented from reducing, there's no need to setup touch listeners.\n            const buttonEl = buttonRef.current;\n            // Calls a function that will fire a callback function when it detects the user has swiped right on the launcher.\n            const handleTouchMove = (event) => {\n                checkIfUserSwipedRight(event.touches[0], touchStartRef.current, onSwipeRight);\n            };\n            // Capture the coordinates the user has touched the launcher on and add a touchmove listener to determine if the\n            // user swiped right on the launcher to close.\n            const handleTouchStart = (event) => {\n                const { clientX, clientY } = event.touches[0];\n                const touchStart = touchStartRef.current;\n                touchStart.touchStartX = clientX;\n                touchStart.touchStartY = clientY;\n                buttonRef.current.addEventListener(\"touchmove\", handleTouchMove);\n            };\n            buttonEl.addEventListener(\"touchstart\", handleTouchStart);\n            return () => {\n                buttonEl.removeEventListener(\"touchmove\", handleTouchMove);\n                buttonEl.removeEventListener(\"touchstart\", handleTouchStart);\n            };\n        }\n        else if (shouldReduceExtendedLauncher) {\n            // An animationend event handler that's called once the event reduce animation has ended.\n            const reduceAnimationEndListener = () => {\n                onReduceEnd();\n                // Once the \"reduce\" animation has finished reset the extended state flag so that the fade up animation for the\n                // text will play if another greeting message is triggered.\n                setAnimateExtendedState(true);\n                extendedContainerRef.current.removeEventListener(\"animationend\", reduceAnimationEndListener);\n            };\n            // Update the extendLauncher flag to false so that the user doesn't see the launcher animation on the next page\n            // load.\n            extendedContainerRef.current.addEventListener(\"animationend\", reduceAnimationEndListener);\n            // Fade out the greeting message.\n            doFadeAnimationForElements({\n                fadeOutElement: greetingMessageRef.current,\n            });\n        }\n        return undefined;\n    }, [\n        animateExtendedState,\n        ariaAnnouncer,\n        isExtended,\n        launcherGreetingMessage,\n        onReduceEnd,\n        onSwipeRight,\n        shouldReduceExtendedLauncher,\n    ]);\n    return (React.createElement(\"div\", { className: cx(\"WACLauncher__ButtonContainer WACLauncher__ButtonContainer--round WACLauncherExtended__Container\", className, {\n            \"WACLauncher__ButtonContainer--hidden\": launcherHidden,\n            \"WACLauncherExtended__Button--extended\": extendWithoutAnimation,\n            \"WACLauncherExtended__Button--extendedAnimation\": extendWithAnimation,\n            \"WACLauncherExtended__Button--reducedAnimation\": shouldReduceExtendedLauncher,\n        }), ref: extendedContainerRef },\n        React.createElement(Button, { \"aria-label\": ariaLabel, className: cx(\"WACLauncher__Button\", \"WACLauncherExtended__Button\", {\n                WACLauncher__TourButton: activeTour,\n            }), kind: activeTour ? ButtonKindEnum.GHOST : ButtonKindEnum.PRIMARY, type: \"button\", ref: buttonRef, onClick: onToggleOpen },\n            React.createElement(\"div\", { className: \"WACLauncherExtended__WrapperContainer\" },\n                React.createElement(\"div\", { className: \"WACLauncherExtended__Wrapper\" },\n                    React.createElement(\"div\", { className: \"WACLauncherExtended__TextHolder\", ref: textHolderRef },\n                        React.createElement(\"div\", { className: cx(\"WACLauncherExtended__Greeting\", {\n                                \"WACLauncherExtended__Element--hidden\": !showGreetingMessage,\n                            }), ref: greetingMessageRef },\n                            React.createElement(\"div\", { className: \"WACLauncherExtended__GreetingText\", \"aria-hidden\": !isExtended }, launcherGreetingMessage))),\n                    React.createElement(\"div\", { className: \"WACLauncher__IconHolder\", id: `WACLauncher__Button${serviceManager.namespace.suffix}` }, activeTour ? (React.createElement(ArrowUpLeft, { size: 24, className: \"WACLauncher__svg\" })) : (launcherAvatar)))),\n            (unreadAgentCount !== 0 || showUnreadIndicator) && (React.createElement(\"div\", { className: \"WAC__countIndicator\" }, unreadAgentCount !== 0 ? unreadAgentCount : \"\")))));\n}\n/**\n * This will do the math to determine the max-width in pixels the launcher is allowed to extend on a given device using\n * the provided elements and set the calculated width as a css variable.\n */\nfunction calculateAndSetMaxExtendedLauncherWidth(textHolderEl, greetingMessageEl, extendedContainerEl) {\n    // The number in pixels that don't make up the space the launcher text can fill up.\n    // 68px = 6px (left/right button border width) + 50px (launcher icon container) + 12px (text holder left padding)\n    const nonTextSpace = 68;\n    const maxLauncherExtendedWidth = getMaxLauncherExtendedWidth();\n    // The max-width in pixels the launcher text can take up if the launcher were to fully extend the devices' width.\n    // Add 12px to account for text holder container left padding.\n    const maxTextHolderWidth = maxLauncherExtendedWidth - nonTextSpace + 12;\n    // Set the text holder width and un-hide the greeting message element so that we can get the width of the greeting\n    // message text to help calculate how far the launcher should extend to fit the text.\n    textHolderEl.style.setProperty(\"width\", `${maxTextHolderWidth}px`);\n    // The width of the greeting message element is the max width minus the border width and left padding.\n    greetingMessageEl.style.setProperty(\"width\", `${maxTextHolderWidth - 12}px`);\n    greetingMessageEl.style.setProperty(\"display\", \"flex\");\n    const { clientWidth } = greetingMessageEl.querySelector(\".WACLauncherExtended__GreetingText\");\n    // We should add a pixel to compensate for lack of clientWidth precision. It's possible for 1 line of text to be\n    // rendered as 2 lines because HTML may render text with a precise width of 219.266 pixels, but clientWidth will\n    // return the floor value which would be just 219.\n    let launcherExtendedWidth = clientWidth + nonTextSpace + 1;\n    // Make sure the launcher width doesn't exceed the max width.\n    if (launcherExtendedWidth > MAX_EXTENDED_LAUNCHER_WIDTH) {\n        launcherExtendedWidth = MAX_EXTENDED_LAUNCHER_WIDTH;\n    }\n    // Remove temporary styles applied.\n    greetingMessageEl.removeAttribute(\"style\");\n    textHolderEl.removeAttribute(\"style\");\n    // Reduce the wrapper's extended width by 6 pixels to account for the launcher button's border width.\n    // setWrapperExtendedWidth(launcherExtendedWidth - 6);\n    // Set the extended width property to animate to.\n    extendedContainerEl.style.setProperty(\"--cds-chat--LAUNCHER-EXTENDED-width\", `${launcherExtendedWidth}px`);\n}\n/**\n * Performs the fade in/out animations on the provided elements.\n */\nfunction doFadeAnimationForElements({ fadeOutElement, fadeInElement, fadeInTime = 600, }, callback) {\n    if (fadeOutElement) {\n        fadeOutElement.classList.remove(\"WACLauncherExtended__Element--hidden\");\n        animateWithClass(fadeOutElement, \"WACLauncherExtended__Element--FadeOut\", 500, () => {\n            fadeOutElement.classList.add(\"WACLauncherExtended__Element--hidden\");\n            fadeOutElement.classList.remove(\"WACLauncherExtended__Element--FadeOut\");\n            // If there is no element provided to fade in, fire the callback function after the fade out animation is complete.\n            if (!fadeInElement && callback) {\n                callback();\n            }\n        });\n    }\n    if (fadeInElement) {\n        setTimeout(() => {\n            fadeInElement.classList.remove(\"WACLauncherExtended__Element--hidden\");\n            animateWithClass(fadeInElement, \"WACLauncherExtended__Element--FadeIn\", 600, () => {\n                fadeInElement.classList.remove(\"WACLauncherExtended__Element--FadeIn\");\n                // Fire the callback after the fade in animation has ended.\n                if (callback) {\n                    callback();\n                }\n            });\n        }, fadeInTime);\n    }\n}\n/**\n * Calculates if the user has swiped right on their screen over the extended launcher and fires a callback function if\n * this is the case.\n */\nfunction checkIfUserSwipedRight(touchList, touchStartCoordinates, callback) {\n    const { touchStartX, touchStartY } = touchStartCoordinates;\n    if (touchStartX === null || touchStartY === null) {\n        return;\n    }\n    // Capture the coordinates the user moved to.\n    const { clientX: touchEndX, clientY: touchEndY } = touchList;\n    // Get the difference between when the user began swiping and where they ended.\n    const differenceX = touchEndX - touchStartX;\n    const differenceY = touchEndY - touchStartY;\n    // If the absolute value of the X difference is greater than Y, this means the user swiped left or right on their\n    // device more than they swiped up or down.\n    if (Math.abs(differenceX) > Math.abs(differenceY)) {\n        // If the difference is greater than 0, this means the user swiped right, and we should fire the callback function.\n        if (differenceX > 0) {\n            callback();\n        }\n    }\n    // Reset the starting coordinates\n    touchStartCoordinates.touchStartX = null;\n    touchStartCoordinates.touchStartY = null;\n}\n/**\n * Returns the max width the launcher should animate to which is determined by using the lowest value between the\n * screen height or width for mobile devices. If the user is on a tablet, we don't want the launcher to extend\n * unnecessarily far, so we should cap at it 400px.\n */\nfunction getMaxLauncherExtendedWidth() {\n    const launcherPosition = IS_MOBILE ? 32 : 64;\n    const { width, height } = window.screen;\n    const lowestValue = Math.min(height, width);\n    const extendedWidth = lowestValue - launcherPosition;\n    return Math.min(extendedWidth, MAX_EXTENDED_LAUNCHER_WIDTH);\n}\nconst LauncherExtendedExport = React.memo(forwardRef(LauncherExtended));\n\nexport { LauncherExtendedExport as LauncherExtended };\n","import cx from 'classnames';\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useOnMount } from '../../hooks/useOnMount.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport actions from '../../store/actions.js';\nimport { BOUNCING_ANIMATION_TIMEOUTS } from '../../../../types/config/LauncherConfig.js';\nimport { setAnimationTimeouts } from '../../utils/animationUtils.js';\nimport { LauncherExtended as LauncherExtendedExport } from './LauncherExtended.js';\nimport { LauncherType } from '../../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction LauncherMobileContainer(props) {\n    const { launcherRef, onToggleOpen, launcherHidden, activeTour } = props;\n    const serviceManager = useServiceManager();\n    const { config: launcherConfig } = useSelector((state) => state.launcher);\n    const unreadAgentCount = useSelector((state) => state.agentState.numUnreadMessages);\n    const { mobileLauncherIsExtended: isExtended, mobileLauncherWasReduced: wasReduced, mobileLauncherDisableBounce: disableBounce, bounceTurn, showUnreadIndicator, viewState, } = useSelector((state) => state.persistedToBrowserStorage.launcherState);\n    const [isStartingBounceAnimation, setIsStartingBounceAnimation] = useState(false);\n    const prevIsExtended = usePrevious(isExtended);\n    const prevWasReduced = usePrevious(wasReduced);\n    // The bounce turn start off on in the recurring animation flow. We only care about the initial value and not its\n    // subsequent values as the user goes through the flow. This will allow the user to continue where they left off in\n    // the flow.\n    const initialBounceTurn = useRef(bounceTurn).current;\n    const previouslyPlayedExtendAnimation = useRef(wasReduced).current;\n    const extendLauncherTimeoutIDRef = useRef(null);\n    const reduceLauncherTimeoutIDRef = useRef(null);\n    const endBounceAnimationRef = useRef(null);\n    const shouldBounceRef = useRef(previouslyPlayedExtendAnimation && !disableBounce);\n    const { time_to_expand, new_expand_time, time_to_reduce } = launcherConfig.mobile;\n    const isExpandedLauncherEnabled = launcherConfig.mobile.is_on;\n    // If the launcher container mounted with the mobile launcher not in the extended state, and it's previous value is\n    // undefined, this means the launcher should be in the extended state playing the extended animation if not in the\n    // tooling preview.\n    const playExtendAnimation = prevIsExtended === undefined && !isExtended;\n    // Indicates if the launcher is playing the \"extend\" animation.\n    const isExtending = prevIsExtended !== undefined && !prevIsExtended && isExtended;\n    // Indicates if the launcher has completed the \"reduce\" animation.\n    const hasReduced = prevWasReduced !== undefined && !prevWasReduced && wasReduced;\n    // Prevents the launcher from playing the fade in animation after a rerender.\n    const disableIntroAnimation = isExtending || hasReduced || isStartingBounceAnimation;\n    const setLauncherStateAsReduced = useCallback(() => {\n        if (!wasReduced) {\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherWasReduced\", true));\n        }\n    }, [wasReduced, serviceManager]);\n    // This function kicks off the process of reducing the extended launcher, such as when the user scrolls the page, by\n    // setting mobileLauncherIsExtended in launcher state to false. If the user does scroll the page, it will be tracked.\n    const reduceLauncher = useCallback(() => {\n        clearTimeouts();\n        if (isExtended) {\n            document.removeEventListener(\"scroll\", reduceLauncher);\n            serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherIsExtended\", false));\n        }\n    }, [isExtended, serviceManager]);\n    const setExpandAnimationTimeout = useCallback(() => {\n        // Begin timeout to set launcher in the extended state.\n        extendLauncherTimeoutIDRef.current = setTimeout(() => {\n            if (!isExtended && !isExtending) {\n                // Since the launcher is going to expand, set the reduced flag to false.\n                serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherWasReduced\", false));\n                serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherIsExtended\", true));\n            }\n        }, time_to_expand);\n    }, [isExtended, isExtending, serviceManager.store, time_to_expand]);\n    // Clear the expand and bounce timers and set the launcher state to reduced and bounce disabled. This way if the page\n    // is reloaded the launcher will behave as if it has already been opened and won't try and show a greeting.\n    const setDefaultLauncherState = useCallback(() => {\n        const endBounceAnimation = endBounceAnimationRef.current;\n        if (endBounceAnimation) {\n            endBounceAnimation();\n            endBounceAnimationRef.current = null;\n        }\n        // Prevent the launcher from bouncing if it was toggled and allowed to play the bounce animation.\n        serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherDisableBounce\", true));\n        reduceLauncher();\n        // The launcher should be set as reduced to prevent it from extending on the next page load.\n        setLauncherStateAsReduced();\n    }, [reduceLauncher, serviceManager.store, setLauncherStateAsReduced]);\n    // When the launcher mounts, we should determine if it should prepare to play the \"extend\" animation, or kickoff the\n    // bounce animation. We should kick off the bounce animation early if we have to so that we can easily determine\n    // later on if it should be canceled.\n    useOnMount(() => {\n        // Determine if the mobile launcher wasn't reduced and can play the \"extend\" animation.\n        if (!wasReduced && playExtendAnimation && isExpandedLauncherEnabled) {\n            setExpandAnimationTimeout();\n        }\n        else if (shouldBounceRef.current) {\n            const launcherContainerElement = launcherRef?.current?.launcherContainerElement();\n            if (launcherContainerElement) {\n                const startRecurringBounceAnimation = () => {\n                    // This function is added as an event listener to the container, however the function isn't actually run until\n                    // the event listener is triggered. Because of this it's possible that the state has since changed, and we\n                    // actually don't want to bounce the launcher after all, so we need to check that we still want to bounce.\n                    if (shouldBounceRef.current) {\n                        // Track the bounce turn the user is currently on in the recurring animation flow.\n                        let turnCounter = initialBounceTurn;\n                        launcherContainerElement.removeEventListener(\"animationend\", startRecurringBounceAnimation);\n                        setIsStartingBounceAnimation(true);\n                        endBounceAnimationRef.current = setAnimationTimeouts(launcherContainerElement, \"WACLauncher__ButtonContainer--bounceAnimation\", BOUNCING_ANIMATION_TIMEOUTS, {\n                            startingIndex: initialBounceTurn - 1,\n                            afterEach: () => {\n                                // Increase the turn counter and have Carbon AI chat remember where the user left off in the flow.\n                                turnCounter++;\n                                serviceManager.store.dispatch(actions.setLauncherProperty(\"bounceTurn\", turnCounter));\n                            },\n                            afterAll: () => {\n                                serviceManager.store.dispatch(actions.setLauncherProperty(\"mobileLauncherDisableBounce\", true));\n                            },\n                        });\n                    }\n                };\n                // Once the launcher container has completed fading in, kick off the recurring bounce animation.\n                launcherContainerElement.addEventListener(\"animationend\", startRecurringBounceAnimation);\n            }\n        }\n    });\n    // If the main window or tour have been opened then clear all timers and set the launcher state as if it had been\n    // clicked open. This is to protect against scenarios where the main window or tour are opened using other methods\n    // besides clicking on the launcher.\n    useEffect(() => {\n        if (viewState.mainWindow || viewState.tour) {\n            // Clear timers and update launcher state so that no more greeting messages or bounces occur.\n            setDefaultLauncherState();\n        }\n    }, [viewState, setDefaultLauncherState]);\n    // If the launcher time_to_expand changes then we need to clear the existing timers and start new ones with the new time.\n    useEffect(() => {\n        if (new_expand_time) {\n            // If the launcher was supposed to bounce make sure it doesn't.\n            if (shouldBounceRef.current) {\n                shouldBounceRef.current = false;\n            }\n            // If there was an existing bounce timer going then clear the timeout so the bounce animation doesn't show.\n            const endBounceAnimation = endBounceAnimationRef.current;\n            if (endBounceAnimation) {\n                endBounceAnimation();\n                endBounceAnimationRef.current = null;\n            }\n            // If there was an existing \"extend\" timer going then clear the timeout so the original extend doesn't occur.\n            if (extendLauncherTimeoutIDRef.current) {\n                clearTimeout(extendLauncherTimeoutIDRef.current);\n            }\n            // Set the \"expand\" timers again with the new timeout that's been provided.\n            setExpandAnimationTimeout();\n            serviceManager.store.dispatch(actions.setLauncherConfigProperty(\"new_expand_time\", false, LauncherType.MOBILE));\n        }\n    }, [\n        setExpandAnimationTimeout,\n        new_expand_time,\n        serviceManager.store,\n        shouldBounceRef,\n    ]);\n    function clearTimeouts() {\n        const extendLauncherTimeoutID = extendLauncherTimeoutIDRef.current;\n        const reduceLauncherTimeoutID = reduceLauncherTimeoutIDRef.current;\n        // Clears all the existing timeouts that were set.\n        if (reduceLauncherTimeoutID) {\n            clearTimeout(reduceLauncherTimeoutID);\n            reduceLauncherTimeoutIDRef.current = null;\n        }\n        if (extendLauncherTimeoutID) {\n            clearTimeout(extendLauncherTimeoutID);\n            extendLauncherTimeoutIDRef.current = null;\n        }\n    }\n    // When the launcher is toggled, reduce the launcher if it's extended and open the widget.\n    const handleToggleOpen = useCallback(() => {\n        setDefaultLauncherState();\n        onToggleOpen();\n    }, [onToggleOpen, setDefaultLauncherState]);\n    // Track the user swiping to the right over the launcher and reduce the launcher.\n    const handleSwipeRight = useCallback(() => {\n        reduceLauncher();\n    }, [reduceLauncher]);\n    // When the launcher extends and a proper reduce timeout is set, we should kick off the timeout that will reduce the\n    // launcher.\n    useEffect(() => {\n        if (isExtended) {\n            // Begin timeout to reduce extended launcher.\n            reduceLauncherTimeoutIDRef.current = setTimeout(() => {\n                reduceLauncher();\n            }, time_to_reduce);\n            // Detect the user scrolling the page to begin reducing the launcher.\n            document.addEventListener(\"scroll\", reduceLauncher);\n        }\n    }, [isExtended, reduceLauncher, time_to_reduce, serviceManager]);\n    return (React.createElement(LauncherExtendedExport, { className: cx({\n            \"WACLauncher__ButtonContainer--noAnimation\": disableIntroAnimation,\n        }), ref: launcherRef, serviceManager: serviceManager, launcherConfig: launcherConfig, showUnreadIndicator: showUnreadIndicator, unreadAgentCount: unreadAgentCount, isExtended: isExtended, playExtendAnimation: playExtendAnimation, onToggleOpen: handleToggleOpen, onSwipeRight: handleSwipeRight, onReduceEnd: setLauncherStateAsReduced, launcherHidden: launcherHidden, activeTour: activeTour }));\n}\n\nexport { LauncherMobileContainer };\n","import React, { useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useEffectDidUpdate } from '../../hooks/useEffectDidUpdate.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport '../../../../types/state/AppState.js';\nimport { IS_PHONE } from '../../utils/browserUtils.js';\nimport { LauncherDesktopContainer } from './LauncherDesktopContainer.js';\nimport { LauncherMobileContainer } from './LauncherMobileContainer.js';\nimport { ViewChangeReason, MainWindowOpenReason } from '../../../../types/events/eventBusTypes.js';\nimport { ViewType } from '../../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction LauncherContainer() {\n    const serviceManager = useServiceManager();\n    const launcherRef = useRef();\n    const viewState = useSelector((state) => state.persistedToBrowserStorage.launcherState.viewState);\n    const initialViewChangeComplete = useSelector((state) => state.initialViewChangeComplete);\n    const launcherHidden = !viewState.launcher;\n    const activeTour = useSelector((state) => state.persistedToBrowserStorage.launcherState.activeTour);\n    const requestFocus = useCallback(() => {\n        launcherRef.current?.requestFocus();\n    }, [launcherRef]);\n    // If there's an active tour then on launcher click switch to the tour view. If there is not an active tour then on\n    // launcher click, fire the window open events, and switch to the main window. After switching to either the tour or\n    // the main window kick off hydration if the chat isn't hydrated yet.\n    const onDoToggle = useCallback(() => {\n        if (activeTour) {\n            // If there's an active tour then try to open the tour on launcher click.\n            return serviceManager.actions.changeView(ViewType.TOUR, {\n                viewChangeReason: ViewChangeReason.LAUNCHER_CLICKED,\n            });\n        }\n        // Otherwise try to open the main window on launcher click.\n        return serviceManager.actions.changeView(ViewType.MAIN_WINDOW, {\n            mainWindowOpenReason: MainWindowOpenReason.DEFAULT_LAUNCHER,\n        });\n    }, [activeTour, serviceManager.actions]);\n    useEffectDidUpdate(() => {\n        // If the main window and tour view are closed, and the launcher is visible, then we should request focus on the\n        // launcher. We need to wait for the initial view change to complete before requesting focus when the viewState\n        // changes. This is because we don't want to request focus after the first view change when\n        // Chat.startInternal switches from all views closed to whatever the starting view state is. Instead\n        // we want to wait to request focus until after user interactions that trigger changes to the viewState.\n        if (viewState.launcher &&\n            !viewState.mainWindow &&\n            !viewState.tour &&\n            initialViewChangeComplete) {\n            launcherRef.current?.requestFocus();\n        }\n    }, [viewState]);\n    let launcherContainer;\n    if (IS_PHONE) {\n        launcherContainer = (React.createElement(LauncherMobileContainer, { launcherRef: launcherRef, onToggleOpen: onDoToggle, launcherHidden: launcherHidden, activeTour: activeTour }));\n    }\n    else {\n        launcherContainer = (React.createElement(LauncherDesktopContainer, { launcherRef: launcherRef, onDoToggle: onDoToggle, requestFocus: requestFocus, launcherHidden: launcherHidden, activeTour: activeTour }));\n    }\n    return launcherContainer;\n}\n\nexport { LauncherContainer };\n","import { useRef, useEffect } from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This hook behaves the same as useEffect except that it only runs when the given inputs change (skipping the first\n * effect where the inputs are new).\n */\nfunction useEffectDidUpdate(effect, deps) {\n    const hasRunRef = useRef(false);\n    useEffect(() => {\n        if (hasRunRef.current) {\n            return effect();\n        }\n        hasRunRef.current = true;\n        return undefined;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n}\n\nexport { useEffectDidUpdate };\n","import Loading from '../../react/carbon/Loading.js';\nimport cx from 'classnames';\nimport React, { useContext } from 'react';\nimport { HideComponentContext } from '../contexts/HideComponentContext.js';\nimport { BotHeader as BotHeaderExport } from './header/BotHeader.js';\nimport { HomeScreenHeader as HomeScreenHeaderExport } from './homeScreen/HomeScreenHeader.js';\nimport { AnnounceOnMountComponent as AnnounceOnMountComponentExport } from './util/AnnounceOnMountComponent.js';\nimport { MountChildrenOnDelay } from './util/MountChildrenOnDelay.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is rendered while the Carbon AI chat is hydrating.\n */\nfunction HydrationPanel({ onClose, languagePack, isHydrated, headerDisplayName, useHomeScreenVersion, }) {\n    // This panel gets hidden instead of unmounted by the overlay container. We want to unmount the loading spinner\n    // below when that happens.\n    const isHidden = useContext(HideComponentContext);\n    let header;\n    if (useHomeScreenVersion) {\n        header = React.createElement(HomeScreenHeaderExport, { onClose: onClose });\n    }\n    else {\n        header = (React.createElement(BotHeaderExport, { onClose: onClose, headerDisplayName: headerDisplayName, onToggleHomeScreen: null, includeWriteableElement: false }));\n    }\n    return (React.createElement(\"div\", { className: \"WAC WAC__hydratingContainer\" },\n        header,\n        React.createElement(\"div\", { className: cx(\"WAC__hydrating\", \"WACPanelContent\", {\n                \"WAC__hydrating--homeScreen\": useHomeScreenVersion,\n            }) }, !isHidden && (React.createElement(MountChildrenOnDelay, { delay: 400 },\n            !isHydrated && (React.createElement(AnnounceOnMountComponentExport, { announceOnce: languagePack.window_ariaWindowLoading })),\n            React.createElement(Loading, { active: true, overlay: false, assistiveText: languagePack.window_ariaWindowLoading }))))));\n}\n\nexport { HydrationPanel };\n","import React, { useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { BusEventType } from '../../../../types/events/eventBusTypes.js';\nimport { useAriaAnnouncer } from '../../hooks/useAriaAnnouncer.js';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport actions from '../../store/actions.js';\nimport { DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS } from '../../store/reducerUtils.js';\nimport { AnimationInType, AnimationOutType } from '../../../../types/utilities/Animation.js';\nimport { consoleError } from '../../utils/miscUtils.js';\nimport { BasePanelComponent as BasePanelComponentExport } from '../BasePanelComponent.js';\nimport { OverlayPanel, OverlayPanelName } from '../OverlayPanel.js';\nimport WriteableElement from '../WriteableElement.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is a custom panel that renders external content similar to custom response types.\n */\nfunction CustomPanel(props) {\n    const { useAITheme, onPanelOpenEnd, onPanelCloseEnd, onPanelOpenStart, onPanelCloseStart, onClose, onCloseAndRestart, onClickRestart, } = props;\n    const languagePack = useLanguagePack();\n    const { isOpen, options } = useSelector((state) => state.customPanelState);\n    const { title, hidePanelHeader, disableDefaultCloseAction, disableAnimation, onClickBack, onClickClose, onClickCloseAndRestart, } = options;\n    const serviceManager = useServiceManager();\n    const ariaAnnouncer = useAriaAnnouncer();\n    const prevIsOpen = usePrevious(isOpen);\n    const openAnimation = disableAnimation\n        ? AnimationInType.NONE\n        : AnimationInType.SLIDE_IN_FROM_BOTTOM;\n    const closeAnimation = disableAnimation\n        ? AnimationOutType.NONE\n        : AnimationOutType.SLIDE_OUT_TO_BOTTOM;\n    useEffect(() => {\n        if (prevIsOpen !== isOpen && isOpen) {\n            // Announce the title if it's visible.\n            if (!hidePanelHeader && title) {\n                ariaAnnouncer(title);\n            }\n        }\n    }, [ariaAnnouncer, hidePanelHeader, isOpen, prevIsOpen, title]);\n    const onClickBackLocal = useCallback(() => {\n        serviceManager.store.dispatch(actions.setCustomPanelOpen(false));\n        onClickBack?.();\n    }, [serviceManager, onClickBack]);\n    const onClickCloseLocal = useCallback(() => {\n        if (!disableDefaultCloseAction) {\n            checkAllowClose(serviceManager.store.getState().viewChanging);\n            onClose();\n        }\n        onClickClose?.();\n    }, [disableDefaultCloseAction, onClickClose, onClose, serviceManager]);\n    // Note that this is not called until after the user has confirmed the action.\n    const onCloseAndRestartLocal = useCallback(() => {\n        if (!disableDefaultCloseAction) {\n            checkAllowClose(serviceManager.store.getState().viewChanging);\n            onCloseAndRestart();\n        }\n        onClickCloseAndRestart?.();\n    }, [\n        disableDefaultCloseAction,\n        onClickCloseAndRestart,\n        onCloseAndRestart,\n        serviceManager,\n    ]);\n    return (React.createElement(OverlayPanel, { className: \"WAC__overlay--covering\", onOpenStart: () => {\n            serviceManager.eventBus.fire({ type: BusEventType.CUSTOM_PANEL_PRE_OPEN }, serviceManager.instance);\n            onPanelOpenStart();\n        }, onOpenEnd: () => {\n            serviceManager.eventBus.fire({ type: BusEventType.CUSTOM_PANEL_OPEN }, serviceManager.instance);\n            onPanelOpenEnd();\n        }, onCloseStart: () => {\n            serviceManager.eventBus.fire({ type: BusEventType.CUSTOM_PANEL_PRE_CLOSE }, serviceManager.instance);\n            onPanelCloseStart();\n        }, onCloseEnd: () => {\n            serviceManager.eventBus.fire({ type: BusEventType.CUSTOM_PANEL_CLOSE }, serviceManager.instance);\n            onPanelCloseEnd();\n            serviceManager.store.dispatch(actions.setCustomPanelConfigOptions(DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS));\n        }, animationOnOpen: openAnimation, animationOnClose: closeAnimation, shouldOpen: isOpen, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.CUSTOM },\n        React.createElement(BasePanelComponentExport, { className: \"WACCustomPanel\", eventName: \"Custom panel opened\", eventDescription: \"A user opened a custom panel.\", labelBackButton: languagePack.general_returnToAssistant, isOpen: isOpen, title: title, useAITheme: useAITheme, onClickBack: onClickBackLocal, onClickClose: onClickCloseLocal, onClickCloseAndRestart: onCloseAndRestartLocal, onClickRestart: onClickRestart, hidePanelHeader: hidePanelHeader, hideBackButton: options.hideBackButton, hideCloseButton: options.hideCloseButton, hideCloseAndRestartButton: options.hideCloseAndRestartButton },\n            React.createElement(WriteableElement, { slotName: \"customPanelElement\", className: \"WACCustomPanel__ContentContainer\" }))));\n}\n/**\n * Checks the given flag and throws an error if it is true.\n */\nfunction checkAllowClose(viewChanging) {\n    if (viewChanging) {\n        const message = \"You are attempting to close Carbon AI chat from a custom panel while Carbon AI chat is currently running a view\" +\n            \" change event which is not permitted. Please use the disableDefaultCloseAction option to disable\" +\n            \" this behavior for the custom panel and then use onClickClose to resolve your Promise that is handling\" +\n            \" the event; that Promise will allow you to close Carbon AI chat.\";\n        consoleError(message);\n        throw new Error(message);\n    }\n}\nconst CustomPanelExport = React.memo(CustomPanel);\n\nexport { CustomPanelExport as CustomPanel };\n","import 'intl-pluralrules';\nimport cx from 'classnames';\nimport FocusTrap from 'focus-trap-react';\nimport React, { Component, Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { HydrationPanel } from '../../components/HydrationPanel.js';\nimport { OverlayPanel, OverlayPanelName } from '../../components/OverlayPanel.js';\nimport { CustomPanel as CustomPanelExport } from '../../components/panels/CustomPanel.js';\nimport { HideComponent } from '../../components/util/HideComponent.js';\nimport VisuallyHidden from '../../components/util/VisuallyHidden.js';\nimport { ModalPortalRootContext } from '../../contexts/ModalPortalRootContext.js';\nimport actions from '../../store/actions.js';\nimport { selectIsInputToAgent, selectInputState, selectAgentDisplayState } from '../../store/selectors.js';\nimport { AnimationOutType, AnimationInType } from '../../../../types/utilities/Animation.js';\nimport { ChatWidthBreakpoint } from '../../../../types/state/AppState.js';\nimport { addClassNameToState, removeClassNameFromState } from '../../../../types/utilities/HasAddRemoveClassName.js';\nimport { IS_IOS, getIPhoneHeightOffset, IS_MOBILE } from '../../utils/browserUtils.js';\nimport '../../utils/constants.js';\nimport { doFocusRef, SCROLLBAR_WIDTH } from '../../utils/domUtils.js';\nimport { arrayLastValue } from '../../utils/lang/arrayUtils.js';\nimport { createMessageRequestForText, createMessageRequestForChoice } from '../../utils/messageUtils.js';\nimport { consoleError, createDidCatchErrorData } from '../../utils/miscUtils.js';\nimport { MessageSendSource, MainWindowCloseReason } from '../../../../types/events/eventBusTypes.js';\nimport { lazyChat, lazyCatastrophicError, lazyDisclaimer, lazyHomeScreenContainer, lazyIFramePanel, lazyViewSourcePanel, lazyBodyAndFooterPanelComponent } from '../../../dynamic-imports/dynamic-imports.js';\nimport { ViewType } from '../../../../types/instance/apiTypes.js';\nimport { CornersType } from '../../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst Chat = lazyChat();\nconst CatastrophicError = lazyCatastrophicError();\nconst Disclaimer = lazyDisclaimer();\nconst HomeScreenContainer = lazyHomeScreenContainer();\nconst IFramePanel = lazyIFramePanel();\nconst ViewSourcePanel = lazyViewSourcePanel();\nconst BodyAndFooterPanelComponent = lazyBodyAndFooterPanelComponent();\n// Indicates the messages container is at the standard, default width.\nconst WIDTH_BREAKPOINT_STANDARD = \"WAC--standardWidth\";\n// Indicates the messages container is at a narrow width breakpoint (small phones).\nconst WIDTH_BREAKPOINT_NARROW = \"WAC--narrowWidth\";\n// Indicates the messages container is at a wide width breakpoint.\nconst WIDTH_BREAKPOINT_WIDE = \"WAC--wideWidth\";\nclass MainWindow extends Component {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = {\n            closing: false,\n            open: this.props.persistedToBrowserStorage.launcherState.viewState\n                .mainWindow,\n            modalPortalHostElement: null,\n            numPanelsOpen: 0,\n            numPanelsAnimating: 0,\n            numPanelsCovering: 0,\n            isHydrationAnimationComplete: this.props.isHydrated,\n            shouldAutoFocus: this.props.config.public.shouldTakeFocusIfOpensAutomatically,\n            extraClassNames: [],\n            areModulesLoaded: false,\n        };\n        /**\n         * A React ref to the \"WACMainWindow\" element.\n         */\n        this.mainWindowRef = React.createRef();\n        /**\n         * A React ref to the \"WACWidget\" element.\n         */\n        this.containerRef = React.createRef();\n        /**\n         * A React ref to the bot {@link Chat} component.\n         */\n        this.botChatRef = React.createRef();\n        /**\n         * A React ref to the bot {@link Input} component.\n         */\n        this.homeScreenInputRef = React.createRef();\n        /**\n         * A React ref to the bot {@link Disclaimer} component.\n         */\n        this.disclaimerRef = React.createRef();\n        /**\n         * A React ref to the {@link BrandingOverlayComponent} component.\n         */\n        this.brandingRef = React.createRef();\n        /**\n         * A React ref to the animation container element.\n         */\n        this.animationContainerRef = React.createRef();\n        /**\n         * A React ref to the {@link IFramePanel} component.\n         */\n        this.iframePanelRef = React.createRef();\n        /**\n         * A React ref to the {@link ViewSourcePanel}.\n         */\n        this.viewSourcePanelRef = React.createRef();\n        /**\n         * The previous value of the body \"visibility\" property before the widget was opened.\n         */\n        this.previousBodyVisibility = undefined;\n        /**\n         * The previous value of the body \"position\" property before the widget was opened.\n         */\n        this.previousBodyPosition = undefined;\n        /**\n         * This will check to see if the messages list is anchored to the bottom of the panel and if so, ensure that the\n         * list is still scrolled to the bottom. It will also set the classname appropriate to the current width.\n         */\n        this.onResize = () => {\n            let appChatWidthBreakpoint;\n            const height = this.containerRef?.current?.offsetHeight;\n            const width = this.containerRef?.current?.offsetWidth;\n            // The minimum width of the wide size + 1rem of padding on each side.\n            if (width >= 672 + 16 + 16) {\n                appChatWidthBreakpoint = ChatWidthBreakpoint.WIDE;\n            }\n            else if (width >= 360) {\n                appChatWidthBreakpoint = ChatWidthBreakpoint.STANDARD;\n            }\n            else {\n                appChatWidthBreakpoint = ChatWidthBreakpoint.NARROW;\n            }\n            this.props.serviceManager.store.dispatch(actions.setAppStateValue(\"chatWidth\", width));\n            this.props.serviceManager.store.dispatch(actions.setAppStateValue(\"chatHeight\", height));\n            this.props.serviceManager.store.dispatch(actions.setAppStateValue(\"chatWidthBreakpoint\", appChatWidthBreakpoint));\n        };\n        /**\n         * This is called when the visual viewport is resized.\n         */\n        this.onVisualViewportResize = () => {\n            this.updateFromVisualViewport();\n        };\n        /**\n         * The visual viewport is a relatively new API that provide this information about the actual visible area of the\n         * browser. This takes into account things like the navigation bars and the keyboard. When the browser supports it\n         * we can get more accurate about adjusting based on those things.\n         */\n        this.updateFromVisualViewport = () => {\n            const element = this.props.serviceManager.container;\n            const { visualViewport } = window;\n            if (visualViewport) {\n                // The viewport height is the visible area and the offset top is how much the viewport has been scrolled. The\n                // viewport scrolling occurs on iOS devices when the keyboard is open but not on android.\n                element.style.setProperty(\"--cds-chat-viewport-height\", `${visualViewport.height}px`);\n                element.style.setProperty(\"--cds-chat-viewport-width\", `${visualViewport.width}px`);\n                element.style.setProperty(\"--cds-chat-viewport-offsetTop\", `${visualViewport.offsetTop}px`);\n                element.style.setProperty(\"--cds-chat-viewport-offsetLeft\", `${visualViewport.offsetLeft}px`);\n            }\n            else {\n                // For browsers that don't support the visual viewport, for now we'll just settle on these values which only\n                // sort of works.\n                let height = \"100vh\";\n                if (IS_IOS) {\n                    const offset = getIPhoneHeightOffset();\n                    height = `calc(100vh - ${offset}px)`;\n                }\n                element.style.setProperty(\"--cds-chat-viewport-height\", height);\n                element.style.setProperty(\"--cds-chat-viewport-width\", \"100vw\");\n                element.style.setProperty(\"--cds-chat-viewport-offsetTop\", \"0\");\n                element.style.setProperty(\"--cds-chat-viewport-offsetLeft\", \"0\");\n            }\n        };\n        /**\n         * Sets the element that is used as the host for {@link ModalPortal}.\n         */\n        this.setModalPortalHostElement = (ref) => {\n            if (this.state.modalPortalHostElement !== ref) {\n                this.setState({ modalPortalHostElement: ref });\n            }\n        };\n        this.onSendInput = async (text, source, options) => {\n            const isInputToAgent = selectIsInputToAgent(this.props);\n            const { serviceManager } = this.props;\n            const state = serviceManager.store.getState();\n            const { files } = selectInputState(state);\n            if (isInputToAgent) {\n                // If we're connected to an agent, then send the message to the agent instead of the bot.\n                serviceManager.humanAgentService.sendMessageToAgent(text, files);\n            }\n            else {\n                const messageRequest = createMessageRequestForText(text);\n                serviceManager.actions.sendWithCatch(messageRequest, source, {\n                    ...options,\n                });\n            }\n            if (files.length) {\n                serviceManager.store.dispatch(actions.clearInputFiles(isInputToAgent));\n            }\n        };\n        this.onSendHomeButtonInput = (input) => {\n            const messageRequest = createMessageRequestForChoice(input);\n            this.props.serviceManager.actions.sendWithCatch(messageRequest, MessageSendSource.HOME_SCREEN_STARTER);\n        };\n        // When the animation is complete, we go ahead and set the state to remove chat from DOM\n        this.removeChatFromDom = () => {\n            this.containerRef.current.removeEventListener(\"animationend\", this.removeChatFromDom);\n            this.setState({\n                open: false,\n                closing: false,\n            });\n        };\n        // Reset Carbon AI chat to new session.\n        this.onRestart = async () => {\n            await this.props.serviceManager.actions.restartConversation();\n            this.requestFocus();\n        };\n        // Close window.\n        this.onClose = async () => {\n            return this.doClose(false);\n        };\n        /**\n         * Called when the close-and-restart button is clicked. This will close the chat window and restart the bot\n         * conversation. It will in addition, end any agent conversation that is active and switch back to the bot view. This\n         * will be called after the user is presented with a confirmation panel.\n         */\n        this.onCloseAndRestart = async () => {\n            return this.doClose(true);\n        };\n        /**\n         * The callback that can be called to toggle between the home screen and the bot view.\n         */\n        this.onToggleHomeScreen = () => {\n            this.props.serviceManager.store.dispatch(actions.toggleHomeScreen());\n        };\n        /**\n         * Puts focus on the default focusable item for the current state of the application.\n         */\n        this.requestFocus = () => {\n            try {\n                if (this.state.shouldAutoFocus && !IS_MOBILE) {\n                    // Put focus either on the input field or on the launcher button.\n                    if (this.getShowDisclaimer()) {\n                        if (this.disclaimerRef.current) {\n                            // Focus the disclaimer accept button.\n                            doFocusRef(this.disclaimerRef);\n                        }\n                    }\n                    else if (this.getShowHomeScreen()) {\n                        if (this.homeScreenInputRef.current) {\n                            // Focus the home screen input field. Must be on timeout because of the home screen's own internal animations.\n                            this.homeScreenInputRef.current.takeFocus();\n                        }\n                    }\n                    else if (this.props.iFramePanelState.isOpen) {\n                        if (this.iframePanelRef.current) {\n                            // Focus the iframe panel close button.\n                            this.iframePanelRef.current.requestFocus();\n                        }\n                    }\n                    else if (this.botChatRef.current) {\n                        // Focus the bot input field.\n                        this.botChatRef.current.requestInputFocus();\n                    }\n                }\n            }\n            catch (error) {\n                consoleError(\"An error occurred in MainWindow.requestFocus\", error);\n            }\n        };\n        /**\n         * Called when the user starts or stops typing.\n         */\n        this.onUserTyping = (isTyping) => {\n            if (this.props.serviceManager.store.getState().persistedToBrowserStorage\n                .chatState.agentState.isConnected) {\n                this.props.serviceManager.humanAgentService.userTyping(isTyping);\n            }\n        };\n        /**\n         * After accepting the disclaimer, we animate the disclaimer screen away.\n         */\n        this.onAcceptDisclaimer = () => {\n            this.props.serviceManager.store.dispatch(actions.acceptDisclaimer());\n        };\n        /**\n         * Update the panel counter to show a panel has opened, and add any proper focus.\n         */\n        this.onPanelOpenStart = (coverBackground) => {\n            this.setState((prevState) => ({\n                numPanelsOpen: prevState.numPanelsOpen + 1,\n                numPanelsAnimating: prevState.numPanelsAnimating + 1,\n                numPanelsCovering: prevState.numPanelsCovering + (coverBackground ? 1 : 0),\n            }), this.requestFocus);\n        };\n        /**\n         * Update the panel counter to show a panel has opened.\n         */\n        this.onPanelOpenEnd = () => {\n            this.setState((prevState) => ({\n                numPanelsAnimating: prevState.numPanelsAnimating - 1,\n            }));\n        };\n        /**\n         * Update the panel counter to show a panel has started to close.\n         */\n        this.onPanelCloseStart = () => {\n            this.setState((prevState) => ({ numPanelsAnimating: prevState.numPanelsAnimating + 1 }), this.requestFocus);\n        };\n        /**\n         * Update the panel counter to show a panel has started to close.\n         */\n        this.onPanelCloseEnd = (coverBackground) => {\n            this.setState((prevState) => ({\n                numPanelsOpen: prevState.numPanelsOpen - 1,\n                numPanelsAnimating: prevState.numPanelsAnimating - 1,\n                numPanelsCovering: prevState.numPanelsCovering - (coverBackground ? 1 : 0),\n            }));\n        };\n        /**\n         * Mark the hydration panel as closed with animation completed.\n         */\n        this.onHydrationPanelClose = () => {\n            this.setState({ isHydrationAnimationComplete: true }, this.requestFocus);\n        };\n    }\n    componentDidMount() {\n        const { persistedToBrowserStorage, config, serviceManager, mainWindowRef } = this.props;\n        const { viewState } = persistedToBrowserStorage.launcherState;\n        const { public: publicConfig } = config;\n        serviceManager.mainWindow = this;\n        mainWindowRef.current = this;\n        this.mainWindowObserver = new ResizeObserver(this.onResize);\n        this.mainWindowObserver.observe(this.containerRef.current);\n        if (IS_MOBILE && !publicConfig.disableCustomElementMobileEnhancements) {\n            const { visualViewport } = window;\n            if (visualViewport) {\n                visualViewport.addEventListener(\"resize\", this.onVisualViewportResize);\n                visualViewport.addEventListener(\"scroll\", this.updateFromVisualViewport);\n            }\n            // For devices that don't support the visual viewport we'll set some default values anyway.\n            this.updateFromVisualViewport();\n            this.updateBody(false);\n        }\n        // Make the scrollbar width available to CSS.\n        this.containerRef.current.style.setProperty(\"--cds-chat-scrollbar-width\", `${SCROLLBAR_WIDTH()}px`);\n        if (viewState.mainWindow) {\n            this.loadPanels();\n        }\n    }\n    componentWillUnmount() {\n        // Remove the listeners and observer we added previously.\n        this.mainWindowObserver.unobserve(this.containerRef.current);\n    }\n    /**\n     * This function is called when the app is destroyed. This component is never actually unmounted; the entire\n     * container holding the Carbon AI chat is simply removed from the DOM.\n     */\n    destroy() {\n        if (IS_MOBILE &&\n            !this.props.config.public.disableCustomElementMobileEnhancements) {\n            const { visualViewport } = window;\n            if (visualViewport) {\n                visualViewport.removeEventListener(\"resize\", this.onVisualViewportResize);\n                visualViewport.removeEventListener(\"scroll\", this.updateFromVisualViewport);\n            }\n        }\n        this.updateBody(true);\n    }\n    componentDidUpdate(oldProps, oldState) {\n        const newProps = this.props;\n        const newState = this.state;\n        const { persistedToBrowserStorage, useCustomHostElement, isDestroyed } = newProps;\n        const { viewState } = persistedToBrowserStorage.launcherState;\n        const { open } = newState;\n        const prevViewState = oldProps.persistedToBrowserStorage.launcherState.viewState;\n        if (viewState.mainWindow !== prevViewState.mainWindow) {\n            // If viewState.mainWindow has changed then perform the necessary updates.\n            this.updateBody(false);\n            this.updateFromVisualViewport();\n        }\n        if (isDestroyed && !oldProps.isDestroyed) {\n            this.destroy();\n        }\n        if ((oldState.areModulesLoaded !== newState.areModulesLoaded ||\n            oldProps.isHydrated !== newProps.isHydrated) &&\n            newProps.isHydrated &&\n            newState.areModulesLoaded) {\n            // If both areModulesLoaded and isHydrated have changed and isHydrated is true and areModulesLoaded is true, then\n            // we can go ahead and request focus on the active panel.\n            this.setState({ isHydrationAnimationComplete: true }, () => {\n                requestAnimationFrame(() => {\n                    this.requestFocus();\n                });\n            });\n        }\n        if (viewState.mainWindow && (!prevViewState.mainWindow || !open)) {\n            // If the main Carbon AI chat window is now open, and it was not previously then perform the necessary updates.\n            // See https://reactjs.org/docs/react-component.html#componentdidupdate.\n            this.setState({ open: true }, () => {\n                this.requestFocus();\n            });\n            this.loadPanels();\n        }\n        else if (!viewState.mainWindow &&\n            prevViewState.mainWindow &&\n            oldState.open &&\n            open) {\n            // If the main Carbon AI chat window was previously open but is now no longer open then preform the necessary updates.\n            // See https://reactjs.org/docs/react-component.html#componentdidupdate.\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ closing: true });\n            if (useCustomHostElement) {\n                this.removeChatFromDom();\n            }\n            else {\n                this.containerRef.current.addEventListener(\"animationend\", this.removeChatFromDom);\n                this.requestFocus();\n            }\n        }\n        if (newProps.config.public.shouldTakeFocusIfOpensAutomatically) {\n            // This code is to prevent the widget from grabbing focus when a reset occurs. The autofocus value starts as\n            // true but when we detect a reset, we turn the autofocus off until the user sends a message.\n            if (!oldProps.persistedToBrowserStorage.chatState\n                .hasSentNonWelcomeMessage &&\n                newProps.persistedToBrowserStorage.chatState.hasSentNonWelcomeMessage &&\n                !this.state.shouldAutoFocus) {\n                // eslint-disable-next-line react/no-did-update-set-state\n                this.setState({ shouldAutoFocus: true });\n            }\n            else if (oldProps.botMessageState.localMessageIDs.length >\n                newProps.botMessageState.localMessageIDs.length &&\n                this.state.shouldAutoFocus) {\n                // If there are fewer messages than there were previously, we infer that the Carbon AI chat has been restarted.\n                // In that case, don't do any autofocusing.\n                this.setState({ shouldAutoFocus: false });\n            }\n            else if (oldProps.botMessageState.localMessageIDs.length <\n                newProps.botMessageState.localMessageIDs.length &&\n                !this.state.shouldAutoFocus) {\n                // If a new message comes in, turn autofocusing back on.\n                this.setState({ shouldAutoFocus: true });\n            }\n        }\n        const newLastItemID = arrayLastValue(newProps.botMessageState.localMessageIDs);\n        const oldLastItemID = arrayLastValue(oldProps.botMessageState.localMessageIDs);\n        if (newLastItemID !== oldLastItemID && newState.shouldAutoFocus) {\n            // The last item has changed. If it's not from history, then request focus.\n            const lastMessageItem = newProps.allMessageItemsByID[newLastItemID];\n            const lastMessage = newProps.allMessagesByID[lastMessageItem?.fullMessageID];\n            if (!lastMessage?.history?.from_history) {\n                this.requestFocus();\n            }\n        }\n    }\n    componentDidCatch(error, errorInfo) {\n        this.props.serviceManager.actions.errorOccurred(createDidCatchErrorData(\"MainWindow\", error, errorInfo, true));\n    }\n    /**\n     * Lazy loads in all the different panels when Carbon AI chat is loaded.\n     */\n    loadPanels() {\n        Promise.all([\n            Chat.preload(),\n            CatastrophicError.preload(),\n            Disclaimer.preload(),\n            HomeScreenContainer.preload(),\n            IFramePanel.preload(),\n            ViewSourcePanel.preload(),\n            BodyAndFooterPanelComponent.preload(),\n        ]).then(() => {\n            this.setState({ areModulesLoaded: true });\n        });\n    }\n    /**\n     * This function will apply the necessary updates to the body element. This is primarily used to deal with\n     * adjustments made to mobile devices.\n     */\n    updateBody(unmounting) {\n        if (IS_IOS &&\n            !this.props.config.public.disableCustomElementMobileEnhancements) {\n            if ((window.screen.width <= 500 || window.screen.height <= 500) &&\n                this.props.persistedToBrowserStorage.launcherState.viewState\n                    .mainWindow &&\n                !unmounting) {\n                this.previousBodyVisibility =\n                    document.body.style.getPropertyValue(\"visibility\");\n                this.previousBodyPosition =\n                    document.body.style.getPropertyValue(\"position\");\n                // On iOS devices when the keyboard is opened the viewport is immediately resized to the shorter view that is\n                // visible between the navigation bar and the keyboard. However, this occurs before the keyboard has fully slid\n                // into view. When the resize occurs we shrink the widget to the size of the viewport but this means that\n                // during the animation the widget is too short and what is behind the widget becomes momentarily visible. To\n                // deal with that we hide the body while the widget is open. For code searchability adding the words\n                // \"visibility: hidden !important\" since that is how this styling is rendered on the body.\n                document.body.style.setProperty(\"visibility\", \"hidden\", \"important\");\n                // To prevent the widget from being scrollable in a way that gets it into a bad state, we can set the body\n                // to a fixed position. For code searchability adding the words \"position: fixed !important\" since that is how\n                // this styling is rendered on the body.\n                document.body.style.setProperty(\"position\", \"fixed\", \"important\");\n            }\n            else {\n                document.body.style.setProperty(\"visibility\", this.previousBodyVisibility);\n                document.body.style.setProperty(\"position\", this.previousBodyPosition);\n            }\n        }\n    }\n    /**\n     * Closes the main window and optional performs a close-and-restart.\n     */\n    async doClose(fromCloseAndRestart) {\n        const { serviceManager } = this.props;\n        const { activeTour } = serviceManager.store.getState().persistedToBrowserStorage.launcherState;\n        // Fire the view:change and window:close events. If the view change is canceled then the main window will stay open.\n        if (fromCloseAndRestart) {\n            // If the chat is restarting then try to open the launcher.\n            const newViewState = await serviceManager.actions.changeView(ViewType.LAUNCHER, {\n                mainWindowCloseReason: MainWindowCloseReason.MAIN_WINDOW_CLOSED_AND_RESTARTED,\n            });\n            if (!newViewState.mainWindow) {\n                // If the main window is no longer visible restart the conversation.\n                await serviceManager.actions.restartConversation();\n            }\n        }\n        else {\n            // If the chat is not restarting and there is an active tour then try to open the tour view, otherwise try to open\n            // the launcher.\n            await serviceManager.actions.changeView(activeTour ? ViewType.TOUR : ViewType.LAUNCHER, {\n                mainWindowCloseReason: MainWindowCloseReason.DEFAULT_MINIMIZE,\n            });\n        }\n    }\n    /**\n     * Note: This function relies on a lie which is  homeScreenState.isHomeScreenOpen which by default is true when store\n     * is created based on whether Home Screen is enabled and only later updated to its real value after hydration.\n     */\n    getShowHomeScreen() {\n        return (this.props.homeScreenConfig.is_on &&\n            this.props.persistedToBrowserStorage.chatState.homeScreenState\n                .isHomeScreenOpen &&\n            !this.getShowDisclaimer());\n    }\n    getShowDisclaimer() {\n        return (this.props.config.public.disclaimer?.is_on &&\n            !this.props.persistedToBrowserStorage.chatState.disclaimersAccepted[window.location.hostname]);\n    }\n    /**\n     * Initiates a doAutoScroll on the currently visible chat panel.\n     */\n    doAutoScroll(options) {\n        this.botChatRef?.current?.doAutoScroll(options);\n    }\n    /**\n     * Returns the current scrollBottom value for the message scroll panel.\n     */\n    getMessagesScrollBottom() {\n        return this.botChatRef?.current?.getMessagesScrollBottom();\n    }\n    /**\n     * Scrolls to the (full) message with the given ID. Since there may be multiple message items in a given\n     * message, this will scroll the first message to the top of the message window.\n     *\n     * @param messageID The (full) message ID to scroll to.\n     * @param animate Whether or not the scroll should be animated. Defaults to true.\n     */\n    doScrollToMessage(messageID, animate = true) {\n        this.botChatRef.current?.doScrollToMessage(messageID, animate);\n    }\n    /**\n     * Returns the element that represents the input field (text area) on the main message area.\n     */\n    getMessageInput() {\n        return this.botChatRef.current?.getMessageInput();\n    }\n    /**\n     * Returns the element that represents the input field (text area) on the home screen.\n     */\n    getHomeScreenInput() {\n        return this.homeScreenInputRef.current?.getMessageInput();\n    }\n    /**\n     * Adds the given class name to the main window element.\n     */\n    addClassName(name) {\n        this.setState(addClassNameToState(name));\n    }\n    /**\n     * Removes the given class name from the main window element.\n     */\n    removeClassName(name) {\n        this.setState(removeClassNameFromState(name));\n    }\n    /**\n     * Returns the chat widget portion of the application.\n     *\n     * Note: If the home screen mini variation is to be displayed, the hydration panel shouldn't be rendered because\n     * otherwise it appears for a split second before home screen is loaded.\n     */\n    renderChat() {\n        const { isHydrated, config, chatWidthBreakpoint } = this.props;\n        const { areModulesLoaded } = this.state;\n        const showCovering = this.state.numPanelsCovering > 0 &&\n            config.public.layout?.hasContentMaxWidth &&\n            chatWidthBreakpoint === ChatWidthBreakpoint.WIDE;\n        return (React.createElement(\"div\", { className: \"WACWidget--content\" },\n            this.renderCustomPanel(),\n            this.renderHydrationPanel(),\n            isHydrated && areModulesLoaded && (React.createElement(React.Fragment, null,\n                this.renderDisclaimerPanel(),\n                this.renderResponsePanel(),\n                this.renderHomeScreenPanel(),\n                this.renderIFramePanel(),\n                this.renderViewSourcePanel(),\n                showCovering && React.createElement(\"div\", { className: \"WACBackgroundCover\" }),\n                this.renderBotChat()))));\n    }\n    /**\n     * Render the chat with the assistant.\n     */\n    renderBotChat() {\n        const { botName, languagePack, config, serviceManager, botMessageState, agentState, allMessageItemsByID, isHydrated, locale, theme, headerDisplayName, headerAvatarConfig: headerAvatar, } = this.props;\n        const { numPanelsAnimating, numPanelsOpen, isHydrationAnimationComplete } = this.state;\n        const inputState = selectInputState(this.props);\n        const agentDisplayState = selectAgentDisplayState(this.props);\n        const showDisclaimer = this.getShowDisclaimer();\n        let hideBotContainer;\n        if (!isHydrationAnimationComplete) {\n            // If the Hydration animation is still running then hide the bot container.\n            hideBotContainer = true;\n        }\n        else if (numPanelsAnimating > 0) {\n            // If any panel is animating then show the bot container for the duration of the animation.\n            hideBotContainer = false;\n        }\n        else if (numPanelsOpen > 0) {\n            // Otherwise if any panel is open than hide the bot container.\n            hideBotContainer = true;\n        }\n        return (React.createElement(HideComponent, { className: \"WACBotContainer\", hidden: hideBotContainer },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(Chat, { botName: botName, headerDisplayName: headerDisplayName, headerAvatarConfig: headerAvatar, ref: this.botChatRef, languagePack: languagePack, config: config, serviceManager: serviceManager, onClose: this.onClose, onCloseAndRestart: this.onCloseAndRestart, messageState: botMessageState, onSendInput: (text) => this.onSendInput(text, MessageSendSource.MESSAGE_INPUT), agentState: agentState, agentDisplayState: agentDisplayState, allMessageItemsByID: allMessageItemsByID, onRestart: this.onRestart, isHydrated: isHydrated, isHydrationAnimationComplete: isHydrationAnimationComplete && !showDisclaimer, inputState: inputState, onToggleHomeScreen: this.onToggleHomeScreen, onUserTyping: this.onUserTyping, locale: locale, useAITheme: theme.useAITheme, carbonTheme: theme.carbonTheme }))));\n    }\n    renderInnerHydrationPanel() {\n        const { botMessageState, serviceManager, languagePack, headerDisplayName, persistedToBrowserStorage, homeScreenConfig, } = this.props;\n        const { areModulesLoaded } = this.state;\n        // We need to make an educated guess whether the home screen is going to be displayed after hydration is\n        // complete, so we can show a version of the hydration panel that matches to avoid a flickering transition when\n        // the hydration panel is only displayed very briefly. If the user's assistant session has expired, this will be\n        // wrong, but it's rare enough to be not worth addressing.\n        const useHomeScreenVersion = homeScreenConfig.is_on &&\n            !persistedToBrowserStorage.launcherState.hasSentNonWelcomeMessage;\n        return (React.createElement(HydrationPanel, { headerDisplayName: headerDisplayName, isHydrated: botMessageState.isHydratingCounter === 0 && areModulesLoaded, serviceManager: serviceManager, onClose: this.onClose, languagePack: languagePack, useHomeScreenVersion: useHomeScreenVersion }));\n    }\n    /**\n     * Render the panel with the loading state when we are hydrating the Carbon AI chat.\n     */\n    renderHydrationPanel() {\n        const { botMessageState, serviceManager, catastrophicErrorType, persistedToBrowserStorage, } = this.props;\n        const { viewState } = persistedToBrowserStorage.launcherState;\n        const { areModulesLoaded } = this.state;\n        return (React.createElement(OverlayPanel, { onOpenStart: () => this.onPanelOpenStart(false), onCloseStart: this.onPanelCloseStart, onOpenEnd: this.onPanelOpenEnd, onCloseEnd: () => {\n                this.onHydrationPanelClose();\n                this.onPanelCloseEnd(false);\n            }, animationOnOpen: AnimationInType.NONE, animationOnClose: AnimationOutType.NONE, shouldOpen: (botMessageState.isHydratingCounter > 0 || !areModulesLoaded) &&\n                !catastrophicErrorType &&\n                viewState.mainWindow, shouldHide: false, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.HYDRATING }, this.renderInnerHydrationPanel()));\n    }\n    /**\n     * Render the panel for when the Carbon AI chat completely fails.\n     */\n    renderCatastrophicPanel() {\n        const { serviceManager, botName, languagePack, headerDisplayName } = this.props;\n        return (React.createElement(OverlayPanel, { animationOnOpen: AnimationInType.NONE, animationOnClose: AnimationOutType.NONE, shouldOpen: true, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.CATASTROPHIC },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(CatastrophicError, { onClose: this.onClose, headerDisplayName: headerDisplayName, serviceManager: serviceManager, languagePack: languagePack, onRestart: this.onRestart, showHeader: true, botName: botName }))));\n    }\n    /**\n     * Render the disclaimer panel.\n     */\n    renderDisclaimerPanel() {\n        const { serviceManager, config } = this.props;\n        const showDisclaimer = this.getShowDisclaimer();\n        return config.public.disclaimer?.is_on ? (React.createElement(OverlayPanel, { onOpenStart: () => this.onPanelOpenStart(false), onCloseStart: this.onPanelCloseStart, onOpenEnd: this.onPanelOpenEnd, onCloseEnd: () => this.onPanelCloseEnd(false), animationOnOpen: AnimationInType.FADE_IN, animationOnClose: AnimationOutType.FADE_OUT, shouldOpen: showDisclaimer, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.DISCLAIMER },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(Disclaimer, { onAcceptDisclaimer: this.onAcceptDisclaimer, onClose: this.onClose, disclaimerHTML: config.public.disclaimer?.disclaimerHTML, disclaimerAcceptButtonRef: this.disclaimerRef })))) : null;\n    }\n    /**\n     * Render the home screen panel.\n     */\n    renderHomeScreenPanel() {\n        const { isHydrationAnimationComplete } = this.state;\n        const showHomeScreen = this.getShowHomeScreen();\n        return (React.createElement(Suspense, { fallback: null },\n            React.createElement(HomeScreenContainer, { onPanelOpenStart: () => this.onPanelOpenStart(false), onPanelOpenEnd: this.onPanelOpenEnd, onPanelCloseStart: this.onPanelCloseStart, onPanelCloseEnd: () => this.onPanelCloseEnd(false), onClose: this.onClose, onCloseAndRestart: this.onCloseAndRestart, onSendBotInput: (text) => this.onSendInput(text, MessageSendSource.HOME_SCREEN_INPUT), onSendButtonInput: this.onSendHomeButtonInput, onRestart: this.onRestart, showHomeScreen: showHomeScreen, isHydrationAnimationComplete: isHydrationAnimationComplete, homeScreenInputRef: this.homeScreenInputRef, onToggleHomeScreen: this.onToggleHomeScreen, requestFocus: this.requestFocus })));\n    }\n    /**\n     * Renders a panel containing an iframe to load the provided source. Only render the iframe panel if there's a source\n     * to load. The reason being that the panel will receive an empty source and after 10 seconds will announce that the\n     * source is not available.\n     */\n    renderIFramePanel() {\n        const { serviceManager, iFramePanelState } = this.props;\n        return (React.createElement(OverlayPanel, { className: \"WAC__overlay--covering\", onOpenStart: () => this.onPanelOpenStart(true), onCloseStart: this.onPanelCloseStart, onOpenEnd: this.onPanelOpenEnd, onCloseEnd: () => this.onPanelCloseEnd(true), animationOnOpen: AnimationInType.SLIDE_IN_FROM_BOTTOM, animationOnClose: AnimationOutType.SLIDE_OUT_TO_BOTTOM, shouldOpen: iFramePanelState.isOpen, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.IFRAME },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(IFramePanel, { useAITheme: this.props.theme.useAITheme, ref: this.iframePanelRef, onClickClose: this.onClose, onClickRestart: this.onRestart, onClickCloseAndRestart: this.onCloseAndRestart }))));\n    }\n    renderViewSourcePanel() {\n        const { serviceManager, viewSourcePanelState } = this.props;\n        return (React.createElement(OverlayPanel, { className: \"WAC__overlay--covering\", onOpenStart: () => this.onPanelOpenStart(true), onCloseStart: this.onPanelCloseStart, onOpenEnd: this.onPanelOpenEnd, onCloseEnd: () => this.onPanelCloseEnd(true), animationOnOpen: AnimationInType.SLIDE_IN_FROM_BOTTOM, animationOnClose: AnimationOutType.SLIDE_OUT_TO_BOTTOM, shouldOpen: viewSourcePanelState.isOpen, serviceManager: serviceManager, overlayPanelName: OverlayPanelName.CONVERSATIONAL_SEARCH_CITATION },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(ViewSourcePanel, { ref: this.viewSourcePanelRef, onClickClose: this.onClose, onClickRestart: this.onRestart, onClickCloseAndRestart: this.onCloseAndRestart }))));\n    }\n    /**\n     * Renders a custom panel that can host Deb content.\n     */\n    renderCustomPanel() {\n        return (React.createElement(CustomPanelExport, { useAITheme: this.props.theme.useAITheme, onClose: this.onClose, onClickRestart: this.onRestart, onCloseAndRestart: this.onCloseAndRestart, onPanelOpenStart: () => this.onPanelOpenStart(true), onPanelOpenEnd: this.onPanelOpenEnd, onPanelCloseStart: this.onPanelCloseStart, onPanelCloseEnd: () => this.onPanelCloseEnd(true) }));\n    }\n    /**\n     * Renders a panel that is surfaced by an authored response type that supports opening a panel either through user\n     * interaction or automatically.\n     */\n    renderResponsePanel() {\n        if (!this.props.responsePanelState.localMessageItem) {\n            return null;\n        }\n        const { isOpen, localMessageItem, isMessageForInput } = this.props.responsePanelState;\n        const panelOptions = (localMessageItem?.item).panel;\n        const eventName = `\"Show panel\" opened`;\n        const eventDescription = \"Panel opened through panel response type\";\n        const overlayPanelName = OverlayPanelName.PANEL_RESPONSE;\n        return (React.createElement(Suspense, { fallback: null },\n            React.createElement(BodyAndFooterPanelComponent, { eventName: eventName, eventDescription: eventDescription, overlayPanelName: overlayPanelName, isOpen: isOpen, isMessageForInput: isMessageForInput, localMessageItem: localMessageItem, title: panelOptions?.title, showAnimations: panelOptions?.show_animations, useAITheme: this.props.theme.useAITheme, requestFocus: this.requestFocus, onClose: this.onClose, onClickRestart: this.onRestart, onCloseAndRestart: this.onCloseAndRestart, onClickBack: () => this.props.serviceManager.store.dispatch(actions.setResponsePanelIsOpen(false)), onPanelOpenStart: () => this.onPanelOpenStart(true), onPanelOpenEnd: this.onPanelOpenEnd, onPanelCloseStart: this.onPanelCloseStart, onPanelCloseEnd: () => {\n                    this.onPanelCloseEnd(true);\n                    this.props.serviceManager.store.dispatch(actions.setResponsePanelContent(null, false));\n                } })));\n    }\n    renderWidget() {\n        const { serviceManager, useCustomHostElement, locale, catastrophicErrorType, config, isHydrated, theme, chatWidthBreakpoint, layout, languagePack, } = this.props;\n        const { closing, open, extraClassNames } = this.state;\n        const localeClassName = `WACLocale-${locale || \"en\"}`;\n        const showGlass = config.public.enableFocusTrap &&\n            open &&\n            !config.public.hideCloseButton &&\n            !config.public.headerConfig.hideMinimizeButton;\n        const trapActive = Boolean(showGlass && isHydrated);\n        const isWideWidth = chatWidthBreakpoint === ChatWidthBreakpoint.WIDE;\n        // The empty div below is required because FocusTrap will attach a ref to it overwriting our ref which we have\n        // on the next div below that.\n        /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n        return (React.createElement(FocusTrap, { active: trapActive },\n            React.createElement(\"div\", { className: cx(\"WACMainWindow\", \"WACWidget__FocusTrapContainer\", ...extraClassNames), ref: this.mainWindowRef },\n                showGlass && React.createElement(\"div\", { className: \"WACWidget__FocusTrapGlass\" }),\n                React.createElement(\"div\", { id: `WACWidget${serviceManager.namespace.suffix}`, className: cx(`WACWidget ${localeClassName}`, {\n                        \"WACWidget--rounded\": theme.corners === CornersType.ROUND,\n                        \"WACWidget--defaultElement\": !useCustomHostElement,\n                        \"WACWidget--launched\": !closing,\n                        \"WACWidget--closing\": closing,\n                        \"WACWidget--closed\": !open,\n                        \"WACWidget--maxWidth\": isWideWidth && layout.hasContentMaxWidth,\n                        [WIDTH_BREAKPOINT_NARROW]: chatWidthBreakpoint === ChatWidthBreakpoint.NARROW,\n                        [WIDTH_BREAKPOINT_STANDARD]: chatWidthBreakpoint === ChatWidthBreakpoint.STANDARD,\n                        [WIDTH_BREAKPOINT_WIDE]: isWideWidth,\n                    }), ref: this.containerRef },\n                    React.createElement(VisuallyHidden, null,\n                        React.createElement(\"h1\", null, languagePack.window_title)),\n                    catastrophicErrorType && this.renderCatastrophicPanel(),\n                    !catastrophicErrorType && (React.createElement(\"div\", { ref: this.animationContainerRef, className: \"WACWidget__animationContainer\", onScroll: () => {\n                            // When Carbon AI chat initially opens, it's possible for focusable elements inside a custom panel to\n                            // cause the element to scroll during the opening animations. The listener to reset any\n                            // scrolling that is happening.\n                            if (this.animationContainerRef.current.scrollTop !== 0) {\n                                this.animationContainerRef.current.scrollTop = 0;\n                            }\n                        } }, this.renderChat())),\n                    React.createElement(\"div\", { className: \"WACMainWindowModalHost\", ref: this.setModalPortalHostElement })))));\n    }\n    render() {\n        return (React.createElement(ModalPortalRootContext.Provider, { value: this.state.modalPortalHostElement }, this.renderWidget()));\n    }\n}\nvar MainWindow$1 = connect((state) => state, null, null, {\n    forwardRef: true,\n})(MainWindow);\n\nexport { MainWindow$1 as default };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Returns a function that can be used to modify a state object to add a class name.\n */\nfunction addClassNameToState(name) {\n    return (previousState) => {\n        const currentIndex = previousState.extraClassNames.indexOf(name);\n        if (currentIndex === -1) {\n            return {\n                extraClassNames: [...previousState.extraClassNames, name],\n            };\n        }\n        return null;\n    };\n}\n/**\n * Returns a function that can be used to modify a state object to remove a class name.\n */\nfunction removeClassNameFromState(name) {\n    return (previousState) => {\n        return {\n            extraClassNames: previousState.extraClassNames.filter((value) => value !== name),\n        };\n    };\n}\n\nexport { addClassNameToState, removeClassNameFromState };\n","import 'intl-pluralrules';\nimport cx from 'classnames';\nimport React, { useState, useMemo, useRef, Suspense } from 'react';\nimport { RawIntlProvider, useIntl } from 'react-intl';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { AriaAnnouncerProvider } from '../components/aria/AriaAnnouncerProvider.js';\nimport { LauncherContainer } from '../components/launcher/LauncherContainer.js';\nimport { LanguagePackContext } from '../contexts/LanguagePackContext.js';\nimport { WindowSizeContext } from '../contexts/WindowSizeContext.js';\nimport { ServiceManagerContext } from '../contexts/ServiceManagerContext.js';\nimport { useOnMount } from '../hooks/useOnMount.js';\nimport actions from '../store/actions.js';\nimport { IS_PHONE_IN_PORTRAIT_MODE, IS_PHONE } from '../utils/browserUtils.js';\nimport { consoleDebug, consoleError } from '../utils/miscUtils.js';\nimport { convertCSSVariablesToString, getThemeClassNames } from '../utils/styleUtils.js';\nimport MainWindow from './main/MainWindow.js';\nimport { lazyTourComponent } from '../../dynamic-imports/dynamic-imports.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst TourContainerLazy = lazyTourComponent();\nfunction App({ serviceManager, hostElement, applicationStyles, fontStyles, }) {\n    const { store } = serviceManager;\n    const { config } = store.getState();\n    if (config.public.debug) {\n        consoleDebug(\"[render] Called render\");\n    }\n    const combinedStyles = `${fontStyles ? `${fontStyles} ` : \"\"}${applicationStyles}`;\n    return (React.createElement(Provider, { store: store },\n        React.createElement(AppContainer, { serviceManager: serviceManager, hostElement: hostElement, applicationStyles: combinedStyles })));\n}\nfunction AppContainer({ serviceManager, hostElement, applicationStyles, }) {\n    const languagePack = useSelector((state) => state.languagePack);\n    const cssVariableOverrides = useSelector((state) => state.cssVariableOverrides);\n    const theme = useSelector((state) => state.theme);\n    const config = useSelector((state) => state.config);\n    const layout = useSelector((state) => state.layout);\n    const { namespace } = serviceManager;\n    const { originalName } = namespace;\n    const dispatch = useDispatch();\n    const [windowSize, setWindowSize] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n    });\n    const cssVariableOverrideString = useMemo(() => {\n        return convertCSSVariablesToString(cssVariableOverrides);\n    }, [cssVariableOverrides]);\n    // If direction is \"rtl\" then the Carbon AI chat will render with the right-to-left styles.\n    // If direction is anything else, the Carbon AI chat uses left-to-right styles by default.\n    // If document.dir cannot be determined, using auto will inherit directionality from the page.\n    const dir = document.dir || \"auto\";\n    useOnMount(() => {\n        // Add the listener for updating the window size.\n        const windowListener = () => {\n            setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n        };\n        window.addEventListener(\"resize\", windowListener);\n        // Add the listener for detecting page visibilities changes.\n        const visibilityListener = () => {\n            dispatch(actions.setIsBrowserPageVisible(document.visibilityState === \"visible\"));\n        };\n        document.addEventListener(\"visibilitychange\", visibilityListener);\n        return () => {\n            window.removeEventListener(\"resize\", windowListener);\n            document.removeEventListener(\"visibilitychange\", visibilityListener);\n        };\n    });\n    return (React.createElement(\"div\", { className: \"WACContainer\", \"data-namespace\": originalName, ref: (node) => {\n            if (node && hostElement) {\n                // React doesn't let us set \"!important\" in a style value inline.\n                node.style.setProperty(\"height\", \"100%\", \"important\");\n                node.style.setProperty(\"width\", \"100%\", \"important\");\n            }\n        } },\n        React.createElement(\"div\", { className: \"WACContainer--styles\" },\n            React.createElement(\"style\", { \"data-base-styles\": \"true\", nonce: config.public.cspNonce }, applicationStyles || `.WACContainer { visibility: hidden; }`),\n            React.createElement(\"style\", { \"data-variables-custom\": \"true\", nonce: config.public.cspNonce }, cssVariableOverrideString)),\n        React.createElement(\"div\", { className: cx(`WACContainer--render`, getThemeClassNames(theme), {\n                \"WACContainer-disableMobileEnhancements\": hostElement && config.public.disableCustomElementMobileEnhancements,\n                \"WAC-isPhone\": IS_PHONE && !config.public.disableCustomElementMobileEnhancements,\n                \"WAC-isPhonePortraitMode\": IS_PHONE_IN_PORTRAIT_MODE &&\n                    !config.public.disableCustomElementMobileEnhancements,\n                \"WAC--frameless\": !layout?.showFrame,\n            }), dir: dir },\n            React.createElement(WindowSizeContext.Provider, { value: windowSize },\n                React.createElement(ServiceManagerContext.Provider, { value: serviceManager },\n                    React.createElement(RawIntlProvider, { value: serviceManager.intl },\n                        React.createElement(LanguagePackContext.Provider, { value: languagePack },\n                            React.createElement(AriaAnnouncerProvider, null,\n                                React.createElement(MainContainer, { serviceManager: serviceManager, hostElement: hostElement })))))))));\n}\nfunction MainContainer(props) {\n    const { hostElement, serviceManager } = props;\n    // We always render the launcher (unless state.launcher.config.is_on is set to false), but we hide it with CSS\n    // if the tour or main Carbon AI chat window are open.\n    const showLauncher = useSelector((state) => state.launcher.config.is_on);\n    const { viewState } = useSelector((state) => state.persistedToBrowserStorage.launcherState);\n    const tourContainerRef = useRef();\n    const mainWindowRef = useRef();\n    const showTour = viewState.tour;\n    // This indicates if the tour has been opened at least once. The tour isn't rendered until it's been opened the first\n    // time. Rendering of the tour is delayed to prevent the tour buttons being clicked by pen testing tools. After the\n    // tour has been opened once it's simply shown and hidden using CSS, instead of unmounting it. CSS is used to show\n    // and hide the tour so that the scroll position and video playback positions can be preserved within steps when\n    // the tour is hidden.\n    const showedTourOnce = useRef(showTour);\n    showedTourOnce.current = showTour || showedTourOnce.current;\n    const intl = useIntl();\n    const namespace = serviceManager.namespace.originalName;\n    const languageKey = namespace\n        ? \"window_ariaChatRegionNamespace\"\n        : \"window_ariaChatRegion\";\n    const regionLabel = intl.formatMessage({ id: languageKey }, { namespace });\n    useOnMount(() => {\n        /**\n         * Puts focus on the default element for the currently open window in the application.\n         */\n        function requestFocus() {\n            try {\n                const { persistedToBrowserStorage } = serviceManager.store.getState();\n                const { viewState } = persistedToBrowserStorage.launcherState;\n                if (viewState.tour) {\n                    // If there is a tour visible prioritize focusing on that over the main window.\n                    tourContainerRef.current?.requestFocus();\n                }\n                else if (viewState.mainWindow) {\n                    // If there is no tour visible then focus on the main window.\n                    mainWindowRef.current?.requestFocus();\n                }\n            }\n            catch (error) {\n                consoleError(\"An error occurred in App.requestFocus\", error);\n            }\n        }\n        serviceManager.appWindow = { requestFocus };\n    });\n    // Always render the main window and let it control whether it should be visible with css. Only render the tour\n    // once it's been opened once.\n    return (React.createElement(\"div\", { className: \"WACWidget__regionContainer\", role: \"region\", \"aria-label\": regionLabel },\n        React.createElement(MainWindow, { mainWindowRef: mainWindowRef, useCustomHostElement: Boolean(hostElement), serviceManager: serviceManager }),\n        showedTourOnce.current && (React.createElement(Suspense, { fallback: null },\n            React.createElement(TourContainerLazy, { ref: tourContainerRef }))),\n        showLauncher && React.createElement(LauncherContainer, null)));\n}\n\nexport { App as default };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a utility component that is used to manage all the user defined responses that are rendered by Carbon AI chat.\n * When a user defined response message is received by Carbon AI chat, it will fire a \"userDefinedResponse\" event that\n * provides an HTML element to which your application can attach user defined content. React portals are a mechanism\n * that allows you to render a component in your React application but attach that component to the HTML element\n * that was provided by Carbon AI chat.\n *\n * This component will render a portal for each user defined response. The contents of that portal will be\n * determined by calling the provided \"renderResponse\" render prop.\n */\nfunction UserDefinedResponsePortalsContainer({ chatInstance, renderUserDefinedResponse, userDefinedResponseEventsBySlot, }) {\n    // All we need to do to enable the React portals is to render each portal somewhere in your application (it\n    // doesn't really matter where).\n    return renderUserDefinedResponse\n        ? Object.entries(userDefinedResponseEventsBySlot).map(([slot, slotState]) => {\n            const { element } = slotState;\n            if (!element) {\n                return null;\n            }\n            return (React.createElement(UserDefinedResponseComponentPortal, { key: slot, hostElement: element }, renderUserDefinedResponse(slotState, chatInstance)));\n        })\n        : null;\n}\n/**\n * This is the component that will attach a React portal to the given host element. The host element is the element\n * provided by Carbon AI chat where your user defined response will be displayed in the DOM. This portal will attach any React\n * children passed to it under this component so you can render the response using your own React application. Those\n * children will be rendered under the given element where it lives in the DOM.\n */\nfunction UserDefinedResponseComponentPortal({ hostElement, children, }) {\n    return ReactDOM.createPortal(children, hostElement);\n}\nconst UserDefinedResponsePortalsContainerExport = React.memo(UserDefinedResponsePortalsContainer);\n\nexport { UserDefinedResponsePortalsContainerExport as UserDefinedResponsePortalsContainer };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a utility component that is used to manage all the writeable elements that are rendered by Carbon AI chat.\n * React portals are a mechanism that allows you to render a component in your React application but attach that\n * component to the HTML element that was provided by Carbon AI chat.\n *\n * This component will render a portal for each user defined response. The contents of that portal will be\n * determined by calling the provided \"renderResponse\" render prop.\n */\nfunction WriteableElementsPortalsContainer({ chatInstance, renderResponseMap, }) {\n    // All we need to do to enable the React portals is to render each portal somewhere in your application (it\n    // doesn't really matter where).\n    return (React.createElement(React.Fragment, null, Object.keys(chatInstance.writeableElements).map((key) => {\n        const responseItem = renderResponseMap[key];\n        return responseItem ? (React.createElement(WriteableElementsComponentPortal, { key: key, hostElement: chatInstance.writeableElements[key] }, responseItem)) : null;\n    })));\n}\n/**\n * This is the component that will attach a React portal to the given host element. The host element is the element\n * provided by Carbon AI chat where your user defined response will be displayed in the DOM. This portal will attach any React\n * children passed to it under this component so you can render the response using your own React application. Those\n * children will be rendered under the given element where it lives in the DOM.\n */\nfunction WriteableElementsComponentPortal({ hostElement, children, }) {\n    return ReactDOM.createPortal(children, hostElement);\n}\nconst WriteableElementsPortalsContainerExport = React.memo(WriteableElementsPortalsContainer);\n\nexport { WriteableElementsPortalsContainerExport as WriteableElementsPortalsContainer };\n","import isEqual from 'lodash-es/isEqual.js';\nimport React, { useState, useRef, useEffect } from 'react';\nimport Chat from '../../shared/Chat.js';\nimport { instantiateWidget } from '../../shared/chatEntryFunctions.js';\nimport App from '../../shared/containers/App.js';\nimport { sleep } from '../../shared/utils/lang/promiseUtils.js';\nimport { UserDefinedResponsePortalsContainer as UserDefinedResponsePortalsContainerExport } from './UserDefinedResponsePortalsContainer.js';\nimport { WriteableElementsPortalsContainer as WriteableElementsPortalsContainerExport } from './WriteableElementsPortalsContainer.js';\nimport { BusEventType } from '../../../types/events/eventBusTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component actually loads the Chat class and renders the Chat.\n *\n * It handles writing Portals for user_defined response types as well and teardown and build activities.\n */\nfunction AppContainer({ config, onBeforeRender, onAfterRender, renderUserDefinedResponse, renderWriteableElements, container, setParentInstance, element, }) {\n    // A state value that contains the current instance of Carbon AI chat.\n    const [instance, setInstance] = useState(null);\n    const [renderProps, setRenderProps] = useState(null);\n    const [applicationStyles, setApplicationStyles] = useState(null);\n    /**\n     * In the ChatContainer React application, we need to know if instance has been nulled out because the chat\n     * was destroyed to be able to re-create the container element that was destroyed.\n     */\n    const setInstances = (instance) => {\n        setInstance(instance);\n        setParentInstance?.(instance);\n    };\n    // This state will be used to record all the user defined response events that are fired from the widget. These\n    // events contain the HTML elements that we will attach our portals to as well as the messages that we wish to\n    // render in the message.\n    const [userDefinedResponseEventsBySlot, setUserDefinedResponseEventsBySlot] = useState({});\n    // The most recent Carbon AI chat that was load by this component.\n    const managedWebChatRef = useRef(null);\n    // The previous Carbon AI chat config.\n    const previousConfigRef = useRef(null);\n    useEffect(() => {\n        const previousConfig = previousConfigRef.current;\n        previousConfigRef.current = config;\n        async function render({ serviceManager }) {\n            // For the npm package, we currently assume Carbon fonts are loaded on the page already.\n            // This might have to change if we allow white labeling some day.\n            const applicationStyles = await loadStyles();\n            serviceManager.container = container;\n            if (serviceManager.customHostElement) {\n                // Set container to grow to size of provided element. We don't do this sooner because \"body\" might be set to\n                // display: flex;\n                container.style.setProperty(\"width\", \"100%\", \"important\");\n                container.style.setProperty(\"height\", \"100%\", \"important\");\n            }\n            else {\n                // We want to make sure it doesn't interfere with the body by covering anything up so we'll set it to a 0 size.\n                // The child elements use position: fixed along with a size that break out of the container.\n                container.style.setProperty(\"width\", \"0\", \"important\");\n                container.style.setProperty(\"height\", \"0\", \"important\");\n            }\n            // Make sure that the renderProps are set before we resolve the render function to make sure the component is\n            // actually rendered on time.\n            setApplicationStyles(applicationStyles);\n            setRenderProps({\n                serviceManager,\n            });\n            await sleep(0);\n        }\n        // isEqual performs a deep check, but for elements only checks the reference.\n        if (!isEqual(previousConfig, config)) {\n            // We'll use this managed object to keep track of the Carbon AI chat instance we are creating for this effect.\n            const managedWebChat = {\n                instance: null,\n                shouldDestroy: false,\n                config,\n            };\n            if (config) {\n                loadChat({\n                    managedWebChatRef,\n                    managedWebChat,\n                    render,\n                    setInstance: setInstances,\n                    onBeforeRender,\n                    onAfterRender,\n                    setUserDefinedResponseEventsBySlot,\n                    element,\n                });\n            }\n            return () => {\n                destroyWebChat(managedWebChat, setInstances);\n                previousConfigRef.current = null;\n            };\n        }\n        return undefined;\n        // We purposely exclude onBeforeRender and onAfterRender here to prevent unneeded tear downs.\n        // We will only actually re-render if the config changes, so those two functions changing doesn't bother us.\n        // If there is a new config, we will pick up the new onBeforeRender and onAfterRender anyway.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [config, container]);\n    if (renderProps && instance) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(App, { serviceManager: renderProps.serviceManager, hostElement: renderProps.serviceManager.customHostElement, applicationStyles: applicationStyles }),\n            renderUserDefinedResponse && (React.createElement(UserDefinedResponsePortalsContainerExport, { chatInstance: instance, renderUserDefinedResponse: renderUserDefinedResponse, userDefinedResponseEventsBySlot: userDefinedResponseEventsBySlot })),\n            renderWriteableElements && (React.createElement(WriteableElementsPortalsContainerExport, { chatInstance: instance, renderResponseMap: renderWriteableElements }))));\n    }\n    return null;\n}\n/**\n * Destroys an instance of Carbon AI chat and marks it destroyed.\n */\nasync function destroyWebChat(managedWebChat, setInstance) {\n    if (managedWebChat) {\n        if (managedWebChat.instance) {\n            managedWebChat.instance.destroy();\n            await sleep(0);\n        }\n        managedWebChat.shouldDestroy = true;\n        managedWebChat.instance = null;\n    }\n    // Some cloak and daggers because setInstance isn't an async function and we want to make sure that in the case of\n    // the React Chat Container that the clearing of the instance has been registered and a new container element\n    // created to be used.\n    setInstance(null);\n    await sleep(0);\n}\n/**\n * Adds a \"userDefinedResponse\" event listener to the given Carbon AI chat instance that will use the given set function\n * to add new events to the list.\n */\nfunction addUserDefinedResponseHandler(webChatInstance, setUserDefinedResponseEventsBySlot) {\n    console.log({ webChatInstance });\n    /**\n     * This handler will fire each time a user defined response occurs and we will update our state by appending the\n     * event to the end of our events list. We have to make sure to create a new array in order to trigger a re-render.\n     */\n    function userDefinedResponseHandler(event) {\n        setUserDefinedResponseEventsBySlot((userDefinedEventsBySlot) => {\n            return {\n                ...userDefinedEventsBySlot,\n                [event.data.slot]: {\n                    fullMessage: event.data.fullMessage,\n                    messageItem: event.data.message,\n                    element: event.data.element,\n                },\n            };\n        });\n    }\n    /**\n     * This handler will fire each time a user defined response occurs and we will update our state by appending the event to the end of our events list.\n     * We have to make sure to create a new array in order to trigger a re-render.\n     * We use a map here to make sure there is only one event per slot name (taking the latest).\n     */\n    function userDefinedChunkHandler(event) {\n        if (\"complete_item\" in event.data.chunk) {\n            const messageItem = event.data.chunk.complete_item;\n            setUserDefinedResponseEventsBySlot((userDefinedEventsBySlot) => {\n                return {\n                    ...userDefinedEventsBySlot,\n                    [event.data.slot]: {\n                        messageItem,\n                        element: event.data.element,\n                        // We blow away partial items here so we don't have to track them forever for no reason.\n                    },\n                };\n            });\n        }\n        else if (\"partial_item\" in event.data.chunk) {\n            const itemChunk = event.data.chunk.partial_item;\n            setUserDefinedResponseEventsBySlot((userDefinedEventsBySlot) => {\n                return {\n                    ...userDefinedEventsBySlot,\n                    [event.data.slot]: {\n                        partialItems: [\n                            ...(userDefinedEventsBySlot[event.data.slot]?.partialItems || []),\n                            itemChunk,\n                        ],\n                        element: event.data.element,\n                    },\n                };\n            });\n        }\n    }\n    // Also make sure to clear the list if a restart occurs.\n    function restartHandler() {\n        setUserDefinedResponseEventsBySlot({});\n    }\n    webChatInstance.on({\n        type: BusEventType.CHUNK_USER_DEFINED_RESPONSE,\n        handler: userDefinedChunkHandler,\n    });\n    webChatInstance.on({\n        type: BusEventType.USER_DEFINED_RESPONSE,\n        handler: userDefinedResponseHandler,\n    });\n    webChatInstance.on({\n        type: BusEventType.RESTART_CONVERSATION,\n        handler: restartHandler,\n    });\n}\nasync function loadChat({ managedWebChatRef, managedWebChat, render, setInstance, onBeforeRender, onAfterRender, setUserDefinedResponseEventsBySlot, element, }) {\n    // Each time the Carbon AI chat config settings change (or this component is mounted), we need to destroy any previous\n    // Carbon AI chat and create a new Carbon AI chat.\n    // First look at the old ref and destroy it if its supposed to be destroyed.\n    await destroyWebChat(managedWebChatRef.current, setInstance);\n    // Update the ref to the new managedWebChat.\n    managedWebChatRef.current = managedWebChat;\n    // Just double check that the new one also isn't supposed to be destroyed.\n    if (managedWebChat.shouldDestroy) {\n        await destroyWebChat(managedWebChat, setInstance);\n        return;\n    }\n    // Create Carbon AI chat here.\n    const widget = await instantiateWidget(managedWebChat.config, () => Promise.resolve(Chat), Promise.resolve(render), element);\n    const instance = await widget.start();\n    addUserDefinedResponseHandler(instance, setUserDefinedResponseEventsBySlot);\n    onBeforeRender?.(instance);\n    await instance.render();\n    onAfterRender?.(instance);\n    setInstance(instance);\n    managedWebChat.instance = instance;\n    if (managedWebChat.shouldDestroy) {\n        await destroyWebChat(managedWebChat, setInstance);\n    }\n}\nconst AppContainerExport = React.memo(AppContainer);\nconst loadBaseStyles = async () => {\n    const { default: styles } = await import('../../shared/styles/export.scss.js');\n    return styles;\n};\nconst loadCarbon = async () => {\n    const { default: carbon } = await import('../../shared/styles/export.carbon.scss.js');\n    return carbon;\n};\nasync function loadStyles() {\n    const [styles, carbonStyles] = await Promise.all([\n        loadBaseStyles(),\n        loadCarbon(),\n    ]);\n    return carbonStyles + styles;\n}\n\nexport { AppContainerExport as AppContainer };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The different type of error states a given message can be in.\n *\n * @category Messaging\n */\nvar MessageErrorState;\n(function (MessageErrorState) {\n    /**\n     * No errors.\n     */\n    MessageErrorState[MessageErrorState[\"NONE\"] = 1] = \"NONE\";\n    /**\n     * The message failed to be sent and no more attempts will be made.\n     */\n    MessageErrorState[MessageErrorState[\"FAILED\"] = 2] = \"FAILED\";\n    /**\n     * There was an error sending the message but the system is retrying the message.\n     */\n    MessageErrorState[MessageErrorState[\"RETRYING\"] = 3] = \"RETRYING\";\n    /**\n     * Indicates that the previous message has entered the retrying state and that this message is waiting for it to\n     * finish or fail. This message will remain in the waiting state until it finishes successfully or it enters a\n     * retrying state itself.\n     */\n    MessageErrorState[MessageErrorState[\"WAITING\"] = 4] = \"WAITING\";\n})(MessageErrorState || (MessageErrorState = {}));\n\nexport { MessageErrorState };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The set of possible animations for OverlayPanel animation into view.\n */\nvar AnimationInType;\n(function (AnimationInType) {\n    /**\n     * The panel does not animate.\n     */\n    AnimationInType[\"NONE\"] = \"none\";\n    /**\n     * The panel fades in from 0 opacity.\n     */\n    AnimationInType[\"FADE_IN\"] = \"fadeIn\";\n    /**\n     * The panel slides in from the left over previous content.\n     */\n    AnimationInType[\"SLIDE_IN_FROM_LEFT\"] = \"slideInFromLeft\";\n    /**\n     * The panel slides in from the right over previous content.\n     */\n    AnimationInType[\"SLIDE_IN_FROM_RIGHT\"] = \"slideInFromRight\";\n    /**\n     * The panel slides in from the bottom over the previous context.\n     */\n    AnimationInType[\"SLIDE_IN_FROM_BOTTOM\"] = \"slideInFromBottom\";\n    /**\n     * The panel slides in from the bottom over the previous context fast for branding.\n     */\n    AnimationInType[\"BRANDING_SLIDE_IN_FROM_BOTTOM\"] = \"brandingSlideInFromBottom\";\n    /**\n     * The custom animation for the home screen.\n     */\n    // HOME_SCREEN = 'homeScreen',\n})(AnimationInType || (AnimationInType = {}));\n/**\n * The set of possible animations for OverlayPanel animation out of view.\n */\nvar AnimationOutType;\n(function (AnimationOutType) {\n    /**\n     * The panel does not animate.\n     */\n    AnimationOutType[\"NONE\"] = \"none\";\n    /**\n     * The panel fades to 0 opacity.\n     */\n    AnimationOutType[\"FADE_OUT\"] = \"fadeOut\";\n    /**\n     * The panel slides out to left.\n     */\n    AnimationOutType[\"SLIDE_OUT_TO_LEFT\"] = \"slideOutToLeft\";\n    /**\n     * The panel slides out to right.\n     */\n    AnimationOutType[\"SLIDE_OUT_TO_RIGHT\"] = \"slideOutToRight\";\n    /**\n     * The panel slides out to top.\n     */\n    AnimationOutType[\"SLIDE_OUT_TO_TOP\"] = \"slideOutToTop\";\n    /**\n     * The panel slides out to bottom.\n     */\n    AnimationOutType[\"SLIDE_OUT_TO_BOTTOM\"] = \"slideOutToBottom\";\n    /**\n     * The custom animation for the home screen.\n     */\n    // HOME_SCREEN = 'homeScreen',\n})(AnimationOutType || (AnimationOutType = {}));\n\nexport { AnimationInType, AnimationOutType };\n","import cx from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { AnimationInType, AnimationOutType } from '../../../types/utilities/Animation.js';\nimport { conditionalSetTimeout } from '../utils/browserUtils.js';\nimport { HideComponent } from './util/HideComponent.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A generic panel that can fade in, fade out, slide in, slide out, etc. with children inside it.\n */\n/**\n * The possible overlay panels.\n */\nvar OverlayPanelName;\n(function (OverlayPanelName) {\n    OverlayPanelName[\"DISCLAIMER\"] = \"disclaimer\";\n    OverlayPanelName[\"HOME_SCREEN\"] = \"home_screen\";\n    OverlayPanelName[\"AGENT\"] = \"agent\";\n    OverlayPanelName[\"HYDRATING\"] = \"hydrating\";\n    OverlayPanelName[\"CATASTROPHIC\"] = \"catastrophic\";\n    OverlayPanelName[\"BRANDING\"] = \"branding\";\n    OverlayPanelName[\"IFRAME\"] = \"iframe\";\n    OverlayPanelName[\"CONVERSATIONAL_SEARCH_CITATION\"] = \"conversational_search_citation\";\n    OverlayPanelName[\"CUSTOM\"] = \"custom\";\n    OverlayPanelName[\"SHOW_PANEL\"] = \"show_panel\";\n    OverlayPanelName[\"PANEL_RESPONSE\"] = \"panel_response\";\n})(OverlayPanelName || (OverlayPanelName = {}));\nconst ANIMATION_DURATION_IN_MS = 240;\nclass OverlayPanel extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isClosing: false,\n            isOpening: false,\n        };\n        this.openPanelTimeout = null;\n        this.closePanelTimeout = null;\n        this.openPanel = () => {\n            const { onOpenEnd, onOpenStart, animationOnOpen, animationDurationOpen } = this.props;\n            onOpenStart?.();\n            this.setState({\n                isClosing: false,\n                isOpening: true,\n            });\n            // Use a conditional setTimeout to avoid unnecessary flickering if there is no animation.\n            const durationInMS = animationOnOpen === AnimationInType.NONE\n                ? 0\n                : animationDurationOpen || ANIMATION_DURATION_IN_MS;\n            this.openPanelTimeout = conditionalSetTimeout(() => {\n                this.setState({\n                    isClosing: false,\n                    isOpening: false,\n                });\n                onOpenEnd?.();\n            }, durationInMS);\n        };\n        this.closePanel = () => {\n            const { onCloseEnd, onCloseStart, animationOnClose, animationDurationClose, } = this.props;\n            onCloseStart?.();\n            this.setState({\n                isClosing: true,\n                isOpening: false,\n            });\n            // Use a conditional setTimeout to avoid unnecessary flickering if there is no animation.\n            const durationInMS = animationOnClose === AnimationOutType.NONE\n                ? 0\n                : animationDurationClose || ANIMATION_DURATION_IN_MS;\n            this.closePanelTimeout = conditionalSetTimeout(() => {\n                this.setState({\n                    isClosing: false,\n                    isOpening: false,\n                });\n                onCloseEnd?.();\n            }, durationInMS);\n        };\n    }\n    componentDidMount() {\n        const { shouldOpen } = this.props;\n        // If the panel is open by default, we should open it.\n        if (shouldOpen) {\n            this.openPanel();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { shouldOpen } = this.props;\n        // If the value of shouldOpen changes we kick off the animations to open/close the panel.\n        if (shouldOpen !== prevProps.shouldOpen) {\n            if (shouldOpen) {\n                this.openPanel();\n            }\n            else {\n                this.closePanel();\n            }\n        }\n    }\n    componentWillUnmount() {\n        if (this.openPanelTimeout) {\n            clearTimeout(this.openPanelTimeout);\n        }\n        if (this.closePanelTimeout) {\n            clearTimeout(this.closePanelTimeout);\n        }\n        if (this.props.shouldOpen) {\n            if (this.props.onCloseStart) {\n                this.props.onCloseStart();\n            }\n            if (this.props.onCloseEnd) {\n                this.props.onCloseEnd();\n            }\n        }\n    }\n    render() {\n        const { children, className, shouldOpen, animationOnClose, animationOnOpen, overlayPanelName, } = this.props;\n        const { isClosing, isOpening } = this.state;\n        console.log({ isClosing, shouldOpen });\n        return (React.createElement(HideComponent, { hidden: !isClosing && !shouldOpen, className: cx(\"WAC__overlay-panelContainer\", `WAC__overlay--${overlayPanelName}`, className, {\n                \"WAC__overlay-panelContainer--animating\": isOpening || isClosing,\n            }) },\n            React.createElement(\"div\", { className: cx(\"WAC__overlay-panel\", `WAC__overlay-panel--${overlayPanelName}`, {\n                    [`WAC__overlay-panel--closing--${animationOnClose}`]: isClosing,\n                    \"WAC__overlay-panel--closed\": !isClosing && !shouldOpen,\n                    [`WAC__overlay-panel--opening--${animationOnOpen}`]: isOpening,\n                    \"WAC__overlay-panel--open\": !isOpening && shouldOpen,\n                }) }, children)));\n    }\n}\n\nexport { OverlayPanel, OverlayPanelName };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains the context used by the {@link HideComponent} which is used to indicate if the component is\n * hidden or not. The value in the context is a boolean that is true if the component is hidden.\n */\nconst HideComponentContext = React.createContext(false);\n\nexport { HideComponentContext };\n","var ai_slug_title = \"Powered by IBM watsonx\";\nvar ai_slug_description = \"IBM watsonx is powered by the latest AI models to intelligently process conversations and provide help whenever and wherever you may need it.\";\nvar components_overflow_ariaLabel = \"Open and close list of options\";\nvar components_swiper_currentLabel = \"{currentSlideNumber}/{totalSlideCount}\";\nvar errors_communicating = \"{botName} isn't available right now. Problems with a related system are preventing the data from being supplied.\";\nvar errors_imageSource = \"Image is not available.\";\nvar errors_videoSource = \"Video is not available.\";\nvar errors_audioSource = \"Audio is not available.\";\nvar errors_iframeSource = \"The web page is not available.\";\nvar errors_singleMessage = \"There is an error with the message you just sent, but feel free to ask me something else.\";\nvar errors_ariaMessageRetrying = \"We are having some trouble sending your message but are still trying\";\nvar errors_ariaMessageFailed = \"Your message failed to be sent\";\nvar errors_noAgentsAvailable = \"No agents are available.\";\nvar errors_noAgentsJoined = \"No agents accepted the chat\";\nvar errors_connectingToAgent = \"I'm sorry. Something went wrong and I cannot connect you to an agent right now.\";\nvar errors_busy = \"I'm sorry, but I can't help you right now. I'm answering questions from lots of people at the moment. Please try again later.\";\nvar errors_agentAppSessionExpired = \"I'm sorry, but access to the chat history has expired.\";\nvar errors_generalContent = \"There was an error displaying this content\";\nvar errors_somethingWrong = \"Something went wrong\";\nvar input_ariaLabel = \"Message to send\";\nvar input_placeholder = \"Type something...\";\nvar input_buttonLabel = \"Click to send message\";\nvar input_uploadButtonLabel = \"Add files to upload\";\nvar window_title = \"Chat window\";\nvar window_ariaTourRegion = \"Tour\";\nvar window_ariaTourRegionNamespace = \"Tour {namespace}\";\nvar window_ariaChatRegion = \"Chat\";\nvar window_ariaChatRegionNamespace = \"Chat {namespace}\";\nvar window_ariaWindowOpened = \"The chat window has been opened\";\nvar window_ariaWindowClosed = \"The chat window has been closed\";\nvar window_ariaWindowLoading = \"The chat is loading.\";\nvar launcher_isOpen = \"Close the chat window\";\nvar launcher_isClosed = \"Open the chat window\";\nvar launcher_isTourOpen = \"Close the tour window\";\nvar launcher_isTourClosed = \"Open the tour window\";\nvar launcher_desktopGreeting = \"Hi! I’m a virtual assistant. How can I help you today?\";\nvar launcher_mobileGreeting = \"Hi! How can I help you today?\";\nvar launcher_ariaIsExpanded = \"Close the chat launcher\";\nvar launcher_closeButton = \"Close\";\nvar messages_youSaid = \"You said\";\nvar messages_botSaid = \"{botName} said\";\nvar messages_agentSaid = \"The live agent said\";\nvar messages_searchResults = \"Search results\";\nvar messages_searchResultsLink = \"Open this search result in a new window\";\nvar messages_searchResultsOpenDocument = \"Open document\";\nvar messages_searchResultsOpenDocumentWithLabel = \"Open document \\\"{documentName}\\\"\";\nvar messages_searchResultsExpand = \"Expand\";\nvar messages_searchResultsCollapse = \"Collapse\";\nvar messages_botIsLoading = \"{botName} is loading\";\nvar messages_botIsTyping = \"{botName} is typing\";\nvar messages_agentIsTyping = \"The live agent is typing\";\nvar messages_scrollHandle = \"Chat history begin\";\nvar messages_scrollHandleDetailed = \"Chat history begin. Activate to focus the first message then use the arrow, home, and end keys to move between messages. Press escape to exit.\";\nvar messages_scrollHandleEnd = \"Chat history end\";\nvar messages_scrollHandleEndDetailed = \"Chat history end. Activate to focus the last message then use the arrow, home, and end keys to move between messages. Press escape to exit.\";\nvar message_labelBot = \"{actorName} {timestamp}\";\nvar message_labelYou = \"You {timestamp}\";\nvar notifications_toastClose = \"Close notification\";\nvar buttons_restart = \"Restart conversation\";\nvar buttons_cancel = \"Cancel\";\nvar buttons_retry = \"Retry\";\nvar options_select = \"Select an option\";\nvar options_ariaOptionsDisabled = \"These options are disabled and cannot be selected\";\nvar header_previewLinkTitle = \"Assistant preview\";\nvar header_ariaCloseRestart = \"End chat and close the window\";\nvar header_ariaBotAvatar = \"{botName} avatar image\";\nvar header_overflowMenu_options = \"Options\";\nvar homeScreen_returnToAssistant = \"Return to assistant\";\nvar homeScreen_returnToHome = \"Return to the home screen\";\nvar homeScreen_overflowMenuHomeScreen = \"Home screen\";\nvar homeScreen_ariaQuickStartListButton = \"Quick start menu\";\nvar homeScreen_ariaQuickStartListOpened = \"The quick start menu has been opened.\";\nvar homeScreen_ariaQuickStartListClosed = \"The quick start menu has been closed.\";\nvar default_agent_availableMessage = \"Request an agent, and I'll notify you when they're ready. Your wait time may vary based on availability.\";\nvar default_agent_unavailableMessage = \"Sorry, no agents are available right now.\";\nvar agent_reason_error = \"Hmmm... I'm experiencing some difficulties. I need a human agent to manually continue the chat.\";\nvar agent_sdMissingWarning = \"No service desk is configured. Unless you have a custom service desk implemented, users will see an error instead of the message below. See the <a href=\\\"https://cloud.ibm.com/docs/watson-assistant?topic=watson-assistant-deploy-web-chat-haa\\\" rel=\\\"noreferrer noopener\\\" target=\\\"_blank\\\">documentation</a> for more information.\";\nvar agent_noName = \"Live agent\";\nvar agent_chatTitle = \"Live agent support\";\nvar agent_startChat = \"Connect to agent\";\nvar agent_connecting = \"Request for agent sent...\";\nvar agent_agentNoNameTitle = \"Agent\";\nvar agent_agentJoinedName = \"{personName} connected.\";\nvar agent_agentJoinedNoName = \"A live agent connected.\";\nvar agent_youConnectedWarning = \"If you refresh or leave the current page, you'll have to request a new agent.\";\nvar agent_connectingMinutes = \"Current wait time is <b>{time, number} {time, plural, one {minute} other {minutes}}</b>.\";\nvar agent_connectingQueue = \"You're number <b>{position, number}</b> in line.\";\nvar agent_ariaAgentAvatar = \"Live agent avatar image\";\nvar agent_ariaGenericAvatar = \"Avatar image\";\nvar agent_ariaGenericBotAvatar = \"Avatar image\";\nvar agent_youEndedChat = \"You disconnected from the live agent.\";\nvar agent_conversationWasEnded = \"You disconnected from the live agent.\";\nvar agent_disconnected = \"Something went wrong and your connection to the live agent was lost. Check your internet connection and then try again to connect to an agent.\";\nvar agent_reconnected = \"The agent reconnected.\";\nvar agent_agentLeftChat = \"{personName} disconnected.\";\nvar agent_agentLeftChatNoName = \"The live agent disconnected.\";\nvar agent_agentEndedChat = \"{personName} ended the chat.\";\nvar agent_agentEndedChatNoName = \"The live agent ended the chat.\";\nvar agent_transferring = \"You're being transferred.\";\nvar agent_transferringNoName = \"You're being transferred.\";\nvar agent_endChat = \"Disconnect from live agent?\";\nvar agent_confirmSuspendedEndChatTitle = \"Disconnect from previous agent?\";\nvar agent_confirmSuspendedEndChatMessage = \"You are currently connected to an agent. Continuing will disconnect you from the agent and connect you to a new one. Do you want to continue?\";\nvar agent_confirmCancelRequestTitle = \"Cancel request?\";\nvar agent_confirmCancelRequestMessage = \"If you continue, you'll cancel your request for an agent.\";\nvar agent_confirmCancelRequestNo = \"Go back\";\nvar agent_confirmCancelRequestYes = \"Cancel request\";\nvar agent_confirmEndChat = \"If you disconnect, you'll have to request a new live agent.\";\nvar agent_confirmEndChatNo = \"Go back\";\nvar agent_confirmEndChatYes = \"Disconnect\";\nvar agent_confirmEndSuspendedYes = \"Continue\";\nvar agent_botReturned = \"Can I help you with anything else?\";\nvar agent_newMessage = \"New message\";\nvar agent_cardButtonChatRequested = \"Connecting...\";\nvar agent_cardButtonConnected = \"Connected\";\nvar agent_cardButtonChatEnded = \"Disconnected\";\nvar agent_cardMessageChatEnded = \"You disconnected from the live agent.\";\nvar agent_cardMessageConnected = \"You're now connected.\";\nvar agent_connectButtonCancel = \"Cancel\";\nvar agent_connectedButtonEndChat = \"Disconnect\";\nvar agent_connectWaiting = \"Waiting...\";\nvar agent_defaultMessageToAgent = \"Begin conversation\";\nvar agent_inputPlaceholderConnecting = \"Waiting for agent...\";\nvar agent_inputPlaceholderReconnecting = \"Reconnecting to agent...\";\nvar agent_sharingStopSharingButton = \"Stop sharing screen\";\nvar agent_sharingRequestTitle = \"Screen sharing\";\nvar agent_sharingRequestMessage = \"The agent has requested you share your screen. You can stop sharing at any time.\";\nvar agent_sharingAcceptButton = \"Share screen\";\nvar agent_sharingDeclineButton = \"Decline\";\nvar agent_sharingRequested = \"You were requested to share your screen.\";\nvar agent_sharingAccepted = \"You shared your screen.\";\nvar agent_sharingDeclined = \"You declined to share your screen.\";\nvar agent_sharingCancelled = \"The screen sharing request was cancelled.\";\nvar agent_sharingEnded = \"You stopped sharing your screen.\";\nvar agent_suspendedWarning = \"You are currently connected to an agent.\";\nvar icon_ariaUnreadMessages = \"There {count, plural, one {is} other {are}} {count, number} unread {count, plural, one {message} other {messages}}\";\nvar showMore = \"See more\";\nvar showMoreResults = \"See more\";\nvar disclaimer_title = \"Disclaimer\";\nvar disclaimer_accept = \"I accept\";\nvar general_ariaCloseInformationOverlay = \"Close information panel.\";\nvar general_ariaAnnounceOpenedInformationOverlay = \"An information panel has been opened.\";\nvar general_ariaAnnounceClosedInformationOverlay = \"An information panel has been closed.\";\nvar general_ariaAnnounceEscapeOverlay = \"Press escape or click the close button to close.\";\nvar general_returnToAssistant = \"Return to assistant\";\nvar conversationalSearch_streamingIncomplete = \"This message was not completed. Please try again.\";\nvar conversationalSearch_viewSourceDocument = \"View source\";\nvar conversationalSearch_citationsLabel = \"Sources\";\nvar conversationalSearch_toggleCitations = \"Open or close the list of sources\";\nvar conversationalSearch_responseStopped = \"Response stopped\";\nvar launcher_chatNow = \"Chat now\";\nvar iframe_ariaSourceLoaded = \"The web page has loaded.\";\nvar iframe_ariaImageAltText = \"Preview image for the web page panel.\";\nvar iframe_ariaClosePanel = \"Close the web page panel.\";\nvar iframe_ariaOpenedPanel = \"Web page panel has opened.\";\nvar iframe_ariaClosedPanel = \"Web page panel has closed.\";\nvar iframe_ariaClickPreviewCard = \"Click to open the web page panel and visit {source}.\";\nvar closeAndRestartModal_title = \"End chat\";\nvar closeAndRestartModal_message = \"Are you sure you want to end your chat?\";\nvar closeAndRestartModal_confirm = \"Yes\";\nvar closeAndRestartModal_cancel = \"No\";\nvar datePicker_chooseDate = \"Choose a date ({format})\";\nvar datePicker_confirmDate = \"Confirm date\";\nvar tour_resumeButton = \"Resume\";\nvar tour_restartButton = \"Restart\";\nvar tour_startButton = \"Get started\";\nvar tour_doneButton = \"Done\";\nvar tour_ariaMinimizeButton = \"Hide tour window\";\nvar tour_ariaCloseButton = \"Close tour window\";\nvar tour_ariaChatButton = \"Open the chat window\";\nvar tour_ariaPreviousButton = \"Go to previous step\";\nvar tour_ariaNextButton = \"Go to next step\";\nvar tour_instructions = \"Use the previous and next buttons to navigate between steps of the tour. Use the {chatButtonText} button to open that chat window.\";\nvar tour_errorFetchingStep = \"There was a problem fetching the next step.\";\nvar tour_errorTitle = \"Unable to continue\";\nvar tour_errorBody = \"The content failed to load. Please try again.\";\nvar fileSharing_fileTooLarge = \"The maximum file size allowed is {maxSize}.\";\nvar fileSharing_ariaAnnounceSuccess = \"The file was uploaded successfully.\";\nvar fileSharing_fileIcon = \"File icon\";\nvar fileSharing_removeButtonTitle = \"Remove file\";\nvar fileSharing_statusUploading = \"Uploading file\";\nvar fileSharing_uploadFailed = \"There was an error uploading the file.\";\nvar fileSharing_agentMessageText = \"File upload\";\nvar fileSharing_request = \"The agent has requested you upload a file.\";\nvar carousel_prevNavButton = \"Go to previous slide.\";\nvar carousel_nextNavButton = \"Go to next slide.\";\nvar input_completionsTagApp = \"App\";\nvar input_completionsTagAssistant = \"Assistant\";\nvar table_filterPlaceholder = \"Filter table\";\nvar table_previousPage = \"Previous page\";\nvar table_nextPage = \"Next page\";\nvar table_itemsPerPage = \"Items per page:\";\nvar table_paginationSupplementalText = \"of {pagesCount, number} {pagesCount, plural, one {page} other {pages}}\";\nvar table_paginationStatus = \"{start, number}–{end, number} of {count, number} {count, plural, one {item} other {items}}\";\nvar feedback_positiveLabel = \"Good response\";\nvar feedback_negativeLabel = \"Bad response\";\nvar feedback_defaultTitle = \"Additional feedback\";\nvar feedback_defaultPrompt = \"Why did you choose this rating?\";\nvar feedback_defaultPlaceholder = \"Add a comment\";\nvar feedback_submitLabel = \"Submit\";\nvar feedback_cancelLabel = \"Cancel\";\nvar input_stopResponse = \"Stop response\";\nvar messages_responseStopped = \"Response stopped\";\nvar chainOfThought_stepTitle = \"{stepNumber, number}: {stepTitle}\";\nvar chainOfThought_inputLabel = \"Input\";\nvar chainOfThought_outputLabel = \"Output\";\nvar chainOfThought_toolLabel = \"Tool\";\nvar chainOfThought_statusSucceededLabel = \"Succeeded\";\nvar chainOfThought_statusFailedLabel = \"Failed\";\nvar chainOfThought_statusProcessingLabel = \"Processing\";\nvar chainOfThought_explainabilityLabel = \"How did I get this answer?\";\nvar enLanguagePack = {\n\tai_slug_title: ai_slug_title,\n\tai_slug_description: ai_slug_description,\n\tcomponents_overflow_ariaLabel: components_overflow_ariaLabel,\n\tcomponents_swiper_currentLabel: components_swiper_currentLabel,\n\terrors_communicating: errors_communicating,\n\terrors_imageSource: errors_imageSource,\n\terrors_videoSource: errors_videoSource,\n\terrors_audioSource: errors_audioSource,\n\terrors_iframeSource: errors_iframeSource,\n\terrors_singleMessage: errors_singleMessage,\n\terrors_ariaMessageRetrying: errors_ariaMessageRetrying,\n\terrors_ariaMessageFailed: errors_ariaMessageFailed,\n\terrors_noAgentsAvailable: errors_noAgentsAvailable,\n\terrors_noAgentsJoined: errors_noAgentsJoined,\n\terrors_connectingToAgent: errors_connectingToAgent,\n\terrors_busy: errors_busy,\n\terrors_agentAppSessionExpired: errors_agentAppSessionExpired,\n\terrors_generalContent: errors_generalContent,\n\terrors_somethingWrong: errors_somethingWrong,\n\tinput_ariaLabel: input_ariaLabel,\n\tinput_placeholder: input_placeholder,\n\tinput_buttonLabel: input_buttonLabel,\n\tinput_uploadButtonLabel: input_uploadButtonLabel,\n\twindow_title: window_title,\n\twindow_ariaTourRegion: window_ariaTourRegion,\n\twindow_ariaTourRegionNamespace: window_ariaTourRegionNamespace,\n\twindow_ariaChatRegion: window_ariaChatRegion,\n\twindow_ariaChatRegionNamespace: window_ariaChatRegionNamespace,\n\twindow_ariaWindowOpened: window_ariaWindowOpened,\n\twindow_ariaWindowClosed: window_ariaWindowClosed,\n\twindow_ariaWindowLoading: window_ariaWindowLoading,\n\tlauncher_isOpen: launcher_isOpen,\n\tlauncher_isClosed: launcher_isClosed,\n\tlauncher_isTourOpen: launcher_isTourOpen,\n\tlauncher_isTourClosed: launcher_isTourClosed,\n\tlauncher_desktopGreeting: launcher_desktopGreeting,\n\tlauncher_mobileGreeting: launcher_mobileGreeting,\n\tlauncher_ariaIsExpanded: launcher_ariaIsExpanded,\n\tlauncher_closeButton: launcher_closeButton,\n\tmessages_youSaid: messages_youSaid,\n\tmessages_botSaid: messages_botSaid,\n\tmessages_agentSaid: messages_agentSaid,\n\tmessages_searchResults: messages_searchResults,\n\tmessages_searchResultsLink: messages_searchResultsLink,\n\tmessages_searchResultsOpenDocument: messages_searchResultsOpenDocument,\n\tmessages_searchResultsOpenDocumentWithLabel: messages_searchResultsOpenDocumentWithLabel,\n\tmessages_searchResultsExpand: messages_searchResultsExpand,\n\tmessages_searchResultsCollapse: messages_searchResultsCollapse,\n\tmessages_botIsLoading: messages_botIsLoading,\n\tmessages_botIsTyping: messages_botIsTyping,\n\tmessages_agentIsTyping: messages_agentIsTyping,\n\tmessages_scrollHandle: messages_scrollHandle,\n\tmessages_scrollHandleDetailed: messages_scrollHandleDetailed,\n\tmessages_scrollHandleEnd: messages_scrollHandleEnd,\n\tmessages_scrollHandleEndDetailed: messages_scrollHandleEndDetailed,\n\tmessage_labelBot: message_labelBot,\n\tmessage_labelYou: message_labelYou,\n\tnotifications_toastClose: notifications_toastClose,\n\tbuttons_restart: buttons_restart,\n\tbuttons_cancel: buttons_cancel,\n\tbuttons_retry: buttons_retry,\n\toptions_select: options_select,\n\toptions_ariaOptionsDisabled: options_ariaOptionsDisabled,\n\theader_previewLinkTitle: header_previewLinkTitle,\n\theader_ariaCloseRestart: header_ariaCloseRestart,\n\theader_ariaBotAvatar: header_ariaBotAvatar,\n\theader_overflowMenu_options: header_overflowMenu_options,\n\thomeScreen_returnToAssistant: homeScreen_returnToAssistant,\n\thomeScreen_returnToHome: homeScreen_returnToHome,\n\thomeScreen_overflowMenuHomeScreen: homeScreen_overflowMenuHomeScreen,\n\thomeScreen_ariaQuickStartListButton: homeScreen_ariaQuickStartListButton,\n\thomeScreen_ariaQuickStartListOpened: homeScreen_ariaQuickStartListOpened,\n\thomeScreen_ariaQuickStartListClosed: homeScreen_ariaQuickStartListClosed,\n\tdefault_agent_availableMessage: default_agent_availableMessage,\n\tdefault_agent_unavailableMessage: default_agent_unavailableMessage,\n\tagent_reason_error: agent_reason_error,\n\tagent_sdMissingWarning: agent_sdMissingWarning,\n\tagent_noName: agent_noName,\n\tagent_chatTitle: agent_chatTitle,\n\tagent_startChat: agent_startChat,\n\tagent_connecting: agent_connecting,\n\tagent_agentNoNameTitle: agent_agentNoNameTitle,\n\tagent_agentJoinedName: agent_agentJoinedName,\n\tagent_agentJoinedNoName: agent_agentJoinedNoName,\n\tagent_youConnectedWarning: agent_youConnectedWarning,\n\tagent_connectingMinutes: agent_connectingMinutes,\n\tagent_connectingQueue: agent_connectingQueue,\n\tagent_ariaAgentAvatar: agent_ariaAgentAvatar,\n\tagent_ariaGenericAvatar: agent_ariaGenericAvatar,\n\tagent_ariaGenericBotAvatar: agent_ariaGenericBotAvatar,\n\tagent_youEndedChat: agent_youEndedChat,\n\tagent_conversationWasEnded: agent_conversationWasEnded,\n\tagent_disconnected: agent_disconnected,\n\tagent_reconnected: agent_reconnected,\n\tagent_agentLeftChat: agent_agentLeftChat,\n\tagent_agentLeftChatNoName: agent_agentLeftChatNoName,\n\tagent_agentEndedChat: agent_agentEndedChat,\n\tagent_agentEndedChatNoName: agent_agentEndedChatNoName,\n\tagent_transferring: agent_transferring,\n\tagent_transferringNoName: agent_transferringNoName,\n\tagent_endChat: agent_endChat,\n\tagent_confirmSuspendedEndChatTitle: agent_confirmSuspendedEndChatTitle,\n\tagent_confirmSuspendedEndChatMessage: agent_confirmSuspendedEndChatMessage,\n\tagent_confirmCancelRequestTitle: agent_confirmCancelRequestTitle,\n\tagent_confirmCancelRequestMessage: agent_confirmCancelRequestMessage,\n\tagent_confirmCancelRequestNo: agent_confirmCancelRequestNo,\n\tagent_confirmCancelRequestYes: agent_confirmCancelRequestYes,\n\tagent_confirmEndChat: agent_confirmEndChat,\n\tagent_confirmEndChatNo: agent_confirmEndChatNo,\n\tagent_confirmEndChatYes: agent_confirmEndChatYes,\n\tagent_confirmEndSuspendedYes: agent_confirmEndSuspendedYes,\n\tagent_botReturned: agent_botReturned,\n\tagent_newMessage: agent_newMessage,\n\tagent_cardButtonChatRequested: agent_cardButtonChatRequested,\n\tagent_cardButtonConnected: agent_cardButtonConnected,\n\tagent_cardButtonChatEnded: agent_cardButtonChatEnded,\n\tagent_cardMessageChatEnded: agent_cardMessageChatEnded,\n\tagent_cardMessageConnected: agent_cardMessageConnected,\n\tagent_connectButtonCancel: agent_connectButtonCancel,\n\tagent_connectedButtonEndChat: agent_connectedButtonEndChat,\n\tagent_connectWaiting: agent_connectWaiting,\n\tagent_defaultMessageToAgent: agent_defaultMessageToAgent,\n\tagent_inputPlaceholderConnecting: agent_inputPlaceholderConnecting,\n\tagent_inputPlaceholderReconnecting: agent_inputPlaceholderReconnecting,\n\tagent_sharingStopSharingButton: agent_sharingStopSharingButton,\n\tagent_sharingRequestTitle: agent_sharingRequestTitle,\n\tagent_sharingRequestMessage: agent_sharingRequestMessage,\n\tagent_sharingAcceptButton: agent_sharingAcceptButton,\n\tagent_sharingDeclineButton: agent_sharingDeclineButton,\n\tagent_sharingRequested: agent_sharingRequested,\n\tagent_sharingAccepted: agent_sharingAccepted,\n\tagent_sharingDeclined: agent_sharingDeclined,\n\tagent_sharingCancelled: agent_sharingCancelled,\n\tagent_sharingEnded: agent_sharingEnded,\n\tagent_suspendedWarning: agent_suspendedWarning,\n\ticon_ariaUnreadMessages: icon_ariaUnreadMessages,\n\tshowMore: showMore,\n\tshowMoreResults: showMoreResults,\n\tdisclaimer_title: disclaimer_title,\n\tdisclaimer_accept: disclaimer_accept,\n\tgeneral_ariaCloseInformationOverlay: general_ariaCloseInformationOverlay,\n\tgeneral_ariaAnnounceOpenedInformationOverlay: general_ariaAnnounceOpenedInformationOverlay,\n\tgeneral_ariaAnnounceClosedInformationOverlay: general_ariaAnnounceClosedInformationOverlay,\n\tgeneral_ariaAnnounceEscapeOverlay: general_ariaAnnounceEscapeOverlay,\n\tgeneral_returnToAssistant: general_returnToAssistant,\n\tconversationalSearch_streamingIncomplete: conversationalSearch_streamingIncomplete,\n\tconversationalSearch_viewSourceDocument: conversationalSearch_viewSourceDocument,\n\tconversationalSearch_citationsLabel: conversationalSearch_citationsLabel,\n\tconversationalSearch_toggleCitations: conversationalSearch_toggleCitations,\n\tconversationalSearch_responseStopped: conversationalSearch_responseStopped,\n\tlauncher_chatNow: launcher_chatNow,\n\tiframe_ariaSourceLoaded: iframe_ariaSourceLoaded,\n\tiframe_ariaImageAltText: iframe_ariaImageAltText,\n\tiframe_ariaClosePanel: iframe_ariaClosePanel,\n\tiframe_ariaOpenedPanel: iframe_ariaOpenedPanel,\n\tiframe_ariaClosedPanel: iframe_ariaClosedPanel,\n\tiframe_ariaClickPreviewCard: iframe_ariaClickPreviewCard,\n\tcloseAndRestartModal_title: closeAndRestartModal_title,\n\tcloseAndRestartModal_message: closeAndRestartModal_message,\n\tcloseAndRestartModal_confirm: closeAndRestartModal_confirm,\n\tcloseAndRestartModal_cancel: closeAndRestartModal_cancel,\n\tdatePicker_chooseDate: datePicker_chooseDate,\n\tdatePicker_confirmDate: datePicker_confirmDate,\n\ttour_resumeButton: tour_resumeButton,\n\ttour_restartButton: tour_restartButton,\n\ttour_startButton: tour_startButton,\n\ttour_doneButton: tour_doneButton,\n\ttour_ariaMinimizeButton: tour_ariaMinimizeButton,\n\ttour_ariaCloseButton: tour_ariaCloseButton,\n\ttour_ariaChatButton: tour_ariaChatButton,\n\ttour_ariaPreviousButton: tour_ariaPreviousButton,\n\ttour_ariaNextButton: tour_ariaNextButton,\n\ttour_instructions: tour_instructions,\n\ttour_errorFetchingStep: tour_errorFetchingStep,\n\ttour_errorTitle: tour_errorTitle,\n\ttour_errorBody: tour_errorBody,\n\tfileSharing_fileTooLarge: fileSharing_fileTooLarge,\n\tfileSharing_ariaAnnounceSuccess: fileSharing_ariaAnnounceSuccess,\n\tfileSharing_fileIcon: fileSharing_fileIcon,\n\tfileSharing_removeButtonTitle: fileSharing_removeButtonTitle,\n\tfileSharing_statusUploading: fileSharing_statusUploading,\n\tfileSharing_uploadFailed: fileSharing_uploadFailed,\n\tfileSharing_agentMessageText: fileSharing_agentMessageText,\n\tfileSharing_request: fileSharing_request,\n\tcarousel_prevNavButton: carousel_prevNavButton,\n\tcarousel_nextNavButton: carousel_nextNavButton,\n\tinput_completionsTagApp: input_completionsTagApp,\n\tinput_completionsTagAssistant: input_completionsTagAssistant,\n\ttable_filterPlaceholder: table_filterPlaceholder,\n\ttable_previousPage: table_previousPage,\n\ttable_nextPage: table_nextPage,\n\ttable_itemsPerPage: table_itemsPerPage,\n\ttable_paginationSupplementalText: table_paginationSupplementalText,\n\ttable_paginationStatus: table_paginationStatus,\n\tfeedback_positiveLabel: feedback_positiveLabel,\n\tfeedback_negativeLabel: feedback_negativeLabel,\n\tfeedback_defaultTitle: feedback_defaultTitle,\n\tfeedback_defaultPrompt: feedback_defaultPrompt,\n\tfeedback_defaultPlaceholder: feedback_defaultPlaceholder,\n\tfeedback_submitLabel: feedback_submitLabel,\n\tfeedback_cancelLabel: feedback_cancelLabel,\n\tinput_stopResponse: input_stopResponse,\n\tmessages_responseStopped: messages_responseStopped,\n\tchainOfThought_stepTitle: chainOfThought_stepTitle,\n\tchainOfThought_inputLabel: chainOfThought_inputLabel,\n\tchainOfThought_outputLabel: chainOfThought_outputLabel,\n\tchainOfThought_toolLabel: chainOfThought_toolLabel,\n\tchainOfThought_statusSucceededLabel: chainOfThought_statusSucceededLabel,\n\tchainOfThought_statusFailedLabel: chainOfThought_statusFailedLabel,\n\tchainOfThought_statusProcessingLabel: chainOfThought_statusProcessingLabel,\n\tchainOfThought_explainabilityLabel: chainOfThought_explainabilityLabel\n};\n\nexport { agent_agentEndedChat, agent_agentEndedChatNoName, agent_agentJoinedName, agent_agentJoinedNoName, agent_agentLeftChat, agent_agentLeftChatNoName, agent_agentNoNameTitle, agent_ariaAgentAvatar, agent_ariaGenericAvatar, agent_ariaGenericBotAvatar, agent_botReturned, agent_cardButtonChatEnded, agent_cardButtonChatRequested, agent_cardButtonConnected, agent_cardMessageChatEnded, agent_cardMessageConnected, agent_chatTitle, agent_confirmCancelRequestMessage, agent_confirmCancelRequestNo, agent_confirmCancelRequestTitle, agent_confirmCancelRequestYes, agent_confirmEndChat, agent_confirmEndChatNo, agent_confirmEndChatYes, agent_confirmEndSuspendedYes, agent_confirmSuspendedEndChatMessage, agent_confirmSuspendedEndChatTitle, agent_connectButtonCancel, agent_connectWaiting, agent_connectedButtonEndChat, agent_connecting, agent_connectingMinutes, agent_connectingQueue, agent_conversationWasEnded, agent_defaultMessageToAgent, agent_disconnected, agent_endChat, agent_inputPlaceholderConnecting, agent_inputPlaceholderReconnecting, agent_newMessage, agent_noName, agent_reason_error, agent_reconnected, agent_sdMissingWarning, agent_sharingAcceptButton, agent_sharingAccepted, agent_sharingCancelled, agent_sharingDeclineButton, agent_sharingDeclined, agent_sharingEnded, agent_sharingRequestMessage, agent_sharingRequestTitle, agent_sharingRequested, agent_sharingStopSharingButton, agent_startChat, agent_suspendedWarning, agent_transferring, agent_transferringNoName, agent_youConnectedWarning, agent_youEndedChat, ai_slug_description, ai_slug_title, buttons_cancel, buttons_restart, buttons_retry, carousel_nextNavButton, carousel_prevNavButton, chainOfThought_explainabilityLabel, chainOfThought_inputLabel, chainOfThought_outputLabel, chainOfThought_statusFailedLabel, chainOfThought_statusProcessingLabel, chainOfThought_statusSucceededLabel, chainOfThought_stepTitle, chainOfThought_toolLabel, closeAndRestartModal_cancel, closeAndRestartModal_confirm, closeAndRestartModal_message, closeAndRestartModal_title, components_overflow_ariaLabel, components_swiper_currentLabel, conversationalSearch_citationsLabel, conversationalSearch_responseStopped, conversationalSearch_streamingIncomplete, conversationalSearch_toggleCitations, conversationalSearch_viewSourceDocument, datePicker_chooseDate, datePicker_confirmDate, enLanguagePack as default, default_agent_availableMessage, default_agent_unavailableMessage, disclaimer_accept, disclaimer_title, errors_agentAppSessionExpired, errors_ariaMessageFailed, errors_ariaMessageRetrying, errors_audioSource, errors_busy, errors_communicating, errors_connectingToAgent, errors_generalContent, errors_iframeSource, errors_imageSource, errors_noAgentsAvailable, errors_noAgentsJoined, errors_singleMessage, errors_somethingWrong, errors_videoSource, feedback_cancelLabel, feedback_defaultPlaceholder, feedback_defaultPrompt, feedback_defaultTitle, feedback_negativeLabel, feedback_positiveLabel, feedback_submitLabel, fileSharing_agentMessageText, fileSharing_ariaAnnounceSuccess, fileSharing_fileIcon, fileSharing_fileTooLarge, fileSharing_removeButtonTitle, fileSharing_request, fileSharing_statusUploading, fileSharing_uploadFailed, general_ariaAnnounceClosedInformationOverlay, general_ariaAnnounceEscapeOverlay, general_ariaAnnounceOpenedInformationOverlay, general_ariaCloseInformationOverlay, general_returnToAssistant, header_ariaBotAvatar, header_ariaCloseRestart, header_overflowMenu_options, header_previewLinkTitle, homeScreen_ariaQuickStartListButton, homeScreen_ariaQuickStartListClosed, homeScreen_ariaQuickStartListOpened, homeScreen_overflowMenuHomeScreen, homeScreen_returnToAssistant, homeScreen_returnToHome, icon_ariaUnreadMessages, iframe_ariaClickPreviewCard, iframe_ariaClosePanel, iframe_ariaClosedPanel, iframe_ariaImageAltText, iframe_ariaOpenedPanel, iframe_ariaSourceLoaded, input_ariaLabel, input_buttonLabel, input_completionsTagApp, input_completionsTagAssistant, input_placeholder, input_stopResponse, input_uploadButtonLabel, launcher_ariaIsExpanded, launcher_chatNow, launcher_closeButton, launcher_desktopGreeting, launcher_isClosed, launcher_isOpen, launcher_isTourClosed, launcher_isTourOpen, launcher_mobileGreeting, message_labelBot, message_labelYou, messages_agentIsTyping, messages_agentSaid, messages_botIsLoading, messages_botIsTyping, messages_botSaid, messages_responseStopped, messages_scrollHandle, messages_scrollHandleDetailed, messages_scrollHandleEnd, messages_scrollHandleEndDetailed, messages_searchResults, messages_searchResultsCollapse, messages_searchResultsExpand, messages_searchResultsLink, messages_searchResultsOpenDocument, messages_searchResultsOpenDocumentWithLabel, messages_youSaid, notifications_toastClose, options_ariaOptionsDisabled, options_select, showMore, showMoreResults, table_filterPlaceholder, table_itemsPerPage, table_nextPage, table_paginationStatus, table_paginationSupplementalText, table_previousPage, tour_ariaChatButton, tour_ariaCloseButton, tour_ariaMinimizeButton, tour_ariaNextButton, tour_ariaPreviousButton, tour_doneButton, tour_errorBody, tour_errorFetchingStep, tour_errorTitle, tour_instructions, tour_restartButton, tour_resumeButton, tour_startButton, window_ariaChatRegion, window_ariaChatRegionNamespace, window_ariaTourRegion, window_ariaTourRegionNamespace, window_ariaWindowClosed, window_ariaWindowLoading, window_ariaWindowOpened, window_title };\n","import { PureComponent } from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component will only mount its children after a certain amount of time has passed.\n */\nclass MountChildrenOnDelay extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            showChildren: false,\n        };\n    }\n    componentDidMount() {\n        // Once the component is mounted, start the countdown.\n        this.onComponentDidMount = setTimeout(() => {\n            this.setState({ showChildren: true });\n        }, this.props.delay);\n    }\n    // If we unmount before the delay runs out, we can get browser errors if we don't clear.\n    componentWillUnmount() {\n        clearTimeout(this.onComponentDidMount);\n        this.onComponentDidMount = undefined;\n    }\n    render() {\n        if (!this.state.showChildren) {\n            return false;\n        }\n        return this.props.children;\n    }\n}\nMountChildrenOnDelay.defaultProps = { delay: 500 };\n\nexport { MountChildrenOnDelay };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This function will return a new promise that keeps a reference to its own resolve and reject functions so that they\n * can be called on demand by the code using the promise.\n */\nfunction resolvablePromise() {\n    let resolveFunction;\n    let rejectFunction;\n    const promise = new Promise((resolve, reject) => {\n        resolveFunction = resolve;\n        rejectFunction = reject;\n    });\n    promise.doResolve = (resolveValue) => {\n        promise.isResolved = true;\n        promise.isComplete = true;\n        resolveFunction(resolveValue);\n    };\n    promise.doReject = (rejectValue) => {\n        promise.isRejected = true;\n        promise.isComplete = true;\n        rejectFunction(rejectValue);\n    };\n    promise.isResolved = false;\n    promise.isRejected = false;\n    promise.isComplete = false;\n    return promise;\n}\n\nexport { resolvablePromise };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * In this file we manage our dynamic imports for the entry of Carbon AI chat. See https://webpack.js.org/guides/code-splitting/#dynamic-imports.\n */\nasync function loadHAA() {\n    const { createService } = await import('../shared/services/haa/HumanAgentServiceImpl.js');\n    return createService;\n}\n/**\n * Wrap React.lazy to give you a `.preload()` method\n * that returns the same promise React.lazy will use.\n */\nfunction lazyWithPreload(factory) {\n    // Create the lazy component…\n    const Component = React.lazy(factory);\n    // …then attach the preload method\n    Component.preload = factory;\n    return Component;\n}\nfunction lazyChat() {\n    return lazyWithPreload(() => import('../shared/components/Chat.js'));\n}\nfunction lazyCatastrophicError() {\n    return lazyWithPreload(() => import('../shared/components/CatastrophicError.js').then((mod) => ({\n        default: mod.CatastrophicError,\n    })));\n}\nfunction lazyDisclaimer() {\n    return lazyWithPreload(() => import('../shared/components/Disclaimer.js').then((mod) => ({\n        default: mod.Disclaimer,\n    })));\n}\nfunction lazyHomeScreenContainer() {\n    return lazyWithPreload(() => import('../shared/components/homeScreen/HomeScreenContainer.js').then((mod) => ({\n        default: mod.HomeScreenContainer,\n    })));\n}\nfunction lazyIFramePanel() {\n    return lazyWithPreload(() => import('../shared/components/responseTypes/iframe/IFramePanel.js').then((mod) => ({\n        default: mod.IFramePanel,\n    })));\n}\nfunction lazyViewSourcePanel() {\n    return lazyWithPreload(() => import('../shared/components/responseTypes/util/citations/ViewSourcePanel.js').then((mod) => ({\n        default: mod.ViewSourcePanel,\n    })));\n}\nfunction lazyBodyAndFooterPanelComponent() {\n    return lazyWithPreload(() => import('../shared/components/panels/BodyAndFooterPanelComponent.js').then((mod) => ({\n        default: mod.BodyAndFooterPanelComponent,\n    })));\n}\nfunction lazyTourComponent() {\n    return React.lazy(() => import('../shared/components/tour/TourContainer.js'));\n}\nfunction lazyMediaPlayer() {\n    return React.lazy(() => import('../shared/components/responseTypes/util/ReactPlayer.js'));\n}\nfunction lazyCarousel() {\n    return React.lazy(() => import('../shared/components/responseTypes/carousel/Carousel.js'));\n}\n\nexport { lazyBodyAndFooterPanelComponent, lazyCarousel, lazyCatastrophicError, lazyChat, lazyDisclaimer, lazyHomeScreenContainer, lazyIFramePanel, lazyMediaPlayer, lazyTourComponent, lazyViewSourcePanel, loadHAA };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a very simple component which simply renders an element that is visually hidden in the UI. This means\n * that the item is present in the DOM and is visible to screen readers but it is not visible to sighted users.\n */\nconst VisuallyHidden = React.forwardRef((props, ref) => {\n    return (React.createElement(\"div\", { ref: ref, ...props, className: `WACVisuallyHidden ${props.className || \"\"}` }, props.children));\n});\nVisuallyHidden.displayName = \"VisuallyHidden\";\n\nexport { VisuallyHidden as default };\n","import { detect } from 'detect-browser';\nimport memoizeOne from 'memoize-one';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Miscellaneous utilities for dealing with the browser.\n */\nconst browser = detect();\n// The user agent string in version 13 of the operating system no longer distinguishes between macOS and iPads so\n// need add an extra check that may not be reliable in the future.\nconst IS_IPAD = /iPad/.test(window.navigator.platform) ||\n    (window.navigator.platform === \"MacIntel\" &&\n        window.navigator.maxTouchPoints > 1);\nconst IS_IOS = browser?.os === \"iOS\";\nconst IS_ANDROID = browser?.os === \"Android OS\";\nconst IS_MOBILE = IS_IOS || IS_ANDROID || IS_IPAD;\n// The width and height checks here are how we differentiate between mobile android devices and tablets. Eventually new\n// phones may get wide enough that the width check needs to be increased.\nconst IS_PHONE = IS_MOBILE && (window.screen.width < 500 || window.screen.height < 500);\n// Assume the phone is in portrait mode if the width is small.\nconst IS_PHONE_IN_PORTRAIT_MODE = IS_PHONE && window.screen.width < 500;\n// For reference here is a list of screen dimensions observed for some of the iPhone devices in browser stack.\n//\n// 414x896 XS Max\n// 414x896 XR\n//\n// 375x812 XS\n// 375x812 X\n//\n// 414x736 8 Plus\n// 414x736 6S Plus\n// 414x736 6 Plus\n//\n// 375x667 8\n// 375x667 7\n// 375x667 6s\n// 375x667 6\n//\n// 320x568 SE\n// This array maps from a screen height on iOS device to a height offset to apply to the widget for devices of that\n// height.\nconst IOS_HEIGHT_MAP = [\n    [896, 114],\n    [812, 114],\n    [736, 75],\n    [667, 75],\n];\n/**\n * This function is responsible for returning a height offset to apply to older iOS devices. On these devices the\n * navigation bars at the top and bottom of the screen consume a portion of the 100vh viewport height which causes\n * the text field to be cut off at the bottom. By applying this offset we make it visible. Unfortunately this offset\n * is different on different devices so we make a guess based on the screen height. Another drawback is that this\n * offset causes a gap to appear below the text field when the navigation bars are hiding.\n */\nfunction getIPhoneHeightOffset() {\n    // eslint-disable-next-line no-restricted-globals\n    const screenHeight = Math.max(screen.height, screen.width);\n    for (let index = 0; index < IOS_HEIGHT_MAP.length; index++) {\n        const [height, offset] = IOS_HEIGHT_MAP[index];\n        if (screenHeight >= height) {\n            return offset;\n        }\n    }\n    return 75;\n}\n/**\n * In some conditions (iFrames) window.sessionStorage is DEFINED, but not accessible.\n * Rather than doing window.sessionStorage || alternate checks, this actually checks if sessionStorage\n * can be used.\n *\n * @returns If window.sessionStorage is read and writeable.\n */\nfunction isSessionStorageAvailable() {\n    let isAvailable = false;\n    try {\n        window.sessionStorage.setItem(\"web-chat-test-item\", \"true\");\n        window.sessionStorage.getItem(\"web-chat-test-item\");\n        window.sessionStorage.removeItem(\"web-chat-test-item\");\n        isAvailable = true;\n    }\n    catch {\n        // Ignore.\n    }\n    return isAvailable;\n}\nconst IS_SESSION_STORAGE = memoizeOne(isSessionStorageAvailable);\n/**\n * Attempts to return the hostname of the provided URL. If an invalid url is returned, we just return the provided url\n * value.\n */\nfunction getURLHostName(url) {\n    try {\n        return new URL(url).hostname;\n    }\n    catch {\n        return url;\n    }\n}\n/**\n * Executes the given operation in a setTimeout if the timeout value is specified. If not, then the operation is\n * executed immediately without using a setTimeout.\n */\nfunction conditionalSetTimeout(operation, timeout) {\n    if (timeout) {\n        return setTimeout(operation, timeout);\n    }\n    // Execute the operation immediately.\n    operation();\n    return null;\n}\n\nexport { IS_IOS, IS_MOBILE, IS_PHONE, IS_PHONE_IN_PORTRAIT_MODE, IS_SESSION_STORAGE, conditionalSetTimeout, getIPhoneHeightOffset, getURLHostName };\n","import { useRef, useEffect } from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * A custom react hook to be able to set and access previous prop/state values:\n * see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nexport { usePrevious };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The types of elements that can be added to the chat header element.\n *\n * @category Config\n */\nvar ChatHeaderObjectType;\n(function (ChatHeaderObjectType) {\n    ChatHeaderObjectType[\"LINK\"] = \"link\";\n    ChatHeaderObjectType[\"MENU\"] = \"menu\";\n    ChatHeaderObjectType[\"BUTTON\"] = \"button\";\n    ChatHeaderObjectType[\"RADIO_GROUP\"] = \"radio-group\";\n})(ChatHeaderObjectType || (ChatHeaderObjectType = {}));\n\nexport { ChatHeaderObjectType };\n","import { __decorate } from 'tslib';\nimport { bind } from 'bind-decorator';\nimport { LitElement, unsafeCSS, css } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport css_248z from './chatHeaderAvatarElement.scss.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nclass ChatHeaderAvatarElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.isLoaded = false;\n    }\n    /**\n     * Called when the onError callback function is fired.\n     */\n    _handleOnError() {\n        this.onError?.();\n    }\n}\nChatHeaderAvatarElement.styles = css `\n    ${unsafeCSS(css_248z)}\n  `;\n__decorate([\n    property({ type: String })\n], ChatHeaderAvatarElement.prototype, \"url\", void 0);\n__decorate([\n    property({ type: String })\n], ChatHeaderAvatarElement.prototype, \"corners\", void 0);\n__decorate([\n    property({ type: String })\n], ChatHeaderAvatarElement.prototype, \"alt\", void 0);\n__decorate([\n    property({ type: Object })\n], ChatHeaderAvatarElement.prototype, \"onError\", void 0);\n__decorate([\n    state()\n], ChatHeaderAvatarElement.prototype, \"isLoaded\", void 0);\n__decorate([\n    bind\n], ChatHeaderAvatarElement.prototype, \"_handleOnError\", null);\n\nexport { ChatHeaderAvatarElement };\n","var css_248z = \".cds--aichat-chat-header-avatar{\\n  display:block;\\n  block-size:20px;\\n  max-block-size:20px;\\n}\\n\\n.cds--aichat-chat-header-avatar--round{\\n  border-radius:10px;\\n}\";\n\nexport { css_248z as default };\n","import { __decorate } from 'tslib';\nimport { carbonElement } from '../../../decorators/customElement.js';\nimport { chatHeaderAvatarTemplate } from './src/chatHeaderAvatar.template.js';\nimport { ChatHeaderAvatarElement } from './src/chatHeaderAvatarElement.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst CHAT_HEADER_AVATAR_TAG_NAME = \"cds-aichat-chat-header-avatar\";\n/**\n * Constructed class functionality for the chat header avatar.\n */\nlet CDSChatHeaderAvatarElement = class CDSChatHeaderAvatarElement extends ChatHeaderAvatarElement {\n    render() {\n        return chatHeaderAvatarTemplate(this);\n    }\n};\nCDSChatHeaderAvatarElement = __decorate([\n    carbonElement(CHAT_HEADER_AVATAR_TAG_NAME)\n], CDSChatHeaderAvatarElement);\n\nexport { CHAT_HEADER_AVATAR_TAG_NAME, CDSChatHeaderAvatarElement as default };\n","import '@carbon/web-components/es-custom/components/skeleton-icon/index.js';\nimport cx from 'classnames';\nimport { html } from 'lit';\nimport { CSS_CLASS_PREFIX } from '../../../../settings.js';\nimport { CornersType } from '../../../../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction chatHeaderAvatarTemplate(classElement) {\n    const { url, corners, alt, onError } = classElement;\n    return html `\n    <img\n      class=\"${cx(`${CSS_CLASS_PREFIX}-chat-header-avatar`, {\n        [`${CSS_CLASS_PREFIX}-chat-header-avatar--round`]: corners === CornersType.ROUND,\n    })}\"\n      src=\"${url}\"\n      alt=\"${alt}\"\n      @error=\"${onError}\"\n    />\n  `;\n}\n\nexport { chatHeaderAvatarTemplate };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport CDSChatHeaderAvatarElement, { CHAT_HEADER_AVATAR_TAG_NAME } from '../../../web-components/components/chatHeader/chatHeaderAvatar/cds-aichat-chat-header-avatar.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst ChatHeaderAvatar = createComponent({\n    tagName: CHAT_HEADER_AVATAR_TAG_NAME,\n    elementClass: CDSChatHeaderAvatarElement,\n    react: React,\n});\n\nexport { ChatHeaderAvatar };\n","import { __decorate } from 'tslib';\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { carbonElement } from '../../../decorators/customElement.js';\nimport { WEB_COMPONENT_PREFIX } from '../../../settings.js';\nimport { chatHeaderLinkTemplate } from './src/chatHeaderLinkElement.template.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nlet ChatHeaderLinkElement = class ChatHeaderLinkElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.isNewTab = true;\n    }\n    render() {\n        return chatHeaderLinkTemplate(this);\n    }\n};\n__decorate([\n    property({ type: String })\n], ChatHeaderLinkElement.prototype, \"url\", void 0);\n__decorate([\n    property({ type: String })\n], ChatHeaderLinkElement.prototype, \"label\", void 0);\n__decorate([\n    property({ type: Boolean })\n], ChatHeaderLinkElement.prototype, \"isNewTab\", void 0);\nChatHeaderLinkElement = __decorate([\n    carbonElement(`${WEB_COMPONENT_PREFIX}-chat-header-link`)\n], ChatHeaderLinkElement);\n\nexport { ChatHeaderLinkElement };\n","import '@carbon/web-components/es-custom/components/button/index.js';\nimport '@carbon/web-components/es-custom/components/overflow-menu/index.js';\nimport { html } from 'lit';\nimport { ButtonKindEnum } from '../../../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * ChatHeaderLinkElement view logic.\n */\nfunction chatHeaderLinkTemplate(customElementClass) {\n    const { label, url, isNewTab } = customElementClass;\n    return html `<cds-custom-button\n    class=\"WACChatHeaderLink\"\n    href=\"${url}\"\n    target=\"${isNewTab ? \"_blank\" : \"_self\"}\"\n    kind=\"${ButtonKindEnum.GHOST}\"\n    size=\"md\"\n    >${label}</cds-custom-button\n  >`;\n}\n\nexport { chatHeaderLinkTemplate };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport { ChatHeaderLinkElement } from '../../../web-components/components/chatHeader/chatHeaderLink/cds-aichat-chat-header-link.js';\nimport { WEB_COMPONENT_PREFIX } from '../../../web-components/settings.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst ChatHeaderLink = createComponent({\n    tagName: `${WEB_COMPONENT_PREFIX}-chat-header-link`,\n    elementClass: ChatHeaderLinkElement,\n    react: React,\n});\n\nexport { ChatHeaderLink };\n","import { Menu } from '@carbon/react';\nimport React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This renders a Carbon Menu component for the purposes of rendering in the chat header.\n */\nfunction ChatHeaderMenu({ id, className, label, isOpen, target, children, menuAlignment, containerRef, }) {\n    return (React.createElement(Menu, { id: id, className: className, open: isOpen, target: target, label: label, size: \"md\", menuAlignment: menuAlignment, mode: \"full\", legacyAutoalign: false, containerRef: containerRef }, children));\n}\n\nexport { ChatHeaderMenu };\n","import ChevronDown from '@carbon/icons-react/es/ChevronDown.js';\nimport ChevronUp from '@carbon/icons-react/es/ChevronUp.js';\nimport { Button } from '@carbon/react';\nimport { useFloating, useInteractions, useClick, useDismiss } from '@floating-ui/react';\nimport React, { useState } from 'react';\nimport { useUUID } from '../../../shared/hooks/useUUID.js';\nimport { ChatHeaderMenu } from './ChatHeaderMenu.js';\nimport { ButtonKindEnum, ButtonSizeEnum } from '../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component renders a button that opens a menu when clicked. This button is specifically used in the chat header.\n */\n/**\n * This component renders a button that opens a menu when clicked. This button is specifically used in the chat header.\n */\nfunction ChatHeaderMenuButton(props) {\n    const [isOpen, setIsOpen] = useState(false);\n    // These hooks handle closing the menu when the user clicks outside of the menu. The native Carbon button menu\n    // component uses the same library.\n    const { refs: menuRefs, context: menuContext } = useFloating({\n        open: isOpen,\n        onOpenChange: setIsOpen,\n    });\n    const { getReferenceProps: getMenuReferenceProps, getFloatingProps: getMenuFloatingProps, } = useInteractions([useClick(menuContext), useDismiss(menuContext)]);\n    const id = useUUID();\n    return (React.createElement(\"div\", { ref: menuRefs.setReference, \"aria-owns\": id, ...getMenuReferenceProps() },\n        React.createElement(Button, { size: ButtonSizeEnum.MEDIUM, kind: ButtonKindEnum.GHOST, onClick: () => setIsOpen(!isOpen), renderIcon: isOpen ? ChevronUp : ChevronDown, onMouseDown: (event) => event.preventDefault(), \"aria-label\": props.ariaLabel, \"aria-haspopup\": true, \"aria-expanded\": isOpen, \"aria-controls\": id }, props.label),\n        React.createElement(ChatHeaderMenu, { id: id, isOpen: isOpen, target: menuRefs.floating.current, label: props.label, containerRef: props.containerRef, menuAlignment: props.menuAlignment }, props.children),\n        React.createElement(\"div\", { ref: menuRefs.setFloating, className: \"WAChatHeaderMenuButton_HostElement\", ...getMenuFloatingProps() })));\n}\n\nexport { ChatHeaderMenuButton };\n","import { MenuItem } from '@carbon/react';\nimport React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component renders a menu item for the purposes of being rendered in the menu in the chat header.\n * See {@link ChatHeaderMenuButton}. The Carbon MenuItem component doesn't support anchor element attributes that\n * allow the item be a link, so the this behavior is handled by manually opening the provided url.\n */\nfunction ChatHeaderMenuItem({ label, url, isNewTab = true, onClick, children, }) {\n    return (React.createElement(MenuItem, { label: label, onClick: () => {\n            onClick?.();\n            if (url) {\n                window.open(url, isNewTab ? \"_blank\" : \"_self\");\n            }\n        } }, children));\n}\n\nexport { ChatHeaderMenuItem };\n","import { MenuItemRadioGroup } from '@carbon/react';\nimport React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component renders the Carbon MenuItemRadioGroup component specifically in the {@link ChatHeaderMenu} component.\n */\nfunction ChatHeaderMenuItemRadioGroup(props) {\n    const { label, items, defaultSelectedItem, selectedItem, onChange } = props;\n    return (React.createElement(MenuItemRadioGroup, { label: label, items: items, defaultSelectedItem: defaultSelectedItem, selectedItem: selectedItem, onChange: (selectedItem) => {\n            // The onChange callback gets fired twice. Check if the object returned does not contain an onFocus event\n            // object method.\n            if (!selectedItem.preventDefault) {\n                onChange(selectedItem);\n            }\n        }, itemToString: (menuItem) => typeof menuItem === \"string\"\n            ? menuItem\n            : menuItem.label || menuItem.value }));\n}\n\nexport { ChatHeaderMenuItemRadioGroup };\n","import { Button } from '@carbon/react';\nimport { useFloating, useInteractions, useClick, useDismiss } from '@floating-ui/react';\nimport cx from 'classnames';\nimport React, { useState } from 'react';\nimport { useUUID } from '../../../shared/hooks/useUUID.js';\nimport { ChatHeaderMenu } from './ChatHeaderMenu.js';\nimport { ButtonKindEnum, ButtonSizeEnum } from '../../../../types/utilities/carbonTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction ChatHeaderOverflowMenu(props) {\n    const [isOpen, setIsOpen] = useState(false);\n    // These hooks handle closing the menu when the user clicks outside of the menu. The native Carbon overflow menu\n    // component uses the same library.\n    const { refs: menuRefs, context: menuContext } = useFloating({\n        open: isOpen,\n        onOpenChange: (isOpen) => {\n            setIsOpen(isOpen);\n            if (isOpen) {\n                props.onOpen?.();\n            }\n            else {\n                props.onClose?.();\n            }\n        },\n    });\n    const { getReferenceProps: getMenuReferenceProps, getFloatingProps: getMenuFloatingProps, } = useInteractions([useClick(menuContext), useDismiss(menuContext)]);\n    const id = useUUID();\n    return (React.createElement(\"div\", { ref: menuRefs.setReference, \"aria-owns\": id, ...getMenuReferenceProps() },\n        React.createElement(Button, { className: cx(\"WACChatHeaderOverflowMenu__Button\", props.className), size: ButtonSizeEnum.MEDIUM, kind: ButtonKindEnum.GHOST, onClick: () => setIsOpen(!isOpen), tooltipPosition: props.tooltipPosition, renderIcon: props.renderIcon, onMouseDown: (event) => event.preventDefault(), iconDescription: props.iconDescription, hasIconOnly: true, \"aria-label\": props.ariaLabel, \"aria-haspopup\": true, \"aria-expanded\": isOpen, \"aria-controls\": id }),\n        React.createElement(ChatHeaderMenu, { id: id, label: props.ariaLabel, isOpen: isOpen, target: menuRefs.floating.current, containerRef: props.containerRef, menuAlignment: props.menuAlignment }, props.children),\n        React.createElement(\"div\", { ref: menuRefs.setFloating, className: \"WACChatHeaderOverflowMenu__HostElement\", ...getMenuFloatingProps() })));\n}\n\nexport { ChatHeaderOverflowMenu };\n","import { __decorate } from 'tslib';\nimport { LitElement, unsafeCSS, css } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { carbonElement } from '../../../decorators/customElement.js';\nimport { WEB_COMPONENT_PREFIX } from '../../../settings.js';\nimport css_248z from './src/chatHeaderTitle.scss.js';\nimport { chatHeaderTitleTemplate } from './src/chatHeaderTitle.template.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nlet ChatHeaderTitleElement = class ChatHeaderTitleElement extends LitElement {\n    render() {\n        return chatHeaderTitleTemplate(this);\n    }\n};\nChatHeaderTitleElement.styles = css `\n    ${unsafeCSS(css_248z)}\n  `;\n__decorate([\n    property({ type: String })\n], ChatHeaderTitleElement.prototype, \"title\", void 0);\n__decorate([\n    property({ type: String })\n], ChatHeaderTitleElement.prototype, \"name\", void 0);\nChatHeaderTitleElement = __decorate([\n    carbonElement(`${WEB_COMPONENT_PREFIX}-chat-header-title`)\n], ChatHeaderTitleElement);\n\nexport { ChatHeaderTitleElement };\n","import { html } from 'lit';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * ChatHeaderTitleElement view logic.\n */\nfunction chatHeaderTitleTemplate(customElementClass) {\n    const { title, name } = customElementClass;\n    return html `<div class=\"WACChatHeaderTitle\">\n    <span className=\"WACChatHeaderTitle__Title\" ?hidden=\"${!title}\"\n      >${title}</span\n    >\n    <span class=\"WACChatHeaderTitle__Name\">${name}</span>\n  </div>`;\n}\n\nexport { chatHeaderTitleTemplate };\n","var css_248z = \"cds-chat-header-title{\\n  text-align:center;\\n}\\n\\n.WACChatHeaderTitle{\\n  overflow:hidden;\\n  font-size:var(--cds-chat-BASE-font-size-med);\\n  font-weight:400;\\n  line-height:var(--cds-chat-BASE-line-height-med);\\n  overflow-wrap:break-word;\\n  text-overflow:ellipsis;\\n  white-space:nowrap;\\n  word-wrap:break-word;\\n}\\n\\n.WACChatHeaderTitle .WACChatHeaderTitle__Title:only-child{\\n  padding-inline-end:0.25rem;\\n}\\n\\n.WACChatHeaderTitle__Name{\\n  font-weight:var(--cds-chat-BASE-weight-semibold);\\n}\";\n\nexport { css_248z as default };\n","import { createComponent } from '@lit/react';\nimport React from 'react';\nimport { ChatHeaderTitleElement } from '../../../web-components/components/chatHeader/chatHeaderTitle/cds-aichat-chat-header-title.js';\nimport { WEB_COMPONENT_PREFIX } from '../../../web-components/settings.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst ChatHeaderTitle = createComponent({\n    tagName: `${WEB_COMPONENT_PREFIX}-chat-header-title`,\n    elementClass: ChatHeaderTitleElement,\n    react: React,\n});\n\nexport { ChatHeaderTitle };\n","import '@carbon/web-components/es-custom/components/ai-label/ai-label-action-button.js';\nimport CDSAILabel from '@carbon/web-components/es-custom/components/ai-label/ai-label.js';\nimport { createComponent } from '@lit/react';\nimport React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst AISlug = createComponent({\n    tagName: \"cds-custom-ai-label\",\n    elementClass: CDSAILabel,\n    react: React,\n});\n\nexport { AISlug };\n","import '@carbon/web-components/es-custom/components/slug/index.js';\nimport Close from '@carbon/icons-react/es/Close.js';\nimport CloseLarge from '@carbon/icons-react/es/CloseLarge.js';\nimport DownToBottom from '@carbon/icons-react/es/DownToBottom.js';\nimport Menu from '@carbon/icons-react/es/Menu.js';\nimport Restart from '@carbon/icons-react/es/Restart.js';\nimport SidePanelClose from '@carbon/icons-react/es/SidePanelClose.js';\nimport SubtractLarge from '@carbon/icons-react/es/SubtractLarge.js';\nimport { MenuItem, Button, MenuItemDivider } from '@carbon/react';\nimport { AI_LABEL_SIZE } from '@carbon/web-components/es-custom/components/ai-label/defs.js';\nimport { POPOVER_ALIGNMENT } from '@carbon/web-components/es-custom/components/popover/defs.js';\nimport cx from 'classnames';\nimport React, { forwardRef, useRef, useState, useContext, useCallback, useImperativeHandle, useEffect, Fragment } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ChatHeaderObjectType } from '../../../../types/config/ChatHeaderConfig.js';\nimport { ChatHeaderAvatar } from '../../../react/components/chatHeader/ChatHeaderAvatar.js';\nimport { ChatHeaderLink } from '../../../react/components/chatHeader/ChatHeaderLink.js';\nimport { ChatHeaderMenuButton } from '../../../react/components/chatHeader/ChatHeaderMenuButton.js';\nimport { ChatHeaderMenuItem } from '../../../react/components/chatHeader/ChatHeaderMenuItem.js';\nimport { ChatHeaderMenuItemRadioGroup } from '../../../react/components/chatHeader/ChatHeaderMenuItemRadioGroup.js';\nimport { ChatHeaderOverflowMenu } from '../../../react/components/chatHeader/ChatHeaderOverflowMenu.js';\nimport { ChatHeaderTitle } from '../../../react/components/chatHeader/ChatHeaderTitle.js';\nimport { HideComponentContext } from '../../contexts/HideComponentContext.js';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { usePrevious } from '../../hooks/usePrevious.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport actions from '../../store/actions.js';\nimport { ChatWidthBreakpoint } from '../../../../types/state/AppState.js';\nimport '../../utils/constants.js';\nimport { doFocusRef } from '../../utils/domUtils.js';\nimport { ConfirmModal } from '../modals/ConfirmModal.js';\nimport WriteableElement from '../WriteableElement.js';\nimport { AISlug } from './AISlug.js';\nimport { ButtonSizeEnum, ButtonKindEnum } from '../../../../types/utilities/carbonTypes.js';\nimport { MinimizeButtonIconType } from '../../../../types/config/PublicConfig.js';\nimport { WriteableElementName } from '../../../../types/instance/ChatInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The minimum width in pixels of the center gap, that separates the left and right header objects, until the number\n// of objects that are allowed to be visible in the header is re-calculated.\nconst HEADER_OBJECTS_GAP_MIN_SIZE = 100;\n/**\n * This displays the main header.\n */\nfunction Header(props, ref) {\n    const { displayName, backContent, showRestartButton, showBackButton, useAITheme, labelBackButton, onClickClose, onClickRestart, onCloseAndRestart, onClickBack, overflowItems, overflowClicked, backButtonType, showCenter, hideCloseButton, hideCloseAndRestartButton, brandColor = \"primary\", enableChatHeaderConfig, headerAvatarConfig, } = props;\n    const backButtonRef = useRef();\n    const restartButtonRef = useRef();\n    const closeAndRestartButtonRef = useRef();\n    const closeButtonRef = useRef();\n    const centerObjectsRef = useRef();\n    const centerGapRef = useRef();\n    const overflowRef = useRef();\n    const serviceManager = useServiceManager();\n    const languagePack = useLanguagePack();\n    const publicConfig = useSelector((state) => state.config.public);\n    const chatHeaderConfig = useSelector((state) => state.chatHeaderState.config);\n    const chatWidthBreakpoint = useSelector((state) => state.chatWidthBreakpoint);\n    const maxVisibleHeaderObjects = useSelector((state) => state.chatHeaderState.maxVisibleHeaderObjects);\n    const [overflowIsOpen, setOverflowIsOpen] = useState(false);\n    const [confirmModelOpen, setConfirmModelOpen] = useState(false);\n    // The object map state that keeps track of the values selected in a radio group menus in the chat header.\n    const [selectedGroupMenuitems, setSelectedGroupMenuItems] = useState({});\n    const [isImageError, setIsImageError] = useState(false);\n    const hasHeaderAvatar = Boolean(headerAvatarConfig) && !isImageError;\n    const isHidden = useContext(HideComponentContext);\n    const prevChatHeaderAvatarURL = usePrevious(headerAvatarConfig?.url);\n    const { headerConfig } = publicConfig;\n    const isWideWidth = chatWidthBreakpoint === ChatWidthBreakpoint.WIDE;\n    // The title and name to display in the header from the chat header config.\n    const chatHeaderTitle = enableChatHeaderConfig\n        ? chatHeaderConfig?.headerTitle?.title\n        : undefined;\n    const chatHeaderName = enableChatHeaderConfig\n        ? chatHeaderConfig?.headerTitle?.name\n        : undefined;\n    // The chat name to display in the chat header, the configured chat header name should take priority.\n    const chatHeaderDisplayName = chatHeaderName || displayName;\n    const closeConfirmModel = useCallback(() => {\n        setConfirmModelOpen(false);\n    }, []);\n    const showCloseAndRestartButton = headerConfig?.showCloseAndRestartButton &&\n        !hideCloseAndRestartButton &&\n        onCloseAndRestart;\n    const useHideCloseButton = headerConfig?.hideMinimizeButton || hideCloseButton;\n    // The icon to use for the close button.\n    let closeIcon;\n    let closeReverseIcon = false;\n    let closeIsReversible = true;\n    const minimizeButtonIconType = headerConfig?.minimizeButtonIconType;\n    switch (minimizeButtonIconType) {\n        case MinimizeButtonIconType.CLOSE:\n            closeIcon = React.createElement(CloseLarge, { className: \"WACIcon__Close\", size: 16 });\n            break;\n        case MinimizeButtonIconType.MINIMIZE:\n            closeIcon = React.createElement(SubtractLarge, { className: \"WACIcon__Subtract\", size: 16 });\n            break;\n        case MinimizeButtonIconType.SIDE_PANEL_LEFT:\n            closeIsReversible = false;\n            closeIcon = React.createElement(SidePanelClose, { className: \"WACIcon__SidePanelClose\" });\n            break;\n        case MinimizeButtonIconType.SIDE_PANEL_RIGHT:\n            closeIsReversible = false;\n            closeReverseIcon = true;\n            closeIcon = React.createElement(SidePanelClose, { className: \"WACIcon__SidePanelClose\" });\n            break;\n        default: {\n            closeIcon = React.createElement(SubtractLarge, { className: \"WACIcon__Subtract\", size: 16 });\n            break;\n        }\n    }\n    if (showCloseAndRestartButton && showRestartButton) {\n        throw new Error(\"You cannot enable both the restart button and the close-and-restart buttons.\");\n    }\n    const onConfirm = useCallback(() => {\n        setConfirmModelOpen(false);\n        onCloseAndRestart();\n    }, [onCloseAndRestart]);\n    // Add a \"requestFocus\" imperative function to the ref so other components can trigger focus here.\n    useImperativeHandle(ref, () => ({\n        requestFocus: () => {\n            if (closeButtonRef.current) {\n                doFocusRef(closeButtonRef, false, true);\n                return true;\n            }\n            if (backButtonRef.current) {\n                doFocusRef(backButtonRef, false, true);\n                return true;\n            }\n            if (restartButtonRef.current) {\n                doFocusRef(restartButtonRef, false, true);\n                return true;\n            }\n            return false;\n        },\n    }));\n    /**\n     * A function that takes the given menu item type and returns it's associated chat header menu item component.\n     */\n    function getComponentInMenu(item, index, list) {\n        switch (item.type) {\n            case ChatHeaderObjectType.LINK:\n                return (React.createElement(ChatHeaderMenuItem\n                // eslint-disable-next-line react/no-array-index-key\n                , { \n                    // eslint-disable-next-line react/no-array-index-key\n                    key: index, label: item.label, url: item.url, isNewTab: item.isNewTab, onClick: () => {\n                        // Move focus back to the overflow menu button.\n                        doFocusRef(overflowRef);\n                    } }));\n            case ChatHeaderObjectType.BUTTON:\n                // eslint-disable-next-line react/no-array-index-key\n                return (React.createElement(ChatHeaderMenuItem, { key: index, label: item.label, onClick: () => {\n                        item.onClick?.();\n                        // Move focus back to the overflow menu button.\n                        doFocusRef(overflowRef);\n                    } }));\n            case ChatHeaderObjectType.RADIO_GROUP: {\n                const nextObject = list[index + 1];\n                return (\n                // eslint-disable-next-line react/no-array-index-key\n                React.createElement(Fragment, { key: index },\n                    index !== 0 && React.createElement(MenuItemDivider, null),\n                    React.createElement(ChatHeaderMenuItemRadioGroup, { label: item.label, items: item.items, defaultSelectedItem: item.defaultSelectedItem, selectedItem: selectedGroupMenuitems[item.label], onChange: (selectedItem) => {\n                            setSelectedGroupMenuItems((prevState) => ({\n                                ...prevState,\n                                [item.label]: selectedItem,\n                            }));\n                            item.onChange?.(selectedItem);\n                        } }),\n                    Boolean(nextObject) &&\n                        nextObject.type !== ChatHeaderObjectType.RADIO_GROUP && (React.createElement(MenuItemDivider, null))));\n            }\n            case ChatHeaderObjectType.MENU:\n                return (React.createElement(ChatHeaderMenuItem\n                // eslint-disable-next-line react/no-array-index-key\n                , { \n                    // eslint-disable-next-line react/no-array-index-key\n                    key: index, label: item.label }, item.items\n                    // Filter out menu objects from submenus to prevent having more than 1 level of submenus.\n                    .filter((menuItem) => menuItem.type !== ChatHeaderObjectType.MENU)\n                    .map(getComponentInMenu)));\n            default:\n                return null;\n        }\n    }\n    /**\n     * A function that takes the given chat header object and returns the associated component.\n     */\n    function getComponentInChatHeader(headerObject, index) {\n        switch (headerObject.type) {\n            case ChatHeaderObjectType.LINK:\n                // eslint-disable-next-line react/no-array-index-key\n                return (React.createElement(ChatHeaderLink, { key: index, label: headerObject.label, url: headerObject.url, isNewTab: headerObject.isNewTab }));\n            case ChatHeaderObjectType.MENU:\n                return (\n                // eslint-disable-next-line react/no-array-index-key\n                React.createElement(ChatHeaderMenuButton, { key: index, label: headerObject.label, menuAlignment: \"bottom-start\" }, headerObject.items.map(getComponentInMenu)));\n            case ChatHeaderObjectType.BUTTON:\n                return (React.createElement(Button\n                // eslint-disable-next-line react/no-array-index-key\n                , { \n                    // eslint-disable-next-line react/no-array-index-key\n                    key: index, kind: ButtonKindEnum.GHOST, size: ButtonSizeEnum.MEDIUM, onClick: headerObject.onClick }, headerObject.label));\n            default:\n                return null;\n        }\n    }\n    // Determine if there are chat header object that need to be displayed in the overflow menu.\n    let leftObjectsLength = 0;\n    let rightObjectsLength = 0;\n    if (enableChatHeaderConfig) {\n        leftObjectsLength = chatHeaderConfig?.left?.length ?? 0;\n        rightObjectsLength = chatHeaderConfig?.right?.length ?? 0;\n    }\n    const isLeftObjectsInOverflow = leftObjectsLength > maxVisibleHeaderObjects;\n    const isRightObjectsInOverflow = rightObjectsLength > maxVisibleHeaderObjects;\n    const hasChatHeaderObjects = leftObjectsLength || rightObjectsLength;\n    const renderChatHeaderObjectsInOverflow = hasChatHeaderObjects &&\n        (!isWideWidth || isLeftObjectsInOverflow || isRightObjectsInOverflow);\n    const hasOverflow = Boolean(overflowItems?.length) || renderChatHeaderObjectsInOverflow;\n    const isRTL = document.dir === \"rtl\";\n    // The list of component to render in the left chat header container.\n    let leftChatHeaderComponents = null;\n    // The list of component to render in the right chat header container.\n    let rightChatHeaderComponents = null;\n    // The list of components that don't fit in the left chat header container to render in the overflow menu.\n    let leftChatHeaderMenuComponents = null;\n    // The list of components that don't fit in the right chat header container to render in the overflow menu.\n    let rightChatHeaderMenuComponents = null;\n    if (enableChatHeaderConfig) {\n        leftChatHeaderComponents = chatHeaderConfig?.left\n            ?.slice(0, isLeftObjectsInOverflow ? maxVisibleHeaderObjects : undefined)\n            .map(getComponentInChatHeader);\n        rightChatHeaderComponents = chatHeaderConfig?.right\n            ?.slice(0, isRightObjectsInOverflow ? maxVisibleHeaderObjects : undefined)\n            .map(getComponentInChatHeader);\n        leftChatHeaderMenuComponents =\n            isLeftObjectsInOverflow &&\n                chatHeaderConfig?.left\n                    ?.slice(maxVisibleHeaderObjects)\n                    .map(getComponentInMenu);\n        rightChatHeaderMenuComponents =\n            isRightObjectsInOverflow &&\n                chatHeaderConfig?.right\n                    ?.slice(maxVisibleHeaderObjects)\n                    .map(getComponentInMenu);\n    }\n    let leftContent;\n    if (hasOverflow) {\n        // If there are overflow items, we need to show the overflow menu. This overrides any back button that may be\n        // present.\n        leftContent = (React.createElement(ChatHeaderOverflowMenu, { className: \"WACHeader__OverflowMenu\", renderIcon: overflowIsOpen ? Close : Menu, iconDescription: languagePack.header_overflowMenu_options, ariaLabel: languagePack.components_overflow_ariaLabel, containerRef: overflowRef, tooltipPosition: isRTL ? \"left\" : \"right\", menuAlignment: \"bottom-start\", onOpen: () => {\n                // This requires a setTimeout because of an apparent bug in the Carbon components. If the icon changes\n                // when you click on it, the component swaps in a new icon meaning the old icon is no longer part of the\n                // DOM and the component detects this as a \"clicked outside\" which triggers the component to close. This will\n                // delay the swapping of the icon until after component is open.\n                setTimeout(() => {\n                    setOverflowIsOpen(true);\n                });\n            }, onClose: () => {\n                setOverflowIsOpen(false);\n            } },\n            overflowItems?.map((item, index) => (React.createElement(MenuItem, { key: item, label: item, onClick: () => {\n                    // Move focus back to the overflow menu button.\n                    doFocusRef(overflowRef);\n                    overflowClicked(index);\n                } }))),\n            leftChatHeaderMenuComponents,\n            rightChatHeaderMenuComponents));\n    }\n    else if (showBackButton) {\n        // With no overflow items, just show the back button.\n        leftContent = (React.createElement(HeaderButton, { className: \"WACHeader__BackButton\", label: labelBackButton, onClick: onClickBack, buttonRef: backButtonRef, buttonKind: backButtonType, tooltipPosition: isRTL ? \"left\" : \"right\" }, backContent || React.createElement(DownToBottom, null)));\n    }\n    // This effect sets a resize observer for the center objects container to set the max number of visible objects in\n    // This helps determine how many elements can be in the chat header and in the overflow menu.\n    useEffect(() => {\n        if (!isWideWidth) {\n            serviceManager.store.dispatch(actions.setMaxVisibleHeaderObjects(0));\n            return undefined;\n        }\n        if (!enableChatHeaderConfig) {\n            return undefined;\n        }\n        const centerResizeObserver = new ResizeObserver(() => {\n            const centerGapElement = centerGapRef.current;\n            if (centerGapElement) {\n                if (centerGapElement.offsetWidth > HEADER_OBJECTS_GAP_MIN_SIZE ||\n                    centerGapElement.offsetWidth === 0) {\n                    // Determine the new max number of visible header objects by:\n                    // * Subtracting minimum gap size from current center content width\n                    //   - We subtract the gap size from the center content width so it's accounted for when determining max\n                    //     number of visible header objects. There will always be a gap between the left and right objects.\n                    // * Divide the minimum gap size, multiply by 2\n                    //   - The number of header objects on both the left and right side should be even so we mutiply the\n                    //     the assumed size of a chat header object (which can be arbitrary) by 2.\n                    //\n                    // Example: (500 - 100) / (200) = 2 objects on both the left and right side with 100px of space for the\n                    //          center gap.\n                    let newTotal = Math.floor((centerObjectsRef.current.offsetWidth -\n                        HEADER_OBJECTS_GAP_MIN_SIZE) /\n                        (HEADER_OBJECTS_GAP_MIN_SIZE * 2));\n                    if (newTotal < 0) {\n                        newTotal = 0;\n                    }\n                    setTimeout(() => {\n                        serviceManager.store.dispatch(actions.setMaxVisibleHeaderObjects(newTotal));\n                    });\n                }\n            }\n        });\n        centerResizeObserver.observe(centerObjectsRef.current);\n        return () => {\n            centerResizeObserver.disconnect();\n        };\n    }, [isWideWidth, enableChatHeaderConfig, serviceManager]);\n    useEffect(() => {\n        if (isImageError && prevChatHeaderAvatarURL !== headerAvatarConfig?.url) {\n            setIsImageError(false);\n        }\n    }, [prevChatHeaderAvatarURL, headerAvatarConfig?.url, isImageError]);\n    return (React.createElement(\"div\", { className: cx(\"WACHeader\", `WAC--${brandColor}Color`, {\n            \"WACHeader--withAvatar\": hasHeaderAvatar,\n        }) },\n        React.createElement(\"div\", { className: cx(\"WACHeader--content\", `WAC--${brandColor}Color`), \"data-floating-menu-container\": true },\n            leftContent && (React.createElement(\"div\", { className: \"WACHeader__Buttons WACHeader__LeftButtons\" }, leftContent)),\n            showCenter && (React.createElement(\"div\", { className: \"WACHeader__CenterContainer\" },\n                hasHeaderAvatar && (React.createElement(ChatHeaderAvatar, { url: headerAvatarConfig.url, corners: headerAvatarConfig.corners, alt: languagePack.header_ariaBotAvatar, onError: () => setIsImageError(true) })),\n                (chatHeaderTitle || chatHeaderDisplayName) && (React.createElement(\"div\", { className: \"WACHeader__TitleContainer\" },\n                    React.createElement(ChatHeaderTitle, { title: chatHeaderTitle, name: chatHeaderDisplayName }))),\n                isWideWidth && Boolean(leftObjectsLength) && (React.createElement(\"div\", { className: \"WACHeader__Separator\" })),\n                React.createElement(\"div\", { ref: centerObjectsRef, className: \"WACHeader__HeaderObjects\" },\n                    isWideWidth && Boolean(leftObjectsLength) && (React.createElement(\"div\", { className: \"WACHeader__LeftItems\" }, leftChatHeaderComponents)),\n                    React.createElement(\"div\", { ref: centerGapRef, className: \"WACHeader__CenterGap\" }),\n                    isWideWidth && Boolean(rightObjectsLength) && (React.createElement(\"div\", { className: \"WACHeader__RightItems\" }, rightChatHeaderComponents))))),\n            React.createElement(\"div\", { className: \"WACHeader__Buttons WACHeader__RightButtons\" },\n                useAITheme && (React.createElement(AISlug, { className: \"WACHeader__Slug\", size: AI_LABEL_SIZE.EXTRA_SMALL, alignment: isRTL\n                        ? POPOVER_ALIGNMENT.BOTTOM_LEFT\n                        : POPOVER_ALIGNMENT.BOTTOM_RIGHT },\n                    React.createElement(\"div\", { slot: \"body-text\" },\n                        React.createElement(\"h4\", { className: \"WACHeader__Slug-title\" }, languagePack.ai_slug_title),\n                        React.createElement(\"div\", { className: \"WACHeader__Slug-description\" },\n                            React.createElement(\"div\", null, languagePack.ai_slug_description),\n                            !isHidden && (React.createElement(WriteableElement, { slotName: WriteableElementName.AI_TOOLTIP_AFTER_DESCRIPTION_ELEMENT, id: `aiTooltipAfterDescription${serviceManager.namespace.suffix}` })))))),\n                showRestartButton && (React.createElement(HeaderButton, { className: \"WACHeader__RestartButton\", label: languagePack.buttons_restart, onClick: onClickRestart, buttonRef: restartButtonRef, tooltipPosition: isRTL ? \"right\" : \"left\" },\n                    React.createElement(Restart, null))),\n                !useHideCloseButton && (React.createElement(HeaderButton, { className: cx(\"WACHeader__CloseButton\", {\n                        WACReverseIcon: closeReverseIcon,\n                    }), isReversible: closeIsReversible, label: languagePack.launcher_isOpen, onClick: async () => {\n                        onClickClose();\n                    }, buttonRef: closeButtonRef, tooltipPosition: isRTL ? \"right\" : \"left\" }, closeIcon)),\n                showCloseAndRestartButton && (React.createElement(HeaderButton, { className: \"WACHeader__CloseAndRestartButton\", label: languagePack.header_ariaCloseRestart, onClick: () => setConfirmModelOpen(true), buttonRef: closeAndRestartButtonRef, tooltipPosition: isRTL ? \"right\" : \"left\" },\n                    React.createElement(CloseLarge, { className: \"WACIcon__Close\" })))),\n            confirmModelOpen && (React.createElement(ConfirmModal, { title: languagePack.closeAndRestartModal_title, message: languagePack.closeAndRestartModal_message, onConfirm: onConfirm, onCancel: closeConfirmModel, cancelButtonLabel: languagePack.closeAndRestartModal_cancel, confirmButtonLabel: languagePack.closeAndRestartModal_confirm, modalAnnounceMessage: languagePack.closeAndRestartModal_message, serviceManager: serviceManager })))));\n}\n/**\n * This component is a button that appears in the header.\n */\nfunction HeaderButton({ onClick, buttonRef, label, className, children, buttonKind, isReversible = true, tooltipPosition, }) {\n    return (React.createElement(Button, { ref: buttonRef, className: cx(className, { WACDirectionHasReversibleSVG: isReversible }), onClick: onClick, hasIconOnly: true, iconDescription: label, size: ButtonSizeEnum.MEDIUM, kind: buttonKind || ButtonKindEnum.GHOST, tooltipPosition: tooltipPosition }, children));\n}\nconst HeaderExport = React.memo(forwardRef(Header));\n\nexport { HeaderExport as Header };\n","import React from 'react';\nimport { isElement, isInputNode, isTextAreaNode, isImageNode, isTextNode } from '../../utils/domUtils.js';\nimport VisuallyHidden from '../util/VisuallyHidden.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// The set of types for an INPUT node that we want to announce the value of.\nconst ANNOUNCE_INPUT_TYPES = new Set([\n    \"button\",\n    \"date\",\n    \"datetime-local\",\n    \"email\",\n    \"file\",\n    \"month\",\n    \"number\",\n    \"range\",\n    \"reset\",\n    \"search\",\n    \"submit\",\n    \"tel\",\n    \"text\",\n    \"time\",\n    \"url\",\n    \"week\",\n]);\nconst ANNOUNCE_NODE_EXCLUDE_ATTRIBUTE = \"data-wac-exclude-node-read\";\n/**\n * This component holds several aria live-regions that are used to make screen reader announcements by the application.\n * This component can announce both plain text as well as the content of complex HTML elements. HTML elements will be\n * converted to a raw text format before being announced.\n *\n * The component makes use of two live-region elements that are permanently attached to the DOM. It will alternate\n * between the usage of these two elements to announce changes. This accomplishes a few things. First, in my initial\n * work, I kept finding cases where the browser would re-read the entire live region when elements are added to it even\n * with aria-relevant=\"additions\" and aria-atomic=\"false\". Clearing the previous content was the only way to stop that\n * happening. However you can't simply add the content and then immediately clear it because sometimes the SR won't read\n * the content without some sort of delay before it's cleared (even waiting a tick isn't enough). In addition, a second\n * element will make sure the SR will read a new message even if it has the same content as a previous message.\n */\nclass AriaAnnouncerComponent extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        /**\n         * The first element into which the messages will be added.\n         */\n        this.ref1 = React.createRef();\n        /**\n         * The second element into which the messages will be added.\n         */\n        this.ref2 = React.createRef();\n        /**\n         * Indicates which of the two elements should next to be used to announce a new message.\n         */\n        this.useRef1 = true;\n        /**\n         * Performs the actual announcements. A clone of the element is created that is the basis of what is announced. On\n         * the clone, all the listeners will be removed and all the elements will be made non-tabbable so the user can't\n         * actually interact with them.\n         */\n        this.doAnnouncements = () => {\n            const strings = [];\n            // Turn all of the pending elements into strings.\n            this.pendingValues.forEach((elementToAnnounce) => {\n                if (typeof elementToAnnounce === \"string\") {\n                    strings.push(elementToAnnounce);\n                }\n                else {\n                    nodeToText(elementToAnnounce, strings);\n                }\n            });\n            const useElement = this.useRef1 ? this.ref1.current : this.ref2.current;\n            if (useElement) {\n                useElement.innerText = strings.join(\" \");\n                // Clear the previous element and then swap the active one.\n                const clearElement = this.useRef1 ? this.ref2.current : this.ref1.current;\n                clearElement.innerHTML = \"\";\n            }\n            this.useRef1 = !this.useRef1;\n            this.pendingValues = null;\n        };\n    }\n    /**\n     * This is the public function that will announce the given value or element.\n     *\n     * This function makes use of a setTimeout which will allow it to announce multiple values that all occurred in the\n     * same tick of the VM. All of those messages will be appended to the same live region to be read and the previous set\n     * of values that were read will be cleared from the opposite region. If an element is provided it is not converted to\n     * text until the setTimeout runs which also allows a chance for custom elements to be populated by the event bus but\n     * only if the custom elements are created synchronously.\n     */\n    announceValue(value) {\n        if (!value) {\n            return;\n        }\n        if (!this.pendingValues) {\n            this.pendingValues = [];\n            // This delay of 250ms is here to work around a problem with NVDA. It seems that sometimes if an element gets\n            // focus, that change can interrupt the announcement in a live region even when the live region is changed\n            // after the focus change. Smaller numbers seem to be less reliable in working around this.\n            setTimeout(this.doAnnouncements, 250);\n        }\n        if (typeof value === \"string\" || hasNodeType(value)) {\n            this.pendingValues.push(value);\n        }\n        else if (value.messageID) {\n            const formattedMessage = this.props.intl.formatMessage({ id: value.messageID }, value.messageValues);\n            this.pendingValues.push(formattedMessage);\n        }\n        else {\n            this.pendingValues.push(value.messageText);\n        }\n    }\n    render() {\n        // On FF+JAWS, it reads parts of the messages twice if you don't have aria-atomic=\"true\". However, if you add this\n        // attribute then Chrome will stop announcing buttons :-(.\n        return (React.createElement(VisuallyHidden, { className: \"WACAriaAnnouncer\" },\n            React.createElement(\"div\", { ref: this.ref1, \"aria-live\": \"polite\" }),\n            React.createElement(\"div\", { ref: this.ref2, \"aria-live\": \"polite\" })));\n    }\n}\n/**\n * Converts the given node into text by extracting all of the text content from it and any children inside of it.\n * Any resulting pieces of text will be added to the given array.\n */\nfunction nodeToText(node, strings) {\n    if (isElement(node)) {\n        if (window.getComputedStyle(node).display !== \"none\" &&\n            node.getAttribute(\"aria-hidden\") !== \"true\" &&\n            !node.hasAttribute(ANNOUNCE_NODE_EXCLUDE_ATTRIBUTE)) {\n            trimAndPush(node.getAttribute(\"aria-label\"), strings);\n            if (isInputNode(node) &&\n                ANNOUNCE_INPUT_TYPES.has(node.type.toLowerCase())) {\n                // If the node has a value, announce that. Otherwise announce any placeholder text.\n                if (node.value === \"\") {\n                    trimAndPush(node.placeholder, strings);\n                }\n                else {\n                    trimAndPush(node.value, strings);\n                }\n            }\n            else if (isTextAreaNode(node)) {\n                // For text areas, the value is built from children so we don't need to add the value to the strings here.\n                // The children will get added below.\n                if (node.value === \"\") {\n                    trimAndPush(node.placeholder, strings);\n                }\n            }\n            else if (isImageNode(node)) {\n                trimAndPush(node.alt, strings);\n            }\n            // Recursively go through all of the children. Most nodes will have children either in the shadowRoot.childNodes\n            // or in childNodes. However web components that take advantage of slots will have both. With such a node\n            // the shadowRoot comes first within the DOM and can contain children with aria-label's as well as <slots /> (which don't\n            // have aria-label's). After the shadowRoot the childNodes are the next sibling. Some of those childNodes will\n            // match to the corresponding slots in the shadowRoot and should have aria-label's. Because the shadowRoot is\n            // often just a wrapper around the slots it makes sense to recursively go through those nodes first before\n            // processing the slots farther down.\n            if (node.shadowRoot) {\n                node.shadowRoot.childNodes?.forEach((childNode) => {\n                    nodeToText(childNode, strings);\n                });\n            }\n            if (node.childNodes) {\n                node.childNodes.forEach((childNode) => {\n                    nodeToText(childNode, strings);\n                });\n            }\n        }\n    }\n    else if (isTextNode(node)) {\n        trimAndPush(node.data, strings);\n    }\n}\n/**\n * Trims the given value and pushes it on to the given array assuming it has any content.\n */\nfunction trimAndPush(value, strings) {\n    if (value) {\n        value = value.trim();\n        if (value) {\n            strings.push(value.replaceAll(\"\\n\", \" \"));\n        }\n    }\n}\n/**\n * Determines if the given value is some node type.\n */\nfunction hasNodeType(value) {\n    return value.nodeType !== undefined;\n}\n\nexport { AriaAnnouncerComponent, nodeToText };\n","export { FileStatusValue } from '../../../types/instance/apiTypes.js';\nexport { WriteableElementName } from '../../../types/instance/ChatInstance.js';\nexport { CornersType } from '../../../types/config/CornersType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// Prefix used to distinguish console logs omitted from our code\nconst WA_CONSOLE_PREFIX = \"[Chat]\";\n// The right-to-left mark character string which mixes the direction of a string.\n// For more info on right-to-left mark: https://www.w3.org/TR/WCAG20-TECHS/H34.html\nconst RIGHT_TO_LEFT_MARK = String.fromCharCode(0x200f);\nconst ENGLISH_US_DATE_FORMAT = \"mm/dd/yyyy\";\n// The timeout, in milliseconds, to wait for a response type to load content.\nconst RESPONSE_TYPE_TIMEOUT_MS = 20000;\n// These are custom panel ids.\nconst DEFAULT_CUSTOM_PANEL_ID = \"wac-default-panel\";\n/**\n * This function serves as a placeholder in places where a functional value is required, but not expected to be\n * fired. In the event that it is, it will throw an error, letting you know it shouldn't be.\n */\nfunction THROW_ERROR() {\n    throw Error(\"Not implemented.\");\n}\n/**\n * The brand color types configurable for Carbon AI chat.\n */\nvar BrandColorKind;\n(function (BrandColorKind) {\n    BrandColorKind[\"PRIMARY\"] = \"primary\";\n    BrandColorKind[\"ACCENT\"] = \"accent\";\n})(BrandColorKind || (BrandColorKind = {}));\n// When we auto-scroll to a message, we want to scroll a bit more than necessary because messages have a lot of\n// padding on the top that we want to cut off when scrolling. This is the extra amount we scroll by. There's 28px of\n// padding above the message and we want to cut that down to just 8 so we scroll an extra 20px (28 - 8).\nconst AUTO_SCROLL_EXTRA = 28 - 8;\nconst LIGHT_THEMES = [\"white\", \"g10\"];\nlet isJest = false;\ntry {\n    // \"process\" is undefined when not in a jest environment, but I don't know how to check its value without the code\n    // throwing a \"not defined\" error.\n    if (process?.env.JEST_WORKER_ID) {\n        isJest = true;\n    }\n}\ncatch (error) {\n    // Ignore\n}\nconst IS_JEST = isJest;\n// How much to throttle auto scrolling. When we are in test mode, we set this to zero.\nconst AUTO_SCROLL_THROTTLE_TIMEOUT = IS_JEST ? 0 : 100;\n\nexport { AUTO_SCROLL_EXTRA, AUTO_SCROLL_THROTTLE_TIMEOUT, BrandColorKind, DEFAULT_CUSTOM_PANEL_ID, ENGLISH_US_DATE_FORMAT, IS_JEST, LIGHT_THEMES, RESPONSE_TYPE_TIMEOUT_MS, RIGHT_TO_LEFT_MARK, THROW_ERROR, WA_CONSOLE_PREFIX };\n","import React, { forwardRef, useRef, useImperativeHandle, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Header as HeaderExport } from '../header/Header.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction HomeScreenHeader(props, ref) {\n    const { brandColor, onClose, onRestart, onCloseAndRestart } = props;\n    const showRestartButton = useSelector((state) => state.config.public.showRestartButton ||\n        state.config.public.headerConfig?.showRestartButton);\n    const showBackButton = useSelector((state) => state.persistedToBrowserStorage.chatState.homeScreenState.showBackToBot);\n    const displayName = useSelector((state) => state.headerDisplayName);\n    const customMenuOptions = useSelector((state) => state.customMenuOptions);\n    const useAITheme = useSelector((state) => state.theme.useAITheme);\n    const headerRef = useRef();\n    // Reuse the imperative handles from the header.\n    useImperativeHandle(ref, () => headerRef.current);\n    // If there's no back button, it means this is the start of the conversation in which case there's no point in\n    // showing the close-and-restart button.\n    const hideCloseAndRestartButton = !showBackButton;\n    const overflowClicked = useCallback((index) => {\n        const { handler } = customMenuOptions[index];\n        handler();\n    }, [customMenuOptions]);\n    const overflowItems = customMenuOptions?.map((option) => option.text);\n    return (React.createElement(\"div\", { className: \"WACHomeScreenHeader\" },\n        React.createElement(HeaderExport, { ref: headerRef, displayName: displayName, showCenter: true, showRestartButton: showRestartButton, hideCloseAndRestartButton: hideCloseAndRestartButton, onClickRestart: onRestart, onClickClose: onClose, onCloseAndRestart: onCloseAndRestart, overflowClicked: overflowClicked, overflowItems: overflowItems, useAITheme: useAITheme, brandColor: brandColor })));\n}\nconst HomeScreenHeaderExport = React.memo(forwardRef(HomeScreenHeader));\n\nexport { HomeScreenHeaderExport as HomeScreenHeader };\n","import dayjs from 'dayjs';\nimport enLocaleData from 'dayjs/locale/en.js';\nimport IntlMessageFormat from 'intl-messageformat';\nimport React from 'react';\nimport { consoleError } from './miscUtils.js';\nimport '../../../types/instance/apiTypes.js';\nimport enLanguagePack from '../../languages/en.json.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Translation files are broken up into two sets: private and public. Strings in the public\n * file are published to the github docs and are able to be adjusted by Deb. Strings in the\n * private file are not meant to be changed by Deb or are strings for features in beta. When\n * the two sets are combined, public strings override private ones.\n */\nconst locales = {\n    ar: () => import('dayjs/locale/ar.js'),\n    \"ar-dz\": () => import('dayjs/locale/ar-dz.js'),\n    \"ar-kw\": () => import('dayjs/locale/ar-kw.js'),\n    \"ar-ly\": () => import('dayjs/locale/ar-ly.js'),\n    \"ar-ma\": () => import('dayjs/locale/ar-ma.js'),\n    \"ar-sa\": () => import('dayjs/locale/ar-sa.js'),\n    \"ar-tn\": () => import('dayjs/locale/ar-tn.js'),\n    cs: () => import('dayjs/locale/cs.js'),\n    de: () => import('dayjs/locale/de.js'),\n    \"de-at\": () => import('dayjs/locale/de-at.js'),\n    \"de-ch\": () => import('dayjs/locale/de-ch.js'),\n    en: () => import('dayjs/locale/en.js'),\n    \"en-au\": () => import('dayjs/locale/en-au.js'),\n    \"en-ca\": () => import('dayjs/locale/en-ca.js'),\n    \"en-gb\": () => import('dayjs/locale/en-gb.js'),\n    \"en-ie\": () => import('dayjs/locale/en-ie.js'),\n    \"en-il\": () => import('dayjs/locale/en-il.js'),\n    \"en-nz\": () => import('dayjs/locale/en-nz.js'),\n    es: () => import('dayjs/locale/es.js'),\n    \"es-do\": () => import('dayjs/locale/es-do.js'),\n    \"es-us\": () => import('dayjs/locale/es-us.js'),\n    nl: () => import('dayjs/locale/nl.js'),\n    fr: () => import('dayjs/locale/fr.js'),\n    \"fr-ca\": () => import('dayjs/locale/fr-ca.js'),\n    \"fr-ch\": () => import('dayjs/locale/fr-ch.js'),\n    it: () => import('dayjs/locale/it.js'),\n    \"it-ch\": () => import('dayjs/locale/it-ch.js'),\n    ja: () => import('dayjs/locale/ja.js'),\n    ko: () => import('dayjs/locale/ko.js'),\n    pt: () => import('dayjs/locale/pt.js'),\n    \"pt-br\": () => import('dayjs/locale/pt-br.js'),\n    zh: () => import('dayjs/locale/zh-cn.js'),\n    \"zh-cn\": () => import('dayjs/locale/zh-cn.js'),\n    \"zh-tw\": () => import('dayjs/locale/zh-tw.js'),\n    // The zh-mo and zh-hk locales fallback to zh-tw.\n    \"zh-mo\": () => import('dayjs/locale/zh-tw.js'),\n    \"zh-hk\": () => import('dayjs/locale/zh-tw.js'),\n};\n/**\n * Determines if the given object contains a key that supported the given locale. This will determine if there is an\n * exact match from the given object and if so, that key will be returned. If not, the language will be extracted\n * from the locale and that will be checked to see if it supported by the given object. If the language is\n * supported, that will be returned. If nothing is found to support the locale, this will return null.\n *\n * @param locale The locale (which may or may not include a region) to determine if we have a valid match or null if\n * there is no match.\n * @param object The object containing the values to check for support.\n */\nfunction isSupportedLocale(locale, object) {\n    if (!locale) {\n        return null;\n    }\n    // Normalize the locale to lower case and change underscores to dashes.\n    locale = locale.toLowerCase().replace(/_/g, \"-\");\n    if (object[locale]) {\n        // If there's an exact match for the requested locale, then we'll use that.\n        return locale;\n    }\n    // If not, look to see if there's a match for just the language without the region.\n    const language = locale.substring(0, 2);\n    if (object[language]) {\n        return language;\n    }\n    // No match was found.\n    return null;\n}\n/**\n * Determines if the given object contains a key that supported the given locale. This will determine if there is an\n * exact match from the given object and if so, that key will be returned. If not, the language will be extracted\n * from the locale and that will be checked to see if it supported by the given object. If the language is\n * supported, that will be returned. If nothing is found to support the locale, this will return null. If no locale\n * was requested, then the browser's languages/locales will be used instead.\n *\n * @param requestedLocale The locale (which may or may not include a region) that was provided in the public config.\n * @param object The object containing the values to check for support.\n * @param objectType A user friendly string describing the type of data in the given object. Used for outputting\n * error messages.\n */\nfunction findSupportedKey(requestedLocale, object, objectType) {\n    // Check to see if the requested locale is supported.\n    const requestedSupported = isSupportedLocale(requestedLocale, object);\n    if (requestedSupported) {\n        return requestedSupported;\n    }\n    if (requestedLocale) {\n        const keyList = JSON.stringify(Object.keys(object));\n        consoleError(`The requested locale \"${requestedLocale}\" does not contain a supported ${objectType}. We are defaulting to \"en\". The supported values are ${keyList}.`);\n    }\n    // Return English as the default.\n    return \"en\";\n}\n/**\n * Loads the appropriate {@link LanguagePack} from the corresponding module for the requested locale.\n */\nasync function loadLocale(requestedLocale) {\n    try {\n        const localeKey = findSupportedKey(requestedLocale, locales, \"locale\");\n        const localeModule = await locales[localeKey]();\n        if (localeModule) {\n            return localeModule.default;\n        }\n        consoleError(`The locale data for \"${localeKey}\" did not load. The application will default to \"en\".`);\n    }\n    catch (error) {\n        consoleError(`An error occurred loading the locale data for \"${requestedLocale}\". The application will default to \"en\".`, error);\n    }\n    return enLocaleData;\n}\n/**\n * Loads the language pack for the given locale if a language pack was not already provided. This may incur an\n * asynchronous load of the language pack files.\n *\n * @param providedLanguagePack A language pack that was provided by the configuration from the host page. If this\n * value is defined, it will always be used instead instead of loading a separate pack.\n * @returns The appropriate language pack for the given locale. Any values that are missing will be set with\n * their English values when the instance's language pack is updated.\n */\nasync function loadLanguagePack(providedLanguagePack) {\n    if (providedLanguagePack) {\n        // Use the language pack that was provided.\n        return fillWithEnglish(providedLanguagePack);\n    }\n    return enLanguagePack;\n}\n/**\n * Returns the given language pack filled with english messages for keys that are missing values.\n */\nfunction fillWithEnglish(languagePack) {\n    return {\n        ...enLanguagePack,\n        ...languagePack,\n    };\n}\n/**\n * Handles a \"b\" tag.\n */\nfunction handleBTag(chunks) {\n    return React.createElement(\"b\", null, chunks);\n}\n/**\n * Handles a \"br\" tag.\n */\nfunction handleBRTag() {\n    return React.createElement(\"br\", null);\n}\n/**\n * Adds the functions for processing HTML to the given object for use with FormattedMessage.\n */\nfunction addHTMLSupport(values) {\n    values.b = handleBTag;\n    values.br = handleBRTag;\n    return values;\n}\n/**\n * Loads a dayjs locale if it hasn't been loaded already, but doesn't replace the current globally set locale.\n *\n * @param locale The dayjs locale to load.\n * @returns returns the locale it succeeded to load.\n */\nasync function loadDayjsLocale(locale) {\n    if (!dayjs.Ls[locale]) {\n        const previousLocale = dayjs.locale();\n        const localePack = await loadLocale(locale);\n        // We need to temporarily set the new locale globally so that it's available and then return to the previously\n        // set locale.\n        dayjs.locale(localePack);\n        dayjs.locale(previousLocale);\n        // Determine if the locale we attempted to set was successful.\n        const isLoaded = Boolean(dayjs.Ls[locale]);\n        // If the locale we attempted to load was not successful, and it's 2 characters long, it's not a locale\n        // recognized by dayjs, and we should throw an error.\n        if (!isLoaded && locale.length === 2) {\n            throw Error(\"Locale is not recognized.\");\n        }\n        else if (!isLoaded) {\n            // If the locale we were provided is more than two characters, we were possibly given a region that's not\n            // supported, so let's attempt to load just the language, which is the first two characters.\n            return loadDayjsLocale(locale.substring(0, 2));\n        }\n    }\n    return locale;\n}\nfunction formatMessage(intl, id, values) {\n    return intl.formatMessage({ id }, values);\n}\nfunction createEnglishFormat(key) {\n    return new IntlMessageFormat(enLanguagePack[key], \"en-US\");\n}\n\nexport { addHTMLSupport, createEnglishFormat, formatMessage, loadDayjsLocale, loadLanguagePack, loadLocale };\n","import { useContext } from 'react';\nimport { LanguagePackContext } from '../contexts/LanguagePackContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a React hook that will provided access to the {@link LanguagePack}.\n */\nfunction useLanguagePack() {\n    return useContext(LanguagePackContext);\n}\n\nexport { useLanguagePack };\n","import cx from 'classnames';\nimport React from 'react';\nimport { HideComponentContext } from '../../contexts/HideComponentContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is used to potentially hide it's children and to make that state available through context to all\n * of the component's children. Note that this does not currently work if you nest one of these components inside of\n * another one.\n */\nfunction HideComponent(props) {\n    const { hidden, children, className, ...htmlAttributes } = props;\n    return (React.createElement(HideComponentContext.Provider, { value: hidden },\n        React.createElement(\"div\", { className: cx(className, { WAC__hidden: hidden }), ...htmlAttributes }, children)));\n}\n\nexport { HideComponent };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This context provides access to the current window size and is updated as the window size changes.\n */\nconst WindowSizeContext = React.createContext(null);\n\nexport { WindowSizeContext };\n","export { CarbonTheme } from '../config/PublicConfig.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nvar CarbonThemeClassNames;\n(function (CarbonThemeClassNames) {\n    CarbonThemeClassNames[\"WHITE\"] = \"cds--white\";\n    CarbonThemeClassNames[\"G10\"] = \"cds--g10\";\n    CarbonThemeClassNames[\"G90\"] = \"cds--g90\";\n    CarbonThemeClassNames[\"G100\"] = \"cds--g100\";\n})(CarbonThemeClassNames || (CarbonThemeClassNames = {}));\nvar ButtonKindEnum;\n(function (ButtonKindEnum) {\n    ButtonKindEnum[\"PRIMARY\"] = \"primary\";\n    ButtonKindEnum[\"SECONDARY\"] = \"secondary\";\n    ButtonKindEnum[\"DANGER\"] = \"danger\";\n    ButtonKindEnum[\"GHOST\"] = \"ghost\";\n    ButtonKindEnum[\"DANGER_PRIMARY\"] = \"danger--primary\";\n    ButtonKindEnum[\"DANGER_GHOST\"] = \"danger--ghost\";\n    ButtonKindEnum[\"DANGER_TERTIARY\"] = \"danger--tertiary\";\n    ButtonKindEnum[\"TERTIARY\"] = \"tertiary\";\n})(ButtonKindEnum || (ButtonKindEnum = {}));\nvar ButtonSizeEnum;\n(function (ButtonSizeEnum) {\n    ButtonSizeEnum[\"SMALL\"] = \"sm\";\n    ButtonSizeEnum[\"MEDIUM\"] = \"md\";\n    ButtonSizeEnum[\"LARGE\"] = \"lg\";\n    ButtonSizeEnum[\"XLARGE\"] = \"xl\";\n    ButtonSizeEnum[\"XXLARGE\"] = \"2xl\";\n})(ButtonSizeEnum || (ButtonSizeEnum = {}));\n\nexport { ButtonKindEnum, ButtonSizeEnum, CarbonThemeClassNames };\n","import { useContext } from 'react';\nimport { ServiceManagerContext } from '../contexts/ServiceManagerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a React hook that will provided access to the {@link ServiceManager}.\n */\nfunction useServiceManager() {\n    return useContext(ServiceManagerContext);\n}\n\nexport { useServiceManager };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This context provides access to the portal root element that acts as the host element for instances of\n * {@link ModalPortal}. Instances of that react component are mounted here in the DOM using React's portal\n * functionality.\n */\nconst ModalPortalRootContext = React.createContext(null);\n\nexport { ModalPortalRootContext };\n","import { v4 } from 'uuid';\nexport { UUIDType } from './UUIDType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The function generates a new v4 UUID. This function is here to provide a nicer mechanism for mocking UUIDs in\n * test cases.\n *\n * @param _type This is the \"type\" of the UUID that is being generated. This is only used by the mock UUID generator\n * for test cases. Each \"type\" will get it's own set of IDs that don't overlap with other types.\n */\nfunction uuid(_type) {\n    return v4();\n}\n\nexport { uuid };\n","import React, { useContext, useEffect } from 'react';\nimport { AriaAnnouncerContext } from '../../contexts/AriaAnnouncerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component acts as a wrapper around content that should be announced by a screen reader.\n */\nfunction AriaLiveMessage(props) {\n    const ariaAnnouncer = useContext(AriaAnnouncerContext);\n    useEffect(() => {\n        ariaAnnouncer(props.message);\n    }, [ariaAnnouncer, props.message]);\n    return React.createElement(\"div\", null);\n}\nconst AriaLiveMessageExport = React.memo(AriaLiveMessage);\n\nexport { AriaLiveMessageExport as AriaLiveMessage };\n","import { compute } from 'compute-scroll-into-view';\nimport memoizeOne from 'memoize-one';\nimport { tabbable } from 'tabbable';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The calculated size of scrollbars in the application. Note that this value can vary by browser and operating\n * system. This is memoized so it's calculated lazily after the application has loaded.\n */\nconst SCROLLBAR_WIDTH = memoizeOne(getScrollbarWidth);\n/**\n * Scrolls the given element into view if necessary.\n *\n * @param element The element to scroll.\n * @param animate Indicates if the scroll should be animated.\n * @param boundary An optional boundary element that tells the computation code where to stop when trying to find a\n * scrollable container.\n */\nfunction doScrollElementIntoView(element, animate = false, boundary) {\n    if (element) {\n        const actions = compute(element, {\n            boundary,\n            scrollMode: \"if-needed\",\n            block: \"nearest\",\n            inline: \"nearest\",\n        });\n        actions.forEach(({ el, top, left }) => {\n            // noinspection JSSuspiciousNameCombination\n            doScrollElement(el, Math.round(top), Math.round(left), animate);\n        });\n    }\n}\n/**\n * Sets the scroll position on the given scrollable element to the given top and left values.\n *\n * @param element The scrollable element to set the scroll position of.\n * @param scrollTop The scrollTop value to set.\n * @param scrollLeft The scrollLeft value to set.\n * @param animate Indicates if the scrolling should be done using animation.\n */\nfunction doScrollElement(element, scrollTop, scrollLeft, animate = false) {\n    setTimeout(() => {\n        if (element) {\n            if (animate && element.scroll) {\n                element.scroll({\n                    top: scrollTop,\n                    left: scrollLeft,\n                    behavior: \"smooth\",\n                });\n            }\n            else {\n                element.scrollTop = scrollTop;\n                element.scrollLeft = scrollLeft;\n            }\n        }\n    });\n}\n/**\n * Calculates the width of a scrollbar in the system. This will add a temporary scrollable div to the document with\n * a div inside and then measure the difference in size of the element.\n */\nfunction getScrollbarWidth() {\n    // Creating invisible container\n    const outer = document.createElement(\"div\");\n    outer.style.visibility = \"hidden\";\n    outer.style.overflow = \"scroll\";\n    document.body.appendChild(outer);\n    // Creating inner element and placing it in the container.\n    const inner = document.createElement(\"div\");\n    outer.appendChild(inner);\n    // Calculating difference between container's full width and the child width.\n    const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n    // Removing temporary elements from the DOM.\n    outer.parentNode.removeChild(outer);\n    return scrollbarWidth;\n}\n/**\n * Requests focus be moved to the given element, optionally deferring it to the next event loop.\n *\n * @param element The element to move focus to.\n * @param preventScroll Indicates if scrolling should be prevented as a result of the focus change.\n */\nfunction doFocus(element, preventScroll = false) {\n    if (element &&\n        document.activeElement !== element &&\n        tabbable(element, { getShadowRoot: true })) {\n        element.focus({ preventScroll });\n    }\n}\n/**\n * Requests focus be moved to the element referenced by the given react ref if the referenced element is defined.\n *\n * @param ref The reference to the element to move focus to.\n * @param defer Indicates if the focus should be executed now or if it should be deferred to another event loop.\n * @param preventScroll Indicates if scrolling should be prevented as a result of the focus change.\n */\nfunction doFocusRef(ref, defer = false, preventScroll = false) {\n    if (ref) {\n        if (defer) {\n            setTimeout(() => {\n                doFocusRef(ref);\n            });\n        }\n        else if (ref.current) {\n            doFocus(ref.current, preventScroll);\n        }\n    }\n}\n/**\n * Determines if the given node is an Element.\n */\nfunction isElement(node) {\n    return node?.nodeType === 1;\n}\n/**\n * Determines if the given node is a Text node.\n */\nfunction isTextNode(node) {\n    return node?.nodeType === 3;\n}\n/**\n * Determines if the given node is a INPUT html element.\n */\nfunction isInputNode(node) {\n    return node?.tagName === \"INPUT\";\n}\n/**\n * Determines if the given node is an IMG html element.\n */\nfunction isImageNode(node) {\n    return node?.tagName === \"IMG\";\n}\n/**\n * Determines if the given node is a TEXTAREA html element.\n */\nfunction isTextAreaNode(node) {\n    return node?.tagName === \"TEXTAREA\";\n}\n/**\n * Looks through an array of elements for the first child element that should receive focus.\n * If no elements should receive focus, returns false.\n *\n * @param elements An array of HTMLElements.\n *\n * @returns boolean explaining if there was a focusable element or not.\n */\nfunction focusOnFirstFocusableItemInArrayOfElements(elements) {\n    for (let index = 0; index < elements.length; index++) {\n        if (focusOnFirstFocusableElement(elements[index])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Searches through the children of an element for an element to focus on. The first child that can get focus that is\n * found will receive focus. If no elements are found, returns false.\n *\n * @param parentElement An element with potential focusable children.\n */\nfunction focusOnFirstFocusableElement(parentElement) {\n    const focusableElements = tabbable(parentElement, { getShadowRoot: true });\n    if (focusableElements?.length) {\n        doFocus(focusableElements[0]);\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if the given keyboard event represent a press of the enter key. This will exclude the key when pressed\n * as part of IME composing and it will also exclude the key if there are any modifier keys that are pressed at the same\n * time. This function supports both the built-in typescript KeyboardEvent type and the React version (which is\n * missing some properties).\n */\nfunction isEnterKey(event) {\n    if (event.key === \"Enter\" && !hasModifiers(event)) {\n        // Users using IMEs could be making a word selection when they hit enter. This check will prevent the user’s\n        // message from being sent prematurely.\n        return !(event.isComposing || event.keyCode === 229);\n    }\n    return false;\n}\n/**\n * Determines if the given keyboard event has any modifier keys pressed.\n */\nfunction hasModifiers(event) {\n    return event.shiftKey || event.altKey || event.metaKey || event.ctrlKey;\n}\n/**\n * Returns the \"scrollBottom\" value for the given element. This is similar to \"scrollTop\" except that it represents\n * the distance the element has been scrolled from the bottom.\n */\nfunction getScrollBottom(element) {\n    if (element) {\n        return element.scrollHeight - element.offsetHeight - element.scrollTop;\n    }\n    return 0;\n}\n\nexport { SCROLLBAR_WIDTH, doFocusRef, doScrollElement, doScrollElementIntoView, focusOnFirstFocusableItemInArrayOfElements, getScrollBottom, isElement, isEnterKey, isImageNode, isInputNode, isTextAreaNode, isTextNode };\n","import cloneDeep from 'lodash-es/cloneDeep.js';\nimport './constants.js';\nimport { findLastWithMap } from './lang/arrayUtils.js';\nimport { uuid } from './lang/uuid.js';\nimport { MessageResponseTypes, MessageInputType, ButtonItemType, AgentMessageType, InternalMessageRequestType } from '../../../types/messaging/Messages.js';\nimport { UUIDType } from './lang/UUIDType.js';\nimport { FileStatusValue } from '../../../types/instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nconst THREAD_ID_MAIN = \"main\";\n/**\n * This function determines if the given message is an output message (i.e. a message output from the assistant) and\n * is a {@link MessageResponse}. This function acts as a type guard which will narrow the type to\n * {@link MessageResponse} if it returns true.\n */\nfunction isResponse(message) {\n    return message && message.output !== undefined;\n}\nfunction isDateResponseType(localMessage) {\n    return (localMessage?.item.response_type === MessageResponseTypes.DATE);\n}\n/**\n * Adds default values to the given MessageResponse.\n */\nfunction addDefaultsToMessage(fullMessage) {\n    if (!fullMessage.id) {\n        fullMessage.id = uuid(UUIDType.MESSAGE);\n    }\n    if (!fullMessage.thread_id) {\n        fullMessage.thread_id = THREAD_ID_MAIN;\n    }\n    if (!fullMessage.history) {\n        fullMessage.history = {};\n    }\n    if (!fullMessage.history.timestamp) {\n        fullMessage.history.timestamp = Date.now();\n    }\n    if (fullMessage.history.from_history === undefined) {\n        fullMessage.history.from_history = false;\n    }\n    return fullMessage;\n}\n/**\n * This function determines if the given message is a message input to the assistant and is a {@link MessageRequest}.\n * This function will return false if the MessageRequest is an internal event. This function acts as a type guard which\n * will narrow the type to {@link MessageRequest} if it returns true.\n */\nfunction isRequest(message) {\n    return message?.input !== undefined;\n}\n/**\n * Indicates if this message was part of a conversation with a live agent.\n */\nfunction isLiveAgentMessage(message) {\n    return Boolean(message.item.agent_message_type);\n}\n/**\n * Indicates if this message contains a message that was part of a conversation with a live agent.\n */\nfunction hasLiveAgentMessage(message) {\n    return ((isResponse(message) &&\n        Boolean(message.output.generic?.find((item) => item?.agent_message_type))) ||\n        (isRequest(message) && Boolean(message.input.agent_message_type)));\n}\n/**\n * This function determines if the given message is an internal event message that was input (i.e. a message we sent to\n * the back-end that is a {@link MessageRequest} with {@link EventInput} in it). This function acts as a type guard\n * which will narrow the type to 'MessageRequest<EventInput>' if it returns true.\n */\nfunction isEventRequest(message) {\n    return (message?.input?.message_type ===\n        MessageInputType.EVENT);\n}\n/**\n * This function determines if the given generic item is a text item. This function acts as a type guard which will\n * narrow the type to {@link TextItem} if it returns true.\n */\nfunction isTextItem(item) {\n    return (item &&\n        item.response_type === \"text\" &&\n        item.text !== undefined);\n}\nfunction isTyping(message) {\n    // eslint-disable-next-line eqeqeq\n    return (message.response_type === MessageResponseTypes.PAUSE &&\n        message.typing == true);\n}\nfunction isPause(message) {\n    return message.response_type === MessageResponseTypes.PAUSE;\n}\n/**\n * This is a type guard that determines if the given item is an {@link OptionItem} item.\n */\nfunction isOptionItem(item) {\n    return (item?.response_type === MessageResponseTypes.OPTION &&\n        item.options !== undefined);\n}\n/**\n * Determines if the message is a transfer to agent response.\n */\nfunction isChannelTransferToAgent(message) {\n    const { generic } = message.output;\n    return generic.some(isConnectToAgent);\n}\n/**\n * Generates a {@link MessageRequest} for the given {@link Option} that the user has selected. This is used for\n * generating the request to the server once the user has selected a choice from an option or suggestion list.\n *\n * @param choice The selected value.\n * @param relatedResponseID If this choice was made as the result of the choice choosing a value from a previous\n * {@link MessageResponse}, this should be the ID of that message.\n */\nfunction createMessageRequestForChoice(choice, relatedResponseID) {\n    // The \"value\" of the choice contains the data that is to be sent to the server when this choice is selected.\n    // We'll clone it and add in the history value which stores the user-visible label in the history store.\n    const messageRequest = {\n        id: uuid(UUIDType.MESSAGE),\n        thread_id: THREAD_ID_MAIN,\n        ...cloneDeep(choice.value),\n    };\n    messageRequest.history = {\n        label: choice.label,\n        relatedMessageID: relatedResponseID,\n    };\n    return messageRequest;\n}\n/**\n * Generates a {@link MessageRequest} for the given {@link Option} that the user has selected. This is used for\n * generating the request to the server once the user has selected a choice from an option or suggestion list.\n *\n * @param buttonItem The button item.\n * @param relatedResponseID The id of the {@link MessageResponse} the button item came from.\n * {@link MessageResponse}, this should be the ID of that message.\n */\nfunction createMessageRequestForButtonItemOption(buttonItem, relatedResponseID) {\n    // The \"value\" of the choice contains the data that is to be sent to the server when this choice is selected.\n    const messageRequest = {\n        id: uuid(UUIDType.MESSAGE),\n        thread_id: THREAD_ID_MAIN,\n        input: null,\n    };\n    if (buttonItem.value?.input?.text) {\n        messageRequest.input = cloneDeep(buttonItem.value.input);\n    }\n    else {\n        messageRequest.input = { text: buttonItem.label };\n    }\n    messageRequest.history = { relatedMessageID: relatedResponseID };\n    return messageRequest;\n}\n/**\n * Generates a {@link MessageRequest} to request the welcome node.\n */\nfunction createWelcomeRequest() {\n    return addDefaultsToMessage({\n        id: uuid(UUIDType.MESSAGE),\n        input: {\n            text: \"\",\n        },\n        history: {\n            silent: true,\n            is_welcome_request: true,\n        },\n        thread_id: THREAD_ID_MAIN,\n    });\n}\n/**\n * Generates a {@link MessageRequest} for the given text message sent by the user. This is used for generating the\n * request to send to the server when the user has typed something into the input field.\n */\nfunction createMessageRequestForText(text) {\n    // The \"value\" of the choice contains the data that is to be sent to the server when this choice is selected.\n    // We'll clone it and add in the history value which stores the user-visible label in the history store.\n    return addDefaultsToMessage({\n        input: {\n            // The assistant will choke if we send it text with line breaks in it, so we have to remove them first.\n            text,\n            message_type: MessageInputType.TEXT,\n        },\n    });\n}\n/**\n * Generates a {@link MessageRequest} to represent a file upload.\n */\nfunction createMessageRequestForFileUpload(upload) {\n    return addDefaultsToMessage({\n        id: upload.id,\n        input: {\n            text: upload.file.name,\n            message_type: InternalMessageRequestType.FILE,\n            agent_message_type: AgentMessageType.FROM_USER,\n        },\n        history: {\n            file_upload_status: FileStatusValue.UPLOADING,\n        },\n    });\n}\nfunction createMessageRequestForDate(inputString, userString, relatedResponseID) {\n    const messageRequest = createMessageRequestForText(inputString);\n    messageRequest.history = {\n        label: userString,\n        relatedMessageID: relatedResponseID,\n    };\n    return messageRequest;\n}\n/**\n * Generates a {@link MessageResponse} for the given text message sent to the user.\n */\nfunction createMessageResponseForText(text, threadID = THREAD_ID_MAIN, responseType = MessageResponseTypes.TEXT, context) {\n    const textItem = {\n        response_type: responseType,\n        text,\n    };\n    const messageResponse = {\n        id: uuid(UUIDType.MESSAGE),\n        thread_id: threadID,\n        output: {\n            generic: [textItem],\n        },\n    };\n    return messageResponse;\n}\n/**\n * Generates a {@link MessageResponse} for the given item sent to the user.\n */\nfunction createMessageResponseForItem(item, context) {\n    const messageResponse = {\n        output: {\n            generic: [item],\n        },\n    };\n    return addDefaultsToMessage(messageResponse);\n}\n/**\n * Indicates if the dialog response is a \"connect_to_agent\" message.\n */\nfunction isConnectToAgent(response) {\n    return response?.response_type === MessageResponseTypes.CONNECT_TO_AGENT;\n}\nfunction isCardResponseType(response) {\n    // TODO: Add Card to wa-fd-types MessageResponseTypes enum.\n    return response?.response_type === MessageResponseTypes.CARD;\n}\nfunction isCarouselResponseType(response) {\n    return response?.response_type === MessageResponseTypes.CAROUSEL;\n}\nfunction isButtonResponseType(response) {\n    return response?.response_type === MessageResponseTypes.BUTTON;\n}\nfunction isShowPanelButtonType(response) {\n    return (isButtonResponseType(response) &&\n        response.button_type === ButtonItemType.SHOW_PANEL);\n}\n/**\n * Determines if the provided message item is a response type that supports nesting response types.\n */\nfunction isResponseWithNestedItems(item) {\n    if (isButtonResponseType(item)) {\n        return hasBodyOrFooter(item.panel);\n    }\n    if (isCardResponseType(item)) {\n        return hasBodyOrFooter(item);\n    }\n    if (isCarouselResponseType(item)) {\n        return item.items !== undefined;\n    }\n    return isGridResponseType(item);\n}\nfunction hasBodyOrFooter(item) {\n    return item?.body !== undefined || item?.footer !== undefined;\n}\n/**\n * Determines if the given message should be rendered as custom message.\n */\nfunction renderAsUserDefinedMessage(messageItem) {\n    const responseType = messageItem.response_type;\n    switch (responseType) {\n        case MessageResponseTypes.TEXT:\n        case MessageResponseTypes.IMAGE:\n        case MessageResponseTypes.OPTION:\n        case MessageResponseTypes.CONNECT_TO_AGENT:\n        case MessageResponseTypes.IFRAME:\n        case MessageResponseTypes.VIDEO:\n        case MessageResponseTypes.AUDIO:\n        case MessageResponseTypes.DATE:\n        case MessageResponseTypes.CONVERSATIONAL_SEARCH:\n        case MessageResponseTypes.TABLE:\n        case MessageResponseTypes.INLINE_ERROR:\n        case MessageResponseTypes.CARD:\n        case MessageResponseTypes.CAROUSEL:\n        case MessageResponseTypes.BUTTON:\n        case MessageResponseTypes.GRID:\n            return false;\n        default:\n            // If the custom response is for the tour feature then don't render as a custom message since it will be rendered\n            // as a tour instead.\n            return !renderAsTour(messageItem);\n    }\n}\n/**\n * Determines if the LocalMessage should be rendered as a tour.\n */\nfunction renderAsTour(messageItem) {\n    return hasTourUserDefinedType(messageItem);\n}\n/**\n * Determines if the Generic item's user_defined_type matched the type for the tour beta.\n */\nfunction hasTourUserDefinedType(message) {\n    // For now the tour response will be a custom message with a specific user_defined_type.\n    return message?.user_defined?.user_defined_type === \"IBM_BETA_JOURNEYS_TOUR\";\n}\n/**\n * Indicates if the given remote config indicates that a service desk is configured.\n */\nfunction hasServiceDesk(config) {\n    return Boolean(config.public.serviceDeskFactory);\n}\n/**\n * Determines if the provided message item can be rendered in a response body item.\n */\nfunction isItemSupportedInResponseBody(item) {\n    switch (item.response_type) {\n        case MessageResponseTypes.IMAGE:\n        case MessageResponseTypes.IFRAME:\n        case MessageResponseTypes.VIDEO:\n        case MessageResponseTypes.AUDIO:\n        case MessageResponseTypes.TEXT:\n        case MessageResponseTypes.USER_DEFINED:\n        case MessageResponseTypes.CARD:\n        case MessageResponseTypes.GRID:\n            return true;\n        default:\n            return false;\n    }\n}\n/**\n * Determines if the message item is a carousel response type with a single item.\n */\nfunction isSingleItemCarousel(messageItem) {\n    return isCarouselResponseType(messageItem) && messageItem.items.length === 1;\n}\nfunction isGridResponseType(item) {\n    return item?.response_type === MessageResponseTypes.GRID;\n}\nfunction getOptionType(preference, totalOptions) {\n    let type = \"button\";\n    if (preference && preference === \"button\") {\n        type = \"button\";\n    }\n    else if (preference && preference === \"dropdown\") {\n        type = \"dropdown\";\n    }\n    else if (totalOptions > 4) {\n        type = \"dropdown\";\n    }\n    return type;\n}\n/**\n * Indicates if the given stream chunk is a partial item.\n */\nfunction isStreamPartialItem(chunk) {\n    return Boolean(chunk.partial_item);\n}\n/**\n * Indicates if the given stream chunk is a complete item.\n */\nfunction isStreamCompleteItem(chunk) {\n    return Boolean(chunk.complete_item);\n}\n/**\n * Indicates if the given stream chunk is a partial item.\n */\nfunction isStreamFinalResponse(chunk) {\n    return Boolean(chunk.final_response);\n}\n/**\n * Returns the ID of a streaming item that is part of a message response. If the item does not have a streaming ID,\n * this will return null;\n */\nfunction streamItemID(messageID, item) {\n    const itemID = item?.streaming_metadata?.id;\n    if (!itemID) {\n        return null;\n    }\n    return `${messageID}-${itemID}`;\n}\n/**\n * Returns the dimensions info for the given media item.\n */\nfunction getMediaDimensions(item) {\n    return item.dimensions;\n}\n/**\n * Returns the last response message from the bot (excludes agent messages) that has a context object on it.\n */\nfunction getLastBotResponseWithContext(state) {\n    const messageIDs = state.botMessageState.messageIDs || [];\n    return findLastWithMap(messageIDs, state.allMessagesByID, (message) => isResponse(message) &&\n        !hasLiveAgentMessage(message) &&\n        Boolean(message.context));\n}\n\nexport { THREAD_ID_MAIN, addDefaultsToMessage, createMessageRequestForButtonItemOption, createMessageRequestForChoice, createMessageRequestForDate, createMessageRequestForFileUpload, createMessageRequestForText, createMessageResponseForItem, createMessageResponseForText, createWelcomeRequest, getLastBotResponseWithContext, getMediaDimensions, getOptionType, hasServiceDesk, hasTourUserDefinedType, isButtonResponseType, isCardResponseType, isCarouselResponseType, isChannelTransferToAgent, isConnectToAgent, isDateResponseType, isEventRequest, isGridResponseType, isItemSupportedInResponseBody, isLiveAgentMessage, isOptionItem, isPause, isRequest, isResponse, isResponseWithNestedItems, isShowPanelButtonType, isSingleItemCarousel, isStreamCompleteItem, isStreamFinalResponse, isStreamPartialItem, isTextItem, isTyping, renderAsTour, renderAsUserDefinedMessage, streamItemID };\n","import React, { PureComponent } from 'react';\nimport { withAriaAnnouncer } from '../../hocs/withAriaAnnouncer.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component creates an ARIA live-region around its children, but it does not render the children until this\n * component is mounted. A live-region does not make any announcements when the element is attached to the DOM.\n * Only changes made after it is attached are announced.\n */\nclass AnnounceOnMountComponent extends PureComponent {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = {\n            isMounted: false,\n        };\n        /**\n         * Indicates if the \"once\" prop message has been announced.\n         */\n        this.onceAnnounced = false;\n    }\n    componentDidMount() {\n        this.setState({ isMounted: true });\n        if (!this.onceAnnounced) {\n            if (this.props.announceOnce) {\n                setTimeout(() => {\n                    this.props.ariaAnnouncer(this.props.announceOnce);\n                });\n            }\n            this.onceAnnounced = true;\n        }\n    }\n    render() {\n        return (React.createElement(\"div\", { \"aria-live\": \"polite\" }, this.state.isMounted && this.props.children));\n    }\n}\nconst AnnounceOnMountComponentExport = withAriaAnnouncer(AnnounceOnMountComponent);\n\nexport { AnnounceOnMountComponentExport as AnnounceOnMountComponent };\n","export { ViewType } from '../instance/apiTypes.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * The different available widths of a Carbon AI chat.\n */\nvar ChatWidthBreakpoint;\n(function (ChatWidthBreakpoint) {\n    // < 360px\n    ChatWidthBreakpoint[\"NARROW\"] = \"narrow\";\n    // >= 360px\n    ChatWidthBreakpoint[\"STANDARD\"] = \"standard\";\n    // > 672 + 16 + 16px\n    ChatWidthBreakpoint[\"WIDE\"] = \"wide\";\n})(ChatWidthBreakpoint || (ChatWidthBreakpoint = {}));\n\nexport { ChatWidthBreakpoint };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This component is used to render custom elements stored in the serviceManager and set in Chat.ts.\n * It adds a container element around the host element which in turn can be used by the external page for adding its\n * own custom elements below it.\n */\nfunction WriteableElement({ slotName, id, className }) {\n    // Attach the host element to the ref for this component.\n    return (React.createElement(\"div\", { className: className, id: id, \"data-floating-menu-container\": true },\n        React.createElement(\"slot\", { name: slotName })));\n}\nvar WriteableElement$1 = React.memo(WriteableElement);\n\nexport { WriteableElement$1 as default };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains the instance of the {@link ServiceManagerContext} which is used to provide access to the\n * {@link ServiceManager}.\n */\nconst ServiceManagerContext = React.createContext(null);\n\nexport { ServiceManagerContext };\n","import { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ModalPortalRootContext } from '../contexts/ModalPortalRootContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nclass ModalPortal extends Component {\n    constructor() {\n        super(...arguments);\n        /**\n         * Default state.\n         */\n        this.state = { attachedToHost: null };\n        /**\n         * The element that will contain this modal instance.\n         */\n        this.modalElement = document.createElement(\"div\");\n    }\n    componentDidMount() {\n        // Attach to the host if it's available right away.\n        this.attachIfNeeded();\n    }\n    componentDidUpdate() {\n        // Attach to the host later if it wasn't available when we mounted.\n        this.attachIfNeeded();\n    }\n    componentWillUnmount() {\n        if (this.state.attachedToHost) {\n            this.state.attachedToHost.removeChild(this.modalElement);\n            // this.attachedToHost = null;\n        }\n    }\n    /**\n     * This function will attach this component to the host element if needed and if the host element is available.\n     */\n    attachIfNeeded() {\n        const hostElement = this.context;\n        if (hostElement && !this.state.attachedToHost) {\n            // The value in the context is the host element. When we see it come in the first time, we'll attach to it and\n            // store it in state to make sure we re-render when that happens.\n            this.setState({ attachedToHost: hostElement });\n            hostElement.appendChild(this.modalElement);\n        }\n    }\n    render() {\n        if (!this.state.attachedToHost) {\n            // Don't render anything until after we've gotten attached to the host.\n            return null;\n        }\n        return ReactDOM.createPortal(this.props.children, this.modalElement);\n    }\n}\n// Specify the context type and redefine the context property so it's got the right type.\nModalPortal.contextType = ModalPortalRootContext;\n\nexport { ModalPortal };\n","import { Button } from '@carbon/react';\nimport FocusTrap from 'focus-trap-react';\nimport React, { Component } from 'react';\nimport { ModalPortal } from '../../containers/ModalPortal.js';\nimport { AriaLiveMessage as AriaLiveMessageExport } from '../aria/AriaLiveMessage.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nclass ConfirmModal extends Component {\n    constructor() {\n        super(...arguments);\n        /**\n         * The callback that is called when the user clicks the yes button confirming that they do want to end the chat.\n         */\n        this.onYesClick = () => {\n            // End the chat and close the panel.\n            this.props.onConfirm();\n        };\n        /**\n         * The callback that is called when the user clicks the no button indicating they want to continue the chat.\n         */\n        this.onNoClick = () => {\n            // Just close the panel.\n            this.props.onCancel();\n        };\n        /**\n         * A keyboard listener added to both buttons that will close the panel if the user presses escape.\n         */\n        this.onKeyDown = (event) => {\n            if (event.key === \"Escape\") {\n                this.props.onCancel();\n            }\n        };\n    }\n    render() {\n        const { title, message, cancelButtonLabel, confirmButtonLabel, modalAnnounceMessage, serviceManager, } = this.props;\n        return (React.createElement(ModalPortal, null,\n            React.createElement(FocusTrap, null,\n                React.createElement(\"div\", { className: \"WACConfirmModal\", role: \"dialog\", \"aria-labelledby\": \"WACConfirmModal__title\", \"aria-describedby\": \"WACConfirmModal__message\" },\n                    React.createElement(\"div\", { className: \"WACConfirmModal__container\" },\n                        React.createElement(AriaLiveMessageExport, { message: modalAnnounceMessage }),\n                        React.createElement(\"div\", { className: \"WACConfirmModal__title\", id: `WACConfirmModal__title${serviceManager.namespace.suffix}` }, title),\n                        React.createElement(\"div\", { className: \"WACConfirmModal__message\", id: `WACConfirmModal__message${serviceManager.namespace.suffix}` }, message),\n                        React.createElement(\"div\", { className: \"WACConfirmModal__buttonContainer\" },\n                            React.createElement(Button, { className: \"WACConfirmModal__NoButton\", kind: \"secondary\", onClick: this.onNoClick, onKeyDown: this.onKeyDown, size: \"md\" }, cancelButtonLabel),\n                            React.createElement(Button, { className: \"WACConfirmModal__YesButton\", onClick: this.onYesClick, onKeyDown: this.onKeyDown, size: \"md\" }, confirmButtonLabel)))))));\n    }\n}\n\nexport { ConfirmModal };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * @category Instance\n */\nvar WriteableElementName;\n(function (WriteableElementName) {\n    /**\n     * An element that appears in the AI theme only and is shown beneath the title and description in the AI tooltip\n     * content.\n     */\n    WriteableElementName[\"AI_TOOLTIP_AFTER_DESCRIPTION_ELEMENT\"] = \"aiTooltipAfterDescriptionElement\";\n    /**\n     * An element that appears in the main message body directly above the welcome node.\n     */\n    WriteableElementName[\"WELCOME_NODE_BEFORE_ELEMENT\"] = \"welcomeNodeBeforeElement\";\n    /**\n     * An element that appears in the header on a new line. Only visible while talking to the bot.\n     */\n    WriteableElementName[\"HEADER_BOTTOM_ELEMENT\"] = \"headerBottomElement\";\n    /**\n     * An element that appears after the messages area and before the input area.\n     */\n    WriteableElementName[\"BEFORE_INPUT_ELEMENT\"] = \"beforeInputElement\";\n    /**\n     * An element that appears above the input field on the home screen.\n     */\n    WriteableElementName[\"HOME_SCREEN_BEFORE_INPUT_ELEMENT\"] = \"homeScreenBeforeInputElement\";\n    /**\n     * An element that appears on the home screen after the conversation starters.\n     */\n    WriteableElementName[\"HOME_SCREEN_AFTER_STARTERS_ELEMENT\"] = \"homeScreenAfterStartersElement\";\n    /**\n     * An element that appears on the home screen above the welcome message and conversation starters.\n     */\n    WriteableElementName[\"HOME_SCREEN_HEADER_BOTTOM_ELEMENT\"] = \"homeScreenHeaderBottomElement\";\n    /**\n     * An element to be housed in the custom panel.\n     */\n    WriteableElementName[\"CUSTOM_PANEL_ELEMENT\"] = \"customPanelElement\";\n})(WriteableElementName || (WriteableElementName = {}));\n\nexport { WriteableElementName };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/** Simple “getters” for the raw pieces of state */\nconst getBotInputState = (state) => state.botInputState;\nconst getAgentInputState = (state) => state.agentState.inputState;\nconst getAgentState = (state) => state.agentState;\nconst getPersistedAgent = (state) => state.persistedToBrowserStorage.chatState.agentState;\n/**\n * Compute the display state for the agent.\n */\nfunction selectAgentDisplayState(state) {\n    const agentState = getAgentState(state);\n    const persisted = getPersistedAgent(state);\n    if (persisted.isSuspended) {\n        return {\n            isConnectingOrConnected: false,\n            disableInput: false,\n            isAgentTyping: false,\n            inputPlaceholderKey: null,\n        };\n    }\n    const { isReconnecting, isConnecting, isAgentTyping } = agentState;\n    const { isConnected } = persisted;\n    let inputPlaceholderKey;\n    if (isConnecting) {\n        inputPlaceholderKey = \"agent_inputPlaceholderConnecting\";\n    }\n    else if (isReconnecting) {\n        inputPlaceholderKey = \"agent_inputPlaceholderReconnecting\";\n    }\n    else {\n        inputPlaceholderKey = null;\n    }\n    return {\n        isAgentTyping,\n        isConnectingOrConnected: isConnecting || isConnected,\n        disableInput: isConnecting || isReconnecting,\n        inputPlaceholderKey,\n    };\n}\n/**\n * Is the chat currently routed to a human agent?\n */\nfunction selectIsInputToAgent(state) {\n    return selectAgentDisplayState(state).isConnectingOrConnected;\n}\n/**\n * Pick either the agent’s input slice or the bot’s.\n */\nfunction selectInputState(state) {\n    return selectIsInputToAgent(state)\n        ? getAgentInputState(state)\n        : getBotInputState(state);\n}\n\nexport { selectAgentDisplayState, selectInputState, selectIsInputToAgent };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Miscellaneous utils for dealing with promises.\n */\n/**\n * This is an async function that will simply wait for the given amount of time.\n *\n * @param milliseconds The amount of time in milliseconds to wait.\n */\nasync function sleep(milliseconds) {\n    await new Promise((resolve) => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n/**\n * This function returns a Promise that will be resolved if the provided Promise has resolved within the duration\n * specified. Otherwise the promise will be rejected.\n *\n * @param promise The Promise which will be resolved or timed out.\n * @param duration The duration of the timeout in milliseconds.\n * @param errorMessage An optional message to display.\n */\nfunction resolveOrTimeout(promise, duration, errorMessage) {\n    // Create a promise that rejects in <ms> milliseconds\n    const timeout = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const message = errorMessage || `The operation timed out after ${duration}ms`;\n            reject(message);\n        }, duration);\n    });\n    // Returns a race between the timeout and the original in promise\n    return Promise.race([promise, timeout]);\n}\n\nexport { resolveOrTimeout, sleep };\n","import Home from '@carbon/icons-react/es/Home.js';\nimport React, { forwardRef, useRef, useCallback, useImperativeHandle } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { useLanguagePack } from '../../hooks/useLanguagePack.js';\nimport { useServiceManager } from '../../hooks/useServiceManager.js';\nimport { selectAgentDisplayState } from '../../store/selectors.js';\nimport '../../utils/constants.js';\nimport WriteableElement from '../WriteableElement.js';\nimport { Header as HeaderExport } from './Header.js';\nimport { WriteableElementName } from '../../../../types/instance/ChatInstance.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\nfunction BotHeader(props, ref) {\n    const { onClose, onCloseAndRestart, onRestart, onToggleHomeScreen, headerDisplayName, includeWriteableElement, enableChatHeaderConfig, headerAvatarConfig, } = props;\n    const serviceManager = useServiceManager();\n    const languagePack = useLanguagePack();\n    const homeScreenIsOn = useSelector((state) => state.homeScreenConfig.is_on && state.homeScreenConfig.allow_return);\n    const publicConfig = useSelector((state) => state.config.public);\n    const customMenuOptions = useSelector((state) => state.customMenuOptions);\n    const { isConnectingOrConnected } = useSelector(selectAgentDisplayState, shallowEqual);\n    const useAITheme = useSelector((state) => state.theme.useAITheme);\n    const maxVisibleHeaderObjects = useSelector((state) => state.chatHeaderState.maxVisibleHeaderObjects);\n    const leftObjectsLength = useSelector((state) => state.chatHeaderState.config?.left?.length || 0);\n    const rightObjectsLength = useSelector((state) => state.chatHeaderState.config?.right?.length || 0);\n    const headerRef = useRef();\n    const isHeaderObjectsInOverflow = leftObjectsLength > maxVisibleHeaderObjects ||\n        rightObjectsLength > maxVisibleHeaderObjects;\n    const hasChatHeaderObjects = enableChatHeaderConfig && isHeaderObjectsInOverflow;\n    const showRestartButton = publicConfig.showRestartButton ||\n        publicConfig.headerConfig?.showRestartButton;\n    // We can't allow the user to return to the home screen if the user is connecting or connected to an agent.\n    const allowHomeScreen = homeScreenIsOn && !isConnectingOrConnected;\n    const overflowClicked = useCallback((index) => {\n        if (index === 0 && allowHomeScreen) {\n            onToggleHomeScreen?.();\n        }\n        else {\n            const { handler } = customMenuOptions[allowHomeScreen ? index - 1 : index];\n            handler();\n        }\n    }, [customMenuOptions, onToggleHomeScreen, allowHomeScreen]);\n    let overflowItems = customMenuOptions?.map((option) => option.text);\n    if (overflowItems && allowHomeScreen) {\n        // Insert a \"Home screen\" option at the top.\n        overflowItems.splice(0, 0, languagePack.homeScreen_overflowMenuHomeScreen);\n    }\n    else if (!overflowItems && allowHomeScreen && hasChatHeaderObjects) {\n        // If there are header objects in the overflow menu, insert the \"Home screen\" option.\n        overflowItems = [languagePack.homeScreen_overflowMenuHomeScreen];\n    }\n    // Reuse the imperative handles from the header.\n    useImperativeHandle(ref, () => headerRef.current);\n    return (React.createElement(\"div\", { className: \"WACHeader__Container\" },\n        React.createElement(HeaderExport, { ref: headerRef, showCenter: true, headerAvatarConfig: headerAvatarConfig, displayName: headerDisplayName, showBackButton: Boolean(allowHomeScreen && onToggleHomeScreen), showRestartButton: showRestartButton, useAITheme: useAITheme, backContent: React.createElement(Home, null), labelBackButton: languagePack.homeScreen_returnToHome, onClickRestart: onRestart, onClickClose: onClose, onCloseAndRestart: onCloseAndRestart, onClickBack: onToggleHomeScreen, overflowItems: overflowItems, overflowClicked: overflowClicked, enableChatHeaderConfig: enableChatHeaderConfig }),\n        includeWriteableElement && (React.createElement(WriteableElement, { slotName: WriteableElementName.HEADER_BOTTOM_ELEMENT, id: `headerBottomElement${serviceManager.namespace.suffix}`, className: \"WACHeader__HeaderBottomElement\" }))));\n}\nconst BotHeaderExport = React.memo(forwardRef(BotHeader));\n\nexport { BotHeaderExport as BotHeader };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Recursively deep freezes an object.\n */\nfunction deepFreeze(object) {\n    Object.freeze(object);\n    Object.getOwnPropertyNames(object).forEach((prop) => {\n        if (Object.prototype.hasOwnProperty.call(object, prop) &&\n            object[prop] !== null &&\n            (typeof object[prop] === \"object\" ||\n                typeof object[prop] === \"function\") &&\n            !Object.isFrozen(object[prop])) {\n            deepFreeze(object[prop]);\n        }\n    });\n    return object;\n}\n\nexport { deepFreeze };\n","import { MessageResponseTypes } from '../../../types/messaging/Messages.js';\nimport { uuid } from '../utils/lang/uuid.js';\nimport { UUIDType } from '../utils/lang/UUIDType.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Takes data from the v2 message API and transforms into something usable by WAC.\n *\n * @param  message Takes an object in the shape of a v2 message API Send object. With an additional `ui_state`\n * object for local state.\n * @param originalUserText The original text provided by the user before it was potentially modified on the\n * underlying {@link MessageRequest}. This value may be null if there is no text from the user to display.\n * instance.\n * @param id If you have already generated an id, it's ok to pass it in. If not, one will be generated.\n */\nfunction inputItemToLocalItem(message, originalUserText, id = uuid(UUIDType.LOCAL_MESSAGE)) {\n    const localMessage = {\n        // The individual message in the format of an item from output.generic in the docs above.\n        item: {\n            response_type: MessageResponseTypes.TEXT,\n            ...message.input,\n        },\n        // ui_state is for rendering concerns and is not persistent.\n        ui_state: {\n            id,\n            originalUserText,\n            needsAnnouncement: false, // We don't announce text that came from the user.\n        },\n        fullMessageID: message.id,\n    };\n    return localMessage;\n}\n\nexport { inputItemToLocalItem as default };\n","import { useContext } from 'react';\nimport { AriaAnnouncerContext } from '../contexts/AriaAnnouncerContext.js';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This is a React hook that will provided access to the {@link AriaAnnouncerFunctionType}.\n */\nfunction useAriaAnnouncer() {\n    return useContext(AriaAnnouncerContext);\n}\n\nexport { useAriaAnnouncer };\n","/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * Redux action creators for human agent actions.\n */\nconst HA_SET_AGENT_AVAILABILITY = \"HA_SET_AGENT_AVAILABILITY\";\nconst HA_SET_IS_CONNECTING = \"HA_SET_IS_CONNECTING\";\nconst HA_SET_IS_RECONNECTING = \"HA_SET_IS_RECONNECTING\";\nconst HA_SET_AGENT_JOINED = \"HA_SET_AGENT_JOINED\";\nconst HA_SET_AGENT_LEFT_CHAT = \"HA_SET_AGENT_LEFT_CHAT\";\nconst HA_END_CHAT = \"HA_END_CHAT\";\nconst HA_UPDATE_CAPABILITIES = \"HA_UPDATE_CAPABILITIES\";\nconst HA_UPDATE_FILE_UPLOAD_IN_PROGRESS = \"HA_UPDATE_FILE_UPLOAD_IN_PROGRESS\";\nconst HA_SET_SHOW_SCREEN_SHARE_REQUEST = \"HA_SET_SHOW_SCREEN_SHARE_REQUEST\";\nconst HA_SET_IS_SCREEN_SHARING = \"HA_SET_IS_SCREEN_SHARING\";\nconst HA_SET_PERSISTED_STATE = \"HA_SET_PERSISTED_STATE\";\nconst HA_UPDATE_IS_SUSPENDED = \"HA_UPDATE_IS_SUSPENDED\";\nconst HA_UPDATE_IS_TYPING = \"HA_UPDATE_IS_TYPING\";\n/**\n * Sets the \"is connecting\" status for a human agent.\n */\nfunction setIsConnecting(isConnecting, localMessageID) {\n    return {\n        type: HA_SET_IS_CONNECTING,\n        isConnecting,\n        localMessageID,\n    };\n}\n/**\n * Sets the \"is reconnecting\" status for a human agent.\n */\nfunction setIsReconnecting(isReconnecting) {\n    return { type: HA_SET_IS_RECONNECTING, isReconnecting };\n}\n/**\n * Indicate agent has left chat.\n */\nfunction setAgentLeftChat() {\n    return { type: HA_SET_AGENT_LEFT_CHAT };\n}\n/**\n * Ends the current chat.\n */\nfunction endChat() {\n    return { type: HA_END_CHAT };\n}\n/**\n * Sets the availability information for a user who is waiting to be connected to an agent.\n */\nfunction setAgentAvailability(availability) {\n    return {\n        type: HA_SET_AGENT_AVAILABILITY,\n        availability,\n    };\n}\n/**\n * Sets the availability information for a user who is waiting to be connected to an agent.\n */\nfunction setAgentJoined(agentProfile) {\n    return {\n        type: HA_SET_AGENT_JOINED,\n        agentProfile,\n    };\n}\n/**\n * Updates Carbon AI chat with the capabilities supported by the service desk.\n */\nfunction updateCapabilities(capabilities) {\n    return { type: HA_UPDATE_CAPABILITIES, capabilities };\n}\n/**\n * Updates the indicator for if any files are being uploaded.\n */\nfunction updateFilesUploadInProgress(fileUploadInProgress) {\n    return { type: HA_UPDATE_FILE_UPLOAD_IN_PROGRESS, fileUploadInProgress };\n}\n/**\n * Sets the state of the screen sharing modal.\n */\nfunction setShowScreenShareRequest(showRequest) {\n    return { type: HA_SET_SHOW_SCREEN_SHARE_REQUEST, showRequest };\n}\n/**\n * Sets the state of screen sharing.\n */\nfunction setIsScreenSharing(isSharing) {\n    return { type: HA_SET_IS_SCREEN_SHARING, isSharing };\n}\n/**\n * Updates the object that is stored containing state for the service desk.\n */\nfunction setPersistedServiceDeskState(state) {\n    return { type: HA_SET_PERSISTED_STATE, state };\n}\n/**\n * Updates the suspended status for the current service desk.\n */\nfunction agentUpdateIsSuspended(isSuspended) {\n    return { type: HA_UPDATE_IS_SUSPENDED, isSuspended };\n}\n/**\n * Updates the suspended status for the current service desk.\n */\nfunction agentUpdateIsTyping(isTyping) {\n    return { type: HA_UPDATE_IS_TYPING, isTyping };\n}\n\nexport { HA_END_CHAT, HA_SET_AGENT_AVAILABILITY, HA_SET_AGENT_JOINED, HA_SET_AGENT_LEFT_CHAT, HA_SET_IS_CONNECTING, HA_SET_IS_RECONNECTING, HA_SET_IS_SCREEN_SHARING, HA_SET_PERSISTED_STATE, HA_SET_SHOW_SCREEN_SHARE_REQUEST, HA_UPDATE_CAPABILITIES, HA_UPDATE_FILE_UPLOAD_IN_PROGRESS, HA_UPDATE_IS_SUSPENDED, HA_UPDATE_IS_TYPING, agentUpdateIsSuspended, agentUpdateIsTyping, endChat, setAgentAvailability, setAgentJoined, setAgentLeftChat, setIsConnecting, setIsReconnecting, setIsScreenSharing, setPersistedServiceDeskState, setShowScreenShareRequest, updateCapabilities, updateFilesUploadInProgress };\n","import React from 'react';\n\n/*\n *  Copyright IBM Corp. 2025\n *\n *  This source code is licensed under the Apache-2.0 license found in the\n *  LICENSE file in the root directory of this source tree.\n *\n *  @license\n */\n/**\n * This file contains the instance of the {@link LanguagePackContext} which is used to provide access to the\n * {@link LanguagePack}.\n */\nconst LanguagePackContext = React.createContext(null);\n\nexport { LanguagePackContext };\n"],"names":["useUUID","ref","useRef","undefined","current","uuid","UUIDType","COMPONENT","Loading","createComponent","tagName","elementClass","CarbonLoadingElement","react","React","AriaAnnouncerContext","CSS_CLASS_PREFIX","WEB_COMPONENT_PREFIX","asArray","value","Array","isArray","async","asyncForEach","array","callbackFunction","index","length","findLast","predicate","startAt","lastIndex","findLastIndex","findLastWithMap","keys","map","arrayLastValue","outputItemToLocalItem","messageItem","fullMessage","isLatestWelcomeNode","disableFadeAnimation","localMessage","ui_state","id","streamItemID","LOCAL_MESSAGE","needsAnnouncement","history","from_history","item","fullMessageID","isWelcomeResponse","createLocalMessageForInlineError","text","originalMessage","createMessageResponseForItem","createLocalMessageForItem","response_type","MessageResponseTypes","INLINE_ERROR","createLocalMessageItemsForNestedMessageItems","localMessageItem","fromHistory","nestedLocalMessageItems","allowFooter","isGridResponseType","gridLocalMessageItemIDs","rows","row","cells","cell","cellLocalMessageItemIDs","createLocalMessageItemsForNestedType","items","nestedMessageItem","isSupportedMessageItemInBody","isCarouselResponseType","itemsLocalMessageItemIDs","bodyItems","body","panel","bodyLocalMessageItemIDs","isShowPanelButtonType","footerItems","footer","footerLocalMessageItemIDs","rootMessageItem","isButtonResponseType","isSupportedMessageItemInFooter","type","nestedMessageItemIDs","isSupported","forEach","nestedLocalMessageItem","push","isResponseWithNestedItems","consoleError","CARD","isCardResponseType","isItemSupportedInResponseBody","CAROUSEL","BUTTON","button_type","ButtonItemType","SHOW_PANEL","GRID","BasePanelComponent","className","children","isOpen","hidePanelHeader","labelBackButton","title","hideBackButton","useAITheme","onClickCloseAndRestart","onClickRestart","headerProps","showRestartButton","useSelector","state","config","public","headerConfig","headerRef","useImperativeHandle","FocusTrap","active","focusTrapOptions","clickOutsideDeactivates","returnFocusOnDeactivate","IS_MOBILE","preventScroll","HeaderExport","onCloseAndRestart","showBackButton","displayName","showCenter","BasePanelComponentExport","CHANGE_STATE","UPDATE_BOT_NAME","UPDATE_BOT_AVATAR_URL","UPDATE_LAUNCHER_AVATAR_URL","UPDATE_MAIN_HEADER_TITLE","HYDRATE_CHAT","HYDRATE_MESSAGE_HISTORY","ADD_LOCAL_MESSAGE_ITEM","REMOVE_MESSAGES","UPDATE_LOCAL_MESSAGE_ITEM","SET_APP_STATE_VALUE","ADD_IS_TYPING_COUNTER","ADD_IS_LOADING_COUNTER","ADD_IS_HYDRATING_COUNTER","SET_VIEW_STATE","SET_VIEW_CHANGING","SET_INITIAL_VIEW_CHANGE_COMPLETE","UPDATE_CSS_VARIABLES","MESSAGE_SET_OPTION_SELECTED","SET_MESSAGE_UI_PROPERTY","SET_MESSAGE_HISTORY_PROPERTY","MERGE_HISTORY","SET_LAUNCHER_PROPERTY","SET_LAUNCHER_CONFIG_PROPERTY","ANNOUNCE_MESSAGE","SET_CHAT_MESSAGES_PROPERTY","RESTART_CONVERSATION","ACCEPTED_DISCLAIMER","ADD_MESSAGE","UPDATE_HOME_SCREEN_CONFIG","UPDATE_HAS_SENT_NON_WELCOME_MESSAGE","UPDATE_PERSISTED_CHAT_STATE","SET_TOUR_DATA","CLEAR_TOUR_DATA","CHANGE_STEP_IN_TOUR","SET_HOME_SCREEN_IS_OPEN","UPDATE_LAUNCHER_CONFIG","UPDATE_MESSAGE","SET_LAUNCHER_MINIMIZED","CLOSE_IFRAME_PANEL","OPEN_IFRAME_CONTENT","SET_CONVERSATIONAL_SEARCH_CITATION_PANEL_IS_OPEN","SET_CUSTOM_PANEL_OPTIONS","SET_CUSTOM_PANEL_OPEN","TOGGLE_HOME_SCREEN","UPDATE_INPUT_STATE","SET_IS_BROWSER_PAGE_VISIBLE","ADD_INPUT_FILE","CLEAR_INPUT_FILES","REMOVE_INPUT_FILE","REMOVE_LOCAL_MESSAGE_ITEM","FILE_UPLOAD_INPUT_ERROR","ADD_NESTED_MESSAGES","SET_RESPONSE_PANEL_IS_OPEN","SET_RESPONSE_PANEL_CONTENT","STREAMING_ADD_CHUNK","STREAMING_START","STREAMING_MERGE_HISTORY","ADD_NOTIFICATION","REMOVE_ALL_NOTIFICATIONS","REMOVE_NOTIFICATIONS","UPDATE_CHAT_HEADER_CONFIG","UPDATE_MAX_VISIBLE_HEADER_OBJECTS","SET_STOP_STREAMING_BUTTON_VISIBLE","SET_STOP_STREAMING_BUTTON_DISABLED","SET_STREAM_ID","UPDATE_MAIN_HEADER_AVATAR","actions","changeState","partialState","chatWasHydrated","hydrateMessageHistory","messageHistory","removeMessages","messageIDs","restartConversation","addLocalMessageItem","message","addMessage","addAfterID","updateLocalMessageItem","updateMessage","messageSetOptionSelected","messageID","sentMessage","updatePersistedChatState","chatState","setTourData","newActiveTourMessageID","clearTourData","changeStepInTour","newStepNumber","updateHasSentNonWelcomeMessage","hasSentNonWelcomeMessage","setAppStateValue","key","addIsTypingCounter","addToIsTyping","addIsLoadingCounter","addToIsLoading","addIsHydratingCounter","addToIsHydrating","updateBotName","name","updateMainHeaderTitle","updateBotAvatarURL","url","updateCSSVariables","variables","publicVars","whiteLabelVariables","updateHomeScreenConfig","homeScreenConfig","setViewState","viewState","setViewChanging","viewChanging","setInitialViewChangeComplete","changeComplete","setMessageUIProperty","localMessageID","propertyName","propertyValue","setLauncherProperty","setLauncherConfigProperty","launcherType","setMessageHistoryProperty","mergeMessageHistory","setMessageErrorState","errorState","setMessageWasAnnounced","announceMessage","setChatMessagesStateProperty","addNotification","notification","notificationID","removeNotifications","groupID","removeAllNotifications","acceptDisclaimer","setHomeScreenIsOpen","updateLauncherConfig","launcherConfig","setLauncherMinimized","closeIFramePanel","setIFrameContent","setViewSourcePanelIsOpen","citationItem","relatedSearchResult","setCustomPanelConfigOptions","options","setCustomPanelOpen","toggleHomeScreen","updateInputState","newState","isInputToAgent","setIsBrowserPageVisible","isVisible","addInputFile","file","removeFileUpload","fileID","removeLocalMessageItem","localMessageItemID","fileUploadInputError","errorMessage","clearInputFiles","addNestedMessages","localMessageItems","setResponsePanelIsOpen","setResponsePanelContent","isMessageForInput","streamingStart","streamingMergeHistory","streamingAddChunk","chunkItem","isCompleteItem","updateChatHeaderConfig","chatHeaderConfig","setMaxVisibleHeaderObjects","maxTotal","setStopStreamingButtonVisible","setStopStreamingButtonDisabled","isDisabled","setStreamID","currentStreamID","updateMainHeaderAvatar","withAriaAnnouncer","Component","Wrapped","props","ariaAnnouncer","useContext","enableDebugLog","enableDebugStackTracesLog","debugLog","args","console","log","WA_CONSOLE_PREFIX","debugStackTrace","Error","error","consoleLog","consoleDebug","debug","consoleWarn","warn","setEnableDebugLog","setEnableDebugStackTracesLog","isEnableDebugLog","safeFetchTextWithTimeout","response","resolveOrTimeout","createDidCatchErrorData","component","errorInfo","isCatastrophicError","errorType","OnErrorType","RENDER","otherData","catastrophicErrorType","getResponsiveElementPaddingValue","baseHeight","isValidForUpload","upload","status","FileStatusValue","EDIT","isError","callOnError","onError","data","getBotName","botName","withoutEmptyStarters","newConfig","starters","buttons","allow_return","filter","button","Boolean","label","trim","is_on","setIntl","serviceManager","locale","messages","intl","createIntl","store","dispatch","createWriteableElementsProxy","elementSet","Set","handler","get","target","element","has","add","Proxy","writeableElements","VERSION","NotificationType","BOUNCING_ANIMATION_TIMEOUTS","DEFAULT_LAUNCHER","mobile","time_to_expand","new_expand_time","time_to_reduce","notification_type","TEXT_NOTIFICATION","desktop","deepFreeze","DEFAULT_CUSTOM_PANEL_CONFIG_OPTIONS","disableAnimation","DEFAULT_CUSTOM_PANEL_STATE","panelID","DEFAULT_CUSTOM_PANEL_ID","DEFAULT_IFRAME_PANEL_STATE","DEFAULT_CITATION_PANEL_STATE","DEFAULT_TOUR_STATE","activeTourStepItems","DEFAULT_MESSAGE_PANEL_STATE","VIEW_STATE_ALL_CLOSED","launcher","mainWindow","tour","VIEW_STATE_LAUNCHER_OPEN","VIEW_STATE_MAIN_WINDOW_OPEN","DEFAULT_PERSISTED_TO_BROWSER","version","disclaimersAccepted","homeScreenState","isHomeScreenOpen","showBackToBot","persistedTourState","activeTourID","activeTourCurrentStepIndex","agentState","isConnected","isSuspended","agentProfiles","launcherState","wasLoadedFromBrowser","activeTour","showUnreadIndicator","mobileLauncherIsExtended","mobileLauncherWasReduced","mobileLauncherDisableBounce","desktopLauncherIsExpanded","desktopLauncherWasMinimized","bounceTurn","DEFAULT_CHAT_MESSAGES_STATE","localMessageIDs","isTypingCounter","isLoadingCounter","isHydratingCounter","isScrollAnchored","DEFAULT_MESSAGE_STATE","allMessageItemsByID","allMessagesByID","botMessageState","DEFAULT_AGENT_STATE","isConnecting","isReconnecting","numUnreadMessages","fileUploadInProgress","showScreenShareRequest","isScreenSharing","isAgentTyping","inputState","fieldVisible","isReadonly","files","allowFileUploads","allowMultipleFileUploads","allowedFileUploadTypes","stopStreamingButtonState","DEFAULT_THEME_STATE","carbonTheme","CarbonTheme","G10","corners","CornersType","ROUND","DEFAULT_LAYOUT_STATE","showFrame","hasContentMaxWidth","applyBotMessageState","setHomeScreenOpenState","persistedToBrowserStorage","applyLocalMessageUIState","oldMessage","applyFullMessage","NoteType","MIN_CONTRAST","hexCodeToRGB","color","red","substring","blue","green","parseInt","calculateContrast","color1","color2","rgb1","rgb2","luminance1","calculateRelativeLuminance","luminance2","contrast","r8","g8","b8","rRGB","gRGB","bRGB","whiteOrBlackText","background","gray100","white","adjustLightness","token","shift","original","Color","hsl","object","l","round","hex","toLowerCase","CSS_VAR_PREFIX","HEXADECIMAL_REGEX","INTERNAL_OVERRIDES_LIGHT_THEME_MAP","INTERNAL_OVERRIDES_DARK_THEME_MAP","ACCENT_COLOR_MAPS","blue20","blue60","blue60Hover","blue80","g10","g90","g100","fillValues","styles","propertyNames","mergeCSSVariables","internalOverrides","internalOverridesMap","WHITE","includes","G90","G100","createInternalCSSOverridesMap","result","Object","entries","startsWith","match","remoteVars","cssOverrides","primaryColor","secondaryColor","accentColor","useAccentColor","tryFocusColor","useFocusColor","colorMap","accentBlue20","accentBlue60Hover","accentBlue80","accentColorRGB","toString","accentColorBW","gray80","gray10","remoteStylesToCSSVars","getThemeClassNames","themeState","themeClassnames","CarbonThemeClassNames","validateViewState","appState","VALID_PUBLIC_VARS_IN_AI_THEME_LIST","VALID_PUBLIC_VARS_IN_AI_THEME_SET","UPDATE_CSS_VARS_AI_THEME_WARNING_MESSAGE","join","ChatActionsImpl","constructor","this","hydrating","restarting","alreadyHydrated","chunkQueue","hydrateChat","alternateWelcomeRequest","alternateWelcomeRequestSource","alternateOptions","fireReady","hydrationPromise","doHydrateChat","fire","BusEventType","CHAT_READY","historyService","loadHistory","humanAgentService","initialize","getState","createElementsForUserDefinedResponses","latestPanelLocalMessageItem","openResponsePanel","messaging","skipWelcome","send","createWelcomeRequest","MessageSendSource","WELCOME_REQUEST","returnBeforeStreaming","lastMessageID","lastMessage","lastOriginalMessage","isLiveAgentMessage","isRequest","messageService","resendMessage","allowReconnect","serviceDesk","handleHydration","getPublicWebChatState","isConnectedWithHumanAgent","isWebChatOpen","isConnectingWithHumanAgent","isDebugEnabled","hasUserSentMessage","isTourActive","sendWithCatch","source","ignoreHydration","messageRequest","createMessageRequestForText","responsePanelState","doSend","addDefaultsToMessage","originalUserText","input","silent","inputItemToLocalItem","setValueSelectedForMessageID","cloneDeep","receive","requestMessage","requestOptions","restartCount","initialRestartCount","MESSAGE","preReceiveEvent","PRE_RECEIVE","languagePack","isResponse","processMessageResponse","catch","inlineError","createMessageResponseForText","errors_singleMessage","thread_id","RECEIVE","insertHistory","scrollBottom","getMessagesScrollBottom","notes","HISTORY","currentAppStateMessages","newAppStateMessages","merge","doAutoScroll","scrollToBottom","receiveChunk","chunk","chunkPromise","resolvablePromise","processChunkQueue","isStreamCompleteItem","isPartialItem","isStreamPartialItem","isStopGeneratingVisible","botInputState","partial_item","streaming_metadata","cancellable","response_id","complete_item","partial_response","handleUserDefinedResponseItemsChunk","isStreamFinalResponse","final_response","doResolve","getOrCreateUserDefinedElement","messageItemID","userDefinedItem","userDefinedElementRegistry","document","createElement","slotName","setAttribute","set","handleUserDefinedResponseItems","renderAsUserDefinedMessage","user_defined","userDefinedResponseEvent","USER_DEFINED_RESPONSE","slot","fullWidth","createElementForNestedUserDefinedResponse","nestedLocalMessage","itemID","CHUNK_USER_DEFINED_RESPONSE","isProvidedFromTransfer","output","generic","request_id","previousItemID","pause","isPause","agent","isConnectToAgent","hasTourUserDefinedType","skipTourCard","skip_card","startTourReason","TourStartReason","START_TOUR_METHOD","SKIP_CARD","mainWindowCloseReason","MainWindowCloseReason","CALLED_START_TOUR","TOUR_SKIP_CARD","startTour","viewChangeReason","ViewChangeReason","hasServiceDesk","errorOccurred","INTEGRATION_ERROR","agentAvailability","checkAreAnyAgentsOnline","shouldAutoRequestAgent","isChannelTransferToAgent","skipConnectAgentCard","AgentsOnlineStatus","ONLINE","startChat","showIsTyping","isTyping","sleep","time","insertLocalMessageResponse","updateLanguagePack","changes","removeNotification","theme","usePublicVars","variable","allVariables","changeView","newView","reason","tryHydrating","forceViewChange","newViewState","constructViewState","isEqual","fireViewChangeEventsAndChangeView","isHydrated","oldViewState","preViewChangeEvent","VIEW_PRE_CHANGE","cancelViewChange","viewChangeEvent","VIEW_CHANGE","changeViewReason","ViewType","TOUR","TOUR_START","TOUR_STEP","step","tourState","endTour","LAUNCHER","goToSpecificTourStep","stepId","newStepIndex","findIndex","stepItem","step_id","changeStepOptions","nextStep","previousStep","actualNewStepIndex","additionalChatParameters","skipHydration","endAgentConversation","fireEvents","PRE_RESTART_CONVERSATION","currentState","endChat","MAIN_WINDOW","mainWindowOpenReason","MainWindowOpenReason","CALLED_RESTART_CONVERSATION","instance","updateAssistantInputFieldVisibility","cancelAllMessageRequests","destroySession","keepOpenState","originalViewState","newPersistedToBrowserStorage","userSessionStorageService","clearLauncherSession","clearChatSession","agentEndConversation","endedByUser","agentUpdateIsSuspended","values","HANDLER_NOT_FUNCTION","EventBus","handlersByType","Map","eventsTypesRunning","eventsRunningCount","busEvent","logEvent","JSON","stringify","handlersForType","handlersCopy","slice","Promise","delete","waitForEmptyPromise","fireSync","waitForEmpty","on","handlers","off","indexOf","removed","splice","once","onceHandler","event","logListeners","listeners","group","listener","groupEnd","clear","eventCopy","createCustomPanelInstance","customPanelInstance","open","close","freeze","HistoryService","useHistory","publicConfig","resultData","customLoadHistory","historyNotes","allLocalMessagesByID","loadingState","allMessages","threadMessagesByThreadID","responsesByRequestID","relatedMessageByID","localMessagesByOriginalMessageID","lastThreadID","loadedHistory","latestTransferToAgentResponse","note","pushAndPrepareMessage","historyItem","isEventRequest","timestamp","Date","getTime","THREAD_ID_MAIN","file_upload_status","UPLOADING","COMPLETE","error_state","MessageErrorState","FAILED","relatedMessageID","beginEvent","HISTORY_BEGIN","eventBus","HISTORY_END","notesToMessages","getResponseItems","thread","addMessageToThread","createLocalMessages","localMessagesByFullMessageID","toChatMessageState","createChatStates","mainThreadMessages","welcomeRequest","is_welcome_request","welcomeResponse","markIsLatestWelcomeNode","isOptionItem","relatedRequest","optionSelected","isDateResponseType","markSelectedOptions","notesToLoadedHistory","SESSION_HISTORY","MessageLoadingManager","start","onExceededMaxSilentLoading","onEnd","onTimeout","msMaxSilentLoading","msMaxAttempt","hasExceededMaxSilentLoading","onSilentLoading","setTimeout","onMaxAttempt","end","clearTimeout","MS_BETWEEN_RETRIES","RetryType","MessageService","pendingLocale","localeIsExplicit","messageLoadingManager","queue","waiting","timeoutOverride","messageTimeoutSecs","timeoutMS","processSuccess","received","isProcessed","isWelcomeNode","NONE","message_type","MessageInputType","EVENT","now","trackData","lastRequestTime","timeLastRequest","totalRequestTime","timeFirstRequest","sendMessagePromise","moveToNextQueueItem","addErrorMessage","HYDRATE_RESEND","skipQueue","sendToAssistantAndUpdateErrorState","sendToAssistant","SILENT","VISIBLE","RETRYING","waitingMessage","WAITING","processError","pendingRequest","resultText","allowRetry","tryCount","isWelcome","msSinceStarted","isInAttemptWindow","numErrors","retryDelay","MESSAGE_COMMUNICATION","rejectFinalErrorOnMessage","doReject","customSendMessage","controller","AbortController","sendMessageController","signal","runQueueIfReady","clearCurrentQueueItem","getLastBotResponseWithContext","LOADING_INDICATOR_TIMER","messageLoadingIndicatorTimeoutSecs","didExceedMaxLoading","cancelMessageRequestByID","PRE_SEND","SEND","addToMessageQueue","newPendingMessage","messageToUpdate","announceMessageID","TEXT","logError","lastResponse","abort","NamespaceService","namespace","originalName","attributeSafe","suffix","computedName","computeNamespaceName","getSuffix","ServiceManager","innerStorage","storage","getItem","setItem","removeItem","IS_SESSION_STORAGE","window","sessionStorage","storage$1","UserSessionStorageService","prefix","loadChatSession","chatSessionString","getChatSessionKey","chatSession","parse","loadLauncherSession","launcherSessionString","getLauncherSessionKey","launcherSession","persistChatSession","session","persistLauncherSession","replaceCurrentArrayValue","currentValue","newValue","agentReducers","HA_SET_IS_CONNECTING","action","activeLocalMessageID","HA_SET_IS_RECONNECTING","HA_SET_AGENT_AVAILABILITY","availability","HA_SET_SHOW_SCREEN_SHARE_REQUEST","showRequest","HA_SET_AGENT_JOINED","agentProfile","HA_SET_PERSISTED_STATE","serviceDeskState","HA_UPDATE_IS_SUSPENDED","HA_UPDATE_IS_TYPING","HA_SET_AGENT_LEFT_CHAT","HA_UPDATE_CAPABILITIES","newInputState","capabilities","HA_SET_IS_SCREEN_SHARING","isSharing","HA_UPDATE_FILE_UPLOAD_IN_PROGRESS","HA_END_CHAT","populateTourStepItems","tourMessageItem","find","steps","clearTourState","EXCLUDE_AGENT_UNREAD","AgentMessageType","USER_ENDED_CHAT","CHAT_WAS_ENDED","RELOAD_WARNING","reducers","iFramePanelState","viewSourcePanelState","customPanelState","isSilent","currentIndex","existingID","newLocalMessageIDs","insertAtIndex","afterIDIndex","isBotMessage","agent_message_type","isMainWindowOpen","isBrowserPageVisible","idsSet","newAllMessages","newAllMessageItems","newMessageIDs","newMessageItemsIDs","itemIDsInNewMessage","newAllMessageItemsByID","existingItemIDs","firstFoundIndex","isItemInMessage","itemIDsToInsert","newMessagesByID","Math","max","previousState","handleViewStateChange","initialViewChangeComplete","headerDisplayName","botAvatarURL","avatar_url_override","cssVariableOverrides","newHomeScreenConfig","mergeWith","location","hostname","LauncherType","DESKTOP","MOBILE","min","applyInputState","getInputState","currentInputState","newUploads","notifications","concat","currentInputSate","existingMessage","newMessage","localItemID","existingLocalMessageItem","newItem","streamingState","chunks","isDone","isIntermediateStreaming","chatHeaderState","maxVisibleHeaderObjects","headerAvatarConfig","assign","getThemeCornersType","getLayoutState","IS_PHONE","themeConfig","SQUARE","layout","reducerFunction","DEFAULT_PUBLIC_CONFIG","openChatByDefault","showLauncher","shouldTakeFocusIfOpensAutomatically","dayjs","LocalizedFormat","Chat","publicConfigProvided","customHostElement","additionalChatParametersProvided","appConfig","startInternal","doesHaveServiceDesk","initialState","chatWidthBreakpoint","chatWidth","chatHeight","enLanguagePack","originalConfig","suspendScrollDetection","isDestroyed","targetViewState","customMenuOptions","showNonHeaderBackgroundCover","sessionStorageLauncherState","enhancer","__REDUX_DEVTOOLS_EXTENSION__","instanceId","createStore","doCreateStore","subscribe","previousPersistedToBrowserStorage","copyToSessionStorage","disableWindowTitleChanges","originalTitle","changeTitleTimer","agent_newMessage","createHandleWindowTitle","customPanelManager","serviceManger","panels","getPanel","createCustomPanelManager","WriteableElementName","AI_TOOLTIP_AFTER_DESCRIPTION_ELEMENT","WELCOME_NODE_BEFORE_ELEMENT","HEADER_BOTTOM_ELEMENT","BEFORE_INPUT_ELEMENT","HOME_SCREEN_HEADER_BOTTOM_ELEMENT","HOME_SCREEN_AFTER_STARTERS_ELEMENT","HOME_SCREEN_BEFORE_INPUT_ELEMENT","CUSTOM_PANEL_ELEMENT","debugStackTraces","createServiceManager","localePack","render","createHumanAgentService","all","loadLanguagePack","loadLocale","resolve","loadHAA","reallyRenderAndReturnInstance","OPEN_BY_DEFAULT","WEB_CHAT_LOADED","callRender","wasRendered","newPack","updateLocale","newLocale","localePromise","languagePackPromise","then","selectInputState","INSTANCE_SEND","destroy","container","remove","updateInputIsDisabled","updateBotUnreadIndicatorVisibility","issueWithNewView","viewTypeValues","CALLED_CHANGE_VIEW","homeScreenConfigClone","scrollToMessage","animate","doScrollToMessage","customPanels","updateCustomMenuOptions","updateIsTypingCounter","direction","updateIsLoadingCounter","updateIsChatLoadingCounter","updateHeaderConfig","configCopy","elements","getMainWindow","addClassName","removeClassName","getMessageInput","getHTMLElement","setValue","setEnableEnterKey","addChangeListener","removeChangeListener","getHomeScreenInput","tours","CALLED_END_TOUR","goToNextStep","goToStep","addMessageChunk","clearConversation","requestFocus","appWindow","endConversation","updateIsSuspended","createChatInstance","renderAndReturnInstance","promise","renderPromise","AriaAnnouncerProvider","useIntl","useServiceManager","announcerRef","announcerFunction","useCallback","announceValue","previousAnnounceMessageRef","useEffect","currentAnnounceMessage","Provider","AriaAnnouncerComponent","getLauncherButtonAriaLabel","isLauncherHidden","launcher_isTourOpen","launcher_isTourClosed","launcher_isOpen","launcher_isClosed","Launcher","onToggleOpen","unreadAgentCount","tabIndex","launcherHidden","launcherAvatarURL","buttonRef","doFocusRef","ariaLabel","formatMessage","count","launcherAvatar","AiLaunch","size","ChatLaunch","src","alt","cx","Button","WACLauncher__TourButton","kind","ButtonKindEnum","PRIMARY","onClick","ArrowUpLeft","LauncherExport","forwardRef","Tag","CarbonTagElement","LauncherComplex","launcherComplexRef","launcherRef","onOpen","onMinimize","launcher_desktopGreeting","launcher_closeButton","launcher_ariaIsExpanded","disabled","WACLauncherComplex__Text","Close","LauncherDesktopContainer","onDoToggle","useLanguagePack","browserLauncherState","isExpandedLauncherEnabled","smallLauncherClassName","setSmallLauncherClassName","useState","complexLauncherClassName","setComplexLauncherClassName","launcherHiddenRef","animateOnceVisible","bounceTurnRef","animationStartTimerRef","animationFinishedTimerRef","firstBounceAnimationStartTimerRef","firstBounceAnimationFinishedTimerRef","secondBounceAnimationStartTimerRef","secondBounceAnimationFinishedTimerRef","determineLauncherHeight","expandedLauncherHeight","offsetHeight","style","setProperty","startExpandLauncher","setExpandAnimationTimers","clearExpandAnimationTimers","startBounceAnimation","finishBounceAnimation","setBounceAnimationTimers","clearBounceAnimationTimers","setDefaultLauncherState","useOnMount","prevLauncherTitle","usePrevious","animateWithClass","endAnimationNameOrDelay","endAnimationCallback","classList","animationName","removeEventListener","addEventListener","LauncherExtended","isExtended","playExtendAnimation","onSwipeRight","onReduceEnd","useAriaAnnouncer","animateExtendedState","setAnimateExtendedState","showGreetingMessage","setShowGreetingMessage","prevIsExtended","extendedContainerRef","greetingMessageRef","textHolderRef","touchStartRef","touchStartX","touchStartY","shouldReduceExtendedLauncher","extendWithAnimation","extendWithoutAnimation","launcherGreetingMessage","launcher_mobileGreeting","launcherContainerElement","textHolderEl","greetingMessageEl","extendedContainerEl","maxTextHolderWidth","launcherPosition","width","height","screen","extendedWidth","getMaxLauncherExtendedWidth","clientWidth","querySelector","launcherExtendedWidth","removeAttribute","calculateAndSetMaxExtendedLauncherWidth","doFadeAnimationForElements","fadeInElement","fadeInTime","buttonEl","handleTouchMove","touchList","touchStartCoordinates","callback","clientX","touchEndX","clientY","touchEndY","differenceX","differenceY","abs","checkIfUserSwipedRight","touches","handleTouchStart","touchStart","reduceAnimationEndListener","fadeOutElement","GHOST","LauncherExtendedExport","LauncherMobileContainer","wasReduced","disableBounce","isStartingBounceAnimation","setIsStartingBounceAnimation","prevWasReduced","initialBounceTurn","previouslyPlayedExtendAnimation","extendLauncherTimeoutIDRef","reduceLauncherTimeoutIDRef","endBounceAnimationRef","shouldBounceRef","isExtending","disableIntroAnimation","setLauncherStateAsReduced","reduceLauncher","extendLauncherTimeoutID","reduceLauncherTimeoutID","clearTimeouts","setExpandAnimationTimeout","endBounceAnimation","startRecurringBounceAnimation","turnCounter","animation","timeouts","startingIndex","beforeAll","afterAll","beforeEach","afterEach","terminate","timeoutID","playAnimation","isComplete","setAnimationListener","replayAnimation","setAnimationTimeouts","handleToggleOpen","handleSwipeRight","LauncherContainer","LAUNCHER_CLICKED","launcherContainer","effect","deps","hasRunRef","useEffectDidUpdate","HydrationPanel","onClose","useHomeScreenVersion","isHidden","HideComponentContext","header","HomeScreenHeaderExport","BotHeaderExport","onToggleHomeScreen","includeWriteableElement","MountChildrenOnDelay","delay","AnnounceOnMountComponentExport","announceOnce","window_ariaWindowLoading","overlay","assistiveText","CustomPanel","onPanelOpenEnd","onPanelCloseEnd","onPanelOpenStart","onPanelCloseStart","disableDefaultCloseAction","onClickBack","onClickClose","prevIsOpen","openAnimation","AnimationInType","SLIDE_IN_FROM_BOTTOM","closeAnimation","AnimationOutType","SLIDE_OUT_TO_BOTTOM","onClickBackLocal","onClickCloseLocal","checkAllowClose","onCloseAndRestartLocal","OverlayPanel","onOpenStart","CUSTOM_PANEL_PRE_OPEN","onOpenEnd","CUSTOM_PANEL_OPEN","onCloseStart","CUSTOM_PANEL_PRE_CLOSE","onCloseEnd","CUSTOM_PANEL_CLOSE","animationOnOpen","animationOnClose","shouldOpen","overlayPanelName","OverlayPanelName","CUSTOM","eventName","eventDescription","general_returnToAssistant","hideCloseButton","hideCloseAndRestartButton","WriteableElement","CustomPanelExport","lazyChat","CatastrophicError","lazyCatastrophicError","Disclaimer","lazyDisclaimer","HomeScreenContainer","lazyHomeScreenContainer","IFramePanel","lazyIFramePanel","ViewSourcePanel","lazyViewSourcePanel","BodyAndFooterPanelComponent","lazyBodyAndFooterPanelComponent","WIDTH_BREAKPOINT_STANDARD","WIDTH_BREAKPOINT_NARROW","WIDTH_BREAKPOINT_WIDE","MainWindow","super","arguments","closing","modalPortalHostElement","numPanelsOpen","numPanelsAnimating","numPanelsCovering","isHydrationAnimationComplete","shouldAutoFocus","extraClassNames","areModulesLoaded","mainWindowRef","containerRef","botChatRef","homeScreenInputRef","disclaimerRef","brandingRef","animationContainerRef","iframePanelRef","viewSourcePanelRef","previousBodyVisibility","previousBodyPosition","onResize","appChatWidthBreakpoint","offsetWidth","ChatWidthBreakpoint","WIDE","STANDARD","NARROW","onVisualViewportResize","updateFromVisualViewport","visualViewport","offsetTop","offsetLeft","IS_IOS","getIPhoneHeightOffset","setModalPortalHostElement","setState","onSendInput","selectIsInputToAgent","sendMessageToAgent","onSendHomeButtonInput","createMessageRequestForChoice","HOME_SCREEN_STARTER","removeChatFromDom","onRestart","doClose","getShowDisclaimer","getShowHomeScreen","takeFocus","requestInputFocus","onUserTyping","userTyping","onAcceptDisclaimer","coverBackground","prevState","onHydrationPanelClose","componentDidMount","mainWindowObserver","ResizeObserver","observe","disableCustomElementMobileEnhancements","updateBody","SCROLLBAR_WIDTH","loadPanels","componentWillUnmount","unobserve","componentDidUpdate","oldProps","oldState","newProps","useCustomHostElement","prevViewState","requestAnimationFrame","newLastItemID","lastMessageItem","componentDidCatch","preload","unmounting","getPropertyValue","fromCloseAndRestart","MAIN_WINDOW_CLOSED_AND_RESTARTED","DEFAULT_MINIMIZE","disclaimer","addClassNameToState","removeClassNameFromState","renderChat","showCovering","renderCustomPanel","renderHydrationPanel","renderDisclaimerPanel","renderResponsePanel","renderHomeScreenPanel","renderIFramePanel","renderViewSourcePanel","renderBotChat","headerAvatar","agentDisplayState","selectAgentDisplayState","showDisclaimer","hideBotContainer","HideComponent","hidden","Suspense","fallback","messageState","MESSAGE_INPUT","renderInnerHydrationPanel","shouldHide","HYDRATING","renderCatastrophicPanel","CATASTROPHIC","showHeader","FADE_IN","FADE_OUT","DISCLAIMER","disclaimerHTML","disclaimerAcceptButtonRef","showHomeScreen","onSendBotInput","HOME_SCREEN_INPUT","onSendButtonInput","IFRAME","CONVERSATIONAL_SEARCH_CITATION","panelOptions","PANEL_RESPONSE","showAnimations","show_animations","renderWidget","localeClassName","showGlass","enableFocusTrap","hideMinimizeButton","trapActive","isWideWidth","VisuallyHidden","window_title","onScroll","scrollTop","ModalPortalRootContext","MainWindow$1","connect","TourContainerLazy","lazyTourComponent","App","hostElement","applicationStyles","fontStyles","combinedStyles","AppContainer","useDispatch","windowSize","setWindowSize","innerWidth","innerHeight","cssVariableOverrideString","useMemo","cssVariables","cssVariablesString","allValues","replace","convertCSSVariablesToString","dir","windowListener","visibilityListener","visibilityState","node","nonce","cspNonce","IS_PHONE_IN_PORTRAIT_MODE","WindowSizeContext","ServiceManagerContext","RawIntlProvider","LanguagePackContext","MainContainer","tourContainerRef","showTour","showedTourOnce","languageKey","regionLabel","role","UserDefinedResponsePortalsContainer","chatInstance","renderUserDefinedResponse","userDefinedResponseEventsBySlot","slotState","UserDefinedResponseComponentPortal","ReactDOM","UserDefinedResponsePortalsContainerExport","WriteableElementsPortalsContainer","renderResponseMap","responseItem","WriteableElementsComponentPortal","WriteableElementsPortalsContainerExport","onBeforeRender","onAfterRender","renderWriteableElements","setParentInstance","setInstance","renderProps","setRenderProps","setApplicationStyles","setInstances","setUserDefinedResponseEventsBySlot","managedWebChatRef","previousConfigRef","previousConfig","managedWebChat","shouldDestroy","destroyWebChat","widget","pagePublicConfig","chatConstructorPromise","protocol","compatMode","instantiateWidget","webChatInstance","userDefinedEventsBySlot","itemChunk","partialItems","addUserDefinedResponseHandler","loadChat","carbonStyles","loadBaseStyles","loadCarbon","loadStyles","AppContainerExport","default","carbon","PureComponent","isClosing","isOpening","openPanelTimeout","closePanelTimeout","openPanel","animationDurationOpen","durationInMS","conditionalSetTimeout","closePanel","animationDurationClose","prevProps","ai_slug_title","ai_slug_description","components_overflow_ariaLabel","components_swiper_currentLabel","errors_communicating","errors_imageSource","errors_videoSource","errors_audioSource","errors_iframeSource","errors_ariaMessageRetrying","errors_ariaMessageFailed","errors_noAgentsAvailable","errors_noAgentsJoined","errors_connectingToAgent","errors_busy","errors_agentAppSessionExpired","errors_generalContent","errors_somethingWrong","input_ariaLabel","input_placeholder","input_buttonLabel","input_uploadButtonLabel","window_ariaTourRegion","window_ariaTourRegionNamespace","window_ariaChatRegion","window_ariaChatRegionNamespace","window_ariaWindowOpened","window_ariaWindowClosed","messages_youSaid","messages_botSaid","messages_agentSaid","messages_searchResults","messages_searchResultsLink","messages_searchResultsOpenDocument","messages_searchResultsOpenDocumentWithLabel","messages_searchResultsExpand","messages_searchResultsCollapse","messages_botIsLoading","messages_botIsTyping","messages_agentIsTyping","messages_scrollHandle","messages_scrollHandleDetailed","messages_scrollHandleEnd","messages_scrollHandleEndDetailed","message_labelBot","message_labelYou","notifications_toastClose","buttons_restart","buttons_cancel","buttons_retry","options_select","options_ariaOptionsDisabled","header_previewLinkTitle","header_ariaCloseRestart","header_ariaBotAvatar","header_overflowMenu_options","homeScreen_returnToAssistant","homeScreen_returnToHome","homeScreen_overflowMenuHomeScreen","homeScreen_ariaQuickStartListButton","homeScreen_ariaQuickStartListOpened","homeScreen_ariaQuickStartListClosed","default_agent_availableMessage","default_agent_unavailableMessage","agent_reason_error","agent_sdMissingWarning","agent_noName","agent_chatTitle","agent_startChat","agent_connecting","agent_agentNoNameTitle","agent_agentJoinedName","agent_agentJoinedNoName","agent_youConnectedWarning","agent_connectingMinutes","agent_connectingQueue","agent_ariaAgentAvatar","agent_ariaGenericAvatar","agent_ariaGenericBotAvatar","agent_youEndedChat","agent_conversationWasEnded","agent_disconnected","agent_reconnected","agent_agentLeftChat","agent_agentLeftChatNoName","agent_agentEndedChat","agent_agentEndedChatNoName","agent_transferring","agent_transferringNoName","agent_endChat","agent_confirmSuspendedEndChatTitle","agent_confirmSuspendedEndChatMessage","agent_confirmCancelRequestTitle","agent_confirmCancelRequestMessage","agent_confirmCancelRequestNo","agent_confirmCancelRequestYes","agent_confirmEndChat","agent_confirmEndChatNo","agent_confirmEndChatYes","agent_confirmEndSuspendedYes","agent_botReturned","agent_cardButtonChatRequested","agent_cardButtonConnected","agent_cardButtonChatEnded","agent_cardMessageChatEnded","agent_cardMessageConnected","agent_connectButtonCancel","agent_connectedButtonEndChat","agent_connectWaiting","agent_defaultMessageToAgent","agent_inputPlaceholderConnecting","agent_inputPlaceholderReconnecting","agent_sharingStopSharingButton","agent_sharingRequestTitle","agent_sharingRequestMessage","agent_sharingAcceptButton","agent_sharingDeclineButton","agent_sharingRequested","agent_sharingAccepted","agent_sharingDeclined","agent_sharingCancelled","agent_sharingEnded","agent_suspendedWarning","icon_ariaUnreadMessages","showMore","showMoreResults","disclaimer_title","disclaimer_accept","general_ariaCloseInformationOverlay","general_ariaAnnounceOpenedInformationOverlay","general_ariaAnnounceClosedInformationOverlay","general_ariaAnnounceEscapeOverlay","conversationalSearch_streamingIncomplete","conversationalSearch_viewSourceDocument","conversationalSearch_citationsLabel","conversationalSearch_toggleCitations","conversationalSearch_responseStopped","launcher_chatNow","iframe_ariaSourceLoaded","iframe_ariaImageAltText","iframe_ariaClosePanel","iframe_ariaOpenedPanel","iframe_ariaClosedPanel","iframe_ariaClickPreviewCard","closeAndRestartModal_title","closeAndRestartModal_message","closeAndRestartModal_confirm","closeAndRestartModal_cancel","datePicker_chooseDate","datePicker_confirmDate","tour_resumeButton","tour_restartButton","tour_startButton","tour_doneButton","tour_ariaMinimizeButton","tour_ariaCloseButton","tour_ariaChatButton","tour_ariaPreviousButton","tour_ariaNextButton","tour_instructions","tour_errorFetchingStep","tour_errorTitle","tour_errorBody","fileSharing_fileTooLarge","fileSharing_ariaAnnounceSuccess","fileSharing_fileIcon","fileSharing_removeButtonTitle","fileSharing_statusUploading","fileSharing_uploadFailed","fileSharing_agentMessageText","fileSharing_request","carousel_prevNavButton","carousel_nextNavButton","input_completionsTagApp","input_completionsTagAssistant","table_filterPlaceholder","table_previousPage","table_nextPage","table_itemsPerPage","table_paginationSupplementalText","table_paginationStatus","feedback_positiveLabel","feedback_negativeLabel","feedback_defaultTitle","feedback_defaultPrompt","feedback_defaultPlaceholder","feedback_submitLabel","feedback_cancelLabel","input_stopResponse","messages_responseStopped","chainOfThought_stepTitle","chainOfThought_inputLabel","chainOfThought_outputLabel","chainOfThought_toolLabel","chainOfThought_statusSucceededLabel","chainOfThought_statusFailedLabel","chainOfThought_statusProcessingLabel","chainOfThought_explainabilityLabel","showChildren","onComponentDidMount","defaultProps","resolveFunction","rejectFunction","reject","resolveValue","isResolved","rejectValue","isRejected","createService","lazyWithPreload","factory","mod","lazyMediaPlayer","lazyCarousel","browser","detect","IS_IPAD","test","navigator","platform","maxTouchPoints","os","IOS_HEIGHT_MAP","screenHeight","offset","memoizeOne","isAvailable","getURLHostName","URL","operation","timeout","ChatHeaderObjectType","ChatHeaderAvatarElement","LitElement","isLoaded","_handleOnError","css","unsafeCSS","__decorate","property","String","prototype","bind","CHAT_HEADER_AVATAR_TAG_NAME","CDSChatHeaderAvatarElement","classElement","html","chatHeaderAvatarTemplate","carbonElement","ChatHeaderAvatar","ChatHeaderLinkElement","isNewTab","customElementClass","chatHeaderLinkTemplate","ChatHeaderLink","ChatHeaderMenu","menuAlignment","Menu","mode","legacyAutoalign","ChatHeaderMenuButton","setIsOpen","refs","menuRefs","context","menuContext","useFloating","onOpenChange","getReferenceProps","getMenuReferenceProps","getFloatingProps","getMenuFloatingProps","useInteractions","useClick","useDismiss","setReference","ButtonSizeEnum","MEDIUM","renderIcon","ChevronUp","ChevronDown","onMouseDown","preventDefault","floating","setFloating","ChatHeaderMenuItem","MenuItem","ChatHeaderMenuItemRadioGroup","defaultSelectedItem","selectedItem","onChange","MenuItemRadioGroup","itemToString","menuItem","ChatHeaderOverflowMenu","tooltipPosition","iconDescription","hasIconOnly","ChatHeaderTitleElement","chatHeaderTitleTemplate","ChatHeaderTitle","AISlug","CDSAILabel","Header","backContent","overflowItems","overflowClicked","backButtonType","brandColor","enableChatHeaderConfig","backButtonRef","restartButtonRef","closeAndRestartButtonRef","closeButtonRef","centerObjectsRef","centerGapRef","overflowRef","overflowIsOpen","setOverflowIsOpen","confirmModelOpen","setConfirmModelOpen","selectedGroupMenuitems","setSelectedGroupMenuItems","isImageError","setIsImageError","hasHeaderAvatar","prevChatHeaderAvatarURL","chatHeaderTitle","headerTitle","chatHeaderDisplayName","closeConfirmModel","showCloseAndRestartButton","useHideCloseButton","closeIcon","closeReverseIcon","closeIsReversible","minimizeButtonIconType","MinimizeButtonIconType","CLOSE","CloseLarge","MINIMIZE","SubtractLarge","SIDE_PANEL_LEFT","SidePanelClose","SIDE_PANEL_RIGHT","onConfirm","getComponentInMenu","list","LINK","RADIO_GROUP","nextObject","Fragment","MenuItemDivider","MENU","getComponentInChatHeader","headerObject","leftObjectsLength","rightObjectsLength","left","right","isLeftObjectsInOverflow","isRightObjectsInOverflow","renderChatHeaderObjectsInOverflow","hasOverflow","isRTL","leftContent","leftChatHeaderComponents","rightChatHeaderComponents","leftChatHeaderMenuComponents","rightChatHeaderMenuComponents","HeaderButton","buttonKind","DownToBottom","centerResizeObserver","centerGapElement","newTotal","floor","disconnect","AI_LABEL_SIZE","EXTRA_SMALL","alignment","POPOVER_ALIGNMENT","BOTTOM_LEFT","BOTTOM_RIGHT","Restart","WACReverseIcon","isReversible","ConfirmModal","onCancel","cancelButtonLabel","confirmButtonLabel","modalAnnounceMessage","WACDirectionHasReversibleSVG","ANNOUNCE_INPUT_TYPES","ANNOUNCE_NODE_EXCLUDE_ATTRIBUTE","ref1","ref2","useRef1","doAnnouncements","strings","pendingValues","elementToAnnounce","nodeToText","useElement","innerText","innerHTML","nodeType","hasNodeType","formattedMessage","messageValues","messageText","isElement","getComputedStyle","display","getAttribute","hasAttribute","trimAndPush","isInputNode","placeholder","isTextAreaNode","isImageNode","shadowRoot","childNodes","childNode","isTextNode","replaceAll","RIGHT_TO_LEFT_MARK","fromCharCode","ENGLISH_US_DATE_FORMAT","RESPONSE_TYPE_TIMEOUT_MS","THROW_ERROR","BrandColorKind","AUTO_SCROLL_EXTRA","LIGHT_THEMES","isJest","process","env","JEST_WORKER_ID","AUTO_SCROLL_THROTTLE_TIMEOUT","HomeScreenHeader","option","locales","ar","ar-dz","ar-kw","ar-ly","ar-ma","ar-sa","ar-tn","cs","de","de-at","de-ch","en","en-au","en-ca","en-gb","en-ie","en-il","en-nz","es","es-do","es-us","nl","fr","fr-ca","fr-ch","it","it-ch","ja","ko","pt","pt-br","zh","zh-cn","zh-tw","zh-mo","zh-hk","requestedLocale","localeKey","requestedSupported","language","isSupportedLocale","keyList","findSupportedKey","localeModule","enLocaleData","providedLanguagePack","handleBTag","handleBRTag","addHTMLSupport","b","br","loadDayjsLocale","previousLocale","createEnglishFormat","IntlMessageFormat","htmlAttributes","WAC__hidden","_type","v4","AriaLiveMessage","AriaLiveMessageExport","outer","visibility","overflow","appendChild","inner","scrollbarWidth","parentNode","removeChild","doScrollElementIntoView","boundary","compute","scrollMode","block","inline","el","top","doScrollElement","scrollLeft","scroll","behavior","doFocus","activeElement","tabbable","getShadowRoot","focus","defer","focusOnFirstFocusableItemInArrayOfElements","focusOnFirstFocusableElement","parentElement","focusableElements","isEnterKey","shiftKey","altKey","metaKey","ctrlKey","hasModifiers","isComposing","keyCode","getScrollBottom","scrollHeight","DATE","isTextItem","PAUSE","typing","OPTION","some","choice","relatedResponseID","createMessageRequestForButtonItemOption","buttonItem","createMessageRequestForFileUpload","InternalMessageRequestType","FILE","FROM_USER","createMessageRequestForDate","inputString","userString","threadID","responseType","textItem","CONNECT_TO_AGENT","hasBodyOrFooter","IMAGE","VIDEO","AUDIO","CONVERSATIONAL_SEARCH","TABLE","renderAsTour","user_defined_type","serviceDeskFactory","USER_DEFINED","isSingleItemCarousel","getOptionType","preference","totalOptions","getMediaDimensions","dimensions","hasLiveAgentMessage","AnnounceOnMountComponent","isMounted","onceAnnounced","WriteableElement$1","ModalPortal","attachedToHost","modalElement","attachIfNeeded","contextType","onYesClick","onNoClick","onKeyDown","getBotInputState","getAgentInputState","getAgentState","getPersistedAgent","persisted","isConnectingOrConnected","disableInput","inputPlaceholderKey","milliseconds","duration","race","BotHeader","homeScreenIsOn","shallowEqual","hasChatHeaderObjects","allowHomeScreen","Home","getOwnPropertyNames","prop","hasOwnProperty","call","isFrozen","setIsConnecting","setIsReconnecting","setAgentLeftChat","setAgentAvailability","setAgentJoined","updateCapabilities","updateFilesUploadInProgress","setShowScreenShareRequest","setIsScreenSharing","setPersistedServiceDeskState","agentUpdateIsTyping"],"sourceRoot":""}